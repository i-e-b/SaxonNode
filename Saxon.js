var DOMParser = require('xmldom').DOMParser;

var moduleRoot = {};

// This awful mess was spewed out by GWT based on the code at https://github.com/i-e-b/Saxon-CE
// It was then massaged by hand to make it work in Node.js

var $gwt_version = "2.7.0";
var $wnd = moduleRoot;
var $moduleName, $moduleBase;
var $stats = $wnd.__gwtStatsEvent ? function(a) {$wnd.__gwtStatsEvent(a)} : null;
var $strongName = '8D8C9A45A0C652BCFCA488B00D108D72';
var $intern_0 = 2147483647, $intern_1 = {3:1, 5:1}, $intern_2 = 65535, $intern_3 = {47:1, 3:1, 5:1}, $intern_4 = {18:1, 3:1}, $intern_5 = {136:1, 3:1, 5:1}, $intern_6 = {64:1, 165:1}, $intern_7 = {120:1}, $intern_8 = {3:1, 5:1, 42:1}, $intern_9 = {3:1}, $intern_10 = {3:1, 19:1, 37:1}, $intern_11 = 67043328, $intern_12 = 57344, $intern_13 = 16778751, $intern_14 = 32768, $intern_15 = {6:1, 54:1}, $intern_16 = {17:1, 3:1, 5:1}, $intern_17 = 8192, $intern_18 = {64:1}, $intern_19 = {79:1, 6:1}, $intern_20 = 24576, $intern_21 = 16384, $intern_22 = 4194304, $intern_23 = 33554432, $intern_24 = {99:1, 126:1, 6:1}, $intern_25 = 131072, $intern_26 = 262144, $intern_27 = 524288, $intern_28 = 1048576, $intern_29 = 2097152, $intern_30 = {270:1, 186:1}, $intern_31 = {127:1, 3:1, 5:1}, $intern_32 = {115:1, 6:1}, $intern_33 = 49152, $intern_34 = 65536, $intern_35 = -32769, $intern_36 = {6:1, 20:1}, $intern_37 = {105:1, 64:1}, $intern_38 = -4194305, $intern_39 = 8388608, $intern_40 = 1024, $intern_41 = 16777216, $intern_42 = {6:1, 39:1, 49:1}, $intern_43 = {6:1, 39:1, 124:1, 49:1}, $intern_44 = {28:1, 279:1, 359:1}, $intern_45 = {126:1, 6:1, 173:1, 39:1, 49:1}, $intern_46 = 4194303, $intern_47 = 1048575, $intern_48 = 55296, $intern_49 = 56319, $intern_50 = 56320, $intern_51 = 1000, $intern_52 = 1000000, $intern_53 = {167:1}, $intern_54 = {271:1, 64:1}, $intern_55 = {105:1, 271:1, 64:1}, $intern_56 = {110:1}, $intern_57 = 1073741824, $intern_58 = -2147483648, $intern_59 = 1023, $intern_60 = {310:1}, $intern_61 = 12713984, $intern_62 = {199:1}, $intern_63 = {3:1, 19:1, 35:1, 37:1}, $intern_64 = {67:1, 166:1}, $intern_65 = {69:1}, $intern_66 = {47:1, 33:1, 3:1, 5:1}, $intern_67 = {15:1, 7:1, 14:1, 10:1, 23:1}, $intern_68 = {28:1, 15:1, 7:1, 14:1, 11:1, 27:1, 10:1, 31:1, 23:1}, $intern_69 = {28:1, 15:1, 7:1, 14:1, 11:1, 244:1, 27:1, 10:1, 31:1, 23:1}, $intern_70 = {105:1, 64:1, 185:1, 165:1}, $intern_71 = 100000, $intern_72 = 10000000, $intern_73 = 100000000, $intern_74 = 1000000000, $intern_75 = {15:1, 7:1, 14:1, 23:1}, $intern_76 = 0.3010299956639812, $intern_77 = {15:1, 14:1, 81:1, 13:1, 73:1, 95:1}, $intern_78 = 9223372036854775807, $intern_79 = -9223372036854775808, $intern_80 = 3.141592653589793, $intern_81 = {3:1, 5:1, 848:1}, $intern_82 = {59:1, 65:1, 3:1, 24:1, 40:1}, $intern_83 = {65:1, 170:1, 3:1, 24:1, 40:1}, $intern_84 = {65:1, 171:1, 3:1, 24:1, 40:1}, $intern_85 = {65:1, 172:1, 3:1, 24:1, 40:1}, $intern_86 = {103:1, 3:1, 24:1, 40:1}, $intern_87 = {253:1, 3:1, 19:1, 35:1, 37:1}, $intern_88 = {200:1, 3:1, 19:1, 37:1}, $intern_89 = 17592186044416, $intern_90 = {111:1, 100:1, 101:1, 107:1, 112:1, 98:1, 91:1}, $intern_91 = {524:1, 522:1, 523:1, 135:1}, $intern_92 = {3:1, 5:1, 521:1}, $intern_93 = {135:1, 851:1}, $intern_94 = {850:1, 135:1}, $intern_95 = 67108864, $intern_96 = {111:1, 100:1, 101:1, 107:1, 112:1, 341:1, 98:1, 91:1}, $intern_97 = {3:1, 48:1, 37:1}, $intern_98 = 4294967296, $intern_99 = {269:1}, $intern_100 = {97:1}, $intern_101 = {3:1, 16:1, 88:1, 237:1}, $intern_102 = {3:1, 88:1, 237:1};

var _, initFnList_0, prototypesByTypeId_0 = {}, permutationId = -1;
function typeMarkerFn(){
}

function portableObjCreate(obj){
    function F(){
    }

    ;
    F.prototype = obj || {};
    return new F;
}

function modernizeBrowser(){
    !Array.isArray && (Array.isArray = function(vArg){
        return Object.prototype.toString.call(vArg) === '[object Array]';
    }
    );
}

function maybeGetClassLiteralFromPlaceHolder_0(entry){
    return entry instanceof Array?entry[0]:null;
}

function emptyMethod(){
}

function defineClass(typeId, superTypeId, castableTypeMap){
    var prototypesByTypeId = prototypesByTypeId_0;
    var createSubclassPrototype = createSubclassPrototype_0;
    var maybeGetClassLiteralFromPlaceHolder = maybeGetClassLiteralFromPlaceHolder_0;
    var prototype_0 = prototypesByTypeId[typeId];
    var clazz = maybeGetClassLiteralFromPlaceHolder(prototype_0);
    if (prototype_0 && !clazz) {
        _ = prototype_0;
    }
    else {
        _ = prototypesByTypeId[typeId] = !superTypeId?{}:createSubclassPrototype(superTypeId);
        _.castableTypeMap$ = castableTypeMap;
        _.constructor = _;
        !superTypeId && (_.typeMarker$ = typeMarkerFn);
    }
    for (var i_0 = 3; i_0 < arguments.length; ++i_0) {
        arguments[i_0].prototype = _;
    }
    clazz && (_.___clazz$ = clazz);
}

function createSubclassPrototype_0(superTypeId){
    var prototypesByTypeId = prototypesByTypeId_0;
    return portableObjCreate(prototypesByTypeId[superTypeId]);
}

function setGwtProperty(propertyName, propertyValue){
    typeof window === 'object' && typeof window['$gwt'] === 'object' && (window['$gwt'][propertyName] = propertyValue);
}

function registerEntry(){
    return entry_0;
}

function gwtOnLoad_0(errFn, modName, modBase, softPermutationId){
    ensureModuleInit();
    var initFnList = initFnList_0;
    $moduleName = modName;
    $moduleBase = modBase;
    permutationId = softPermutationId;
    function initializeModules(){
        for (var i_0 = 0; i_0 < initFnList.length; i_0++) {
            initFnList[i_0]();
        }
    }

    if (errFn) {
        try {
            $entry(initializeModules)();
        }
        catch (e) {
            errFn(modName, e);
        }
    }
    else {
        $entry(initializeModules)();
    }
}

function ensureModuleInit(){
    initFnList_0 == null && (initFnList_0 = []);
}

function addInitFunctions(){
    ensureModuleInit();
    var initFnList = initFnList_0;
    for (var i_0 = 0; i_0 < arguments.length; i_0++) {
        initFnList.push(arguments[i_0]);
    }
}

function $toString(this$static){
    return $getName(getClass__Ljava_lang_Class___devirtual$(this$static)) + '@' + toUnsignedRadixString(hashCode__I__devirtual$(this$static), 16);
}

function Object_0(){
}

function equals_Ljava_lang_Object__Z__devirtual$(this$static, other){
    return isJavaString(this$static)?$equals_5(this$static, other):hasJavaObjectVirtualDispatch(this$static)?this$static.equals$(other):isJavaArray(this$static)?this$static === other:this$static === other;
}

function getClass__Ljava_lang_Class___devirtual$(this$static){
    return isJavaString(this$static)?Ljava_lang_String_2_classLit:hasJavaObjectVirtualDispatch(this$static)?this$static.___clazz$:isJavaArray(this$static)?this$static.___clazz$:Lcom_google_gwt_core_client_JavaScriptObject_2_classLit;
}

function hashCode__I__devirtual$(this$static){
    return isJavaString(this$static)?getHashCode_0(this$static):hasJavaObjectVirtualDispatch(this$static)?this$static.hashCode$():isJavaArray(this$static)?getHashCode(this$static):getHashCode(this$static);
}

function toString__Ljava_lang_String___devirtual$(this$static){
    return isJavaString(this$static)?this$static:hasJavaObjectVirtualDispatch(this$static)?this$static.toString$():isJavaArray(this$static)?$toString(this$static):toStringSimple(this$static);
}

defineClass(1, null, {}, Object_0);
_.equals$ = function equals(other){
    return this === other;
}
;
_.getClass$ = function getClass_0(){
    return this.___clazz$;
}
;
_.hashCode$ = function hashCode_0(){
    return getHashCode(this);
}
;
_.toString$ = function toString_0(){
    return $toString(this);
}
;
_.toString = function(){
    return this.toString$();
}
;
stringCastMap = {3:1, 415:1, 24:1, 2:1};
modernizeBrowser();
function toStringSimple(obj){
    return obj.toString?obj.toString():'[JavaScriptObject]';
}

function canCast(src_0, dstId){
    return isJavaString(src_0) && !!stringCastMap[dstId] || src_0.castableTypeMap$ && !!src_0.castableTypeMap$[dstId];
}

function charToString(x_0){
    return String.fromCharCode(x_0);
}

function dynamicCast(src_0, dstId){
    if (src_0 != null && !canCast(src_0, dstId)) {
        throw new ClassCastException;
    }
    return src_0;
}

function dynamicCastJso(src_0){
    if (src_0 != null && !(!isJavaString(src_0) && !hasTypeMarker(src_0))) {
        throw new ClassCastException;
    }
    return src_0;
}

function dynamicCastToString(src_0){
    if (src_0 != null && !isJavaString(src_0)) {
        throw new ClassCastException;
    }
    return src_0;
}

function hasJavaObjectVirtualDispatch(src_0){
    return !instanceofArray(src_0) && hasTypeMarker(src_0);
}

function instanceOf(src_0, dstId){
    return src_0 != null && canCast(src_0, dstId);
}

function instanceOfJso(src_0){
    return src_0 != null && !isJavaString(src_0) && !hasTypeMarker(src_0);
}

function instanceofArray(src_0){
    return Array.isArray(src_0);
}

function isJavaArray(src_0){
    return instanceofArray(src_0) && hasTypeMarker(src_0);
}

function isJavaString(src_0){
    return typeof src_0 === 'string';
}

function maskUndefined(src_0){
    return src_0 == null?null:src_0;
}

function narrow_byte(x_0){
    return x_0 << 24 >> 24;
}

function round_int(x_0){
    return ~~Math.max(Math.min(x_0, $intern_0), -2147483648);
}

function throwClassCastExceptionUnlessNull(o){
    if (o != null) {
        throw new ClassCastException;
    }
    return null;
}

var stringCastMap;
function $ensureNamesAreInitialized(this$static){
    if (this$static.typeName != null) {
        return;
    }
    initializeNames(this$static);
}

function $getName(this$static){
    $ensureNamesAreInitialized(this$static);
    return this$static.typeName;
}

function Class(){
    ++nextSequentialId;
    this.typeName = null;
    this.simpleName = null;
    this.packageName = null;
    this.compoundName = null;
    this.canonicalName = null;
    this.typeId = null;
    this.arrayLiterals = null;
}

function createClassObject(packageName, compoundClassName){
    var clazz;
    clazz = new Class;
    clazz.packageName = packageName;
    clazz.compoundName = compoundClassName;
    return clazz;
}

function createForClass(packageName, compoundClassName, typeId, superclass){
    var clazz;
    clazz = createClassObject(packageName, compoundClassName);
    maybeSetClassLiteral(typeId, clazz);
    clazz.superclass = superclass;
    return clazz;
}

function createForEnum(packageName, compoundClassName, typeId, superclass, enumConstantsFunc){
    var clazz;
    clazz = createClassObject(packageName, compoundClassName);
    maybeSetClassLiteral(typeId, clazz);
    clazz.modifiers = enumConstantsFunc?8:0;
    clazz.superclass = superclass;
    return clazz;
}

function createForInterface(packageName, compoundClassName){
    var clazz;
    clazz = createClassObject(packageName, compoundClassName);
    clazz.modifiers = 2;
    return clazz;
}

function createForPrimitive(className, primitiveTypeId){
    var clazz;
    clazz = createClassObject('', className);
    clazz.typeId = primitiveTypeId;
    clazz.modifiers = 1;
    return clazz;
}

function getClassLiteralForArray_0(leafClass, dimensions){
    var arrayLiterals = leafClass.arrayLiterals = leafClass.arrayLiterals || [];
    return arrayLiterals[dimensions] || (arrayLiterals[dimensions] = leafClass.createClassLiteralForArray(dimensions));
}

function getPrototypeForClass(clazz){
    if (clazz.isPrimitive()) {
        return null;
    }
    var typeId = clazz.typeId;
    var prototype_0 = prototypesByTypeId_0[typeId];
    return prototype_0;
}

function initializeNames(clazz){
    if (clazz.isArray_0()) {
        var componentType = clazz.componentType;
        componentType.isPrimitive()?(clazz.typeName = '[' + componentType.typeId):!componentType.isArray_0()?(clazz.typeName = '[L' + componentType.getName() + ';'):(clazz.typeName = '[' + componentType.getName());
            clazz.canonicalName = componentType.getCanonicalName() + '[]';
            clazz.simpleName = componentType.getSimpleName() + '[]';
            return;
    }
    var packageName = clazz.packageName;
    var compoundName = clazz.compoundName;
    compoundName = compoundName.split('/');
    clazz.typeName = join_0('.', [packageName, join_0('$', compoundName)]);
    clazz.canonicalName = join_0('.', [packageName, join_0('.', compoundName)]);
    clazz.simpleName = compoundName[compoundName.length - 1];
}

function join_0(separator, strings){
    var i_0 = 0;
    while (!strings[i_0] || strings[i_0] == '') {
        i_0++;
    }
    var result = strings[i_0++];
    for (; i_0 < strings.length; i_0++) {
        if (!strings[i_0] || strings[i_0] == '') {
            continue;
        }
        result += separator + strings[i_0];
    }
    return result;
}

function maybeSetClassLiteral(typeId, clazz){
    var proto;
    if (!typeId) {
        return;
    }
    clazz.typeId = typeId;
    var prototype_0 = getPrototypeForClass(clazz);
    if (!prototype_0) {
        prototypesByTypeId_0[typeId] = [clazz];
        return;
    }
    prototype_0.___clazz$ = clazz;
}

defineClass(277, 1, {277:1}, Class);
_.createClassLiteralForArray = function createClassLiteralForArray(dimensions){
    var clazz;
    clazz = new Class;
    clazz.modifiers = 4;
    clazz.superclass = Ljava_lang_Object_2_classLit;
    dimensions > 1?(clazz.componentType = getClassLiteralForArray_0(this, dimensions - 1)):(clazz.componentType = this);
    return clazz;
}
;
_.getCanonicalName = function getCanonicalName(){
    $ensureNamesAreInitialized(this);
    return this.canonicalName;
}
;
_.getName = function getName(){
    return $getName(this);
}
;
_.getSimpleName = function getSimpleName(){
    $ensureNamesAreInitialized(this);
    return this.simpleName;
}
;
_.isArray_0 = function isArray(){
    return (this.modifiers & 4) != 0;
}
;
_.isPrimitive = function isPrimitive_0(){
    return (this.modifiers & 1) != 0;
}
;
_.toString$ = function toString_82(){
    return ((this.modifiers & 2) != 0?'interface ':(this.modifiers & 1) != 0?'':'class ') + ($ensureNamesAreInitialized(this) , this.typeName);
}
;
_.modifiers = 0;
var nextSequentialId = 1;
var Ljava_lang_Object_2_classLit = createForClass('java.lang', 'Object', 1, null), Lcom_google_gwt_core_client_JavaScriptObject_2_classLit = createForClass('com.google.gwt.core.client', 'JavaScriptObject$', 0, Ljava_lang_Object_2_classLit), Ljava_lang_Class_2_classLit = createForClass('java.lang', 'Class', 277, Ljava_lang_Object_2_classLit);
function $buildDocument(this$static, url_0){
    var ec, err, jsDoc, xml;
    if ($equals_5(url_0, 'html:document')) {
        return $getHostPage(this$static);
    }
    try {
        xml = makeHTTPRequest(url_0);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            err = $e0;
            throw new XPathException_0('HTTPRequest error: ' + err.getMessage());
        }
        else 
            throw unwrap($e0);
    }
    try {
        jsDoc = parseXML(xml);
        if (!jsDoc.documentElement) {
            throw new XPathException_0('null returned for ' + url_0);
        }
    }
    catch ($e1) {
        $e1 = wrap_0($e1);
        if (instanceOf($e1, 19)) {
            ec = $e1;
            throw new XPathException_0('XML parser error: ' + ec.getMessage());
        }
        else 
            throw unwrap($e1);
    }
    return new HTMLDocumentWrapper(jsDoc, url_0, this$static, 3);
}

function $getHostPage(this$static){
    var page;
    page = $doc;
    return new HTMLDocumentWrapper(page, page.URL, this$static, 2);
}

function $getNamedCollation(name_0){
    return $equals_5(name_0, 'http://www.w3.org/2005/xpath-functions/collation/codepoint')?($clinit_CodepointCollator() , $clinit_CodepointCollator() , theInstance_0):$equals_5(name_0, 'http://saxon.sf.net/collation/case-insensitive')?($clinit_CaseInsensitiveCollator() , $clinit_CaseInsensitiveCollator() , theInstance):null;
}

function $issueWarning(this$static, message){
    $warning_0(this$static.logger, message);
}

function $makePipelineConfiguration(this$static){
    var pipe;
    pipe = new PipelineConfiguration;
    pipe.config = this$static;
    return pipe;
}

function $setErrorListener(this$static, listener){
    this$static.errorListener = listener;
}

function $wrapXMLDocument(this$static, doc, uri_0){
    return new HTMLDocumentWrapper(doc, uri_0, this$static, 3);
}

function Configuration(){
    this.errorListener = new StandardErrorListener;
    this.globalDocumentPool = new DocumentPool;
    this.implicitTimezone = fromJavaDate(new Date_0).tzMinutes;
    this.sourceDocumentPool = new DocumentPool;
    this.logger = (new LoggerImplRegular , $ensureLogger(getLogManager(), 'Configuration'));
}

function getNativeIEVersion(){
    var rv = -1;
    if (navigator.appName == 'Microsoft Internet Explorer') {
        var ua = navigator.userAgent;
        var re = new RegExp('MSIE ([0-9]{1,}[.0-9]{0,})');
        re.exec(ua) != null && (rv = parseFloat(RegExp.$1));
    }
    return rv;
}

defineClass(311, 1, {}, Configuration);
_.implicitTimezone = 0;
_.nextDocumentNumber = 0;
var ieVersion_0 = 0;
var Lclient_net_sf_saxon_ce_Configuration_2_classLit = createForClass('client.net.sf.saxon.ce', 'Configuration', 311, Ljava_lang_Object_2_classLit);
function $$init(this$static){
    this$static.userDataTable = new HashMap_0(20);
}

function $checkImplicitResultTree(this$static){
    var err;
    if (this$static.principalResultURI != null && !$checkUniqueOutputDestination(this$static, new DocumentURI(this$static.principalResultURI))) {
        err = new XPathException_0('Cannot write an implicit result document if an explicit result document has been written to the same URI: ' + this$static.principalResultURI);
        err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTDE1490');
            throw err;
    }
}

function $checkUniqueOutputDestination(this$static, uri_0){
    !this$static.allOutputDestinations && (this$static.allOutputDestinations = new HashSet_0(20));
    return !$contains_4(this$static.allOutputDestinations, uri_0);
}

function $clearPerTransformationData(this$static){
    this$static.allOutputDestinations = null;
    this$static.resultDocumentPool = null;
    this$static.openHTMLWriter = null;
}

function $closeResult(initialContext){
    var out;
    out = initialContext.getReceiver();
    out.endDocument();
    out.close_0();
}

function $getInitialMode(this$static){
    return !this$static.initialMode?null:$getClarkName(this$static.initialMode);
}

function $getInitialTemplate(this$static){
    return !this$static.initialTemplate?null:$getClarkName(this$static.initialTemplate.templateName);
}

function $getJsResultURIset(this$static){
    var i_0, poolSize, uriArray, uris;
    uriArray = jsArray(this$static.resultDocumentPool.size_0);
    poolSize = this$static.resultDocumentPool.size_0;
    uris = initDim(Lclient_net_sf_saxon_ce_om_DocumentURI_2_classLit, {893:1, 3:1, 5:1}, 131, poolSize, 0, 1);
    uris = dynamicCast((new AbstractMap$1(this$static.resultDocumentPool)).toArray(uris), 893);
    --poolSize;
    for (i_0 = 0; i_0 <= poolSize; i_0++) {
        uriArray[poolSize - i_0] = uris[i_0].displayValue;
    }
    return uriArray;
}

function $getParameter(this$static, qName){
    if (!this$static.parameters) {
        return null;
    }
    return dynamicCast($get_0(this$static.parameters, qName), 14);
}

function $getResultDocURIArray(this$static){
    return !this$static.resultDocumentPool?new Array(0):$getJsResultURIset(this$static);
}

function $getResultDocument(this$static, uri_0){
    var docURI;
    if (uri_0 == null || uri_0.length == 0) {
        return this$static.principalOutputNode;
    }
    docURI = new DocumentURI(uri_0);
    return !this$static.resultDocumentPool?null:$containsKey(this$static.resultDocumentPool, docURI)?dynamicCastJso($get_0(this$static.resultDocumentPool, docURI)):null;
}

function $getUserData(this$static, key, name_0){
    var keyValue;
    keyValue = hashCode__I__devirtual$(key) + ' ' + name_0;
    return $getStringValue_1(this$static.userDataTable, keyValue);
}

function $hasThereBeenAnExplicitResultDocument(this$static){
    return !!this$static.resultDocumentPool && this$static.resultDocumentPool.size_0 > 0;
}

function $importControllerSettings(this$static, lc){
    $setBaseOutputURI(this$static, lc.principalResultURI);
    $setInitialMode(this$static, !lc.initialMode?null:$getClarkName(lc.initialMode));
    $setInitialTemplate(this$static, lc.initialTemplateName);
    $setParameters(this$static, lc.parameters);
    $setBaseOutputURI(this$static, lc.principalResultURI);
    $setTargetNode(this$static, lc.targetNode);
    $setApiCommand(this$static, lc.commandType);
    $setSourceNode(this$static, lc.sourceNode);
}

function $importResults(this$static, ctrl){
    this$static.resultDocumentPool = ctrl.resultDocumentPool;
    this$static.principalOutputNode = ctrl.principalOutputNode;
}

function $makePipelineConfiguration_0(this$static){
    var pipe;
    pipe = new PipelineConfiguration;
    $setConfiguration(pipe, this$static.config);
    $setErrorListener_1(pipe, this$static.errorListener);
    pipe.controller = this$static;
    return pipe;
}

function $openResult(this$static, pipe, initialContext, root){
    var openNow, out, receiver, reducer, writer;
    writer = new HTMLWriter;
    writer.pipe = pipe;
    reducer = new NamespaceReducer;
    $setUnderlyingReceiver(reducer, writer);
    $setPipelineConfiguration_0(reducer, pipe);
    $setNode(writer, root);
    receiver = reducer;
    openNow = false;
    if (this$static.executable.createsSecondaryResult) {
        receiver = new ImplicitResultChecker(receiver, this$static);
        receiver.setPipelineConfiguration(pipe);
    }
    else {
        openNow = true;
    }
    initialContext.changeOutputDestination(receiver, true);
    if (openNow) {
        out = initialContext.getReceiver();
        out.open_1();
        out.startDocument();
    }
    this$static.openHTMLWriter = writer;
    return receiver;
}

function $registerDocument(this$static, doc, uri_0){
    if (!doc) {
        throw new NullPointerException_0('null');
    }
    $add_1(this$static.config.sourceDocumentPool, doc, uri_0);
}

function $removeParameter(this$static, qName){
    !!this$static.parameters && $remove_4(this$static.parameters, qName);
}

function $reportFatalError(this$static, err){
    if (!err.hasBeenReported) {
        this$static.errorListener.error_0(err);
        err.hasBeenReported = true;
    }
}

function $reset(this$static){
    var ps;
    this$static.bindery = new Bindery;
    if (instanceOf(this$static.errorListener, 196)) {
        ps = dynamicCast(this$static.errorListener, 196).errorOutput;
        this$static.errorListener = $makeAnother(dynamicCast(this$static.errorListener, 196));
        $setErrorOutput(dynamicCast(this$static.errorListener, 196), ps);
    }
    this$static.contextForGlobalVariables = null;
    this$static.parameters = null;
    this$static.currentDateTime = null;
    this$static.dateTimePreset = false;
    this$static.initialContextItem = null;
    this$static.initialMode = null;
    this$static.initialTemplate = null;
    this$static.initialTemplateName = null;
    $clearPerTransformationData(this$static);
    this$static.pendingUpdateList = new PendingUpdateList;
    this$static.targetNode = null;
    this$static.commandType = ($clinit_Controller$APIcommand() , NONE);
    this$static.resultDocumentPool = null;
    this$static.openHTMLWriter = null;
}

function $setApiCommand(this$static, command){
    this$static.commandType = command;
}

function $setBaseOutputURI(this$static, uri_0){
    this$static.principalResultURI = uri_0;
}

function $setCurrentDateTime(this$static, dateTime){
    if (!this$static.currentDateTime) {
        if (!$getComponent(dateTime, 7)) {
            throw new XPathException_0('No timezone is present in supplied value of current date/time');
        }
        this$static.currentDateTime = $adjustTimezone(dateTime, this$static.config.implicitTimezone);
        this$static.dateTimePreset = true;
    }
    else {
        throw new IllegalStateException_0('Current date and time can only be set once, and cannot subsequently be changed');
    }
}

function $setErrorListener_0(this$static, listener){
    this$static.errorListener = listener;
}

function $setInitialMode(this$static, expandedModeName){
    expandedModeName == null || expandedModeName.length == 0?(this$static.initialMode = null):(this$static.initialMode = fromClarkName(expandedModeName));
}

function $setInitialTemplate(this$static, expandedName){
    var err, qName, t;
    if (expandedName == null || expandedName.length == 0) {
        this$static.initialTemplate = null;
        this$static.initialTemplateName = null;
        return;
    }
    this$static.initialTemplateName = expandedName;
    if (this$static.isInert) {
        return;
    }
    qName = fromClarkName(expandedName);
    t = $getNamedTemplate(this$static.executable, qName);
    if (!t) {
        err = new XPathException_2('The requested initial template, with expanded name ' + expandedName + ', does not exist', 'XTDE0040');
        $reportFatalError(this$static, err);
        throw err;
    }
    else if (t.hasRequiredParams) {
        err = new XPathException_2('The named template ' + expandedName + ' has required parameters, so cannot be used as the entry point', 'XTDE0060');
        $reportFatalError(this$static, err);
        throw err;
    }
    else {
        this$static.initialTemplate = t;
    }
}

function $setParameter(this$static, qName, value_0){
    !this$static.parameters && (this$static.parameters = new HashMap);
    $put_0(this$static.parameters, qName, value_0);
}

function $setParameters(this$static, params){
    this$static.parameters = params;
}

function $setRuleManager(this$static, r){
    this$static.ruleManager = r;
}

function $setSourceNode(this$static, source){
    this$static.sourceNode = source;
}

function $setTargetNode(this$static, target){
    this$static.targetNode = target;
}

function $setUserData(this$static, key, name_0, data_0){
    var keyVal;
    keyVal = hashCode__I__devirtual$(key) + ' ' + name_0;
    data_0 == null?$removeStringValue(this$static.userDataTable, keyVal):$putStringValue(this$static.userDataTable, keyVal, data_0);
}

function $transform(this$static, source, target){
    var c2, currentIter, initialContext, mode, pipe, success, t, tc;
    if (this$static.inUse) {
        throw new IllegalStateException_0('The Transformer is being used recursively or concurrently. This is not permitted.');
    }
    $clearPerTransformationData(this$static);
    if (!this$static.executable) {
        throw new XPathException_0('Stylesheet has not been prepared');
    }
    this$static.dateTimePreset || (this$static.currentDateTime = null);
    !this$static.currentDateTime && (this$static.currentDateTime = fromJavaDate(new Date_0));
    loggingIsEnabled() && isTraceEnabled && $open_1(traceListener);
    success = false;
    try {
        if (!source) {
            if (!this$static.initialTemplate) {
                throw new XPathException_0('Either a source document or an initial template must be specified');
            }
        }
        else {
            mode = $getMode(this$static.executable.ruleManager, this$static.initialMode, false);
            if (!mode || !!this$static.initialMode && !mode.hasRules) {
                throw new XPathException_2('Requested initial mode ' + (!this$static.initialMode?'':$getDisplayName_0(this$static.initialMode)) + ' does not exist', 'XTDE0045');
            }
            source.getSystemId() != null && $registerDocument(this$static, source.getDocumentRoot(), new DocumentURI(source.getSystemId()));
        }
        if (!this$static.executable) {
            throw new XPathException_0('Stylesheet has not been compiled');
        }
        initialContext = new XPathContext(this$static);
        if (source) {
            this$static.initialContextItem = source;
            this$static.contextForGlobalVariables = source.getRoot();
            currentIter = !source?($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1):new SingletonIterator(source);
            this$static.initialTemplate?initialContext.setSingletonFocus(this$static.initialContextItem):initialContext.setCurrentIterator(currentIter);
        }
        !!this$static.executable && $setRuleManager(this$static, this$static.executable.ruleManager);
        this$static.bindery = new Bindery;
        $initializeBindery(this$static.executable, this$static.bindery);
        $checkAllRequiredParamsArePresent(this$static.executable, this$static.parameters);
        $defineGlobalParameters(this$static.bindery, this$static.parameters);
        pipe = $makePipelineConfiguration_0(this$static);
        $openResult(this$static, pipe, initialContext, target);
        if (!this$static.initialTemplate) {
            this$static.initialContextItem = source;
            mode = $getMode(this$static.ruleManager, this$static.initialMode, false);
            if (!mode || !!this$static.initialMode && !mode.hasRules) {
                throw new XPathException_2('Requested initial mode ' + (!this$static.initialMode?'':$getDisplayName_0(this$static.initialMode)) + ' does not exist', 'XTDE0045');
            }
            tc = applyTemplates(initialContext.getCurrentIterator(), mode, null, null, initialContext);
            while (tc) {
                tc = tc.processLeavingTail_0();
            }
        }
        else {
            t = this$static.initialTemplate;
            c2 = initialContext.newContext();
            $setParameters_0(c2, t.numberOfSlots, new ParameterSet, new ParameterSet);
            tc = $expand_0(t, c2);
            while (tc) {
                tc = tc.processLeavingTail_0();
            }
        }
        $closeResult(initialContext);
        $apply_1(this$static.pendingUpdateList, initialContext);
        success = true;
        this$static.principalOutputNode = this$static.openHTMLWriter.currentNode;
        return this$static.principalOutputNode;
    }
    finally {
        this$static.inUse = false;
        this$static.principalResultURI = null;
        loggingIsEnabled() && !!traceListener && (success?isTraceEnabled && $close_0(traceListener):(traceListener.indent = 0));
    }
}

function Controller(config){
    $$init(this);
    this.isInert = false;
    this.config = config;
    this.executable = new Executable(config);
    $reset(this);
}

function Controller_0(config, executable){
    $$init(this);
    this.isInert = false;
    this.config = config;
    this.executable = executable;
    this.errorListener = config.errorListener;
    $reset(this);
}

function Controller_1(config){
    $$init(this);
    this.isInert = true;
    this.config = config;
    this.executable = new Executable(config);
    $reset(this);
}

function addProcessor(list, proc){
    !list && (list = new ArrayList);
    setCheck(list.array, list.array.length, proc);
    return list;
}

function relayEvent(node, event_0){
    var p_0, p$iterator;
    if (eventProcessors) {
        for (p$iterator = new AbstractList$IteratorImpl(eventProcessors); p$iterator.i < p$iterator.this$01_0.size_1();) {
            p_0 = (checkCriticalElement(p$iterator.i < p$iterator.this$01_0.size_1()) , dynamicCast(p$iterator.this$01_0.get_1(p$iterator.last = p$iterator.i++), 274));
            !!p_0 && $bubbleApplyTemplates(p_0, node, event_0);
        }
    }
}

function relayNonDomEvent(name_0, target, event_0){
    var p_0, p$iterator, sqn;
    if (nonDomEventProcessors) {
        for (p$iterator = new AbstractList$IteratorImpl(nonDomEventProcessors); p$iterator.i < p$iterator.this$01_0.size_1();) {
            p_0 = (checkCriticalElement(p$iterator.i < p$iterator.this$01_0.size_1()) , dynamicCast(p$iterator.this$01_0.get_1(p$iterator.last = p$iterator.i++), 274));
            if (p_0) {
                sqn = new StructuredQName('', 'http://saxonica.com/ns/interactiveXSLT', name_0);
                    $applyEventTemplates(p_0, $getClarkName(sqn), null, event_0, target);
            }
        }
    }
}

defineClass(312, 1, {}, Controller, Controller_0, Controller_1);
_.dateTimePreset = false;
_.inUse = false;
_.initialMode = null;
_.initialTemplate = null;
_.initialTemplateName = null;
_.isInert = false;
_.openHTMLWriter = null;
_.principalOutputNode = null;
_.sourceNode = null;
var eventProcessors = null, nonDomEventProcessors = null;
var Lclient_net_sf_saxon_ce_Controller_2_classLit = createForClass('client.net.sf.saxon.ce', 'Controller', 312, Ljava_lang_Object_2_classLit);
function $compareTo(this$static, other){
    return this$static.ordinal - other.ordinal;
}

function $name(this$static){
    return this$static.name_0 != null?this$static.name_0:'' + this$static.ordinal;
}

function Enum(name_0, ordinal){
    this.name_0 = name_0;
    this.ordinal = ordinal;
}

defineClass(40, 1, {3:1, 24:1, 40:1});
_.compareTo = function compareTo(other){
    return $compareTo(this, dynamicCast(other, 40));
}
;
_.equals$ = function equals_0(other){
    return this === other;
}
;
_.hashCode$ = function hashCode_1(){
    return getHashCode(this);
}
;
_.toString$ = function toString_1(){
    return this.name_0 != null?this.name_0:'' + this.ordinal;
}
;
_.ordinal = 0;
var Ljava_lang_Enum_2_classLit = createForClass('java.lang', 'Enum', 40, Ljava_lang_Object_2_classLit);
function $clinit_Controller$APIcommand(){
    $clinit_Controller$APIcommand = emptyMethod;
    UPDATE_HTML = new Controller$APIcommand('UPDATE_HTML', 0);
    TRANSFORM_TO_DOCUMENT = new Controller$APIcommand('TRANSFORM_TO_DOCUMENT', 1);
    TRANSFORM_TO_FRAGMENT = new Controller$APIcommand('TRANSFORM_TO_FRAGMENT', 2);
    TRANSFORM_TO_HTML_FRAGMENT = new Controller$APIcommand('TRANSFORM_TO_HTML_FRAGMENT', 3);
    NONE = new Controller$APIcommand('NONE', 4);
}

function Controller$APIcommand(enum$name, enum$ordinal){
    Enum.call(this, enum$name, enum$ordinal);
}

function values_0(){
    $clinit_Controller$APIcommand();
    return initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_Controller$APIcommand_2_classLit, 1), $intern_1, 213, 0, [UPDATE_HTML, TRANSFORM_TO_DOCUMENT, TRANSFORM_TO_FRAGMENT, TRANSFORM_TO_HTML_FRAGMENT, NONE]);
}

defineClass(213, 40, {213:1, 3:1, 24:1, 40:1}, Controller$APIcommand);
var NONE, TRANSFORM_TO_DOCUMENT, TRANSFORM_TO_FRAGMENT, TRANSFORM_TO_HTML_FRAGMENT, UPDATE_HTML;
var Lclient_net_sf_saxon_ce_Controller$APIcommand_2_classLit = createForEnum('client.net.sf.saxon.ce', 'Controller/APIcommand', 213, Ljava_lang_Enum_2_classLit, values_0);
function addRequiredLogHanders(record){
    var gHandler, hw, loggingWidget;
    jsLogHandler = new JsLogHandler;
    $addHandler_2(mainLogger, jsLogHandler);
    $publish_0(jsLogHandler, record);
    gHandler = new GenericLogHandler;
    if ($isSupported()) {
        $addHandler_2(mainLogger, gHandler);
        $publish(gHandler, record);
    }
    else if (!logHandlerExternal) {
        loggingWidget = new LoggingPopup;
        hw = new HasWidgetsLogHandler(loggingWidget);
        $addHandler_2(mainLogger, hw);
        $publish_1(hw, record);
    }
}

function setLogLevel(newLevel){
    if (!initLogLevel) {
        try {
            $setLevel_1(mainLogger, ($clinit_Level() , $parse_1(newLevel)));
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 19)) {
                $severe_0((new LoggerImplRegular , $ensureLogger(getLogManager(), 'LogController')), 'invalid level for setLogLevel: ' + newLevel);
            }
            else 
                throw unwrap($e0);
        }
    }
}

var initLogLevel, isTraceEnabled = false, jsLogHandler = null, mainLogger, traceListener = null;
function callExternalErrorHandler(message, level){
    if ($wnd.external) {
        try {
            $wnd.external.saxonErrorHandler(message, level);
            return true;
        }
        catch (e) {
            return false;
        }
    }
    else {
        return false;
    }
}

function createAsyncDoc(URI){
    var docObj = {};
    docObj.asyncUri = URI;
    return docObj;
}

function getAsyncUri(obj){
    if (obj.asyncUri) {
        return obj.asyncUri;
    }
    else {
        return null;
    }
}

function getDocSynchronously(obj, config){
    var absSourceURI, doc, e, xml;
    absSourceURI = getAsyncUri(obj);
    try {
        if (absSourceURI != null) {
            try {
                xml = makeHTTPRequest(absSourceURI);
                doc = parseXML(xml);
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 19)) {
                    throw new XPathException_0('Synchronous HTTP GET failed for: ' + absSourceURI);
                }
                else 
                    throw unwrap($e0);
            }
        }
        else {
            doc = obj;
        }
        if (!doc.documentElement) {
            throw new XPathException_0('no document element');
        }
    }
    catch ($e1) {
        $e1 = wrap_0($e1);
        if (instanceOf($e1, 19)) {
            e = $e1;
            throw new XPathException_0('Error resolving document: ' + e.getMessage());
        }
        else 
            throw unwrap($e1);
    }
    return new HTMLDocumentWrapper(doc, absSourceURI, config, 3);
}

function initCallback(handlerFn, eventObj){
    try {
        handlerFn.call(this, eventObj);
        return true;
    }
    catch (e) {
        return false;
    }
}

function logAnyCallbackError(success, name_0){
    if (loggingIsEnabled() && !success) {
        callbackErrorReported = true;
        $severe_0((new LoggerImplRegular , $ensureLogger(getLogManager(), 'HandlerCallback')), 'Exception on ' + name_0 + ' errorHandler callback');
    }
}

function makeCallback(message, errorType, milliseconds){
    var currentHandler, evt, success, eventObj;
    currentHandler = handler_0;
    $wnd.Saxon?($wnd.Saxon.message = message):($wnd.SaxonMessage = message);
    if (!currentHandler && !logHandlerExternal)
        return;
    if (!callbackErrorReported) {
        if (currentHandler) {
            evt = (eventObj = {} , eventObj.message = message , eventObj.level = errorType , eventObj.time = milliseconds , eventObj);
            success = initCallback(currentHandler, evt);
            logAnyCallbackError(success, 'JS');
        }
        if (logHandlerExternal) {
            success = callExternalErrorHandler(message, errorType);
            logAnyCallbackError(success, 'Ext');
        }
    }
}

function register(){
    $wnd.Saxon = {};
    $wnd.Saxon.requestXML = $entry(function(url_0){
        return requestXML(url_0);
    }
    );
    $wnd.Saxon.parseXML = $entry(function(text_0){
        return parseXML(text_0);
    }
    );
    $wnd.Saxon.serializeXML = $entry(function(node){
        return serializeXML(node);
    }
    );
    $wnd.Saxon.setErrorHandler = $entry(function(handler){
        return handler_0 = handler , undefined;
    }
    );
    $wnd.Saxon.setLogLevel = $entry(function(level){
        return setLogLevel(level);
    }
    );
    $wnd.Saxon.getLogLevel = $entry(function(){
        return mainLogger.impl.level_0.getName();
    }
    );
    $wnd.Saxon.newXSLT20Processor = function(doc){
        var sp = new $wnd.Saxonce.XSLT20Processor(doc);
        sp.setThis(sp);
        return sp;
    }
    ;
    $wnd.Saxon.getErrorHandler = $entry(function(){
        return handler_0;
    }
    );
    $wnd.Saxon.run = $entry(function(cmd){
        return runCommand(cmd);
    }
    );
    $wnd.Saxon.getVersion = $entry(function(){
        return '1.1';
    }
    );
}

function requestXML(URI){
    var absSourceURI, e, pageHref;
    try {
        pageHref = getHref();
        absSourceURI = $toString_1(new URI_0(new URI_1(pageHref), URI));
        return createAsyncDoc(absSourceURI);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            e = $e0;
            throw unwrap(e);
        }
        else 
            throw unwrap($e0);
    }
}

function runCommand(cmd){
    var proc = $wnd.Saxon.newXSLT20Processor();
    var methodVal = null;
    var sourceVal = null;
    var sourceDoc = null;
    var result = null;
    for (var p_0 in cmd) {
        if (cmd.hasOwnProperty(p_0)) {
            var pValue = cmd[p_0];
            switch (p_0) {
                case 'baseOutputURI':
                    proc.setBaseOutputURI(pValue);
                    break;
                case 'initialMode':
                    proc.setInitialMode(pValue);
                    break;
                case 'initialTemplate':
                    proc.setInitialTemplate(pValue);
                    break;
                case 'stylesheet':
                    if (typeof pValue == 'string' || pValue instanceof String) {
                        try {
                            var s = $wnd.Saxon.requestXML(pValue);
                            proc.importStylesheet(s);
                        }
                        catch (e) {
                            throw 'Saxon.run error: on importing stylesheet ' + pValue;
                        }
                    }
                    else {
                        proc.importStylesheet(pValue);
                    }

                    break;
                case 'logLevel':
                    $wnd.Saxon.setLogLevel(pValue);
                    break;
                case 'errorHandler':
                    $wnd.Saxon.setErrorHandler(pValue);
                    break;
                case 'method':
                    methodVal = pValue;
                    break;
                case 'success':
                    proc.setSuccess(pValue);
                    break;
                case 'source':
                    typeof pValue == 'string' || pValue instanceof String?(sourceDoc = $wnd.Saxon.requestXML(pValue)):(sourceDoc = pValue);
                    break;
                case 'parameters':
                    for (var x_0 in pValue) {
                        pValue.hasOwnProperty(x_0) && proc.setParameter(null, x_0, pValue[x_0]);
                    }

                    break;
            }
        }
    }
    methodVal == 'transformToFragment'?proc.transformToFragment(sourceDoc, null):methodVal == 'transformToHTMLFragment'?proc.transformToHTMLFragment(sourceDoc, null):methodVal == 'transformToDocument'?proc.transformToDocument(sourceDoc):proc.updateHTMLDocument(sourceDoc, null);
    return proc;
}

var callbackErrorReported = false, handler_0 = null, logHandlerExternal = false, processorWasJsInitiated = false;
function $executeSuccessCallback(callback, proc){
    callback.call($wnd, proc);
}

function $invokeSuccess(this$static, callback){
    $executeSuccessCallback(callback, this$static.jsThis);
}

function XSLT20Processor(){
    this.processor = new Xslt20ProcessorImpl;
    this.controller = this.processor.localController;
    processorWasJsInitiated = true;
}

function XSLT20Processor_0(stylesheet){
    XSLT20Processor.call(this);
    !!stylesheet && $importStylesheet(this.processor, stylesheet);
}

defineClass(362, 1, {894:1}, XSLT20Processor, XSLT20Processor_0);
_.clearParameters_0 = function clearParameters(){
    this.controller.parameters = null;
}
;
_.executeSuccessCallback_0 = function executeSuccessCallback(callback, proc){
    $executeSuccessCallback(callback, proc);
}
;
_.getInitialMode_0 = function getInitialMode(){
    return $getInitialMode(this.controller);
}
;
_.getInitialTemplate_0 = function getInitialTemplate(){
    return $getInitialTemplate(this.controller);
}
;
_.getParameter_0 = function getParameter(namespaceURI, localName){
    var e, ns, qn, vr;
    ns = namespaceURI == null?'':namespaceURI;
    try {
        qn = new StructuredQName('', ns, localName);
        vr = $getParameter(this.controller, qn);
        return convertToJavaScript(vr);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            e = $e0;
            handleException(e, 'getParameter');
        }
        else 
            throw unwrap($e0);
    }
    return null;
}
;
_.getResultDocument_0 = function getResultDocument(URI){
    return $getResultDocument(this.controller, URI);
}
;
_.getResultDocuments_0 = function getResultDocuments(){
    return $getResultDocURIArray(this.controller);
}
;
_.getSuccess_0 = function getSuccess(){
    return this.processor.successCallback;
}
;
_.importStylesheet_0 = function importStylesheet(stylesheet){
    $importStylesheet(this.processor, stylesheet);
}
;
_.invokeSuccess_0 = function invokeSuccess(callback){
    $invokeSuccess(this, callback);
}
;
_.removeParameter_0 = function removeParameter(namespaceURI, localName){
    var e, ns, qn;
    ns = namespaceURI == null?'':namespaceURI;
    try {
        qn = new StructuredQName('', ns, localName);
        $removeParameter(this.controller, qn);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            e = $e0;
            handleException(e, 'getParameter');
        }
        else 
            throw unwrap($e0);
    }
}
;
_.reset_0 = function reset_0(){
    $reset(this.controller);
}
;
_.setBaseOutputURI_0 = function setBaseOutputURI(URI){
    $setBaseOutputURI(this.controller, URI);
}
;
_.setCollation_0 = function setCollation(){
}
;
_.setInitialMode_0 = function setInitialMode(mode){
    var e;
    try {
        $setInitialMode(this.controller, mode);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            e = $e0;
            handleException(e, 'setInitialMode');
        }
        else 
            throw unwrap($e0);
    }
}
;
_.setInitialTemplate_0 = function setInitialTemplate(template){
    var e;
    try {
        $setInitialTemplate(this.controller, template);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            e = $e0;
            handleException(e, 'setInitialTemplate');
        }
        else 
            throw unwrap($e0);
    }
}
;
_.setParameter_0 = function setParameter(namespaceURI, localName, value_0){
    var e, ns, qn, iterator;
    ns = namespaceURI == null?'':namespaceURI;
    try {
        qn = new StructuredQName('', ns, localName);
        $setParameter(this.controller, qn, (iterator = convertFromJavaScript(value_0, this.processor.config) , instanceOf(iterator, 250)?dynamicCast(iterator, 14):iterator.next_0()));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            e = $e0;
            handleException(e, 'setParameter');
        }
        else 
            throw unwrap($e0);
    }
}
;
_.setSuccess_0 = function setSuccess(success){
    $setSuccess(this.processor, success, this);
}
;
_.setThis_0 = function setThis(jsObj){
    this.jsThis = jsObj;
}
;
_.transformToDocument_0 = function transformToDocument(sourceNode){
    return $transformToDocument(this.processor, sourceNode);
}
;
_.transformToFragment_0 = function transformToFragment(sourceNode, ownerDocument){
    return $transformToFragment(this.processor, sourceNode, ownerDocument);
}
;
_.transformToHTMLFragment_0 = function transformToHTMLFragment(sourceObject, targetDocument){
    $updateHTMLDocument(this.processor, sourceObject, targetDocument, ($clinit_Controller$APIcommand() , TRANSFORM_TO_HTML_FRAGMENT));
}
;
_.updateHTMLDocument_0 = function updateHTMLDocument(sourceObject, targetDocument){
    $updateHTMLDocument(this.processor, sourceObject, targetDocument, ($clinit_Controller$APIcommand() , UPDATE_HTML));
}
;
_.jsThis = null;
var Lclient_net_sf_saxon_ce_XSLT20Processor_2_classLit = createForClass('client.net.sf.saxon.ce', 'XSLT20Processor', 362, Ljava_lang_Object_2_classLit);
function $export(){
    if (!exported) {
        exported = true;
        $export0();
    }
}

function $export0(){
    var pkg = ($clinit_ExporterUtil() , $declarePackage('Saxonce.XSLT20Processor'));
    var __0;
    $wnd.Saxonce.XSLT20Processor = $entry(function(){
        var g, j = this;
        isAssignableToInstance(Lclient_net_sf_saxon_ce_XSLT20Processor_2_classLit, arguments)?(g = arguments[0]):arguments.length == 1?(g = ___create(arguments[0])):arguments.length == 0 && (g = new XSLT20Processor);
        j.g = g;
        g['__gwtex_wrap'] = j;
        return j;
    }
    );
    __0 = $wnd.Saxonce.XSLT20Processor.prototype = new Object;
    __0.transformToHTMLFragment = $entry(function(a0, a1){
        this.g.transformToHTMLFragment_0(a0, a1);
    }
    );
    __0.setBaseOutputURI = $entry(function(a0){
        this.g.setBaseOutputURI_0(a0);
    }
    );
    __0.setInitialMode = $entry(function(a0){
        this.g.setInitialMode_0(a0);
    }
    );
    __0.transformToDocument = $entry(function(a0){
        return this.g.transformToDocument_0(a0);
    }
    );
    __0.setParameter = $entry(function(a0, a1, a2){
        runDispatch(this.g, Lclient_net_sf_saxon_ce_XSLT20Processor_2_classLit, 0, arguments, false, false)[0];
    }
    );
    __0.setInitialTemplate = $entry(function(a0){
        this.g.setInitialTemplate_0(a0);
    }
    );
    __0.getParameter = $entry(function(a0, a1){
        return this.g.getParameter_0(a0, a1);
    }
    );
    __0.updateHTMLDocument = $entry(function(a0, a1){
        this.g.updateHTMLDocument_0(a0, a1);
    }
    );
    __0.reset = $entry(function(){
        this.g.reset_0();
    }
    );
    __0.setCollation = $entry(function(){
        this.g.setCollation_0();
    }
    );
    __0.getSuccess = $entry(function(){
        return this.g.getSuccess_0();
    }
    );
    __0.clearParameters = $entry(function(){
        this.g.clearParameters_0();
    }
    );
    __0.importStylesheet = $entry(function(a0){
        this.g.importStylesheet_0(a0);
    }
    );
    __0.getResultDocument = $entry(function(a0){
        return this.g.getResultDocument_0(a0);
    }
    );
    __0.invokeSuccess = $entry(function(a0){
        this.g.invokeSuccess_0(a0);
    }
    );
    __0.getInitialTemplate = $entry(function(){
        return this.g.getInitialTemplate_0();
    }
    );
    __0.executeSuccessCallback = $entry(function(a0, a1){
        this.g.executeSuccessCallback_0(a0, a1);
    }
    );
    __0.transformToFragment = $entry(function(a0, a1){
        return this.g.transformToFragment_0(a0, a1);
    }
    );
    __0.getInitialMode = $entry(function(){
        return this.g.getInitialMode_0();
    }
    );
    __0.getResultDocuments = $entry(function(){
        return this.g.getResultDocuments_0();
    }
    );
    __0.setThis = $entry(function(a0){
        this.g.setThis_0(a0);
    }
    );
    __0.removeParameter = $entry(function(a0, a1){
        this.g.removeParameter_0(a0, a1);
    }
    );
    __0.setSuccess = $entry(function(a0){
        this.g.setSuccess_0(a0);
    }
    );
    registerDispatchMap(Lclient_net_sf_saxon_ce_XSLT20Processor_2_classLit, {0:{3:[[function(){
        return this.setParameter_0.apply(this, arguments);
    }
    , null, undefined, 'string', 'string', Ljava_lang_Object_2_classLit]]}}, false);
    addTypeMap(Lclient_net_sf_saxon_ce_XSLT20Processor_2_classLit, $wnd.Saxonce.XSLT20Processor);
    if (pkg)
        for (p in pkg)
            $wnd.Saxonce.XSLT20Processor[p] === undefined && ($wnd.Saxonce.XSLT20Processor[p] = pkg[p]);
}

function XSLT20ProcessorExporterImpl(){
    $export();
}

function ___create(a0){
    return new XSLT20Processor_0(a0);
}

defineClass(582, 1, {}, XSLT20ProcessorExporterImpl);
var exported = false;
var Lclient_net_sf_saxon_ce_XSLT20ProcessorExporterImpl_2_classLit = createForClass('client.net.sf.saxon.ce', 'XSLT20ProcessorExporterImpl', 582, Ljava_lang_Object_2_classLit);
function $clinit_Xslt20ProcessorImpl(){
    $clinit_Xslt20ProcessorImpl = emptyMethod;
    logger_0 = (new LoggerImplRegular , $ensureLogger(getLogManager(), 'XSLT20Processor'));
}

function $applyEventTemplates(this$static, mode, start_0, event_0, object){
    var controller, err;
    try {
        !start_0 && (start_0 = $getHostPage(this$static.config));
        $log_1(logger_0, ($clinit_Level() , FINER), 'OnEvent Apply-Templates - Mode: ' + mode + ' Event: ' + toStringSimple(event_0));
        controller = $newTransformer(this$static.stylesheet);
        $importControllerSettings(controller, this$static.localController);
        $setInitialTemplate(controller, null);
        mode == null || mode.length == 0?(controller.initialMode = null):(controller.initialMode = fromClarkName(mode));
        $setUserData(controller, 'Saxon-CE', 'current-event', event_0);
        $setUserData(controller, 'Saxon-CE', 'current-object', object);
        $transform(controller, start_0, controller.targetNode);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            err = $e0;
            handleException(err, "mode: '" + mode + "' event: '" + toStringSimple(event_0));
        }
        else 
            throw unwrap($e0);
    }
}

function $bubbleApplyTemplates(this$static, node, event_0){
    var bubbleElements, controller, e, element, eventNode, matchedMode, matchedRule, ruleContext;
    this$static.principleEventListener && relayEvent(node, event_0);
    eventNode = $wrap($getHostPage(this$static.config), node);
    bubbleElements = $iterateAxis_0(eventNode, 0, ($clinit_NodeKindTest() , ELEMENT));
    controller = $newTransformer(this$static.stylesheet);
    try {
        $importControllerSettings(controller, this$static.localController);
        ruleContext = new XPathContext(controller);
        matchedMode = $getModeFromEvent(this$static, event_0);
        if (!matchedMode) {
            return;
        }
        element = eventNode;
        while (element) {
            matchedRule = $getRule(matchedMode, element, ruleContext);
            if (!!matchedRule && eventPropertyMatch(event_0, matchedRule)) {
                $log_1(logger_0, ($clinit_Level() , FINER), 'Bubble Apply-Templates - Mode: ' + $getLocalName_1(matchedMode.modeName) + ' Element: ' + element.getDisplayName());
                $applyEventTemplates(this$static, $getClarkName(matchedMode.modeName), element, event_0, null);
                matchedRule.ixslPreventDefault && $eventPreventDefault(event_0);
                break;
            }
            element = dynamicCast(bubbleElements.next_0(), 7);
        }
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            e = $e0;
            handleException(e, 'bubbleApplyTemplates');
        }
        else 
            throw unwrap($e0);
    }
}

function $doTransformation(this$static){
    var absSourceURI, absStyleURI, body_0, e, err, i_0, initialMode, initialTemplate, logger, pageHref, reportURI, scripts, sourceDoc, sourceURI, styleDoc, styleElementExists, styleURI, type_0;
    logger = (new LoggerImplRegular , $ensureLogger(getLogManager(), 'Xstl20Processor'));
    try {
        scripts = (!scriptsOnLoad && (scriptsOnLoad = $doc.getElementsByTagName('script')) , scriptsOnLoad);
        sourceURI = null;
        styleURI = null;
        initialMode = null;
        initialTemplate = null;
        styleElementExists = false;
        for (i_0 = 0; i_0 < scripts.length; i_0++) {
            type_0 = $getAttribute_0(scripts[i_0], 'type');
            if ($equals_5(type_0, 'application/xslt+xml')) {
                styleElementExists = true;
                styleURI = $getAttribute_0(scripts[i_0], 'src');
                sourceURI = $getAttribute_0(scripts[i_0], 'data-source');
                initialMode = $getAttribute_0(scripts[i_0], 'data-initial-mode');
                initialTemplate = $getAttribute_0(scripts[i_0], 'data-initial-template');
                break;
            }
        }
        if (styleElementExists) {
            if (styleURI == null) {
                throw new XPathException_0('No XSLT stylesheet reference found');
            }
        }
        else {
            $info(logger.impl, 'Saxon-CE API initialised');
            return;
        }
        sourceDoc = null;
        absSourceURI = null;
        if (sourceURI != null && sourceURI.length != 0) {
            pageHref = getHref();
            absSourceURI = $toString_1(new URI_0(new URI_1(pageHref), sourceURI));
            if ($equals_5(pageHref, absSourceURI)) {
                throw new XPathException_0('Cannot load XML with same URI as the host page');
            }
            sourceDoc = createAsyncDoc(absSourceURI);
        }
        else if (initialTemplate == null) {
            throw new XPathException_0('No data-source attribute or data-initial-template value found - one is required');
        }
        absStyleURI = $toString_1(new URI_0(new URI_1(getHref()), styleURI));
        try {
            styleDoc = $buildDocument(this$static.config, absStyleURI);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                e = $e0;
                reportURI = absSourceURI != null?absSourceURI:styleURI;
                throw new XPathException_0('Failed to load XSLT stylesheet ' + reportURI + ': ' + e.message_0);
            }
            else 
                throw unwrap($e0);
        }
        $add_2(this$static.config.sourceDocumentPool, styleDoc, absStyleURI);
        body_0 = getBodyElement();
        $setInitialMode(this$static.localController, initialMode);
        $setInitialTemplate(this$static.localController, initialTemplate);
        $setApiCommand(this$static.localController, ($clinit_Controller$APIcommand() , UPDATE_HTML));
        $setTargetNode(this$static.localController, $doc);
        $renderXML(this$static, sourceDoc, styleDoc, body_0);
    }
    catch ($e1) {
        $e1 = wrap_0($e1);
        if (instanceOf($e1, 19)) {
            err = $e1;
            $log_1(logger, ($clinit_Level() , SEVERE), err.getMessage());
        }
        else 
            throw unwrap($e1);
    }
}

function $getCallback(){
    if ($wnd.onSaxonLoad && typeof $wnd.onSaxonLoad == 'function') {
        return $wnd.onSaxonLoad;
    }
    else {
        return null;
    }
}

function $getCorrespondingSVGElement(obj){
    if (obj.correspondingElement) {
        return obj.correspondingElement;
    }
    return null;
}

function $getModeFromEvent(this$static, event_0){
    var m, m$iterator, mode, result;
    result = null;
    mode = 'on' + event_0.type;
    for (m$iterator = new AbstractList$IteratorImpl(this$static.registeredEventModes); m$iterator.i < m$iterator.this$01_0.size_1();) {
        m = (checkCriticalElement(m$iterator.i < m$iterator.this$01_0.size_1()) , dynamicCast(m$iterator.this$01_0.get_1(m$iterator.last = m$iterator.i++), 157));
        if ($equals_5($getLocalName_1(m.modeName), mode)) {
            result = m;
            break;
        }
    }
    return result;
}

function $importStylesheet(this$static, doc){
    var e;
    try {
        this$static.importedStylesheet = getDocSynchronously(doc, this$static.config);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            handleException(e, 'importStylesheet');
        }
        else 
            throw unwrap($e0);
    }
}

function $invokeTransform(this$static, inDoc, target){
    var controller, e, outResult;
    !this$static.fetchedSourceDoc && (this$static.fetchedSourceDoc = inDoc);
    if (this$static.transformInvoked || !this$static.stylesheet || this$static.docFetchRequired && !this$static.fetchedSourceDoc) {
        return null;
    }
    this$static.transformInvoked = true;
    try {
        controller = $newTransformer(this$static.stylesheet);
        $setSourceNode(this$static.localController, this$static.fetchedSourceDoc);
        $importControllerSettings(controller, this$static.localController);
        $log_1(logger_0, ($clinit_Level() , FINE), 'Commencing transform type:' + $name(controller.commandType));
        outResult = $transform(controller, this$static.fetchedSourceDoc, target);
        $log_1(logger_0, FINE, 'Transform complete');
        $importResults(this$static.localController, controller);
        $registerEventHandlers(this$static, controller);
        !!this$static.successCallback && $invokeSuccess(this$static.successOwner, this$static.successCallback);
        return outResult;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            e = $e0;
            handleException(e, 'invokeTransform');
            return null;
        }
        else 
            throw unwrap($e0);
    }
}

function $onModuleLoad(this$static){
    var href_0, je, jse, saxonceLoadCallback, logLevel;
    if (loggingIsEnabled()) {
        logHandlerExternal = callExternalErrorHandler('Saxon-CE 1.1 from Saxonica', 'INIT');
        mainLogger = (new LoggerImplRegular , $ensureLogger(getLogManager(), ''));
        logLevel = getParameter_0();
        initLogLevel = logLevel == null?null:($clinit_Level() , $parse_1(logLevel));
        mainLogger.impl.level_0 == ($clinit_Level() , OFF) || $addHandler_2((new LoggerImplRegular , $ensureLogger(getLogManager(), '')), new ListenerLogHandler);
    }
    $log_1(logger_0, ($clinit_Level() , FINE), 'GWT Module Load initated by page: ' + $doc.title);
    if (loggingIsEnabled()) {
        href_0 = getHref();
        href_0 != null && $equals_5(href_0.substr(0, 5), 'file:') && $warning_0(logger_0, "The file:// protocol in use may cause 'permission denied' errors in Saxon-CE - unless the browser's 'strict-origin-policy' has been relaxed.");
    }
    $clinit_ExporterUtil();
    new ExportAllExporterImpl;
    register();
    saxonceLoadCallback = $getCallback();
    if (saxonceLoadCallback) {
        $log_1(logger_0, FINE, "Executing 'onSaxonceLoad' callback...");
        try {
            saxonceLoadCallback.apply($wnd);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 119)) {
                jse = $e0;
                handleException(jse, 'onModuleLoad');
            }
            else if (instanceOf($e0, 19)) {
                je = $e0;
                handleException(je, 'onModuleLoad');
            }
            else 
                throw unwrap($e0);
        }
    }
    $doTransformation(this$static);
}

function $registerEventHandlers(this$static, controller){
    var docElement, eventMode, eventMode$iterator, eventName, eventNo;
    if (this$static.registeredEventModes) {
        return;
    }
    docElement = $doc;
    this$static.registeredEventModes = $getModesInNamespace(controller.ruleManager);
    if (this$static.registeredEventModes.array.length > 0 && !this$static.registeredForEvents) {
        this$static.registeredForEvents = true;
        $registerNonDOMevents(this$static, controller);
        $clinit_DOM();
        if (!getEventListener(docElement)) {
            this$static.principleEventListener = true;
            setEventListener_0(docElement, new Xslt20ProcessorImpl$2(this$static));
        }
        else {
            eventProcessors = addProcessor(eventProcessors, this$static);
        }
    }
    for (eventMode$iterator = new AbstractList$IteratorImpl(this$static.registeredEventModes); eventMode$iterator.i < eventMode$iterator.this$01_0.size_1();) {
        eventMode = (checkCriticalElement(eventMode$iterator.i < eventMode$iterator.this$01_0.size_1()) , dynamicCast(eventMode$iterator.this$01_0.get_1(eventMode$iterator.last = eventMode$iterator.i++), 157));
        eventName = $getLocalName_1(eventMode.modeName);
        $equals_5(eventName.substr(0, 2), 'on')?(eventName = __substr(eventName, 2, eventName.length - 2)):$warning_0(logger_0, "Event name: '" + eventName + "' is invalid - names should begin with 'on'");
        eventNo = $eventGetTypeInt(($clinit_DOM() , eventName));
        $sinkEvents(docElement, eventNo | (docElement.__eventBits || 0));
    }
}

function $registerNonDOMevents(this$static, controller){
    var eventMode, eventMode$iterator, eventName, eventTarget, nonDomRules, r, r$iterator;
    for (eventMode$iterator = new AbstractList$IteratorImpl(this$static.registeredEventModes); eventMode$iterator.i < eventMode$iterator.this$01_0.size_1();) {
        eventMode = (checkCriticalElement(eventMode$iterator.i < eventMode$iterator.this$01_0.size_1()) , dynamicCast(eventMode$iterator.this$01_0.get_1(eventMode$iterator.last = eventMode$iterator.i++), 157));
        nonDomRules = eventMode.virtualRuleChain;
        if (nonDomRules) {
            if (!this$static.registeredProcessorForNonDomEvents) {
                this$static.registeredProcessorForNonDomEvents = true;
                nonDomEventProcessors = addProcessor(nonDomEventProcessors, this$static);
            }
            eventName = $getLocalName_1(eventMode.modeName);
            for (r$iterator = new AbstractList$IteratorImpl(nonDomRules); r$iterator.i < r$iterator.this$01_0.size_1();) {
                r = (checkCriticalElement(r$iterator.i < r$iterator.this$01_0.size_1()) , dynamicCast(r$iterator.this$01_0.get_1(r$iterator.last = r$iterator.i++), 63));
                eventTarget = $evaluate(dynamicCast(r.pattern, 273), new XPathContext(controller));
                bindTemplateToWindowEvent(eventName, eventTarget);
            }
        }
    }
}

function $renderXML(this$static, inSourceDoc, styleDoc, target){
    var asyncSourceURI, e, htmlDoc, nodeType, sheet_0, sourceDoc, sourceNode;
    try {
        if (!styleDoc) {
            throw new Exception_0('Stylesheet for transform is null');
        }
        this$static.docFetchRequired = !!inSourceDoc;
        $setErrorListener(this$static.config, new StandardErrorListener);
        asyncSourceURI = null;
        if (this$static.docFetchRequired && (this$static.localController.commandType == ($clinit_Controller$APIcommand() , UPDATE_HTML) || !!this$static.successCallback)) {
            asyncSourceURI = getAsyncUri(inSourceDoc);
            asyncSourceURI != null && $equals_5(asyncSourceURI.toLowerCase().substr(0, 5), 'file:') && (asyncSourceURI = null);
        }
        this$static.fetchedSourceDoc = null;
        this$static.transformInvoked = false;
        if (asyncSourceURI != null) {
            $log_1(logger_0, ($clinit_Level() , FINE), 'Aynchronous GET for: ' + asyncSourceURI);
            $doGet(asyncSourceURI, new Xslt20ProcessorImpl$1(this$static, asyncSourceURI, target));
        }
        if (!this$static.stylesheet) {
            loggingIsEnabled() && (isTraceEnabled = mainLogger.impl.level_0 == ($clinit_Level() , FINEST) , isTraceEnabled && (traceListener = new XSLTTraceListener));
            $log_1(logger_0, ($clinit_Level() , FINE), 'Compiling Stylesheet...');
            sheet_0 = new Executable(this$static.config);
            $prepare(sheet_0, styleDoc);
            this$static.stylesheet = sheet_0;
            $log_1(logger_0, FINE, 'Stylesheet compiled OK');
        }
        if (asyncSourceURI == null && !!inSourceDoc) {
            nodeType = is(inSourceDoc)?inSourceDoc.nodeType:0;
            if (nodeType > 0 && nodeType != 9) {
                sourceNode = inSourceDoc;
                sourceDoc = sourceNode.ownerDocument;
                htmlDoc = new HTMLDocumentWrapper(sourceDoc, sourceDoc.URL, this$static.config, 2);
                this$static.fetchedSourceDoc = $wrap(htmlDoc, sourceNode);
            }
            else {
                this$static.fetchedSourceDoc = getDocSynchronously(inSourceDoc, this$static.config);
            }
        }
        return $invokeTransform(this$static, this$static.fetchedSourceDoc, target);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            e = $e0;
            handleException(e, 'renderXML');
            return null;
        }
        else 
            throw unwrap($e0);
    }
}

function $setSuccess(this$static, sFunction, sOwner){
    this$static.successCallback = sFunction;
    this$static.successOwner = sOwner;
}

function $transformToDocument(this$static, sourceDoc){
    var targetDoc;
    $setTargetNode(this$static.localController, createDocument(this$static.localController.principalResultURI));
    $setApiCommand(this$static.localController, ($clinit_Controller$APIcommand() , TRANSFORM_TO_DOCUMENT));
    targetDoc = createDocument(this$static.localController.principalResultURI);
    return $renderXML(this$static, sourceDoc, this$static.importedStylesheet, targetDoc);
}

function $transformToFragment(this$static, sourceDoc, ownerDocument){
    var owner, targetDocumentFragment;
    owner = !ownerDocument?createDocument(this$static.localController.principalResultURI):ownerDocument;
    targetDocumentFragment = owner.createDocumentFragment();
    $setTargetNode(this$static.localController, owner);
    $setApiCommand(this$static.localController, ($clinit_Controller$APIcommand() , TRANSFORM_TO_FRAGMENT));
    return $renderXML(this$static, sourceDoc, this$static.importedStylesheet, targetDocumentFragment);
}

function $updateHTMLDocument(this$static, sourceDoc, targetDoc, cmd){
    /*!targetDoc && (targetDoc = $doc);
    $setApiCommand(this$static.localController, cmd);
    $setTargetNode(this$static.localController, targetDoc);
    $renderXML(this$static, sourceDoc, this$static.importedStylesheet, getBodyElement());*/
   // I don't think we can do this in Node...
}

function Xslt20ProcessorImpl(){
    $clinit_Xslt20ProcessorImpl();
    this.config = new Configuration;
    this.localController = new Controller_1(this.config);
}

function bindTemplateToWindowEvent(eventName, target){
    target[eventName] = $entry(function(eventArg){
        relayNonDomEvent_0(eventName, target, eventArg);
    }
    );
}

function eventPropertyMatch(event_0, matchedRule){
    var all, eventProperty, eventPropertyValue, i_0, matches;
    eventProperty = matchedRule.ixslEventProperty;
    if (eventProperty == null) {
        return true;
    }
    all = $split(eventProperty, '\\s', 0);
    eventPropertyValue = getEventProperty(event_0, all[0]);
    if (all.length < 2 || eventPropertyValue == null) {
        return true;
    }
    matches = false;
    for (i_0 = 1; i_0 < all.length; i_0++) {
        if ($equals_5(eventPropertyValue, all[i_0])) {
            matches = true;
            break;
        }
    }
    return matches;
}

function getBodyElement(){
    var body_0;
    body_0 = $doc.getElementsByTagName('BODY')[0];
    !body_0 && (body_0 = $doc.getElementsByTagName('body')[0]);
    return body_0;
}

function getEventProperty(evt, propName){
    var prop = evt[propName];
    if (prop != null) {
        return String(prop);
    }
    return null;
}

function handleException(err, prefix){
    $clinit_Xslt20ProcessorImpl();
    var excName, logException, message, xe;
    if (instanceOf(err, 361)) {
        return;
    }
    prefix = prefix == null || prefix.length == 0?'':' in ' + prefix + ':';
    logException = true;
    if (instanceOf(err, 4)) {
        excName = 'XPathException';
        xe = dynamicCast(err, 4);
        logException = !xe.hasBeenReported;
    }
    else {
        excName = 'Exception ' + $getName(err.___clazz$);
    }
    message = excName + prefix + ' ' + err.getMessage();
    logException && $log_1(logger_0, ($clinit_Level() , SEVERE), message);
    $printStackTrace(err, ($clinit_System() , err_0));
    if (processorWasJsInitiated && !handler_0) {
        throw new JavaScriptAPIException('[js] ' + message);
    }
}

function relayNonDomEvent_0(name_0, obj, eventArg){
    var event_0, event_1;
    event_0 = !eventArg?$wnd.event:eventArg;
    relayNonDomEvent(name_0, obj, event_0);
}

defineClass(274, 1, {274:1}, Xslt20ProcessorImpl);
_.docFetchRequired = false;
_.principleEventListener = false;
_.registeredEventModes = null;
_.registeredForEvents = false;
_.registeredProcessorForNonDomEvents = false;
_.stylesheet = null;
_.successCallback = null;
_.successOwner = null;
_.transformInvoked = false;
var logger_0, scriptsOnLoad;
var Lclient_net_sf_saxon_ce_Xslt20ProcessorImpl_2_classLit = createForClass('client.net.sf.saxon.ce', 'Xslt20ProcessorImpl', 274, Ljava_lang_Object_2_classLit);
function Xslt20ProcessorImpl$1(this$0, val$URI, val$transformTarget){
    this.this$01 = this$0;
    this.val$URI2 = val$URI;
    this.val$transformTarget3 = val$transformTarget;
}

defineClass(527, 1, {}, Xslt20ProcessorImpl$1);
_.onError = function onError(request, exception){
    var msg;
    msg = 'HTTP Error ' + exception.detailMessage + ' for URI ' + this.val$URI2;
    handleException(new RuntimeException_0(msg), 'onError');
}
;
_.onResponseReceived = function onResponseReceived(request, response){
    var e, msg, responseDoc, responseNode, statusCode;
    statusCode = response.xmlHttpRequest.status;
    if (statusCode == 200) {
        $fine_0((new LoggerImplRegular , $ensureLogger(getLogManager(), 'ResponseReceived')), 'GET Ok for: ' + this.val$URI2);
        try {
            responseNode = parseXML(response.xmlHttpRequest.responseText);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 19)) {
                e = $e0;
                handleException(new RuntimeException_0(e.getMessage()), 'onResponseReceived');
                return;
            }
            else 
                throw unwrap($e0);
        }
        responseDoc = $wrapXMLDocument(this.this$01.config, responseNode, this.val$URI2);
        $invokeTransform(this.this$01, responseDoc, this.val$transformTarget3);
    }
    else if (statusCode < 400)
        ;
    else {
        msg = 'HTTP Error ' + statusCode + ' ' + response.xmlHttpRequest.statusText + ' for URI ' + this.val$URI2;
        handleException(new RuntimeException_0(msg), 'onResponseReceived');
    }
}
;
var Lclient_net_sf_saxon_ce_Xslt20ProcessorImpl$1_2_classLit = createForClass('client.net.sf.saxon.ce', 'Xslt20ProcessorImpl/1', 527, Ljava_lang_Object_2_classLit);
function Xslt20ProcessorImpl$2(this$0){
    this.this$01 = this$0;
}

defineClass(529, 1, {101:1}, Xslt20ProcessorImpl$2);
_.onBrowserEvent = function onBrowserEvent(event_0){
    var eTarget, eventNode;
    eTarget = $eventGetTarget(event_0);
    if (is(eTarget)) {
        eventNode = eTarget;
    }
    else {
        eventNode = $getCorrespondingSVGElement(eTarget);
        if (!eventNode) {
            return;
        }
    }
    $bubbleApplyTemplates(this.this$01, eventNode, event_0);
}
;
var Lclient_net_sf_saxon_ce_Xslt20ProcessorImpl$2_2_classLit = createForClass('client.net.sf.saxon.ce', 'Xslt20ProcessorImpl/2', 529, Ljava_lang_Object_2_classLit);
function $doGet(url_0, callback){
    var builder;
    builder = new RequestBuilder(($clinit_RequestBuilder() , GET), url_0);
    try {
        throwIfNull('callback', callback);
        $doSend(builder, callback);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (!instanceOf($e0, 200))
            throw unwrap($e0);
    }
}

defineClass(23, 1, {15:1, 14:1, 23:1});
_.getLength = function getLength(){
    return 1;
}
;
_.itemAt = function itemAt(n){
    return n == 0?this:null;
}
;
_.iterate = function iterate(){
    return new SingletonIterator(this);
}
;
var Lclient_net_sf_saxon_ce_value_AbstractNode_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'AbstractNode', 23, Ljava_lang_Object_2_classLit);
function $iterateAxis0(this$static, axisNumber){
    switch (axisNumber) {
        case 0:
            return $iterateAxis_0(this$static.element, 1, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
        case 1:
            return new PrependIterator(this$static, $iterateAxis_0(this$static.element, 1, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
        case 3:
    case 4:
case 7:
    case 8:
case 11:
    case 2:
        return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
    case 12:
case 5:
    return new SingletonIterator(this$static);
case 6:
    return new Navigator$FollowingEnumeration(this$static);
case 9:
    return makeIterator_0(this$static.element);
case 10:
    return new Navigator$PrecedingEnumeration(this$static, false);
default:throw new IllegalArgumentException_0('Unknown axis number ' + axisNumber);
    }
}

function HTMLAttributeNode(element, name_0, prefix, uri_0, value_0){
    this.element = element;
    this.name_0 = name_0;
    this.prefix_0 = prefix;
    this.uri_0 = uri_0;
    this.value_0 = value_0;
    this.qname = new StructuredQName(prefix, uri_0, name_0);
}

defineClass(121, 23, {121:1, 15:1, 7:1, 14:1, 23:1}, HTMLAttributeNode);
_.compareOrder = function compareOrder(other){
    if (instanceOf(other, 121)) {
        return this.element.isSameNodeInfo(dynamicCast(other, 121).element)?$compareTo_0(this.qname, dynamicCast(other, 121).qname):compareOrder_3(this.element, dynamicCast(other, 121).element);
    }
    if (other.isSameNodeInfo(this.element)) {
        return 1;
    }
    return compareOrder_3(this.element, other);
}
;
_.copy = function copy(out, copyOptions){
    out.attribute(this.qname, this.value_0);
}
;
_.generateId = function generateId(buffer){
    appendSequentialKey(this.element, buffer, true);
    $append_3(buffer, '' + getHashCode_0(this.name_0));
}
;
_.getBaseURI = function getBaseURI(){
    return $getBaseURI(this.element);
}
;
_.getDeclaredNamespaces = function getDeclaredNamespaces(buffer){
    return $clinit_NamespaceBinding() , EMPTY_ARRAY;
}
;
_.getDisplayName = function getDisplayName(){
    return this.prefix_0.length == 0?this.name_0:this.prefix_0 + ':' + this.name_0;
}
;
_.getDocumentNumber = function getDocumentNumber(){
    return this.element.getDocumentNumber();
}
;
_.getDocumentRoot = function getDocumentRoot(){
    return this.element.docWrapper;
}
;
_.getLocalPart = function getLocalPart(){
    return this.name_0;
}
;
_.getNodeKind = function getNodeKind(){
    return 2;
}
;
_.getNodeName = function getNodeName(){
    return this.qname;
}
;
_.getParent = function getParent(){
    return this.element;
}
;
_.getRoot = function getRoot(){
    return this.element.docWrapper;
}
;
_.getSiblingPosition = function getSiblingPosition(){
    return 1;
}
;
_.getStringValue = function getStringValue(){
    return this.value_0;
}
;
_.getSystemId = function getSystemId(){
    return this.element.docWrapper.baseURI;
}
;
_.getTypedValue = function getTypedValue(){
    return new UntypedAtomicValue(this.value_0);
}
;
_.getURI = function getURI(){
    return this.uri_0;
}
;
_.hasChildNodes_0 = function hasChildNodes(){
    return false;
}
;
_.isSameNodeInfo = function isSameNodeInfo(other){
    return instanceOf(other, 121) && this.element.isSameNodeInfo(dynamicCast(other, 121).element) && $equals_5(this.name_0, dynamicCast(other, 121).name_0);
}
;
_.iterateAxis = function iterateAxis(axisNumber, nodeTest){
    return newAxisFilter($iterateAxis0(this, axisNumber), nodeTest);
}
;
var Lclient_net_sf_saxon_ce_dom_HTMLAttributeNode_2_classLit = createForClass('client.net.sf.saxon.ce.dom', 'HTMLAttributeNode', 121, Lclient_net_sf_saxon_ce_value_AbstractNode_2_classLit);
function $getAltAttribute(this$static, name_0){
    var value_0;
    value_0 = $getAttribute_0(this$static.node, name_0);
    $equals_5(value_0, '[object]') && $equals_5(name_0, 'style')?(value_0 = $getStyleAttribute(this$static.node)):$equals_5(name_0, 'class') && $equals_5(value_0, '')?(value_0 = $getAttribute_0(this$static.node, 'className')):$equals_5(name_0, 'for') && $equals_5(value_0, '') && (value_0 = $getAttribute_0(this$static.node, 'htmlFor'));
    return value_0;
}

function $getAltAttributes(this$static){
    var attName, attValue, awaitingXmlnsUri, ch_0, count, elem, endOfTag, hNode, i_0, ieVersion, isName, m, nValue, name_0, name$iterator, noPrefix, nodeArray, nodeNames, nonQ, offset, offsetChar, prefix, quotesPattern, sb, start_0, value_0, x_0, xmlnsNames, xmlnsUris, y_0;
    if (this$static.attributeList != null) {
        return this$static.attributeList;
    }
    elem = this$static.node;
    ieVersion = (ieVersion_0 == 0 && (ieVersion_0 = getNativeIEVersion()) , ieVersion_0);
    if (ieVersion < 0 || ieVersion > 8) {
        return $getMainAttributes(this$static);
    }
    value_0 = elem.outerHTML;
    if (value_0 == null) {
        return $getMainAttributes(this$static);
    }
    nodeNames = new ArrayList;
    xmlnsNames = new ArrayList;
    xmlnsUris = new ArrayList;
    this$static.namespaceBindings = new ArrayList;
    quotesPattern = new RegExp('(?:"(.|\n)*?"|\'(.|\n)*?\'|[^\'"]+|[\'"])', 'gm');
    m = quotesPattern.exec(value_0);
    i_0 = 0;
    awaitingXmlnsUri = false;
    while (quotesPattern.lastIndex > 0) {
        if (i_0 % 2 == 0) {
            nonQ = m[0];
            sb = new StringBuffer;
            endOfTag = false;
            isName = i_0 != 0;
            start_0 = 0;
            i_0 == 0 && (start_0 = $indexOf_3(nonQ, fromCodePoint(60)) + 1);
            for (x_0 = start_0; x_0 < nonQ.length; x_0++) {
                offsetChar = $skipWhitespace(x_0, nonQ);
                offset = offsetChar[0];
                offset > 0 && !isName && (isName = true);
                ch_0 = offsetChar[1] & $intern_2;
                if (ch_0 == 0)
                    break;
                if (ch_0 == 61) {
                    isName = false;
                    attName = sb.string;
                    if ($equals_5(attName.substr(0, 5), 'xmlns')) {
                        setCheck(xmlnsNames.array, xmlnsNames.array.length, attName);
                        awaitingXmlnsUri = true;
                    }
                    else if (attName.length != 0) {
                        setCheck(nodeNames.array, nodeNames.array.length, attName);
                        awaitingXmlnsUri = false;
                    }
                    sb = new StringBuffer;
                    continue;
                }
                else if (ch_0 == 62) {
                    endOfTag = true;
                    break;
                }
                isName && (sb.string += charToString(ch_0) , sb);
                x_0 += offset;
            }
            if (endOfTag) {
                break;
            }
        }
        else 
            awaitingXmlnsUri && $add_16(xmlnsUris, m[0]);
        ++i_0;
        m = quotesPattern.exec(value_0);
    }
    nodeArray = initDim(Lclient_net_sf_saxon_ce_dom_HTMLAttributeNode_2_classLit, $intern_3, 121, nodeNames.array.length, 0, 1);
    for (y_0 = 0; y_0 < nodeNames.array.length; y_0++) {
        name_0 = (checkElementIndex(y_0, nodeNames.array.length) , dynamicCastToString(nodeNames.array[y_0]));
        nValue = $getAltAttribute(this$static, name_0);
        hNode = new HTMLAttributeNode(this$static, name_0, '', '', nValue);
        nodeArray[y_0] = hNode;
    }
    count = 0;
    for (name$iterator = new AbstractList$IteratorImpl(xmlnsNames); name$iterator.i < name$iterator.this$01_0.size_1();) {
        name_0 = (checkCriticalElement(name$iterator.i < name$iterator.this$01_0.size_1()) , dynamicCastToString(name$iterator.this$01_0.get_1(name$iterator.last = name$iterator.i++)));
        noPrefix = name_0.length == 5;
        prefix = noPrefix?'':__substr(name_0, 6, name_0.length - 6);
        attValue = noPrefix?$getAltAttribute(this$static, name_0):$trimEdgeChars((checkElementIndex(count, xmlnsUris.array.length) , dynamicCastToString(xmlnsUris.array[count])));
        $add_16(this$static.namespaceBindings, new NamespaceBinding(prefix, attValue));
        ++count;
    }
    this$static.attributeList = nodeArray;
    this$static.attributeNames = nodeNames;
    return nodeArray;
}

function $getAttributeNames(this$static){
    if (this$static.attributeNames) {
        return this$static.attributeNames;
    }
    else {
        $getAltAttributes(this$static);
        return this$static.attributeNames;
    }
}

function $getBaseURI(this$static){
    var n, xmlbase;
    n = this$static;
    this$static.nodeKind != 1 && (n = $getParent(this$static));
    while (n) {
        xmlbase = getAttributeValue(n, 'http://www.w3.org/XML/1998/namespace', 'base');
            if (xmlbase != null) {
                return xmlbase;
            }
            n = n.getParent();
    }
    return this$static.docWrapper.baseURI;
}

function $getDomCorrectedName(this$static, name_0){
    var ns;
    if (name_0 == null) {
        return null;
    }
    switch (this$static.docWrapper.htmlType) {
        case 3:
            return name_0;
        case 1:
            return name_0.toLowerCase();
        case 0:
            ns = $getNodeURI(this$static, this$static.node, false);
            return ns != null && $equals_5(ns, 'http://www.w3.org/1999/xhtml')?name_0.toLowerCase():name_0;
                default:return $matches_1(name_0, '[A-Z]+')?name_0.toLowerCase():name_0;
    }
}

function $getLocalName(node){
    if (node.localName) {
        return node.localName;
    }
    else {
        var fullname = node.nodeName;
        var name_0;
        var pos = fullname.indexOf(':');
        if (pos > -1) {
            return fullname.substring(pos + 1);
        }
        else {
            return fullname;
        }
    }
}

function $getLocalPart(this$static){
    switch (this$static.nodeKind) {
        case 1:
    case 2:
        return $getDomCorrectedName(this$static, $getLocalName(this$static.node));
    case 7:
        return this$static.node.nodeName;
    default:return null;
    }
}

function $getMainAttributes(this$static){
    var attNode, attributes, getNamespaces, i_0, len, local, name_0, nodeAtts, nodeNames, nodes, pfx, uri_0, val;
    attributes = this$static.node.attributes;
    nodeNames = new ArrayList;
    len = attributes.length;
    nodeAtts = new ArrayList;
    this$static.namespaceBindings = new ArrayList;
    getNamespaces = this$static.docWrapper.htmlType != 1;
    for (i_0 = 0; i_0 < len; i_0++) {
        attNode = attributes[i_0];
        name_0 = attNode.nodeName;
        val = '';
        try {
            val = getValue(attNode);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 19)) {
                getTypeOfNodeValue(attNode);
            }
            else 
                throw unwrap($e0);
        }
        if ($equals_5(name_0.substr(0, 6), 'xmlns:')) {
            $add_16(this$static.namespaceBindings, new NamespaceBinding(__substr(name_0, 6, name_0.length - 6), val));
        }
        else if ($equals_5(name_0, 'xmlns')) {
            $add_16(this$static.namespaceBindings, new NamespaceBinding('', val));
        }
        else {
            if (getNamespaces || $indexOf_3(name_0, fromCodePoint(58)) > -1) {
                pfx = getNodePrefix(attNode);
                uri_0 = $getNodeURI(this$static, attNode, true);
                local = $getLocalName(attNode);
                uri_0 == null && (uri_0 = '');
                $add_16(nodeAtts, new HTMLAttributeNode(this$static, local, pfx, uri_0, val));
            }
            else {
                $add_16(nodeAtts, new HTMLAttributeNode(this$static, name_0, '', '', val));
            }
            setCheck(nodeNames.array, nodeNames.array.length, name_0);
        }
    }
    nodes = initDim(Lclient_net_sf_saxon_ce_dom_HTMLAttributeNode_2_classLit, $intern_3, 121, nodeAtts.array.length, 0, 1);
    $toArray(nodeAtts, nodes);
    this$static.attributeList = nodes;
    this$static.attributeNames = nodeNames;
    return nodes;
}

function $getNodeName(this$static){
    var nodeKind, prefix;
    if (this$static.qName) {
        return this$static.qName;
    }
    nodeKind = this$static.nodeKind;
    if (nodeKind == 1 || nodeKind == 2) {
        prefix = getNodePrefix(this$static.node);
        prefix == null && (prefix = '');
        this$static.qName = new StructuredQName(prefix, $getNodeURI(this$static, this$static.node, false), $getLocalPart(this$static));
        return this$static.qName;
    }
    else if (nodeKind == 7) {
        this$static.qName = new StructuredQName('', '', $getLocalPart(this$static));
        return this$static.qName;
    }
    else {
        return null;
    }
}

function $getNodeURI(this$static, lNode, isLocalAttribute){
    var isHTML, uri_0;
    if (isLocalAttribute || this$static.nodeKind == 1)
        ;
    else if (this$static.nodeKind == 2) {
        $getParent(this$static);
    }
    else {
        return '';
    }
    uri_0 = getNodeNamespace(lNode);
    isHTML = this$static.docWrapper.htmlType == 1;
    return uri_0 == null?'':isHTML && $equals_5(uri_0, 'http://www.w3.org/1999/xhtml')?'':uri_0;
}

function $getParent(this$static){
    var p_0;
    if (!this$static.parent_0) {
        switch (this$static.nodeKind) {
            case 2:
                throw new IllegalStateException_0('parent of attribute node is unknown');
            default:p_0 = this$static.node.parentNode;
                if (!p_0) {
                    return null;
                }
                else {
                    this$static.parent_0 = $makeWrapper(p_0, this$static.docWrapper);
                }

        }
    }
    return this$static.parent_0;
}

function $getSiblingPosition(this$static){
    var fp, iter, ix, n, start_0;
    if (this$static.index_0 == -1) {
        switch (this$static.nodeKind) {
            case 1:
        case 3:
    case 8:
case 7:
    ix = 0;
    start_0 = this$static.node;
    while (true) {
        start_0 = start_0.previousSibling;
        if (!start_0) {
            this$static.index_0 = ix;
            return ix;
        }
        ++ix;
    }

case 2:
    ix = 0;
    fp = $getNodeName(this$static);
    iter = $iterateAxis_0(this$static.parent_0, 2, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
    while (true) {
        n = dynamicCast(iter.next_0(), 7);
        if (!n || $equals_0(n.getNodeName(), fp)) {
            this$static.index_0 = ix;
            return ix;
        }
        ++ix;
    }

case 13:
    ix = 0;
    fp = $getNodeName(this$static);
    iter = $iterateAxis_0(this$static.parent_0, 8, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
    while (true) {
        n = dynamicCast(iter.next_0(), 7);
        if (!n || $equals_0(n.getNodeName(), fp)) {
            this$static.index_0 = ix;
            return ix;
        }
        ++ix;
    }

default:this$static.index_0 = 0;
    return this$static.index_0;
        }
    }
    return this$static.index_0;
}

function $getStringValue(this$static){
    var children1, fsb, i_0, sb1, textNode;
    switch (this$static.nodeKind) {
        case 9:
    case 1:
        children1 = this$static.node.childNodes;
        sb1 = new StringBuffer_0;
        expandStringValue(children1, sb1);
        return sb1.string;
    case 2:
        return emptyIfNull(getValue(this$static.node));
    case 3:
        if (this$static.span_0 == 1) {
            return emptyIfNull(getValue(this$static.node));
        }
        else {
            fsb = new FastStringBuffer(64);
            textNode = this$static.node;
            for (i_0 = 0; i_0 < this$static.span_0; i_0++) {
                $append_3(fsb, emptyIfNull(getValue(textNode)));
                textNode = textNode.nextSibling;
            }
            return $condense(fsb) , valueOf_3(fsb.array, 0, fsb.used);
        }

    case 8:
case 7:
    return emptyIfNull(getValue(this$static.node));
default:return '';
    }
}

function $getStyleAttribute(elem){
    var i_0, m, ms, nonQ, quotesPattern, styleContent, styleFound, stylePattern, value_0;
    value_0 = elem.outerHTML;
    quotesPattern = new RegExp('(?:".*?"|\'.*?\'|[^\'"]+|[\'"])', 'g');
    stylePattern = new RegExp('[\\s]style\\s*=');
    m = quotesPattern.exec(value_0);
    i_0 = 0;
    styleFound = false;
    styleContent = '';
    while (quotesPattern.lastIndex > 0) {
        if (i_0 % 2 == 0) {
            nonQ = m[0];
            ms = stylePattern.exec(nonQ);
            styleFound = ms.length > 0;
            if (!styleFound && $indexOf_3(nonQ, fromCodePoint(62)) > -1) {
                break;
            }
        }
        else if (styleFound) {
            styleContent = m[0];
            styleContent = $substring_1(styleContent, 1, styleContent.length - 1);
            break;
        }
        ++i_0;
        m = quotesPattern.exec(value_0);
    }
    return styleContent;
}

function $iterateAxis(this$static, axisNumber){
    var nodes;
    switch (axisNumber) {
        case 0:
            if (this$static.nodeKind == 9) {
                return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
            }

            return getAncestorIterator(this$static, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7), false);
        case 1:
            if (this$static.nodeKind == 9) {
                return new SingletonIterator(this$static);
            }

            return getAncestorIterator(this$static, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7), true);
        case 2:
            if (this$static.nodeKind != 1) {
                return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
            }

            nodes = $getAltAttributes(this$static);
            return new ArrayIterator(nodes);
        case 3:
            return this$static.nodeKind != 2 && this$static.node.hasChildNodes()?newEmptyTextFilter(new HTMLNodeWrapper$ChildEnumeration(this$static, this$static, true, true, false)):($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1);
        case 4:
            return this$static.nodeKind != 2 && this$static.node.hasChildNodes()?new Navigator$DescendantEnumeration(this$static, false, true):($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1);
        case 5:
            return new Navigator$DescendantEnumeration(this$static, true, true);
        case 6:
            return new Navigator$FollowingEnumeration(this$static);
        case 7:
            switch (this$static.nodeKind) {
                case 9:
            case 2:
        case 13:
            return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
        default:return newEmptyTextFilter(new HTMLNodeWrapper$ChildEnumeration(this$static, this$static, false, true, false));
            }

        case 8:
            if (this$static.nodeKind != 1) {
                return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
            }

            return makeIterator(this$static, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
        case 9:
            $getParent(this$static);
            return makeIterator_0(this$static.parent_0);
        case 10:
            return new Navigator$PrecedingEnumeration(this$static, false);
        case 11:
            switch (this$static.nodeKind) {
                case 9:
            case 2:
        case 13:
            return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
        default:return newEmptyTextFilter(new HTMLNodeWrapper$ChildEnumeration(this$static, this$static, false, false, false));
            }

        case 12:
            return new SingletonIterator(this$static);
        default:throw new IllegalArgumentException;
    }
}

function $iterateAxis_0(this$static, axisNumber, nodeTest){
    var fp, name_0, uri_0, value_0;
    if (axisNumber == 3 && nodeTest.getRequiredNodeKind() == 1) {
        return this$static.nodeKind != 2 && this$static.node.hasChildNodes()?newAxisFilter(new HTMLNodeWrapper$ChildEnumeration(this$static, this$static, true, true, true), nodeTest):($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1);
    }
    if (this$static.docWrapper.htmlType != 3 && axisNumber == 2 && instanceOf(nodeTest, 60)) {
        if (this$static.nodeKind == 1) {
            fp = dynamicCast(nodeTest, 60).qName;
            uri_0 = $getNamespaceURI(fp);
            name_0 = valueOf_3(fp.content_0, fp.localNameStart, fp.prefixStart - fp.localNameStart);
            if ($equals_5('http://saxonica.com/ns/html-property', uri_0)) {
                value_0 = $getPropertyString(this$static.node, name_0);
            }
            else if ($equals_5('http://saxonica.com/ns/html-style-property', uri_0)) {
                name_0.length > 1 && name_0.charCodeAt(0) == 95 && name_0.charCodeAt(1) == 45 && (name_0 = __substr(name_0, 1, name_0.length - 1));
                name_0 = getCamelCaseName(name_0);
                value_0 = this$static.node.style[name_0];
            }
            else {
                value_0 = $getAltAttribute(this$static, name_0);
                if (this$static.docWrapper.htmlType == 0) {
                    return newAxisFilter($iterateAxis(this$static, 2), nodeTest);
                }
            }
            return value_0 == null || value_0.length == 0?$indexOf_6($getAttributeNames(this$static), name_0, 0) != -1?makeIterator_0(new HTMLAttributeNode(this$static, name_0, '', '', '')):($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1):makeIterator_0(new HTMLAttributeNode(this$static, name_0, '', '', value_0));
        }
        else {
            return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
        }
    }
    return newAxisFilter($iterateAxis(this$static, axisNumber), nodeTest);
}

function $makeWrapper(node, docWrapper){
    if (!node || !docWrapper) {
        throw new NullPointerException;
    }
    return $makeWrapper_0(node, docWrapper, null, -1);
}

function $makeWrapper_0(node, docWrapper, parent_0, index_0){
    var wrapper;
    switch (node.nodeType) {
        case 9:
    case 11:
        return docWrapper;
    case 1:
        wrapper = new HTMLNodeWrapper(node, parent_0, index_0);
        wrapper.nodeKind = 1;
        break;
    case 2:
        wrapper = new HTMLNodeWrapper(node, parent_0, index_0);
        wrapper.nodeKind = 2;
        break;
    case 4:
case 3:
    wrapper = new HTMLNodeWrapper(node, parent_0, index_0);
    wrapper.nodeKind = 3;
    break;
case 8:
    wrapper = new HTMLNodeWrapper(node, parent_0, index_0);
    wrapper.nodeKind = 8;
    break;
case 7:
    wrapper = new HTMLNodeWrapper(node, parent_0, index_0);
    wrapper.nodeKind = 7;
    break;
default:throw new IllegalArgumentException_0('Unsupported node type in DOM! ' + node.nodeType + ' instance ' + toStringSimple(node));
    }
    wrapper.docWrapper = docWrapper;
    return wrapper;
}

function $skipWhitespace(pos, value_0){
    var ch_0, isWhitespace, offset;
    offset = 0;
    ch_0 = 0;
    while (true) {
        ch_0 = value_0.charCodeAt(pos + offset);
        isWhitespace = ch_0 == 32 || ch_0 == 13 || ch_0 == 10 || ch_0 == 9;
        if (!isWhitespace) {
            break;
        }
        ++offset;
        if (pos + offset >= value_0.length) {
            ch_0 = 0;
            break;
        }
    }
    return initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [offset, ch_0]);
}

function $trimEdgeChars(name_0){
    return $substring_1(name_0, 1, name_0.length - 1);
}

function HTMLNodeWrapper(node, parent_0, index_0){
    this.node = node;
    this.parent_0 = parent_0;
    this.index_0 = index_0;
}

function emptyIfNull(s){
    return s == null?'':s;
}

function expandStringValue(list, sb){
    var child, i_0, len;
    len = list.length;
    for (i_0 = 0; i_0 < len; i_0++) {
        child = list[i_0];
        switch (child.nodeType) {
            case 1:
                expandStringValue(child.childNodes, sb);
                break;
            case 8:
        case 7:
            break;
        default:$append_7(sb, getValue(child));
        }
    }
}

function getNodeNamespace(node){
    if (node.namespaceURI) {
        return node.namespaceURI;
    }
    else {
        return null;
    }
}

function getNodePrefix(node){
    if (node.prefix) {
        return node.prefix;
    }
    else {
        return '';
    }
}

function getTypeOfNodeValue(n){
    if (n.nodeValue) {
        return n.nodeValue + ' nv';
    }
    else {
        return n.value + ' v';
    }
}

function getValue(n){
    var v;
    n.nodeValue?(v = n.nodeValue):(v = n.value);
    if (v == undefined) {
        return v;
    }
    return String(v);
}

defineClass(94, 23, {94:1, 15:1, 7:1, 14:1, 23:1}, HTMLNodeWrapper);
_.compareOrder = function compareOrder_0(other){
    return compareOrder_3(this, other);
}
;
_.copy = function copy_0(out, copyOptions){
    copy_12(this, out, copyOptions);
}
;
_.equals$ = function equals_1(other){
    return instanceOf(other, 7) && this.isSameNodeInfo(dynamicCast(other, 7));
}
;
_.generateId = function generateId_0(buffer){
    appendSequentialKey(this, buffer, true);
}
;
_.getBaseURI = function getBaseURI_0(){
    return $getBaseURI(this);
}
;
_.getDeclaredNamespaces = function getDeclaredNamespaces_0(buffer){
    var bindings;
    if (this.nodeKind == 1) {
        !this.namespaceBindings && $getAltAttributes(this);
        bindings = initDim(Lclient_net_sf_saxon_ce_om_NamespaceBinding_2_classLit, $intern_5, 53, this.namespaceBindings.array.length, 0, 1);
        $toArray(this.namespaceBindings, bindings);
        return bindings;
    }
    else {
        return null;
    }
}
;
_.getDisplayName = function getDisplayName_0(){
    switch (this.nodeKind) {
        case 1:
    case 2:
        return $getDomCorrectedName(this, this.node.nodeName);
    case 7:
        return this.node.nodeName;
    default:return '';
    }
}
;
_.getDocumentNumber = function getDocumentNumber_0(){
    return this.docWrapper.documentNumber;
}
;
_.getDocumentRoot = function getDocumentRoot_0(){
    return this.docWrapper;
}
;
_.getLocalPart = function getLocalPart_0(){
    return $getLocalPart(this);
}
;
_.getNodeKind = function getNodeKind_0(){
    return this.nodeKind;
}
;
_.getNodeName = function getNodeName_0(){
    return $getNodeName(this);
}
;
_.getParent = function getParent_0(){
    return $getParent(this);
}
;
_.getRoot = function getRoot_0(){
    return this.docWrapper;
}
;
_.getSiblingPosition = function getSiblingPosition_0(){
    return $getSiblingPosition(this);
}
;
_.getStringValue = function getStringValue_0(){
    return $getStringValue(this);
}
;
_.getSystemId = function getSystemId_0(){
    return this.docWrapper.baseURI;
}
;
_.getTypedValue = function getTypedValue_0(){
    switch (this.nodeKind) {
        case 8:
    case 7:
        return new StringValue_0($getStringValue(this));
    default:return new UntypedAtomicValue($getStringValue(this));
    }
}
;
_.getURI = function getURI_0(){
    return $getNodeURI(this, this.node, false);
}
;
_.hasChildNodes_0 = function hasChildNodes_0(){
    return this.nodeKind != 2 && this.node.hasChildNodes();
}
;
_.hashCode$ = function hashCode_2(){
    var buffer;
    buffer = new FastStringBuffer(64);
    appendSequentialKey(this, buffer, true);
    return getHashCode_0(($condense(buffer) , valueOf_3(buffer.array, 0, buffer.used)));
}
;
_.isSameNodeInfo = function isSameNodeInfo_0(other){
    var ow;
    if (!instanceOf(other, 94)) {
        return false;
    }
    ow = dynamicCast(other, 94);
    switch (this.nodeKind) {
        case 1:
            return ow.nodeKind == 1 && $equals_5($getLocalPart(this), $getLocalPart(ow)) && $equals_5($getNodeURI(this, this.node, false), $getNodeURI(ow, ow.node, false)) && $getSiblingPosition(this) == $getSiblingPosition(ow) && $getParent(this).isSameNodeInfo($getParent(ow));
        default:return ow.nodeKind == this.nodeKind && $equals_5($getStringValue(this), $getStringValue(ow)) && $getSiblingPosition(this) == $getSiblingPosition(ow) && $getParent(this).isSameNodeInfo($getParent(ow));
    }
}
;
_.iterateAxis = function iterateAxis_0(axisNumber, nodeTest){
    return $iterateAxis_0(this, axisNumber, nodeTest);
}
;
_.attributeList = null;
_.attributeNames = null;
_.index_0 = 0;
_.namespaceBindings = null;
_.nodeKind = 0;
_.span_0 = 1;
var Lclient_net_sf_saxon_ce_dom_HTMLNodeWrapper_2_classLit = createForClass('client.net.sf.saxon.ce.dom', 'HTMLNodeWrapper', 94, Lclient_net_sf_saxon_ce_value_AbstractNode_2_classLit);
function $getBaseURI_0(doc){
    if (doc.documentURI) {
        return doc.doumentURI;
    }
    else {
        return null;
    }
}

function $wrap(this$static, node){
    var doc;
    if (node == this$static.node) {
        return this$static;
    }
    doc = node.ownerDocument;
    if (doc == this$static.node) {
        return $makeWrapper(node, this$static);
    }
    else {
        throw new IllegalArgumentException_0('XMLDocumentWrapper#wrap: supplied node does not belong to the wrapped DOM document');
    }
}

function HTMLDocumentWrapper(doc, baseURI, config, newDocType){
    var iter, n, nBinding, nBinding$index, nBinding$max, nb, rawLocal;
    HTMLNodeWrapper.call(this, doc, null, 0);
    this.nodeKind = 9;
    if ((baseURI == null || baseURI == '') && doc.nodeType == 9) {
        baseURI = doc.URL;
        this.baseURI = baseURI != null && baseURI != ''?baseURI:$getBaseURI_0(doc);
    }
    else {
        this.baseURI = baseURI;
    }
    this.isHttpRequested = newDocType == 3;
    this.docWrapper = this;
    this.documentNumber = config.nextDocumentNumber++;
    if (newDocType != 2) {
        this.htmlType = newDocType;
        return;
    }
    try {
        iter = $iterateAxis_0(this, 3, ($clinit_NodeKindTest() , ELEMENT));
        while (true) {
            n = dynamicCast(iter.next_0(), 7);
            if (!n) {
                break;
            }
            else {
                rawLocal = $getLocalName(dynamicCast(n, 94).node).toLowerCase();
                if ($equals_5(rawLocal, 'html')) {
                    nb = n.getDeclaredNamespaces(null);
                    this.htmlType = 1;
                    for (nBinding$index = 0 , nBinding$max = nb.length; nBinding$index < nBinding$max; ++nBinding$index) {
                        nBinding = nb[nBinding$index];
                        if ($equals_5(nBinding.uri_0, 'http://www.w3.org/1999/xhtml')) {
                            this.htmlType = 0;
                            break;
                        }
                    }
                }
                else {
                    this.htmlType = 3;
                }
                break;
            }
        }
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (!instanceOf($e0, 19))
            throw unwrap($e0);
    }
}

defineClass(156, 94, {156:1, 94:1, 109:1, 15:1, 7:1, 14:1, 23:1}, HTMLDocumentWrapper);
_.getDocumentNumber = function getDocumentNumber_1(){
    return this.documentNumber;
}
;
_.isSameNodeInfo = function isSameNodeInfo_1(other){
    return instanceOf(other, 156) && this.node == dynamicCast(other, 156).node;
}
;
_.selectID = function selectID(id_0){
    var doc, el, iter, node, testNode, useNS, xmlId;
    doc = this.node;
    if (this.isHttpRequested) {
        if (this.idIndex) {
            return dynamicCast($getStringValue_1(this.idIndex, id_0), 7);
        }
        else {
            this.idIndex = new HashMap;
            iter = $iterateAxis_0(this, 4, ($clinit_NodeKindTest() , ELEMENT));
            useNS = !!this.node.getAttributeNS;
            while (true) {
                node = dynamicCast(iter.next_0(), 7);
                if (!node) {
                    break;
                }
                testNode = dynamicCast(node, 94).node;
                xmlId = useNS?testNode.getAttributeNS('http://www.w3.org/XML/1998/namespace', 'id'):testNode.getAttribute('xml:id');
                    xmlId != null && !!xmlId.length && $putStringValue(this.idIndex, xmlId, dynamicCast(node, 94));
            }
            return dynamicCast($getStringValue_1(this.idIndex, id_0), 7);
        }
    }
    else {
        el = doc.getElementById(id_0);
        if (!el) {
            return null;
        }
        return $wrap(this, el);
    }
}
;
_.setUserData = function setUserData(key, value_0){
    !this.userData && (this.userData = new HashMap_0(4));
    !value_0?$removeStringValue(this.userData, key):$putStringValue(this.userData, key, value_0);
}
;
_.documentNumber = 0;
_.htmlType = 2;
_.isHttpRequested = false;
var Lclient_net_sf_saxon_ce_dom_HTMLDocumentWrapper_2_classLit = createForClass('client.net.sf.saxon.ce.dom', 'HTMLDocumentWrapper', 156, Lclient_net_sf_saxon_ce_dom_HTMLNodeWrapper_2_classLit);
function $skipFollowingTextNodes(this$static){
    var count, kind, len, node, pos;
    count = 0;
    pos = this$static.ix;
    len = this$static.childNodesLength;
    while (pos < len) {
        node = this$static.childNodes_0[pos];
        kind = node.nodeType;
        if (kind == 3) {
            ++pos;
            ++count;
        }
        else {
            break;
        }
    }
    return count == 0?1:count;
}

function $skipPrecedingTextNodes(this$static){
    var count, kind, node;
    count = 0;
    while (this$static.ix >= count) {
        node = this$static.childNodes_0[this$static.ix - count];
        kind = node.nodeType;
        if (kind == 3) {
            ++count;
        }
        else {
            break;
        }
    }
    return count == 0?1:count;
}

function HTMLNodeWrapper$ChildEnumeration(this$0, start_0, downwards, forwards, elementsOnly){
    this.this$01 = this$0;
    this.start_0 = start_0;
    this.downwards = downwards;
    this.forwards = forwards;
    this.elementsOnly = elementsOnly;
    this.currentSpan = 1;
    downwards?(this.commonParent = start_0):(this.commonParent = $getParent(start_0));
    this.childNodes_0 = this.commonParent.node.childNodes;
    this.childNodesLength = this.childNodes_0.length;
    if (downwards) {
        this.currentSpan = 1;
        this.ix = forwards?-1:this.childNodesLength;
    }
    else {
        this.ix = $getSiblingPosition(start_0);
        this.currentSpan = start_0.span_0;
    }
}

defineClass(241, 1, $intern_6, HTMLNodeWrapper$ChildEnumeration);
_.getAnother = function getAnother(){
    return new HTMLNodeWrapper$ChildEnumeration(this.this$01, this.start_0, this.downwards, this.forwards, this.elementsOnly);
}
;
_.getAnother_0 = function getAnother_0(){
    return new HTMLNodeWrapper$ChildEnumeration(this.this$01, this.start_0, this.downwards, this.forwards, this.elementsOnly);
}
;
_.next_0 = function next_0(){
    var currentDomNode, wrapper;
    while (true) {
        if (this.forwards) {
            this.ix += this.currentSpan;
            if (this.ix >= this.childNodesLength) {
                return null;
            }
            else {
                this.currentSpan = $skipFollowingTextNodes(this);
                currentDomNode = this.childNodes_0[this.ix];
                switch (currentDomNode.nodeType) {
                    case 7:
                        if (this.elementsOnly || $equalsIgnoreCase('XML', currentDomNode.nodeName)) {
                            continue;
                        }
                        else {
                            break;
                        }

                    case 10:
                        continue;
                    case 1:
                        break;
                    default:if (this.elementsOnly) {
                        continue;
                    }
                    else {
                        break;
                    }

                }
                wrapper = $makeWrapper_0(currentDomNode, this.this$01.docWrapper, this.commonParent, this.ix);
                wrapper.span_0 = this.currentSpan;
                return wrapper;
            }
        }
        else {
            --this.ix;
            if (this.ix < 0) {
                return null;
            }
            else {
                this.currentSpan = $skipPrecedingTextNodes(this);
                this.ix -= this.currentSpan - 1;
                currentDomNode = this.childNodes_0[this.ix];
                switch (currentDomNode.nodeType) {
                    case 7:
                        if (this.elementsOnly || $equalsIgnoreCase('XML', currentDomNode.nodeName)) {
                            continue;
                        }
                        else {
                            break;
                        }

                    case 10:
                        continue;
                    case 1:
                        break;
                    default:if (this.elementsOnly) {
                        continue;
                    }
                    else {
                        break;
                    }

                }
                wrapper = $makeWrapper_0(currentDomNode, this.this$01.docWrapper, this.commonParent, this.ix);
                wrapper.span_0 = this.currentSpan;
                return wrapper;
            }
        }
    }
}
;
_.childNodesLength = 0;
_.currentSpan = 0;
_.downwards = false;
_.elementsOnly = false;
_.forwards = false;
_.ix = 0;
var Lclient_net_sf_saxon_ce_dom_HTMLNodeWrapper$ChildEnumeration_2_classLit = createForClass('client.net.sf.saxon.ce.dom', 'HTMLNodeWrapper/ChildEnumeration', 241, Ljava_lang_Object_2_classLit);
function $clinit_HTMLWriter(){
    $clinit_HTMLWriter = emptyMethod;
    logger_1 = (new LoggerImplRegular , $ensureLogger(getLogManager(), 'XSLT20Processor'));
}

function $addNode(this$static, newNode, nodeType){
    try {
        $appendChild(this$static.currentNode, newNode);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            throw new XPathException_0('DOM error appending ' + nodeType + ' node to node with name: ' + this$static.currentNode.nodeName);
        }
        else 
            throw unwrap($e0);
    }
}

function $appendChild(parent_0, newChild){
    return parent_0.appendChild(newChild);
}

function $createComment(doc, data_0){
    return doc.createComment(data_0);
}

function $createElementNS(doc, ns, name_0){
    if (doc.createElementNS) {
        return doc.createElementNS(ns, name_0);
    }
    return null;
}

function $createProcessingInstruction(doc, target, data_0){
    return doc.createProcessingInstruction(target, data_0);
}

function $setNode(this$static, node){
    var cmd;
    if (!node) {
        return;
    }
    this$static.currentNode = node;
    node.nodeType == 9?(this$static.document_0 = node):(this$static.document_0 = this$static.currentNode.ownerDocument);
    if (this$static.mode == 0) {
        cmd = this$static.pipe.controller.commandType;
        this$static.mode = cmd == ($clinit_Controller$APIcommand() , TRANSFORM_TO_DOCUMENT) || cmd == TRANSFORM_TO_FRAGMENT?1:2;
    }
}

function HTMLWriter(){
    $clinit_HTMLWriter();
}

function addNamespace(element, prefix, uri_0){
    var attName;
    attName = !prefix.length?'xmlns':'xmlns:' + prefix;
    $setAttribute(element, attName, uri_0);
}

function getCamelCaseName(prop){
    $clinit_HTMLWriter();
    var h, p_0;
    while (prop.indexOf('-') != -1) {
        h = $indexOf_3(prop, fromCodePoint(45));
        if (h > 0) {
            p_0 = prop.substr(0, h) + charToString(toUpperCase(prop.charCodeAt(h + 1)));
            h + 2 < prop.length && (p_0 += __substr(prop, h + 2, prop.length - (h + 2)));
            prop = p_0;
        }
    }
    return prop;
}

function setAttribute(doc, element, name_0, URI, value_0, wMode){
    $clinit_HTMLWriter();
    var nsDeclaraction, prefix;
    name_0 = tableAttributeFix(name_0, wMode);
    if (typeof doc.createNode == 'function' || typeof doc.createAttributeNS == 'function') {
        setAttributeJs(doc, element, name_0, URI, value_0);
    }
    else {
        prefix = $substring_1(name_0, 0, name_0.indexOf(':'));
        nsDeclaraction = prefix.length == 0?'xmlns':'xmlns:' + prefix;
        element.hasAttribute(nsDeclaraction) || addNamespace(element, prefix, URI);
        $setAttribute(element, name_0, value_0);
        setAttributeProps(element, name_0, value_0);
    }
}

function setAttributeJs(doc, element, name_0, URI, value_0){
    var att;
    if (doc.createNode) {
        att = doc.createNode(2, name_0, URI);
        att.value = value_0;
    }
    else {
        att = doc.createAttributeNS(URI, name_0);
        att.nodeValue = value_0;
    }
    element.setAttributeNode(att);
}

function setAttributeProps(element, localName, val){
    $clinit_HTMLWriter();
    ieVersion_0 == 0 && (ieVersion_0 = getNativeIEVersion());
    if (ieVersion_0 > 0 && (ieVersion_0 == 0 && (ieVersion_0 = getNativeIEVersion()) , ieVersion_0 < 9)) {
        if ($equals_5(localName, 'style')) {
            typeof element.style !== 'undefined' && setStyleProperties(element, val);
        }
        else {
            localName = localName == 'class'?'className':localName;
            try {
                typeof element[localName] !== 'undefined' && (element[localName] = val);
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 19)) {
                    $warning_0(logger_1, "Unable to set '" + localName + "' property for element.");
                }
                else 
                    throw unwrap($e0);
            }
        }
    }
}

function setStyleProperties(element, styleAttribute){
    $clinit_HTMLWriter();
    var colon, first, prop, semi, value_0;
    semi = $indexOf_3(styleAttribute, fromCodePoint(59));
    first = semi < 0?styleAttribute:styleAttribute.substr(0, semi);
    colon = $indexOf_3(first, fromCodePoint(58));
    if (colon > 0 && colon < first.length - 1) {
        prop = $trim(first.substr(0, colon));
        prop = getCamelCaseName(prop);
        value_0 = $trim(__substr(first, colon + 1, first.length - (colon + 1)));
        try {
            $setPropertyImpl(element.style, prop, value_0);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (!instanceOf($e0, 119))
                throw unwrap($e0);
        }
    }
    semi > 0 && semi < styleAttribute.length - 2 && setStyleProperties(element, __substr(styleAttribute, semi + 1, styleAttribute.length - (semi + 1)));
}

function tableAttributeFix(name_0, wMode){
    wMode != 1 && (ieVersion_0 == 0 && (ieVersion_0 = getNativeIEVersion()) , ieVersion_0 > 0) && name_0.length > 5 && ($equals_5(name_0, 'rowspan')?(name_0 = 'rowSpan'):$equals_5(name_0, 'colspan')?(name_0 = 'colSpan'):$equals_5(name_0, 'cellpadding')?(name_0 = 'cellPadding'):$equals_5(name_0, 'cellspacing') && (name_0 = 'cellSpacing'));
    return name_0;
}

defineClass(425, 1, {}, HTMLWriter);
_.attribute = function attribute_0(nameCode, value_0){
    var element, fullname, localName, uri_0, val;
    localName = valueOf_3(nameCode.content_0, nameCode.localNameStart, nameCode.prefixStart - nameCode.localNameStart);
    uri_0 = $getNamespaceURI(nameCode);
    val = toString__Ljava_lang_String___devirtual$_0(value_0);
    element = this.currentNode;
    if (this.mode != 1 && $equals_5('http://saxonica.com/ns/html-property', uri_0)) {
        $setPropertyString(element, localName, val);
    }
    else if (this.mode != 1 && $equals_5('http://saxonica.com/ns/html-style-property', uri_0)) {
        localName.length > 1 && localName.charCodeAt(0) == 95 && localName.charCodeAt(1) == 45 && (localName = __substr(localName, 1, localName.length - 1));
        localName = getCamelCaseName(localName);
        $setPropertyImpl(element.style, localName, val);
    }
    else if (uri_0 != null && !!uri_0.length) {
        fullname = $getDisplayName_0(nameCode);
        setAttribute(this.document_0, element, fullname, uri_0, val, this.mode);
    }
    else {
        localName = tableAttributeFix(localName, this.mode);
        $setAttribute(element, localName, val);
        setAttributeProps(element, localName, val);
    }
}
;
_.characters = function characters(chars){
    var text_0;
    if (this.level_0 == 0 && isWhite(chars)) {
        return;
    }
    try {
        text_0 = $createTextNode(this.document_0, toString__Ljava_lang_String___devirtual$_0(chars));
        $appendChild_0(this.currentNode, text_0);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            throw new XPathException_0("DOM error appending text node with value: '" + toString__Ljava_lang_String___devirtual$_0(chars) + "' to node with name: " + this.currentNode.nodeName);
        }
        else 
            throw unwrap($e0);
    }
}
;
_.close_0 = function close_1(){
}
;
_.comment_0 = function comment_0(chars){
    var comment;
    if (this.mode == 1) {
        comment = $createComment(this.document_0, toString__Ljava_lang_String___devirtual$_0(chars));
        $addNode(this, comment, 'comment');
    }
}
;
_.endDocument = function endDocument(){
}
;
_.endElement = function endElement(){
    this.currentNode = this.currentNode.parentNode;
    --this.level_0;
}
;
_.getPipelineConfiguration = function getPipelineConfiguration(){
    return this.pipe;
}
;
_.namespace_0 = function namespace_0(nsBinding, properties){
    var element, prefix, uri_0;
    if (this.mode == 1) {
        prefix = nsBinding.prefix_0;
        uri_0 = nsBinding.uri_0;
        element = this.currentNode;
        $equals_5(uri_0, 'http://www.w3.org/XML/1998/namespace') || addNamespace(element, prefix, uri_0);
    }
}
;
_.open_1 = function open_1(){
}
;
_.processingInstruction = function processingInstruction(target, data_0){
    var pi;
    if (this.mode == 1) {
        pi = $createProcessingInstruction(this.document_0, target, toString__Ljava_lang_String___devirtual$_0(data_0));
        $addNode(this, pi, 'processing-instruction');
    }
}
;
_.setPipelineConfiguration = function setPipelineConfiguration(pipe){
    this.pipe = pipe;
}
;
_.setSystemId = function setSystemId(systemId){
}
;
_.startContent = function startContent(){
}
;
_.startDocument = function startDocument(){
}
;
_.startElement = function startElement(qName, properties){
    var controller, element, err, exc, localName, n, node, nodes, prefix, uri_0, xpe, parent_0;
    localName = valueOf_3(qName.content_0, qName.localNameStart, qName.prefixStart - qName.localNameStart);
    prefix = valueOf_3(qName.content_0, qName.prefixStart, qName.content_0.length - qName.prefixStart);
    uri_0 = $getNamespaceURI(qName);
    element = null;
    uri_0 != null && !!uri_0.length && (this.mode == 1 && !$equals_5(prefix, '')?(element = $createElementNS(this.document_0, uri_0, prefix + ':' + localName)):(element = $createElementNS(this.document_0, uri_0, localName)));
    !element && (element = $createElement(this.document_0, localName));
    controller = this.pipe.controller;
    if (!!controller && controller.commandType == ($clinit_Controller$APIcommand() , UPDATE_HTML) && ($equals_5(localName, 'html') || $equals_5(localName, 'head') || $equals_5(localName, 'body'))) {
        if ($equals_5(localName, 'html')) {
            element = this.document_0.firstChild;
        }
        else {
            element = $getElementsByTagName(this.document_0, localName.toUpperCase())[0];
            nodes = element.childNodes;
            for (n = 0; n < nodes.length; n++) {
                node = nodes[n];
                parent_0 = $getParentElement(node);
                !!parent_0 && parent_0.removeChild(node);
            }
        }
        this.currentNode = element;
        ++this.level_0;
        return;
    }
    try {
        $appendChild_0(this.currentNode, element);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 119)) {
            err = $e0;
            if ($equals_5(uri_0, 'http://saxonica.com/ns/interactiveXSLT')) {
                xpe = new XPathException_0("Error on adding IXSL element to the DOM, the IXSL namespace should be added to the 'extension-element-prefixes' list.");
                throw xpe;
            }
            else {
                throw new XPathException_0(err.getMessage());
            }
        }
        else if (instanceOf($e0, 19)) {
            exc = $e0;
            xpe = new XPathException_0("Error on startElement in HTMLWriter for element '" + localName + "': " + exc.getMessage());
            throw xpe;
        }
        else 
            throw unwrap($e0);
    }
    this.currentNode = element;
    ++this.level_0;
}
;
_.level_0 = 0;
_.mode = 0;
var logger_1;
var Lclient_net_sf_saxon_ce_dom_HTMLWriter_2_classLit = createForClass('client.net.sf.saxon.ce.dom', 'HTMLWriter', 425, Ljava_lang_Object_2_classLit);
function createDocument(baseURI){
    var doc;
    if (document.implementation && document.implementation.createDocument) {
        doc = document.implementation.createDocument('', '', null);
    }
    else {
        try {
            doc = new ActiveXObject('MSXML2.DOMDocument');
        }
        catch (e) {
            doc = new ActiveXObject('Microsoft.XMLDOM');
        }
        doc.preserveWhiteSpace = true;
        try {
            xmlDoc.setProperty && xmlDoc.setProperty('ProhibitDTD', false);
        }
        catch (e) {
        }
    }
    baseURI != null && doc.URL && (doc.URL = baseURI);
    return doc;
}

function makeHTTPRequest(url_0){
    var e;
    try {
        return makeNativeHTTPRequest(url_0);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            e = $e0;
            throw new XPathException_0('error in Saxon.makeHTTPRequest: ' + e.getMessage());
        }
        else 
            throw unwrap($e0);
    }
}

function makeNativeHTTPRequest(url_0){
    typeof XMLHttpRequest == 'undefined' && (XMLHttpRequest = function(){
        return new ActiveXObject('Msxml2.XMLHTTP.6.0');
    }
    );
    var req = new XMLHttpRequest;
    req.open('GET', url_0, false);
    req.send(null);
    var status_0 = req.status;
    if (status_0 == 200 || status_0 == 0) {
        return req.responseText;
    }
    else {
        throw 'HTTP request for ' + url_0 + ' failed with status code: ' + status_0;
    }
}

function parseNativeXML(text_0){
    var xmlDoc_0;
    parser = new DOMParser;
    xmlDoc_0 = parser.parseFromString(text_0, 'text/xml');
    return xmlDoc_0;
}

function parseXML(text_0){
    var e, je;
    try {
        return parseNativeXML(text_0);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 119)) {
            je = $e0;
            throw new XPathException_0('JS error in Saxon.parseXML: ' + je.getMessage());
        }
        else if (instanceOf($e0, 19)) {
            e = $e0;
            throw new XPathException_0('error in Saxon.parseXML: ' + e.getMessage());
        }
        else 
            throw unwrap($e0);
    }
}

function serializeNativeXML(node){
    if (typeof XMLSerializer != 'undefined')
        return (new XMLSerializer).serializeToString(node);
    else 
        return node.xml;
}

function serializeXML(node){
    var e;
    try {
        return serializeNativeXML(node);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            e = $e0;
            throw new XPathException_0('error in Saxon.serializeXML: ' + e.getMessage());
        }
        else 
            throw unwrap($e0);
    }
}

function $setBaseURI(this$static, baseURI){
    this$static.baseURI = baseURI;
}

function $setPipelineConfiguration(this$static, pipe){
    this$static.pipe = pipe;
    this$static.config = pipe.config;
}

function $setSystemId(this$static, systemId){
    this$static.systemId = systemId;
}

defineClass(880, 1, {});
_.close_0 = function close_2(){
}
;
_.getPipelineConfiguration = function getPipelineConfiguration_0(){
    return this.pipe;
}
;
_.open_1 = function open_2(){
}
;
_.setPipelineConfiguration = function setPipelineConfiguration_0(pipe){
    $setPipelineConfiguration(this, pipe);
}
;
_.setSystemId = function setSystemId_0(systemId){
    $setSystemId(this, systemId);
}
;
var Lclient_net_sf_saxon_ce_event_Builder_2_classLit = createForClass('client.net.sf.saxon.ce.event', 'Builder', 880, Ljava_lang_Object_2_classLit);
function $setSystemId_0(this$static, systemId){
    this$static.systemId = systemId;
}

defineClass(120, 1, $intern_7);
_.getPipelineConfiguration = function getPipelineConfiguration_1(){
    return this.pipelineConfiguration;
}
;
_.open_1 = function open_3(){
    this.previousAtomic = false;
}
;
_.setPipelineConfiguration = function setPipelineConfiguration_1(pipelineConfiguration){
    this.pipelineConfiguration = pipelineConfiguration;
}
;
_.setSystemId = function setSystemId_1(systemId){
    $setSystemId_0(this, systemId);
}
;
_.previousAtomic = false;
_.systemId = null;
var Lclient_net_sf_saxon_ce_event_SequenceReceiver_2_classLit = createForClass('client.net.sf.saxon.ce.event', 'SequenceReceiver', 120, Ljava_lang_Object_2_classLit);
function $open(this$static){
    if (!this$static.nextReceiver) {
        throw new IllegalStateException_0('ProxyReceiver.open(): no underlying receiver provided');
    }
    this$static.nextReceiver.open_1();
}

function $setPipelineConfiguration_0(this$static, pipe){
    if (this$static.pipelineConfiguration != pipe) {
        this$static.pipelineConfiguration = pipe;
        !!this$static.nextReceiver && this$static.nextReceiver.setPipelineConfiguration(pipe);
    }
}

function $setUnderlyingReceiver(this$static, receiver){
    if (receiver != this$static.nextReceiver) {
        this$static.nextReceiver = receiver;
        !!this$static.pipelineConfiguration && !!receiver && this$static.nextReceiver.setPipelineConfiguration(this$static.pipelineConfiguration);
    }
}

function ProxyReceiver(){
}

defineClass(245, 120, $intern_7);
_.append = function append(item_0, copyNamespaces){
    if (instanceOf(this.nextReceiver, 120)) {
        dynamicCast(this.nextReceiver, 120).append(item_0, copyNamespaces);
    }
    else {
        throw new UnsupportedOperationException_0('append() method is not supported in this class');
    }
}
;
_.attribute = function attribute_1(nameCode, value_0){
    this.nextReceiver.attribute(nameCode, value_0);
}
;
_.characters = function characters_0(chars){
    this.nextReceiver.characters(chars);
}
;
_.close_0 = function close_3(){
    this.nextReceiver.close_0();
}
;
_.comment_0 = function comment_1(chars){
    this.nextReceiver.comment_0(chars);
}
;
_.endDocument = function endDocument_0(){
    this.nextReceiver.endDocument();
}
;
_.endElement = function endElement_0(){
    this.nextReceiver.endElement();
}
;
_.namespace_0 = function namespace_1(nsBinding, properties){
    this.nextReceiver.namespace_0(nsBinding, properties);
}
;
_.open_1 = function open_4(){
    $open(this);
}
;
_.processingInstruction = function processingInstruction_0(target, data_0){
    this.nextReceiver.processingInstruction(target, data_0);
}
;
_.setPipelineConfiguration = function setPipelineConfiguration_2(pipe){
    $setPipelineConfiguration_0(this, pipe);
}
;
_.setSystemId = function setSystemId_2(systemId){
    if (systemId != this.systemId) {
        this.systemId = systemId;
        !!this.nextReceiver && this.nextReceiver.setSystemId(systemId);
    }
}
;
_.startContent = function startContent_0(){
    this.nextReceiver.startContent();
}
;
_.startDocument = function startDocument_0(){
    this.nextReceiver.startDocument();
}
;
_.startElement = function startElement_0(qName, properties){
    this.nextReceiver.startElement(qName, properties);
}
;
var Lclient_net_sf_saxon_ce_event_ProxyReceiver_2_classLit = createForClass('client.net.sf.saxon.ce.event', 'ProxyReceiver', 245, Lclient_net_sf_saxon_ce_event_SequenceReceiver_2_classLit);
function CommentStripper(){
    ProxyReceiver.call(this);
    this.buffer = new FastStringBuffer(256);
}

defineClass(639, 245, $intern_7, CommentStripper);
_.characters = function characters_1(chars){
    $append_2(this.buffer, chars);
}
;
_.comment_0 = function comment_2(chars){
}
;
_.endElement = function endElement_1(){
    this.buffer.used > 0 && this.nextReceiver.characters(this.buffer);
    $setLength(this.buffer, 0);
    this.nextReceiver.endElement();
}
;
_.processingInstruction = function processingInstruction_1(name_0, data_0){
}
;
_.startElement = function startElement_1(qName, properties){
    this.buffer.used > 0 && this.nextReceiver.characters(this.buffer);
    $setLength(this.buffer, 0);
    this.nextReceiver.startElement(qName, properties);
}
;
var Lclient_net_sf_saxon_ce_event_CommentStripper_2_classLit = createForClass('client.net.sf.saxon.ce.event', 'CommentStripper', 639, Lclient_net_sf_saxon_ce_event_ProxyReceiver_2_classLit);
function $append(this$static, item_0, copyNamespaces){
    var copyOptions, it, iter;
    if (!item_0)
        ;
    else if (instanceOf(item_0, 13)) {
        this$static.previousAtomic && $characters(this$static, ' ');
        $characters(this$static, item_0.getStringValue());
        this$static.previousAtomic = true;
    }
    else if (dynamicCast(item_0, 7).getNodeKind() == 9) {
        $startDocument(this$static);
        iter = dynamicCast(item_0, 7).iterateAxis(3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
        while (true) {
            it = iter.next_0();
            if (!it)
                break;
            $append(this$static, it, copyNamespaces);
        }
        $endDocument(this$static);
        this$static.previousAtomic = false;
    }
    else {
        copyOptions = 4;
        copyNamespaces == 1?(copyOptions |= 1):copyNamespaces == 2 && (copyOptions |= 2);
        dynamicCast(item_0, 7).copy(this$static, copyOptions);
        this$static.previousAtomic = false;
    }
}

function $attribute(this$static, nameCode, value_0){
    var a, attCode2, attValue2;
    if (this$static.pendingStartTagDepth < 0) {
        throw makeNoOpenStartTagException(2, $getDisplayName_0(nameCode), this$static.level_0 < 0 || this$static.currentLevelIsDocument[this$static.level_0]);
    }
    for (a = 0; a < this$static.pendingAttListSize; a++) {
        if ($equals_0(this$static.pendingAttCode[a], nameCode)) {
            this$static.pendingAttValue[a] = toString__Ljava_lang_String___devirtual$_0(value_0);
            return;
        }
    }
    if (this$static.pendingAttListSize >= this$static.pendingAttCode.length) {
        attCode2 = initDim(Lclient_net_sf_saxon_ce_om_StructuredQName_2_classLit, $intern_1, 8, this$static.pendingAttListSize * 2, 0, 1);
        attValue2 = initDim(Ljava_lang_String_2_classLit, $intern_8, 2, this$static.pendingAttListSize * 2, 4, 1);
        arraycopy(this$static.pendingAttCode, 0, attCode2, 0, this$static.pendingAttListSize);
        arraycopy(this$static.pendingAttValue, 0, attValue2, 0, this$static.pendingAttListSize);
        this$static.pendingAttCode = attCode2;
        this$static.pendingAttValue = attValue2;
    }
    this$static.pendingAttCode[this$static.pendingAttListSize] = nameCode;
    this$static.pendingAttValue[this$static.pendingAttListSize] = toString__Ljava_lang_String___devirtual$_0(value_0);
    ++this$static.pendingAttListSize;
    this$static.previousAtomic = false;
}

function $characters(this$static, s){
    var len;
    this$static.previousAtomic = false;
    if (s == null)
        return;
    len = length__I__devirtual$(s);
    if (len == 0)
        return;
    this$static.pendingStartTagDepth >= 0 && $startContent(this$static);
    this$static.nextReceiver.characters(s);
}

function $checkProposedPrefix(this$static, nameCode, seq){
    var i_0, newCode, nsprefix, nsuri, prefix;
    nsprefix = valueOf_3(nameCode.content_0, nameCode.prefixStart, nameCode.content_0.length - nameCode.prefixStart);
    nsuri = $getNamespaceURI(nameCode);
    for (i_0 = 0; i_0 < this$static.pendingNSListSize; i_0++) {
        if ($equals_5(nsprefix, this$static.pendingNSList[i_0].prefix_0)) {
            if ($equals_5(nsuri, this$static.pendingNSList[i_0].uri_0)) {
                return nameCode;
            }
            else {
                prefix = nsprefix + '_' + seq;
                newCode = new StructuredQName(prefix, nsuri, valueOf_3(nameCode.content_0, nameCode.localNameStart, nameCode.prefixStart - nameCode.localNameStart));
                $namespace(this$static, new NamespaceBinding(prefix, nsuri), 0);
                return newCode;
            }
        }
    }
    $namespace(this$static, new NamespaceBinding(nsprefix, nsuri), 0);
    return nameCode;
}

function $close(this$static){
    this$static.nextReceiver.close_0();
    this$static.previousAtomic = false;
}

function $comment(this$static, comment){
    this$static.pendingStartTagDepth >= 0 && $startContent(this$static);
    this$static.nextReceiver.comment_0(comment);
    this$static.previousAtomic = false;
}

function $endDocument(this$static){
    this$static.level_0 == 0 && this$static.nextReceiver.endDocument();
    this$static.previousAtomic = false;
    --this$static.level_0;
}

function $endElement(this$static){
    this$static.pendingStartTagDepth >= 0?$startContent(this$static):(this$static.pendingStartTagDepth = -2);
    this$static.nextReceiver.endElement();
    --this$static.level_0;
    this$static.previousAtomic = false;
}

function $namespace(this$static, nsBinding, properties){
    var err, i_0, newlist, prefix, rejectDuplicates, uri1, uri2;
    if (this$static.pendingStartTagDepth < 0) {
        throw makeNoOpenStartTagException(13, nsBinding.prefix_0, this$static.pendingStartTagDepth == -2);
    }
    rejectDuplicates = (properties & 32) != 0;
    for (i_0 = 0; i_0 < this$static.pendingNSListSize; i_0++) {
        if ($equals(nsBinding, this$static.pendingNSList[i_0])) {
            return;
        }
        if ($equals_5(nsBinding.prefix_0, this$static.pendingNSList[i_0].prefix_0)) {
            if ($equals(this$static.pendingNSList[i_0], ($clinit_NamespaceBinding() , DEFAULT_UNDECLARATION)) || $equals(nsBinding, DEFAULT_UNDECLARATION)) {
                this$static.pendingNSList[i_0] = nsBinding;
            }
            else if (rejectDuplicates) {
                prefix = nsBinding.prefix_0;
                uri1 = nsBinding.uri_0;
                uri2 = this$static.pendingNSList[i_0].uri_0;
                err = new XPathException_0('Cannot create two namespace nodes with the same prefix mapped to different URIs (prefix=' + (prefix.length == 0?'""':prefix) + ', URI=' + (uri1.length == 0?'""':uri1) + ', URI=' + (uri2.length == 0?'""':uri2) + ')');
                err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTDE0430');
                    throw err;
            }
            else {
                return;
            }
        }
    }
    if (!nsBinding.prefix_0.length && !!nsBinding.uri_0.length) {
        this$static.declaresDefaultNamespace = true;
        !this$static.elementIsInNullNamespace && (this$static.elementIsInNullNamespace = ($clinit_Boolean() , $equals_5($getNamespaceURI(this$static.pendingStartTag), '')?TRUE_1:FALSE_1));
        if (this$static.elementIsInNullNamespace.value_0) {
            throw new XPathException_2('Cannot output a namespace node for the default namespace when the element is in no namespace', 'XTDE0440');
        }
    }
    if (this$static.pendingNSListSize + 1 > this$static.pendingNSList.length) {
        newlist = initDim(Lclient_net_sf_saxon_ce_om_NamespaceBinding_2_classLit, $intern_5, 53, this$static.pendingNSListSize * 2, 0, 1);
        arraycopy(this$static.pendingNSList, 0, newlist, 0, this$static.pendingNSListSize);
        this$static.pendingNSList = newlist;
    }
    this$static.pendingNSList[this$static.pendingNSListSize++] = nsBinding;
    this$static.previousAtomic = false;
}

function $open_0(this$static){
    this$static.nextReceiver.open_1();
    this$static.previousAtomic = false;
}

function $processingInstruction(this$static, target, data_0){
    this$static.pendingStartTagDepth >= 0 && $startContent(this$static);
    this$static.nextReceiver.processingInstruction(target, data_0);
    this$static.previousAtomic = false;
}

function $setPipelineConfiguration_1(this$static, pipe){
    if (this$static.pipelineConfiguration != pipe) {
        this$static.pipelineConfiguration = pipe;
        !!this$static.nextReceiver && this$static.nextReceiver.setPipelineConfiguration(pipe);
    }
}

function $startContent(this$static){
    var a, a0, attcode, elcode, n, props;
    if (this$static.pendingStartTagDepth < 0) {
        return;
    }
    props = this$static.startElementProperties;
    elcode = this$static.pendingStartTag;
    if (this$static.declaresDefaultNamespace || !$equals_5(valueOf_3(elcode.content_0, elcode.prefixStart, elcode.content_0.length - elcode.prefixStart), '')) {
        elcode = $checkProposedPrefix(this$static, this$static.pendingStartTag, 0);
        props = this$static.startElementProperties | 64;
    }
    this$static.nextReceiver.startElement(elcode, props);
    for (a0 = 0; a0 < this$static.pendingAttListSize; a0++) {
        attcode = this$static.pendingAttCode[a0];
        $isEmpty(valueOf_3(attcode.content_0, attcode.prefixStart, attcode.content_0.length - attcode.prefixStart)) || (this$static.pendingAttCode[a0] = $checkProposedPrefix(this$static, attcode, a0 + 1));
    }
    for (n = 0; n < this$static.pendingNSListSize; n++) {
        this$static.nextReceiver.namespace_0(this$static.pendingNSList[n], 0);
    }
    for (a = 0; a < this$static.pendingAttListSize; a++) {
        this$static.nextReceiver.attribute(this$static.pendingAttCode[a], this$static.pendingAttValue[a]);
    }
    this$static.nextReceiver.startContent();
    this$static.pendingAttListSize = 0;
    this$static.pendingNSListSize = 0;
    this$static.pendingStartTagDepth = -1;
    this$static.pendingStartTag = null;
    this$static.previousAtomic = false;
}

function $startDocument(this$static){
    var b2;
    ++this$static.level_0;
    if (this$static.level_0 == 0) {
        this$static.nextReceiver.startDocument();
    }
    else if (this$static.pendingStartTagDepth >= 0) {
        $startContent(this$static);
        this$static.pendingStartTagDepth = -2;
    }
    this$static.previousAtomic = false;
    if (this$static.currentLevelIsDocument.length < this$static.level_0 + 1) {
        b2 = initDim(Z_classLit, $intern_9, 0, this$static.level_0 * 2, 8, 1);
        arraycopy(this$static.currentLevelIsDocument, 0, b2, 0, this$static.level_0);
        this$static.currentLevelIsDocument = b2;
    }
    this$static.currentLevelIsDocument[this$static.level_0] = true;
}

function $startElement(this$static, qName, properties){
    var b2;
    ++this$static.level_0;
    this$static.pendingStartTagDepth >= 0 && $startContent(this$static);
    this$static.startElementProperties = properties;
    this$static.pendingAttListSize = 0;
    this$static.pendingNSListSize = 0;
    this$static.pendingStartTag = qName;
    this$static.pendingStartTagDepth = 1;
    this$static.elementIsInNullNamespace = null;
    this$static.declaresDefaultNamespace = false;
    this$static.previousAtomic = false;
    if (this$static.currentLevelIsDocument.length < this$static.level_0 + 1) {
        b2 = initDim(Z_classLit, $intern_9, 0, this$static.level_0 * 2, 8, 1);
        arraycopy(this$static.currentLevelIsDocument, 0, b2, 0, this$static.level_0);
        this$static.currentLevelIsDocument = b2;
    }
    this$static.currentLevelIsDocument[this$static.level_0] = false;
}

function ComplexContentOutputter(){
    this.currentLevelIsDocument = initDim(Z_classLit, $intern_9, 0, 20, 8, 1);
    this.pendingAttCode = initDim(Lclient_net_sf_saxon_ce_om_StructuredQName_2_classLit, $intern_1, 8, 20, 0, 1);
    this.pendingAttValue = initDim(Ljava_lang_String_2_classLit, $intern_8, 2, 20, 4, 1);
    this.pendingNSList = initDim(Lclient_net_sf_saxon_ce_om_NamespaceBinding_2_classLit, $intern_5, 53, 20, 0, 1);
}

defineClass(435, 120, $intern_7, ComplexContentOutputter);
_.append = function append_0(item_0, copyNamespaces){
    $append(this, item_0, copyNamespaces);
}
;
_.attribute = function attribute_2(nameCode, value_0){
    $attribute(this, nameCode, value_0);
}
;
_.characters = function characters_2(s){
    $characters(this, s);
}
;
_.close_0 = function close_4(){
    $close(this);
}
;
_.comment_0 = function comment_3(comment){
    $comment(this, comment);
}
;
_.endDocument = function endDocument_1(){
    $endDocument(this);
}
;
_.endElement = function endElement_2(){
    $endElement(this);
}
;
_.namespace_0 = function namespace_2(nsBinding, properties){
    $namespace(this, nsBinding, properties);
}
;
_.open_1 = function open_5(){
    $open_0(this);
}
;
_.processingInstruction = function processingInstruction_2(target, data_0){
    $processingInstruction(this, target, data_0);
}
;
_.setPipelineConfiguration = function setPipelineConfiguration_3(pipe){
    $setPipelineConfiguration_1(this, pipe);
}
;
_.startContent = function startContent_1(){
    $startContent(this);
}
;
_.startDocument = function startDocument_1(){
    $startDocument(this);
}
;
_.startElement = function startElement_2(qName, properties){
    $startElement(this, qName, properties);
}
;
_.declaresDefaultNamespace = false;
_.level_0 = -1;
_.pendingAttListSize = 0;
_.pendingNSListSize = 0;
_.pendingStartTagDepth = -2;
_.startElementProperties = 0;
var Lclient_net_sf_saxon_ce_event_ComplexContentOutputter_2_classLit = createForClass('client.net.sf.saxon.ce.event', 'ComplexContentOutputter', 435, Lclient_net_sf_saxon_ce_event_SequenceReceiver_2_classLit);
function $firstContent(this$static){
    $checkImplicitResultTree(this$static.controller);
    if (!this$static.open_0) {
        $open(this$static);
        this$static.open_0 = true;
        this$static.open_0 || ($open(this$static) , this$static.open_0 = true);
        this$static.nextReceiver.startDocument();
    }
    this$static.clean = false;
}

function ImplicitResultChecker(next, controller){
    ProxyReceiver.call(this);
    $setUnderlyingReceiver(this, next);
    this.controller = controller;
}

defineClass(652, 245, $intern_7, ImplicitResultChecker);
_.characters = function characters_3(chars){
    this.clean && $firstContent(this);
    this.nextReceiver.characters(chars);
}
;
_.close_0 = function close_5(){
    if (!this.clean || !$hasThereBeenAnExplicitResultDocument(this.controller)) {
        this.open_0 || ($open(this) , this.open_0 = true);
        this.nextReceiver.close_0();
    }
}
;
_.comment_0 = function comment_4(chars){
    this.clean && $firstContent(this);
    this.nextReceiver.comment_0(chars);
}
;
_.open_1 = function open_6(){
    $open(this);
    this.open_0 = true;
}
;
_.processingInstruction = function processingInstruction_3(target, data_0){
    this.clean && $firstContent(this);
    this.nextReceiver.processingInstruction(target, data_0);
}
;
_.startDocument = function startDocument_2(){
    this.open_0 || ($open(this) , this.open_0 = true);
    this.nextReceiver.startDocument();
}
;
_.startElement = function startElement_3(qName, properties){
    this.clean && $firstContent(this);
    this.nextReceiver.startElement(qName, properties);
}
;
_.clean = true;
_.open_0 = false;
var Lclient_net_sf_saxon_ce_event_ImplicitResultChecker_2_classLit = createForClass('client.net.sf.saxon.ce.event', 'ImplicitResultChecker', 652, Lclient_net_sf_saxon_ce_event_ProxyReceiver_2_classLit);
function $addToStack(this$static, nscode){
    var newlist;
    if (this$static.namespacesSize + 1 >= this$static.namespaces.length) {
        newlist = initDim(Lclient_net_sf_saxon_ce_om_NamespaceBinding_2_classLit, $intern_5, 53, this$static.namespacesSize * 2, 0, 1);
        arraycopy(this$static.namespaces, 0, newlist, 0, this$static.namespacesSize);
        this$static.namespaces = newlist;
    }
    this$static.namespaces[this$static.namespacesSize++] = nscode;
}

function $isNeeded(this$static, nscode){
    var i_0, p_0;
    if ($equals_5('xml', nscode.prefix_0)) {
        return false;
    }
    if (this$static.pendingUndeclarations != null) {
        for (p_0 = 0; p_0 < this$static.pendingUndeclarations.length; p_0++) {
            !!this$static.pendingUndeclarations[p_0] && $equals_5(nscode.prefix_0, this$static.pendingUndeclarations[p_0].prefix_0) && (this$static.pendingUndeclarations[p_0] = null);
        }
    }
    for (i_0 = this$static.namespacesSize - 1; i_0 >= 0; i_0--) {
        if ($equals(this$static.namespaces[i_0], nscode)) {
            return false;
        }
        if ($equals_5(this$static.namespaces[i_0].prefix_0, nscode.prefix_0)) {
            return true;
        }
    }
    return !$equals(nscode, ($clinit_NamespaceBinding() , DEFAULT_UNDECLARATION));
}

function $namespace_0(this$static, nsBinding, properties){
    if ($isNeeded(this$static, nsBinding)) {
        $addToStack(this$static, nsBinding);
        ++this$static.countStack[this$static.depth - 1];
        this$static.nextReceiver.namespace_0(nsBinding, properties);
    }
}

function NamespaceReducer(){
    ProxyReceiver.call(this);
    this.namespaces = initDim(Lclient_net_sf_saxon_ce_om_NamespaceBinding_2_classLit, $intern_5, 53, 50, 0, 1);
    this.countStack = initDim(I_classLit, $intern_4, 0, 50, 7, 1);
    this.disinheritStack = initDim(Z_classLit, $intern_9, 0, 50, 8, 1);
}

defineClass(283, 245, $intern_7, NamespaceReducer);
_.endElement = function endElement_3(){
    if (this.depth-- == 0) {
        throw new IllegalStateException_0('Attempt to output end tag with no matching start tag');
    }
    this.namespacesSize -= this.countStack[this.depth];
    this.nextReceiver.endElement();
}
;
_.getURIForPrefix = function getURIForPrefix(prefix, useDefault){
    var i_0;
    if (!prefix.length && !useDefault) {
        return '';
    }
    else if ($equals_5('xml', prefix)) {
        return 'http://www.w3.org/XML/1998/namespace';
    }
    else {
        for (i_0 = this.namespacesSize - 1; i_0 >= 0; i_0--) {
            if ($equals_5(this.namespaces[i_0].prefix_0, prefix)) {
                return this.namespaces[i_0].uri_0;
            }
        }
    }
    return !prefix.length?'':null;
}
;
_.namespace_0 = function namespace_3(nsBinding, properties){
    $namespace_0(this, nsBinding, properties);
}
;
_.startContent = function startContent_2(){
    var i_0, nscode;
    if (this.pendingUndeclarations != null) {
        for (i_0 = 0; i_0 < this.pendingUndeclarations.length; i_0++) {
            nscode = this.pendingUndeclarations[i_0];
            !!nscode && $namespace_0(this, new NamespaceBinding(nscode.prefix_0, ''), 0);
        }
    }
    this.pendingUndeclarations = null;
    this.nextReceiver.startContent();
}
;
_.startElement = function startElement_4(qName, properties){
    var disStack2, newstack;
    this.nextReceiver.startElement(qName, properties);
    if (this.depth > 0 && this.disinheritStack[this.depth - 1]) {
        this.pendingUndeclarations = initDim(Lclient_net_sf_saxon_ce_om_NamespaceBinding_2_classLit, $intern_5, 53, this.namespacesSize, 0, 1);
        arraycopy(this.namespaces, 0, this.pendingUndeclarations, 0, this.namespacesSize);
    }
    else {
        this.pendingUndeclarations = null;
    }
    this.countStack[this.depth] = 0;
    this.disinheritStack[this.depth] = (properties & 128) != 0;
    if (++this.depth >= this.countStack.length) {
        newstack = initDim(I_classLit, $intern_4, 0, this.depth * 2, 7, 1);
        arraycopy(this.countStack, 0, newstack, 0, this.depth);
        disStack2 = initDim(Z_classLit, $intern_9, 0, this.depth * 2, 8, 1);
        arraycopy(this.disinheritStack, 0, disStack2, 0, this.depth);
        this.countStack = newstack;
        this.disinheritStack = disStack2;
    }
    (properties & 64) == 0 && $namespace_0(this, new NamespaceBinding(valueOf_3(qName.content_0, qName.prefixStart, qName.content_0.length - qName.prefixStart), $getNamespaceURI(qName)), 0);
}
;
_.depth = 0;
_.namespacesSize = 0;
_.pendingUndeclarations = null;
var Lclient_net_sf_saxon_ce_event_NamespaceReducer_2_classLit = createForClass('client.net.sf.saxon.ce.event', 'NamespaceReducer', 283, Lclient_net_sf_saxon_ce_event_ProxyReceiver_2_classLit);
function $fillInStackTrace(this$static){
    this$static.stackTrace = null;
    captureStackTrace(this$static, this$static.detailMessage);
    return this$static;
}

function $initCause(this$static, cause){
    checkState_0(!this$static.cause);
    checkCriticalArgument(cause != this$static, 'Self-causation not permitted');
    this$static.cause = cause;
    return this$static;
}

function $printStackTrace(this$static, out){
    var element, element$array, element$index, element$max, t, stackTrace;
    for (t = this$static; t; t = t.cause) {
        t != this$static && out.print_0('Caused by: ');
        out.println(t);
        for (element$array = (t.stackTrace == null && (t.stackTrace = ($clinit_StackTraceCreator() , stackTrace = collector.getStackTrace(t) , dropInternalFrames(stackTrace))) , t.stackTrace) , element$index = 0 , element$max = element$array.length; element$index < element$max; ++element$index) {
            element = element$array[element$index];
            out.println_0('\tat ' + element);
        }
    }
}

function Throwable(message){
    this.detailMessage = message;
    $fillInStackTrace(this);
}

function Throwable_0(message, cause){
    this.cause = cause;
    this.detailMessage = message;
    $fillInStackTrace(this);
}

defineClass(37, 1, {3:1, 37:1});
_.getMessage = function getMessage(){
    return this.detailMessage;
}
;
_.toString$ = function toString_2(){
    var className, msg;
    className = $getName(this.___clazz$);
    msg = this.getMessage();
    return msg != null?className + ': ' + msg:className;
}
;
var Ljava_lang_Throwable_2_classLit = createForClass('java.lang', 'Throwable', 37, Ljava_lang_Object_2_classLit);
function Exception(){
    $fillInStackTrace(this);
}

function Exception_0(message){
    Throwable.call(this, message);
}

function Exception_1(cause){
    this.detailMessage = !cause?null:cause.toString$();
    this.cause = cause;
    $fillInStackTrace(this);
}

defineClass(19, 37, $intern_10, Exception_0);
var Ljava_lang_Exception_2_classLit = createForClass('java.lang', 'Exception', 19, Ljava_lang_Throwable_2_classLit);
function $$init_0(this$static){
    this$static.isTypeError = false;
    this$static.isStaticError = false;
    this$static.locationText = null;
    this$static.hasBeenReported = false;
    this$static.message_0 = '';
}

function $isReportableStatically(this$static){
    var local;
    if (this$static.isStaticError || this$static.isTypeError) {
        return true;
    }
    if (!!this$static.errorCode && $equals_5($getNamespaceURI(this$static.errorCode), 'http://www.w3.org/2005/xqt-errors')) {
        local = $getLocalName_1(this$static.errorCode);
        return $equals_5(local, 'XTDE1260') || $equals_5(local, 'XTDE1280') || $equals_5(local, 'XTDE1390') || $equals_5(local, 'XTDE1400') || $equals_5(local, 'XDTE1428') || $equals_5(local, 'XTDE1440') || $equals_5(local, 'XTDE1460');
    }
    return false;
}

function $maybeSetLocation(this$static, locator){
    !this$static.locator && (this$static.locator = locator);
}

function $setErrorCode(this$static, code_0){
    this$static.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', code_0);
}

function $setErrorCodeQName(this$static, code_0){
    this$static.errorCode = code_0;
}

function $setLocator(this$static, locator){
    this$static.locator = locator;
}

function XPathException_0(message){
    Exception.call(this);
    $$init_0(this);
    loggingIsEnabled() && (this.message_0 = message);
}

function XPathException_1(message, loc){
    Exception.call(this);
    $$init_0(this);
    loggingIsEnabled() && (this.message_0 = message);
    this.locator = loc;
}

function XPathException_2(message, errorCode){
    Exception.call(this);
    $$init_0(this);
    loggingIsEnabled() && (this.message_0 = message);
    this.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', errorCode);
        $equals_5(errorCode, 'XPTY0004') && (this.isTypeError = true);
}

function XPathException_3(message, errorCode, loc){
    Exception.call(this);
    $$init_0(this);
    loggingIsEnabled() && (this.message_0 = message);
    errorCode != null && (this.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', errorCode));
        this.locator = loc;
}

function XPathException_4(message, err){
    Exception_1.call(this, err);
    $$init_0(this);
    loggingIsEnabled() && (this.message_0 = message);
}

function XPathException_5(err){
    Exception_1.call(this, err);
    $$init_0(this);
}

defineClass(4, 19, {4:1, 3:1, 19:1, 37:1}, XPathException_0, XPathException_1, XPathException_2, XPathException_3, XPathException_4, XPathException_5);
_.getMessage = function getMessage_0(){
    return this.message_0;
}
;
_.toString$ = function toString_3(){
    return this.message_0;
}
;
_.hasBeenReported = false;
_.isStaticError = false;
_.isTypeError = false;
var Lclient_net_sf_saxon_ce_trans_XPathException_2_classLit = createForClass('client.net.sf.saxon.ce.trans', 'XPathException', 4, Ljava_lang_Exception_2_classLit);
function NoOpenStartTagException(message){
    XPathException_0.call(this, message);
}

function makeNoOpenStartTagException(nodeKind, name_0, parentIsDocument){
    var err, errorCode, kind, message;
    if (parentIsDocument) {
        kind = nodeKind == 2?'an attribute':'a namespace';
        message = 'Cannot create ' + kind + ' node (' + name_0 + ') whose parent is a document node';
        errorCode = 'XTDE0420';
    }
    else {
        kind = nodeKind == 2?'An attribute':'A namespace';
        message = kind + ' node (' + name_0 + ') cannot be created after the children of the containing element';
        errorCode = 'XTDE0410';
    }
    err = new NoOpenStartTagException(message);
    err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', errorCode);
        return err;
}

defineClass(255, 4, {255:1, 4:1, 3:1, 19:1, 37:1}, NoOpenStartTagException);
var Lclient_net_sf_saxon_ce_event_NoOpenStartTagException_2_classLit = createForClass('client.net.sf.saxon.ce.event', 'NoOpenStartTagException', 255, Lclient_net_sf_saxon_ce_trans_XPathException_2_classLit);
function $setConfiguration(this$static, config){
    this$static.config = config;
}

function $setErrorListener_1(this$static, listener){
    this$static.errorListener = listener;
}

function PipelineConfiguration(){
}

defineClass(431, 1, {}, PipelineConfiguration);
var Lclient_net_sf_saxon_ce_event_PipelineConfiguration_2_classLit = createForClass('client.net.sf.saxon.ce.event', 'PipelineConfiguration', 431, Ljava_lang_Object_2_classLit);
function $append_0(this$static, item_0){
    if (!item_0) {
        return;
    }
    if (this$static.level_0 == 0) {
        $add_16(this$static.list, item_0);
        this$static.previousAtomic = false;
    }
    else {
        if (instanceOf(item_0, 13)) {
            this$static.previousAtomic && $characters(this$static.outputter, ' ');
            $characters(this$static.outputter, item_0.getStringValue());
            this$static.previousAtomic = true;
        }
        else {
            dynamicCast(item_0, 7).copy(this$static.outputter, 6);
            this$static.previousAtomic = false;
        }
    }
}

function $createTree(this$static){
    var cco, pipe, reducer;
    pipe = this$static.pipelineConfiguration;
    this$static.builder = new LinkedTreeBuilder;
    $setPipelineConfiguration(this$static.builder, pipe);
    $setSystemId(this$static.builder, this$static.systemId);
    reducer = new NamespaceReducer;
    $setUnderlyingReceiver(reducer, this$static.builder);
    $setPipelineConfiguration_0(reducer, this$static.pipelineConfiguration);
    cco = new ComplexContentOutputter;
    $setPipelineConfiguration_1(cco, this$static.pipelineConfiguration);
    cco.nextReceiver = reducer;
    this$static.outputter = cco;
    $setSystemId_0(this$static.outputter, this$static.systemId);
    $setPipelineConfiguration_1(this$static.outputter, this$static.pipelineConfiguration);
    $open_0(this$static.outputter);
}

function $endElement_0(this$static){
    var element;
    this$static.inStartTag && $startContent_0(this$static);
    $endElement(this$static.outputter);
    if (--this$static.level_0 == 0) {
        $close(this$static.outputter);
        element = $getCurrentRoot(this$static.builder);
        $append_0(this$static, element);
    }
    this$static.previousAtomic = false;
}

function $getSequence(this$static){
    switch (this$static.list.array.length) {
        case 0:
            return $clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10;
        case 1:
            return dynamicCast($get_1(this$static.list, 0), 14);
        default:return new SequenceExtent_0(this$static.list);
    }
}

function $startContent_0(this$static){
    this$static.inStartTag = false;
    $startContent(this$static.outputter);
    this$static.previousAtomic = false;
}

function $startElement_0(this$static, qName, properties){
    this$static.inStartTag && $startContent_0(this$static);
    !this$static.outputter && $createTree(this$static);
    $startElement(this$static.outputter, qName, properties);
    ++this$static.level_0;
    this$static.inStartTag = true;
    this$static.previousAtomic = false;
}

function SequenceOutputter(estimatedSize){
    this.list = new ArrayList_0(estimatedSize);
}

defineClass(315, 120, $intern_7, SequenceOutputter);
_.append = function append_1(item_0, copyNamespaces){
    $append_0(this, item_0);
}
;
_.attribute = function attribute_3(nameCode, value_0){
    var o;
    if (this.level_0 == 0) {
        o = new Orphan;
        o.kind = 2;
        o.qName = nameCode;
        o.stringValue = value_0;
        $append_0(this, o);
    }
    else {
        $attribute(this.outputter, nameCode, value_0);
    }
    this.previousAtomic = false;
}
;
_.characters = function characters_4(s){
    var o;
    if (this.level_0 == 0) {
        o = new Orphan;
        o.kind = 3;
        $setStringValue(o, toString__Ljava_lang_String___devirtual$_0(s));
        $append_0(this, o);
    }
    else {
        if (length__I__devirtual$(s) > 0) {
            this.inStartTag && $startContent_0(this);
            $characters(this.outputter, s);
        }
    }
    this.previousAtomic = false;
}
;
_.close_0 = function close_6(){
    this.previousAtomic = false;
    !!this.outputter && $close(this.outputter);
}
;
_.comment_0 = function comment_5(comment){
    var o;
    this.inStartTag && $startContent_0(this);
    if (this.level_0 == 0) {
        o = new Orphan;
        o.kind = 8;
        o.stringValue = comment;
        $append_0(this, o);
    }
    else {
        $comment(this.outputter, comment);
    }
    this.previousAtomic = false;
}
;
_.endDocument = function endDocument_2(){
    var doc;
    if (--this.level_0 == 0) {
        $endDocument(this.outputter);
        doc = dynamicCast($getCurrentRoot(this.builder), 109);
        $append_0(this, doc);
    }
    this.previousAtomic = false;
}
;
_.endElement = function endElement_4(){
    $endElement_0(this);
}
;
_.namespace_0 = function namespace_4(nsBinding, properties){
    var o;
    if (this.level_0 == 0) {
        o = new Orphan;
        o.kind = 13;
        $setNodeName_0(o, new StructuredQName('', '', nsBinding.prefix_0));
        $setStringValue(o, nsBinding.uri_0);
        $append_0(this, o);
    }
    else {
        $namespace(this.outputter, nsBinding, properties);
    }
    this.previousAtomic = false;
}
;
_.processingInstruction = function processingInstruction_4(target, data_0){
    var o;
    this.inStartTag && $startContent_0(this);
    if (this.level_0 == 0) {
        o = new Orphan;
        $setNodeName_0(o, new StructuredQName('', '', target));
        o.kind = 7;
        o.stringValue = data_0;
        $append_0(this, o);
    }
    else {
        $processingInstruction(this.outputter, target, data_0);
    }
    this.previousAtomic = false;
}
;
_.startContent = function startContent_3(){
    $startContent_0(this);
}
;
_.startDocument = function startDocument_3(){
    !this.outputter && $createTree(this);
    this.level_0++ == 0 && $startDocument(this.outputter);
}
;
_.startElement = function startElement_5(qName, properties){
    $startElement_0(this, qName, properties);
}
;
_.builder = null;
_.inStartTag = false;
_.level_0 = 0;
_.outputter = null;
var Lclient_net_sf_saxon_ce_event_SequenceOutputter_2_classLit = createForClass('client.net.sf.saxon.ce.event', 'SequenceOutputter', 315, Lclient_net_sf_saxon_ce_event_SequenceReceiver_2_classLit);
function $getAttribute(this$static, uri_0, local){
    return $getValue_0(this$static.bufferedAttributes, uri_0, local);
}

function StartTagBuffer(){
    ProxyReceiver.call(this);
    this.bufferedNamespaces = new ArrayList;
}

defineClass(635, 245, $intern_7, StartTagBuffer);
_.attribute = function attribute_4(nameCode, value_0){
    $addAttribute(this.bufferedAttributes, nameCode, toString__Ljava_lang_String___devirtual$_0(value_0));
}
;
_.namespace_0 = function namespace_5(nsBinding, properties){
    $add_16(this.bufferedNamespaces, nsBinding);
}
;
_.setPipelineConfiguration = function setPipelineConfiguration_4(pipe){
    $setPipelineConfiguration_0(this, pipe);
    this.bufferedAttributes = new AttributeCollection;
}
;
_.startContent = function startContent_4(){
    var i_0, length_0, nb, nb$iterator;
    this.nextReceiver.startElement(this.elementNameCode, this.elementProperties);
    length_0 = $getLength(this.bufferedAttributes);
    for (i_0 = 0; i_0 < length_0; i_0++) {
        this.nextReceiver.attribute($getStructuredQName(this.bufferedAttributes, i_0), $getValue(this.bufferedAttributes, i_0));
    }
    for (nb$iterator = new AbstractList$IteratorImpl(this.bufferedNamespaces); nb$iterator.i < nb$iterator.this$01_0.size_1();) {
        nb = (checkCriticalElement(nb$iterator.i < nb$iterator.this$01_0.size_1()) , dynamicCast(nb$iterator.this$01_0.get_1(nb$iterator.last = nb$iterator.i++), 53));
        this.nextReceiver.namespace_0(nb, 0);
    }
    this.nextReceiver.startContent();
}
;
_.startElement = function startElement_6(qName, properties){
    this.elementNameCode = qName;
    this.elementProperties = properties;
    this.bufferedAttributes.used = 0;
    this.bufferedNamespaces.array = initDim(Ljava_lang_Object_2_classLit, $intern_1, 1, 0, 3, 1);
}
;
_.elementProperties = 0;
var Lclient_net_sf_saxon_ce_event_StartTagBuffer_2_classLit = createForClass('client.net.sf.saxon.ce.event', 'StartTagBuffer', 635, Lclient_net_sf_saxon_ce_event_ProxyReceiver_2_classLit);
function $clinit_StylesheetStripper(){
    $clinit_StylesheetStripper = emptyMethod;
    specials = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['analyze-string', 'apply-imports', 'apply-templates', 'attribute-set', 'call-template', 'character-map', 'choose', 'stylesheet', 'transform']);
    XML_SPACE = new StructuredQName('xml', 'http://www.w3.org/XML/1998/namespace', 'space');
}

function $isSpacePreserving(elementName){
    var local;
    if ($equals_5($getNamespaceURI(elementName), 'http://www.w3.org/1999/XSL/Transform')) {
        local = valueOf_3(elementName.content_0, elementName.localNameStart, elementName.prefixStart - elementName.localNameStart);
        if ($equals_5(local, 'text')) {
            return 1;
        }
        if (binarySearch(specials, local, ($clinit_Comparators() , $clinit_Comparators() , NATURAL)) >= 0) {
            return 2;
        }
    }
    return 0;
}

function StylesheetStripper(){
    $clinit_StylesheetStripper();
    this.stripStack = initDim(B_classLit, $intern_9, 0, 100, 7, 1);
}

defineClass(638, 245, $intern_7, StylesheetStripper);
_.attribute = function attribute_5(nameCode, value_0){
    $equals_0(nameCode, XML_SPACE) && ($equals_5(toString__Ljava_lang_String___devirtual$_0(value_0), 'preserve')?(this.stripStack[this.top_0] = narrow_byte(this.stripStack[this.top_0] | 4)):(this.stripStack[this.top_0] = narrow_byte(this.stripStack[this.top_0] & -5)));
    this.nextReceiver.attribute(nameCode, value_0);
}
;
_.characters = function characters_5(chars){
    ((this.stripStack[this.top_0] & 13) != 0 && (this.stripStack[this.top_0] & 2) == 0 || !isWhite(chars)) && length__I__devirtual$(chars) > 0 && this.nextReceiver.characters(chars);
}
;
_.endElement = function endElement_5(){
    this.nextReceiver.endElement();
    --this.top_0;
}
;
_.open_1 = function open_7(){
    this.top_0 = 0;
    this.stripStack[this.top_0] = 1;
    $open(this);
}
;
_.startElement = function startElement_7(qName, properties){
    var elementStrip, newStack, preserve, preserveParent;
    this.nextReceiver.startElement(qName, properties);
    preserveParent = this.stripStack[this.top_0];
    preserve = narrow_byte(preserveParent & 4);
    elementStrip = $isSpacePreserving(qName);
    elementStrip == 1?(preserve = narrow_byte(preserve | 1)):elementStrip == 2 && (preserve = narrow_byte(preserve | 2));
    ++this.top_0;
    if (this.top_0 >= this.stripStack.length) {
        newStack = initDim(B_classLit, $intern_9, 0, this.top_0 * 2, 7, 1);
        arraycopy(this.stripStack, 0, newStack, 0, this.top_0);
        this.stripStack = newStack;
    }
    this.stripStack[this.top_0] = preserve;
}
;
_.top_0 = 0;
var XML_SPACE, specials;
var Lclient_net_sf_saxon_ce_event_StylesheetStripper_2_classLit = createForClass('client.net.sf.saxon.ce.event', 'StylesheetStripper', 638, Lclient_net_sf_saxon_ce_event_ProxyReceiver_2_classLit);
function $AddTraceProperty(this$static, name_0, value_0){
    var entry, strValue;
    !this$static.traceProperties && (this$static.traceProperties = new ArrayList);
    instanceOf(value_0, 9)?(strValue = $getPrimitiveStringValue_0(dynamicCast(dynamicCast(value_0, 9).value_0, 12))):(strValue = value_0.toString$());
    entry = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, [name_0, strValue]);
    $add_16(this$static.traceProperties, entry);
}

function $AddTraceProperty_0(this$static, name_0, value_0){
    var entry;
    !this$static.traceProperties && (this$static.traceProperties = new ArrayList);
    entry = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, [name_0, value_0]);
    $add_16(this$static.traceProperties, entry);
}

function $adoptChildExpression(this$static, child){
    if (!child) {
        return;
    }
    !this$static.container?(this$static.container = child.container):$setContainer(child, this$static.container);
    !this$static.sourceLocator?copyLocationInfo(child, this$static):!child.sourceLocator && copyLocationInfo(this$static, child);
    this$static.staticProperties = -1;
}

function $computeDependencies(this$static){
    var child, children, dependencies;
    dependencies = this$static.getIntrinsicDependencies();
    for (children = this$static.iterateSubExpressions(); children.hasNext();) {
        child = dynamicCast(children.next_2(), 6);
        dependencies |= child.getDependencies();
    }
    return dependencies;
}

function $doPromotion(this$static, subexpression, offer){
    var e;
    if (!subexpression) {
        return null;
    }
    e = subexpression.promote(offer, this$static);
    e != subexpression?$adoptChildExpression(this$static, e):offer.accepted && (this$static.staticProperties = -1);
    return e;
}

function $dynamicError(this$static, message, code_0){
    if (loggingIsEnabled()) {
        throw new XPathException_3(message, code_0, $getSourceLocator(this$static));
    }
    else {
        throw new XPathException_3('', code_0, $getSourceLocator(this$static));
    }
}

function $getSourceLocator(this$static){
    var container;
    if (!this$static.sourceLocator) {
        container = this$static.getContainer();
        return container?container.getSourceLocator():null;
    }
    else {
        return this$static.sourceLocator;
    }
}

function $getSpecialProperties(this$static){
    this$static.staticProperties == -1 && (this$static.staticProperties = this$static.computeDependencies() | this$static.computeCardinality() | this$static.computeSpecialProperties());
    return this$static.staticProperties & $intern_11;
}

function $iterate(this$static, context){
    var value_0;
    value_0 = this$static.evaluateItem(context);
    return !value_0?($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1):new SingletonIterator(value_0);
}

function $nonNullChildren(children){
    var child, child$index, child$max, list;
    list = new ArrayList_0(children.length);
    for (child$index = 0 , child$max = children.length; child$index < child$max; ++child$index) {
        child = children[child$index];
        !!child && (setCheck(list.array, list.array.length, child) , true);
    }
    return new AbstractList$IteratorImpl(list);
}

function $setContainer(this$static, container){
    var child, children;
    this$static.container = container;
    if (container) {
        children = this$static.iterateSubExpressions();
        while (children.hasNext()) {
            child = dynamicCast(children.next_2(), 6);
            !!child && child.getContainer() != container && (!child.container || child.container.getContainerGranularity() < container.getContainerGranularity()) && $setContainer(child, container);
        }
    }
}

function $setSourceLocator(this$static, location_0){
    var child, iter;
    this$static.sourceLocator = location_0;
    for (iter = this$static.iterateSubExpressions(); iter.hasNext();) {
        child = dynamicCast(iter.next_2(), 6);
        !!child && !$getSourceLocator(child) && $setSourceLocator(child, location_0);
    }
}

function $typeError(this$static, visitor, message, errorCode){
    var e, path;
    if (visitor) {
        path = 'at ' + $getLocation(visitor) + ': ';
        e = new XPathException_3(path + message, errorCode, $getSourceLocator(this$static));
    }
    else {
        e = new XPathException_3(message, errorCode, $getSourceLocator(this$static));
    }
    e.isTypeError = true;
    throw e;
}

function Expression(){
}

defineClass(6, 1, {6:1});
_.computeDependencies = function computeDependencies(){
    return $computeDependencies(this);
}
;
_.computeSpecialProperties = function computeSpecialProperties(){
    return 0;
}
;
_.effectiveBooleanValue = function effectiveBooleanValue(context){
    return effectiveBooleanValue_2(this.iterate_0(context));
}
;
_.evaluateAsString = function evaluateAsString(context){
    var o, value_0;
    o = this.evaluateItem(context);
    value_0 = dynamicCast(o, 12);
    if (!value_0)
        return '';
    return dynamicCastToString(value_0.value_0 = toString__Ljava_lang_String___devirtual$_0(value_0.value_0));
}
;
_.evaluateItem = function evaluateItem(context){
    return this.iterate_0(context).next_0();
}
;
_.getCardinality = function getCardinality(){
    return this.staticProperties == -1 && (this.staticProperties = this.computeDependencies() | this.computeCardinality() | this.computeSpecialProperties()) , this.staticProperties & $intern_12;
}
;
_.getContainer = function getContainer(){
    return this.container;
}
;
_.getDependencies = function getDependencies(){
    return this.staticProperties == -1 && (this.staticProperties = this.computeDependencies() | this.computeCardinality() | this.computeSpecialProperties()) , this.staticProperties & $intern_13;
}
;
_.getExecutable = function getExecutable(){
    return this.getContainer().getExecutable();
}
;
_.getImplementationMethod = function getImplementationMethod(){
    return (this.getCardinality() & $intern_14) != 0?2:1;
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies(){
    return 0;
}
;
_.getSourceLocator = function getSourceLocator(){
    return $getSourceLocator(this);
}
;
_.getSystemId = function getSystemId_1(){
    return !this.sourceLocator?null:this.sourceLocator.getSystemId();
}
;
_.hasLoopingSubexpression = function hasLoopingSubexpression(child){
    return false;
}
;
_.implementsStaticTypeCheck = function implementsStaticTypeCheck(){
    return false;
}
;
_.iterate_0 = function iterate_0(context){
    return $iterate(this, context);
}
;
_.iterateSubExpressions = function iterateSubExpressions(){
    return $clinit_Collections() , $clinit_Collections() , $clinit_Collections$EmptyListIterator() , INSTANCE_0;
}
;
_.markTailFunctionCalls = function markTailFunctionCalls(qName, arity_0){
    return 0;
}
;
_.optimize = function optimize(visitor, contextItemType){
    return this;
}
;
_.process = function process(context){
    var e, it, item_0, iter, m, out;
    m = this.getImplementationMethod();
    if ((m & 1) != 0) {
        item_0 = this.evaluateItem(context);
        !!item_0 && context.getReceiver().append(item_0, 2);
    }
    else if ((m & 2) != 0) {
        iter = this.iterate_0(context);
        out = context.getReceiver();
        try {
            while (true) {
                it = iter.next_0();
                if (!it) {
                    break;
                }
                out.append(it, 2);
            }
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                e = $e0;
                $maybeSetLocation(e, $getSourceLocator(this));
                throw e;
            }
            else 
                throw unwrap($e0);
        }
    }
    else {
        throw new AssertionError('process() is not implemented in the subclass ' + this.___clazz$);
    }
}
;
_.promote = function promote(offer, parent_0){
    return this;
}
;
_.setFlattened = function setFlattened(flattened){
}
;
_.simplify = function simplify(visitor){
    return this;
}
;
_.staticTypeCheck = function staticTypeCheck(req, backwardsCompatible, role){
    throw new UnsupportedOperationException_0('staticTypeCheck');
}
;
_.toString$ = function toString_4(){
    var buff, className, dot, first, iter;
    buff = new FastStringBuffer(64);
    className = $getName(this.___clazz$);
    while (true) {
        dot = $indexOf_3(className, fromCodePoint(46));
        if (dot >= 0) {
            className = __substr(className, dot + 1, className.length - (dot + 1));
        }
        else {
            break;
        }
    }
    $append_3(buff, className);
    iter = this.iterateSubExpressions();
    first = true;
    while (iter.hasNext()) {
        $append_3(buff, first?'(':', ');
        $append_3(buff, toString__Ljava_lang_String___devirtual$(iter.next_2()));
        first = false;
    }
    first || $append_3(buff, ')');
    return $condense(buff) , valueOf_3(buff.array, 0, buff.used);
}
;
_.typeCheck = function typeCheck(visitor, contextItemType){
    return this;
}
;
_.sourceLocator = null;
_.staticProperties = -1;
var Lclient_net_sf_saxon_ce_expr_Expression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'Expression', 6, Ljava_lang_Object_2_classLit);
function $optimize(this$static, visitor, contextItemType){
    this$static.operand = $optimize_1(visitor, this$static.operand, contextItemType);
    try {
        if (instanceOf(this$static.operand, 9)) {
            return makeLiteral(makeSequenceExtent(this$static.iterate_0(new EarlyEvaluationContext(visitor.configuration))));
        }
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (!instanceOf($e0, 4))
            throw unwrap($e0);
    }
    return this$static;
}

function UnaryExpression(p0){
    Expression.call(this);
    this.operand = p0;
    $adoptChildExpression(this, p0);
}

defineClass(54, 6, $intern_15);
_.computeCardinality = function computeCardinality(){
    return this.operand.getCardinality();
}
;
_.computeSpecialProperties = function computeSpecialProperties_0(){
    return $getSpecialProperties(this.operand);
}
;
_.equals$ = function equals_2(other){
    return other != null && this.___clazz$ == getClass__Ljava_lang_Class___devirtual$(other) && this.operand.equals$(dynamicCast(other, 54).operand);
}
;
_.getItemType = function getItemType(){
    return this.operand.getItemType();
}
;
_.hashCode$ = function hashCode_3(){
    return getHashCode_0('UnaryExpression ' + this.___clazz$) ^ this.operand.hashCode$();
}
;
_.iterateSubExpressions = function iterateSubExpressions_0(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.operand]));
}
;
_.optimize = function optimize_0(visitor, contextItemType){
    return $optimize(this, visitor, contextItemType);
}
;
_.promote = function promote_0(offer, parent_0){
    var exp_0;
    exp_0 = $accept(offer, this);
    if (exp_0) {
        return exp_0;
    }
    else {
        this.operand = $doPromotion(this, this.operand, offer);
        return this;
    }
}
;
_.simplify = function simplify_0(visitor){
    this.operand = $simplify(visitor, this.operand);
    return this;
}
;
_.toString$ = function toString_5(){
    return $getName(this.___clazz$) + '(' + this.operand.toString$() + ')';
}
;
_.typeCheck = function typeCheck_0(visitor, contextItemType){
    return this.operand = $typeCheck_1(visitor, this.operand, contextItemType) , this;
}
;
var Lclient_net_sf_saxon_ce_expr_UnaryExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'UnaryExpression', 54, Lclient_net_sf_saxon_ce_expr_Expression_2_classLit);
function $typeCheck(this$static, visitor, contextItemType){
    var actions, atm2, block, choose, content_0, e, i_0, maybeEmpty, maybetext, needed, prevtext, th;
    e = (this$static.operand = $typeCheck_1(visitor, this$static.operand, contextItemType) , this$static);
    if (e != this$static) {
        return e;
    }
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    if ($relationship(th, this$static.operand.getItemType(), ($clinit_NodeKindTest() , TEXT)) == 4) {
        return this$static.operand;
    }
    if ((this$static.operand.getCardinality() & $intern_14) == 0) {
        return this$static.operand;
    }
    if (instanceOf(this$static.operand, 207)) {
        choose = dynamicCast(this$static.operand, 207);
        actions = choose.actions;
        for (i_0 = 0; i_0 < actions.length; i_0++) {
            atm2 = new AdjacentTextNodeMerger(actions[i_0]);
            setCheck(actions, i_0, $typeCheck(atm2, visitor, contextItemType));
        }
        return choose;
    }
    if (instanceOf(this$static.operand, 77)) {
        block = dynamicCast(this$static.operand, 77);
        actions = block.children;
        prevtext = false;
        needed = false;
        maybeEmpty = false;
        for (i_0 = 0; i_0 < actions.length; i_0++) {
            if (instanceOf(actions[i_0], 93)) {
                maybetext = true;
                content_0 = dynamicCast(actions[i_0], 93).select;
                instanceOf(content_0, 21)?(maybeEmpty = maybeEmpty | $getPrimitiveStringValue(dynamicCast(dynamicCast(content_0, 21).value_0, 12)).length == 0):(maybeEmpty = true);
            }
            else {
                maybetext = $relationship(th, actions[i_0].getItemType(), TEXT) != 4;
                maybeEmpty = maybeEmpty | maybetext;
            }
            if (prevtext && maybetext) {
                needed = true;
                break;
            }
            if (maybetext && (actions[i_0].getCardinality() & $intern_14) != 0) {
                needed = true;
                break;
            }
            prevtext = maybetext;
        }
        if (!needed) {
            return maybeEmpty?new EmptyTextNodeRemover(block):block;
        }
    }
    return this$static;
}

function AdjacentTextNodeMerger(p0){
    UnaryExpression.call(this, p0);
}

function isTextNode(item_0){
    return instanceOf(item_0, 7) && dynamicCast(item_0, 7).getNodeKind() == 3;
}

defineClass(500, 54, $intern_15, AdjacentTextNodeMerger);
_.computeCardinality = function computeCardinality_0(){
    return this.operand.getCardinality() | $intern_17;
}
;
_.getImplementationMethod = function getImplementationMethod_0(){
    return 6;
}
;
_.getItemType = function getItemType_0(){
    return this.operand.getItemType();
}
;
_.iterate_0 = function iterate_1(context){
    return new AdjacentTextNodeMerger$AdjacentTextNodeMergingIterator(this.operand.iterate_0(context));
}
;
_.typeCheck = function typeCheck_1(visitor, contextItemType){
    return $typeCheck(this, visitor, contextItemType);
}
;
var Lclient_net_sf_saxon_ce_expr_AdjacentTextNodeMerger_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'AdjacentTextNodeMerger', 500, Lclient_net_sf_saxon_ce_expr_UnaryExpression_2_classLit);
function $next(this$static){
    var fsb, o;
    this$static.current = this$static.next;
    if (!this$static.current) {
        return null;
    }
    this$static.next = this$static.base.next_0();
    if (isTextNode(this$static.current)) {
        fsb = new FastStringBuffer(256);
        $append_3(fsb, this$static.current.getStringValue());
        while (!!this$static.next && isTextNode(this$static.next)) {
            $append_3(fsb, this$static.next.getStringValue());
            this$static.next = this$static.base.next_0();
        }
        if (fsb.used == 0) {
            return $next(this$static);
        }
        else {
            o = new Orphan;
            o.kind = 3;
            o.stringValue = fsb;
            this$static.current = o;
            return this$static.current;
        }
    }
    else {
        return this$static.current;
    }
}

function AdjacentTextNodeMerger$AdjacentTextNodeMergingIterator(base){
    this.base = base;
    this.next = base.next_0();
}

defineClass(501, 1, $intern_18, AdjacentTextNodeMerger$AdjacentTextNodeMergingIterator);
_.getAnother = function getAnother_1(){
    return new AdjacentTextNodeMerger$AdjacentTextNodeMergingIterator(this.base.getAnother());
}
;
_.next_0 = function next_1(){
    return $next(this);
}
;
var Lclient_net_sf_saxon_ce_expr_AdjacentTextNodeMerger$AdjacentTextNodeMergingIterator_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'AdjacentTextNodeMerger/AdjacentTextNodeMergingIterator', 501, Ljava_lang_Object_2_classLit);
function $flattenExpression(this$static, list){
    var h, i_0;
    if (instanceOf(this$static.operand0, 79) && dynamicCast(this$static.operand0, 79).operator == this$static.operator) {
        $flattenExpression(dynamicCast(this$static.operand0, 79), list);
    }
    else {
        h = this$static.operand0.hashCode$();
        list.add_3(this$static.operand0);
        i_0 = list.size_1() - 1;
        while (i_0 > 0 && h > hashCode__I__devirtual$(list.get_1(i_0 - 1))) {
            list.set_1(i_0, list.get_1(i_0 - 1));
            list.set_1(i_0 - 1, this$static.operand0);
            --i_0;
        }
    }
    if (instanceOf(this$static.operand1, 79) && dynamicCast(this$static.operand1, 79).operator == this$static.operator) {
        $flattenExpression(dynamicCast(this$static.operand1, 79), list);
    }
    else {
        h = this$static.operand1.hashCode$();
        list.add_3(this$static.operand1);
        i_0 = list.size_1() - 1;
        while (i_0 > 0 && h > hashCode__I__devirtual$(list.get_1(i_0 - 1))) {
            list.set_1(i_0, list.get_1(i_0 - 1));
            list.set_1(i_0 - 1, this$static.operand1);
            --i_0;
        }
    }
    return list;
}

function $getOperands(this$static){
    return initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this$static.operand0, this$static.operand1]);
}

function $optimize_0(this$static, visitor, contextItemType){
    var v;
    this$static.operand0 = $optimize_1(visitor, this$static.operand0, contextItemType);
    this$static.operand1 = $optimize_1(visitor, this$static.operand1, contextItemType);
    try {
        if (instanceOf(this$static.operand0, 9) && instanceOf(this$static.operand1, 9)) {
            v = this$static.evaluateItem(new EarlyEvaluationContext(visitor.configuration));
            return instanceOf(v, 12)?new StringLiteral(dynamicCast(v, 12)):new Literal(v);
        }
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (!instanceOf($e0, 4))
            throw unwrap($e0);
    }
    return this$static;
}

function $pairwiseEqual(a, b){
    var i_0;
    if (a.size_1() != b.size_1()) {
        return false;
    }
    for (i_0 = 0; i_0 < a.size_1(); i_0++) {
        if (!equals_Ljava_lang_Object__Z__devirtual$(a.get_1(i_0), b.get_1(i_0))) {
            return false;
        }
    }
    return true;
}

function BinaryExpression(p0, op, p1){
    Expression.call(this);
    this.operator = op;
    this.operand0 = p0;
    this.operand1 = p1;
    $adoptChildExpression(this, p0);
    $adoptChildExpression(this, p1);
}

function isAssociative(operator){
    return operator == 10 || operator == 9 || operator == 1 || operator == 23 || operator == 15 || operator == 17;
}

function isCommutative(operator){
    return operator == 10 || operator == 9 || operator == 1 || operator == 23 || operator == 15 || operator == 17 || operator == 6 || operator == 50 || operator == 22 || operator == 51;
}

function isInverse(op1, op2){
    return op1 != op2 && op1 == inverse(op2);
}

defineClass(79, 6, $intern_19);
_.computeCardinality = function computeCardinality_1(){
    return (this.operand0.getCardinality() & $intern_17) != 0 || (this.operand1.getCardinality() & $intern_17) != 0?$intern_20:$intern_21;
}
;
_.computeSpecialProperties = function computeSpecialProperties_1(){
    return $intern_22;
}
;
_.equals$ = function equals_3(other){
    var b;
    if (instanceOf(other, 79)) {
        b = dynamicCast(other, 79);
        if (this.operator == b.operator) {
            if (this.operand0.equals$(b.operand0) && this.operand1.equals$(b.operand1)) {
                return true;
            }
            if (isCommutative(this.operator) && this.operand0.equals$(b.operand1) && this.operand1.equals$(b.operand0)) {
                return true;
            }
            if (isAssociative(this.operator) && $pairwiseEqual($flattenExpression(this, new ArrayList_0(4)), $flattenExpression(b, new ArrayList_0(4)))) {
                return true;
            }
        }
        if (isInverse(this.operator, b.operator) && this.operand0.equals$(b.operand1) && this.operand1.equals$(b.operand0)) {
            return true;
        }
    }
    return false;
}
;
_.hashCode$ = function hashCode_4(){
    var op;
    op = min_1(this.operator, inverse(this.operator));
    return getHashCode_0('BinaryExpression ' + op) ^ this.operand0.hashCode$() ^ this.operand1.hashCode$();
}
;
_.iterateSubExpressions = function iterateSubExpressions_1(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.operand0, this.operand1]));
}
;
_.optimize = function optimize_1(visitor, contextItemType){
    return $optimize_0(this, visitor, contextItemType);
}
;
_.promote = function promote_1(offer, parent_0){
    var exp_0;
    exp_0 = $accept(offer, this);
    if (exp_0) {
        return exp_0;
    }
    else {
        if (offer.action != 13) {
            this.operand0 = $doPromotion(this, this.operand0, offer);
            this.operand1 = $doPromotion(this, this.operand1, offer);
        }
        return this;
    }
}
;
_.setFlattened = function setFlattened_0(flattened){
    this.operand0.setFlattened(flattened);
    this.operand1.setFlattened(flattened);
}
;
_.simplify = function simplify_1(visitor){
    return this.operand0 = $simplify(visitor, this.operand0) , this.operand1 = $simplify(visitor, this.operand1) , this;
}
;
_.toString$ = function toString_6(){
    return '(' + this.operand0.toString$() + ' ' + ($clinit_Token() , tokens_0)[this.operator] + ' ' + this.operand1.toString$() + ')';
}
;
_.typeCheck = function typeCheck_2(visitor, contextItemType){
    return this.operand0 = $typeCheck_1(visitor, this.operand0, contextItemType) , this.operand1 = $typeCheck_1(visitor, this.operand1, contextItemType) , this;
}
;
_.operator = 0;
var Lclient_net_sf_saxon_ce_expr_BinaryExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'BinaryExpression', 79, Lclient_net_sf_saxon_ce_expr_Expression_2_classLit);
function $evaluateItem(this$static, context){
    var e, v0, v1;
    v0 = dynamicCast(this$static.operand0.evaluateItem(context), 13);
    if (!v0) {
        return null;
    }
    v1 = dynamicCast(this$static.operand1.evaluateItem(context), 13);
    if (!v1) {
        return null;
    }
    try {
        return compute(v0, this$static.operator, v1, context);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            $maybeSetLocation(e, $getSourceLocator(this$static));
            throw e;
        }
        else 
            throw unwrap($e0);
    }
}

function ArithmeticExpression(p0, operator, p1){
    BinaryExpression.call(this, p0, operator, p1);
    this.simplified = false;
}

function compute(value0, operator, value1, context){
    var b, d0, d1, err, err1, f0, f1, n0, n1, p0, p1, quot, result, result1, scale, th, quotAndRem;
    p0 = value0.getItemType_0();
    p1 = value1.getItemType_0();
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    if (p0 == ($clinit_AtomicType() , UNTYPED_ATOMIC)) {
        p0 = DOUBLE;
        value0 = value0.convert(DOUBLE).asAtomic();
    }
    if (p1 == UNTYPED_ATOMIC) {
        p1 = DOUBLE;
        value1 = value1.convert(DOUBLE).asAtomic();
    }
    (p0 == DATE || p0 == TIME) && (p0 = DATE_TIME);
    (p1 == DATE || p1 == TIME) && (p1 = DATE_TIME);
    if (instanceOf(value0, 25) && instanceOf(value1, 25)) {
        n0 = dynamicCast(value0, 25);
        n1 = dynamicCast(value1, 25);
        if (instanceOf(value0, 44) || instanceOf(value1, 44)) {
            d0 = n0.getDoubleValue();
            d1 = n1.getDoubleValue();
            switch (operator) {
                case 15:
            default:result = d0 + d1;
                break;
            case 16:
                result = d0 - d1;
                break;
            case 17:
                result = d0 * d1;
                break;
            case 18:
                result = d0 / d1;
                break;
            case 19:
                result = d0 % d1;
                break;
            case 56:
                if (d1 == 0) {
                    throw new XPathException_2('Integer division by zero', 'FOAR0001');
                }

                if (isNaN(d0) || isInfinite(d0)) {
                    throw new XPathException_2('First operand of idiv is NaN or infinity', 'FOAR0002');
                }

                if (isNaN(d1)) {
                    throw new XPathException_2('Second operand of idiv is NaN', 'FOAR0002');
                }

                return $convert_3(new DoubleValue(d0 / d1), INTEGER).asAtomic();
            }
            return new DoubleValue(result);
        }
        else if (instanceOf(value0, 71) || instanceOf(value1, 71)) {
            f0 = n0.getFloatValue();
            f1 = n1.getFloatValue();
            switch (operator) {
                case 15:
            default:result = f0 + f1;
                break;
            case 16:
                result = f0 - f1;
                break;
            case 17:
                result = f0 * f1;
                break;
            case 18:
                result = f0 / f1;
                break;
            case 19:
                result = f0 % f1;
                break;
            case 56:
                if (f1 == 0) {
                    throw new XPathException_2('Integer division by zero', 'FOAR0001');
                }

                if (isNaN(f0) || isInfinite_0(f0)) {
                    throw new XPathException_2('First operand of idiv is NaN or infinity', 'FOAR0002');
                }

                if (isNaN(f1)) {
                    throw new XPathException_2('Second operand of idiv is NaN', 'FOAR0002');
                }

                return $convert_4(new FloatValue(f0 / f1), INTEGER).asAtomic();
            }
            return new FloatValue(result);
        }
        else {
            d0 = n0.getDecimalValue();
            d1 = n1.getDecimalValue();
            switch (operator) {
                case 15:
            default:result = $add_14(d0, d1);
                break;
            case 16:
                result = $subtract_0(d0, d1);
                break;
            case 17:
                result = $multiply(d0, d1);
                break;
            case 18:
                scale = max_1(18, max_1(round_int(d0.scale), round_int(d1.scale)));
                try {
                    result1 = $divide(d0, d1, scale, valueOf_9(5));
                }
                catch ($e0) {
                    $e0 = wrap_0($e0);
                    if (instanceOf($e0, 130)) {
                        err1 = $e0;
                        if ($signum(d1) == 0) {
                            throw new XPathException_2('Decimal divide by zero', 'FOAR0001');
                        }
                        else {
                            throw err1;
                        }
                    }
                    else 
                        throw unwrap($e0);
                }

                return new DecimalValue_1(result1);
            case 19:
                try {
                    result = (quotAndRem = initDim(Ljava_math_BigDecimal_2_classLit, $intern_1, 34, 2, 0, 1) , quotAndRem[0] = $divideToIntegralValue(d0, d1) , quotAndRem[1] = $subtract_0(d0, $multiply(quotAndRem[0], d1)) , quotAndRem)[1];
                }
                catch ($e1) {
                    $e1 = wrap_0($e1);
                    if (instanceOf($e1, 130)) {
                        err = $e1;
                        if (n1.compareTo_1({l:0, m:0, h:0}) == 0) {
                            throw new XPathException_2('Decimal modulo zero', 'FOAR0001');
                        }
                        else {
                            throw err;
                        }
                    }
                    else 
                        throw unwrap($e1);
                }

                break;
            case 56:
                if ($signum(d1) == 0) {
                    throw new XPathException_2('Integer division by zero', 'FOAR0001');
                }

                quot = $divideToIntegralValue(d0, d1);
                return decimalToInteger(quot);
            }
            return instanceOf(n0, 32) && instanceOf(n0, 32)?new IntegerValue_0(result):new DecimalValue_1(result);
        }
    }
    else {
        if (p0 == DATE_TIME) {
            if (p1 == DATE_TIME && operator == 16) {
                return dynamicCast(value0, 73).subtract(dynamicCast(value1, 73), context);
            }
            else if ($isSubType(th, p1, DURATION) && (operator == 15 || operator == 16)) {
                b = dynamicCast(value1, 74);
                operator == 16 && (b = b.multiply(-1));
                return dynamicCast(value0, 73).add_1(b);
            }
        }
        else if ($isSubType(th, p0, DURATION)) {
            if ($isSubType(th, p1, DURATION)) {
                d0 = dynamicCast(value1, 74);
                d1 = dynamicCast(value1, 74);
                switch (operator) {
                    case 15:
                        return d0.add_2(d1);
                    case 16:
                        return d0.add_2(d1.negate());
                    case 18:
                        return d0.divide(d1);
                }
            }
            else if (p1 == DATE_TIME && operator == 15) {
                return dynamicCast(value1, 73).add_1(dynamicCast(value0, 74));
            }
            else if ($isSubType(th, p1, NUMERIC) && (operator == 17 || operator == 18)) {
                d1 = dynamicCast(value1, 25).getDoubleValue();
                operator == 18 && (d1 = 1 / d1);
                return dynamicCast(value0, 74).multiply(d1);
            }
        }
        else if ($isSubType(th, p0, NUMERIC) && $isSubType(th, p1, DURATION) && operator == 17) {
            return dynamicCast(value1, 74).multiply(dynamicCast(value0, 25).getDoubleValue());
        }
    }
    throw new XPathException_2('Undefined arithmetic operation: ' + p0 + ' ' + ($clinit_Token() , tokens_0)[operator] + ' ' + p1, 'XPTY0004');
}

defineClass(307, 79, $intern_19, ArithmeticExpression);
_.evaluateItem = function evaluateItem_0(context){
    return $evaluateItem(this, context);
}
;
_.getItemType = function getItemType_1(){
    var numeric1, numeric2, t1, t2, th;
    t1 = this.operand0.getItemType().getAtomizedItemType();
    t2 = this.operand1.getItemType().getAtomizedItemType();
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    numeric1 = $isSubType(th, t1, ($clinit_AtomicType() , NUMERIC));
    numeric2 = $isSubType(th, t2, NUMERIC);
    return numeric1 && numeric2?NUMERIC:(numeric1 || numeric2) && (this.operator == 15 || this.operator == 16)?NUMERIC:ANY_ATOMIC;
}
;
_.simplify = function simplify_2(visitor){
    var e, val;
    if (this.simplified) {
        return this;
    }
    this.simplified = true;
    e = (this.operand0 = $simplify(visitor, this.operand0) , this.operand1 = $simplify(visitor, this.operand1) , this);
    if (e == this && visitor.staticContext.isInBackwardsCompatibleMode()) {
        return new ArithmeticExpression10(this.operand0, this.operator, this.operand1);
    }
    else {
        if (this.operator == 299 && isAtomic_0(this.operand1)) {
            val = dynamicCast(dynamicCast(this.operand1, 9).value_0, 13);
            if (instanceOf(val, 25)) {
                return new Literal(dynamicCast(val, 25).negate_0());
            }
        }
        return e;
    }
}
;
_.typeCheck = function typeCheck_3(visitor, contextItemType){
    var atomicType, itemType0, itemType1, ne, nv, oldOp0, oldOp1, role0, role1, th, type0, type1;
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    oldOp0 = this.operand0;
    oldOp1 = this.operand1;
    this.operand0 = $typeCheck_1(visitor, this.operand0, contextItemType);
    this.operand1 = $typeCheck_1(visitor, this.operand1, contextItemType);
    atomicType = ($clinit_SequenceType() , OPTIONAL_ATOMIC);
    role0 = new RoleLocator(1, ($clinit_Token() , tokens_0)[this.operator], 0);
    this.operand0 = staticTypeCheck_1(this.operand0, atomicType, false, role0);
    itemType0 = this.operand0.getItemType();
    if (instanceOf(itemType0, 123)) {
        return new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
    }
    type0 = dynamicCast(itemType0, 43);
    type0 == ($clinit_AtomicType() , UNTYPED_ATOMIC)?(this.operand0 = new UntypedAtomicConverter(this.operand0, DOUBLE, true, role0)):($getSpecialProperties(this.operand0) & $intern_23) == 0 && $relationship(th, type0, UNTYPED_ATOMIC) != 4 && (this.operand0 = new UntypedAtomicConverter(this.operand0, DOUBLE, false, role0));
    role1 = new RoleLocator(1, tokens_0[this.operator], 1);
    this.operand1 = staticTypeCheck_1(this.operand1, atomicType, false, role1);
    itemType1 = this.operand1.getItemType();
    if (instanceOf(itemType1, 123)) {
        return new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
    }
    type1 = dynamicCast(itemType1, 43);
    type1 == UNTYPED_ATOMIC?(this.operand1 = new UntypedAtomicConverter(this.operand1, DOUBLE, true, role1)):($getSpecialProperties(this.operand1) & $intern_23) == 0 && $relationship(th, type1, UNTYPED_ATOMIC) != 4 && (this.operand1 = new UntypedAtomicConverter(this.operand1, DOUBLE, false, role1));
    this.operand0 != oldOp0 && $adoptChildExpression(this, this.operand0);
    this.operand1 != oldOp1 && $adoptChildExpression(this, this.operand1);
    if (isEmptySequence(this.operand0) || isEmptySequence(this.operand1)) {
        return new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
    }
    if (this.operator == 299) {
        if (instanceOf(this.operand1, 9) && instanceOf(dynamicCast(this.operand1, 9).value_0, 25)) {
            nv = dynamicCast(dynamicCast(this.operand1, 9).value_0, 25);
            return new Literal(nv.negate_0());
        }
        else {
            ne = new NegateExpression(this.operand1);
            ne.backwardsCompatible = false;
            return $typeCheck_1(visitor, ne, contextItemType);
        }
    }
    try {
        if (instanceOf(this.operand0, 9) && instanceOf(this.operand1, 9)) {
            return new Literal($evaluateItem(this, new EarlyEvaluationContext(visitor.configuration)));
        }
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (!instanceOf($e0, 4))
            throw unwrap($e0);
    }
    return this;
}
;
_.simplified = false;
var Lclient_net_sf_saxon_ce_expr_ArithmeticExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'ArithmeticExpression', 307, Lclient_net_sf_saxon_ce_expr_BinaryExpression_2_classLit);
function $convertOperand(value_0){
    var type_0;
    if (!value_0) {
        return $clinit_DoubleValue() , NaN_0;
    }
    if (instanceOf(value_0, 44)) {
        return dynamicCast(value_0, 44);
    }
    type_0 = value_0.getItemType_0();
    if (type_0 == ($clinit_AtomicType() , INTEGER) || type_0 == UNTYPED_ATOMIC || type_0 == DECIMAL || type_0 == FLOAT || type_0 == BOOLEAN || type_0 == STRING) {
        return convert(value_0);
    }
    else {
        throw new XPathException_2('Invalid operand type for arithmetic: ' + type_0, 'XPTY0004');
    }
}

function $createConversionCode(this$static, operand){
    var fie;
    if ((operand.getCardinality() & $intern_14) != 0) {
        fie = new FirstItemExpression(operand);
        copyLocationInfo(this$static, fie);
        operand = fie;
    }
    return operand;
}

function ArithmeticExpression10(p0, operator, p1){
    BinaryExpression.call(this, p0, operator, p1);
}

defineClass(839, 79, $intern_19, ArithmeticExpression10);
_.evaluateItem = function evaluateItem_1(context){
    var v1, v2;
    v1 = dynamicCast(this.operand0.evaluateItem(context), 13);
    v1 = $convertOperand(v1);
    v2 = dynamicCast(this.operand1.evaluateItem(context), 13);
    v2 = $convertOperand(v2);
    return compute(v1, this.operator, v2, context);
}
;
_.getItemType = function getItemType_2(){
    return $clinit_AtomicType() , ANY_ATOMIC;
}
;
_.typeCheck = function typeCheck_4(visitor, contextItemType){
    var atomicType, e2, itemType0, itemType1, ne, role0, role1, v;
    e2 = (this.operand0 = $typeCheck_1(visitor, this.operand0, contextItemType) , this.operand1 = $typeCheck_1(visitor, this.operand1, contextItemType) , this);
    if (e2 != this) {
        return e2;
    }
    atomicType = ($clinit_SequenceType() , OPTIONAL_ATOMIC);
    role0 = new RoleLocator(1, ($clinit_Token() , tokens_0)[this.operator], 0);
    this.operand0 = staticTypeCheck_1(this.operand0, atomicType, true, role0);
    role1 = new RoleLocator(1, tokens_0[this.operator], 1);
    this.operand1 = staticTypeCheck_1(this.operand1, atomicType, true, role1);
    itemType0 = this.operand0.getItemType();
    if (instanceOf(itemType0, 123)) {
        return makeLiteral(($clinit_DoubleValue() , NaN_0));
    }
    itemType1 = this.operand1.getItemType();
    if (instanceOf(itemType1, 123)) {
        return makeLiteral(($clinit_DoubleValue() , NaN_0));
    }
    this.operand0 = $createConversionCode(this, this.operand0);
    this.operand1 = $createConversionCode(this, this.operand1);
    $adoptChildExpression(this, this.operand0);
    $adoptChildExpression(this, this.operand1);
    if (this.operator == 299) {
        if (instanceOf(this.operand1, 9)) {
            v = dynamicCast(this.operand1, 9).value_0;
            if (instanceOf(v, 25)) {
                return makeLiteral(dynamicCast(v, 25).negate_0());
            }
        }
        ne = new NegateExpression(this.operand1);
        ne.backwardsCompatible = true;
        return $typeCheck_1(visitor, ne, contextItemType);
    }
    return this;
}
;
var Lclient_net_sf_saxon_ce_expr_ArithmeticExpression10_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'ArithmeticExpression10', 839, Lclient_net_sf_saxon_ce_expr_BinaryExpression_2_classLit);
function $extendBindingList(this$static, in_$){
    var newBindingList;
    if (in_$ == null) {
        newBindingList = initDim(Lclient_net_sf_saxon_ce_expr_Binding_2_classLit, $intern_1, 126, 1, 0, 1);
    }
    else {
        newBindingList = initDim(Lclient_net_sf_saxon_ce_expr_Binding_2_classLit, $intern_1, 126, in_$.length + 1, 0, 1);
        arraycopy(in_$, 0, newBindingList, 0, in_$.length);
    }
    setCheck(newBindingList, newBindingList.length - 1, this$static);
    return newBindingList;
}

function $refineTypeInformation(this$static, type_0, cardinality, constantValue, properties, visitor, currentExpression){
    var ref, ref$iterator, references, th, oldItemType, newItemType, newcard, seqType;
    references = new ArrayList;
    gatherVariableReferences(currentExpression.action, this$static, references);
    for (ref$iterator = new AbstractList$IteratorImpl(references); ref$iterator.i < ref$iterator.this$01_0.size_1();) {
        ref = (checkCriticalElement(ref$iterator.i < ref$iterator.this$01_0.size_1()) , dynamicCast(ref$iterator.this$01_0.get_1(ref$iterator.last = ref$iterator.i++), 62));
        th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
        oldItemType = $getItemType(ref);
        newItemType = oldItemType;
        $isSubType(th, type_0, oldItemType) && (newItemType = type_0);
        newcard = cardinality & (ref.staticProperties == -1 && (ref.staticProperties = $computeDependencies(ref) | (!ref.staticType?!ref.binding?$intern_12:instanceOf(ref.binding, 86)?ref.binding.getRequiredType().cardinality:instanceOf(ref.binding, 99)?$intern_21:ref.binding.getRequiredType().cardinality:ref.staticType.cardinality) | $computeSpecialProperties_0(ref)) , ref.staticProperties & $intern_12);
        newcard == 0 && (newcard = (ref.staticProperties == -1 && (ref.staticProperties = $computeDependencies(ref) | (!ref.staticType?!ref.binding?$intern_12:instanceOf(ref.binding, 86)?ref.binding.getRequiredType().cardinality:instanceOf(ref.binding, 99)?$intern_21:ref.binding.getRequiredType().cardinality:ref.staticType.cardinality) | $computeSpecialProperties_0(ref)) , ref.staticProperties & $intern_12));
        seqType = ($clinit_SequenceType() , new SequenceType(newItemType, newcard));
        $setStaticType(ref, seqType, constantValue, properties);
        $resetStaticProperties(visitor);
    }
}

function $setAction(this$static, action){
    this$static.action = action;
    $adoptChildExpression(this$static, action);
}

function $setRequiredType(this$static, requiredType){
    this$static.requiredType = requiredType;
}

function $setSequence(this$static, sequence){
    this$static.sequence = sequence;
    $adoptChildExpression(this$static, sequence);
}

function $setSlotNumber(this$static, nr){
    this$static.slotNumber = nr;
}

function $setVariableQName(this$static, variableName){
    this$static.variableName = variableName;
}

defineClass(99, 6, $intern_24);
_.evaluateVariable = function evaluateVariable(context){
    return context.evaluateLocalVariable(this.slotNumber);
}
;
_.getLocalSlotNumber = function getLocalSlotNumber(){
    return this.slotNumber;
}
;
_.getRequiredType = function getRequiredType(){
    return this.requiredType;
}
;
_.getVariableQName = function getVariableQName(){
    return this.variableName;
}
;
_.isGlobal = function isGlobal(){
    return false;
}
;
_.iterateSubExpressions = function iterateSubExpressions_2(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.sequence, this.action]));
}
;
_.promote = function promote_2(offer, parent_0){
    var exp_0, savedBindingList;
    exp_0 = $accept(offer, this);
    if (exp_0) {
        return exp_0;
    }
    else {
        this.sequence = $doPromotion(this, this.sequence, offer);
        if (offer.action == 13 || offer.action == 14) {
            this.action = $doPromotion(this, this.action, offer);
        }
        else if (offer.action == 11 || offer.action == 10) {
            savedBindingList = offer.bindingList;
            offer.bindingList = $extendBindingList(this, offer.bindingList);
            this.action = $doPromotion(this, this.action, offer);
            offer.bindingList = savedBindingList;
        }
        return this;
    }
}
;
_.setSlotNumber = function setSlotNumber(nr){
    $setSlotNumber(this, nr);
}
;
_.simplify = function simplify_3(visitor){
    this.sequence = $simplify(visitor, this.sequence);
    this.action = $simplify(visitor, this.action);
    return this;
}
;
_.slotNumber = -999;
var Lclient_net_sf_saxon_ce_expr_Assignation_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'Assignation', 99, Lclient_net_sf_saxon_ce_expr_Expression_2_classLit);
function $iterate_0(this$static, context){
    var base, converter;
    base = this$static.operand.iterate_0(context);
    converter = new AtomicSequenceConverter$1(this$static);
    return new ItemMappingIterator_0(base, converter, true);
}

function AtomicSequenceConverter(sequence, requiredItemType){
    UnaryExpression.call(this, sequence);
    this.requiredItemType = requiredItemType;
    copyLocationInfo(sequence, this);
}

defineClass(229, 54, {229:1, 6:1, 54:1}, AtomicSequenceConverter);
_.computeCardinality = function computeCardinality_2(){
    return this.operand.getCardinality();
}
;
_.computeSpecialProperties = function computeSpecialProperties_2(){
    var p_0;
    p_0 = $getSpecialProperties(this.operand);
    return p_0 | $intern_22;
}
;
_.equals$ = function equals_4(other){
    return other != null && Lclient_net_sf_saxon_ce_expr_AtomicSequenceConverter_2_classLit == getClass__Ljava_lang_Class___devirtual$(other) && this.operand.equals$(dynamicCast(other, 54).operand) && this.requiredItemType == dynamicCast(other, 229).requiredItemType;
}
;
_.evaluateItem = function evaluateItem_2(context){
    var item_0;
    item_0 = this.operand.evaluateItem(context);
    if (!item_0)
        return null;
    return dynamicCast(item_0, 13).convert(this.requiredItemType).asAtomic();
}
;
_.getItemType = function getItemType_3(){
    return this.requiredItemType;
}
;
_.hashCode$ = function hashCode_5(){
    return getHashCode_0('UnaryExpression ' + Lclient_net_sf_saxon_ce_expr_AtomicSequenceConverter_2_classLit) ^ this.operand.hashCode$() ^ getHashCode(this.requiredItemType);
}
;
_.iterate_0 = function iterate_2(context){
    return $iterate_0(this, context);
}
;
_.simplify = function simplify_4(visitor){
    var val;
    this.operand = $simplify(visitor, this.operand);
    if (instanceOf(this.operand, 9)) {
        val = makeSequenceExtent($iterate_0(this, new EarlyEvaluationContext(visitor.configuration)));
        return instanceOf(val, 12)?new StringLiteral(dynamicCast(val, 12)):new Literal(val);
    }
    return this;
}
;
_.typeCheck = function typeCheck_5(visitor, contextItemType){
    var cast, th;
    this.operand = $typeCheck_1(visitor, this.operand, contextItemType);
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    if ($isSubType(th, this.operand.getItemType(), this.requiredItemType)) {
        return this.operand;
    }
    else if ((this.operand.getCardinality() & $intern_14) != 0) {
        return this;
    }
    else {
        cast = new CastExpression(this.operand, this.requiredItemType, (this.operand.getCardinality() & $intern_17) != 0);
        copyLocationInfo(this, cast);
        return cast;
    }
}
;
var Lclient_net_sf_saxon_ce_expr_AtomicSequenceConverter_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'AtomicSequenceConverter', 229, Lclient_net_sf_saxon_ce_expr_UnaryExpression_2_classLit);
function AtomicSequenceConverter$1(this$0){
    this.this$01 = this$0;
}

defineClass(763, 1, {}, AtomicSequenceConverter$1);
_.mapItem = function mapItem(item_0){
    return dynamicCast(item_0, 13).convert(this.this$01.requiredItemType).asAtomic();
}
;
var Lclient_net_sf_saxon_ce_expr_AtomicSequenceConverter$1_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'AtomicSequenceConverter/1', 763, Ljava_lang_Object_2_classLit);
function Atomizer(sequence){
    UnaryExpression.call(this, sequence);
    sequence.setFlattened(true);
}

function getAtomizedItemType(operand, alwaysUntyped){
    var in_$, kinds;
    in_$ = operand.getItemType();
    if (instanceOf(in_$, 159)) {
        return $clinit_AtomicType() , ANY_ATOMIC;
    }
    if (instanceOf(in_$, 67)) {
        if (instanceOf(in_$, 123)) {
            return in_$;
        }
        kinds = dynamicCast(in_$, 67).getNodeKindMask();
        if (alwaysUntyped) {
            if ((kinds | 8576) == 8576) {
                return $clinit_AtomicType() , STRING;
            }
            if ((kinds | 526) == 526) {
                return $clinit_AtomicType() , UNTYPED_ATOMIC;
            }
        }
        else {
            if ((kinds | 520) == 520) {
                return $clinit_AtomicType() , UNTYPED_ATOMIC;
            }
        }
        return in_$.getAtomizedItemType();
    }
    else {
        return in_$;
    }
}

function getAtomizingIterator(base){
    var imf;
    imf = new Atomizer$1;
    return new ItemMappingIterator(base, imf);
}

defineClass(140, 54, {140:1, 6:1, 54:1}, Atomizer);
_.computeCardinality = function computeCardinality_3(){
    return this.operand.getCardinality();
}
;
_.computeSpecialProperties = function computeSpecialProperties_3(){
    var p_0;
    p_0 = $getSpecialProperties(this.operand);
    return p_0 | $intern_22;
}
;
_.evaluateItem = function evaluateItem_3(context){
    var i_0;
    i_0 = this.operand.evaluateItem(context);
    return !i_0?null:i_0.getTypedValue();
}
;
_.getItemType = function getItemType_4(){
    return getAtomizedItemType(this.operand, true);
}
;
_.iterate_0 = function iterate_3(context){
    var base;
    base = this.operand.iterate_0(context);
    return getAtomizingIterator(base);
}
;
_.optimize = function optimize_2(visitor, contextItemType){
    var atomizedChildren, children, exp_0, i_0, newBlock, th;
    exp_0 = $optimize(this, visitor, contextItemType);
    if (exp_0 == this) {
        th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
        if ($isSubType(th, this.operand.getItemType(), ($clinit_AtomicType() , ANY_ATOMIC))) {
            return this.operand;
        }
        if (instanceOf(this.operand, 93)) {
            return new CastExpression(dynamicCast(this.operand, 93).select, UNTYPED_ATOMIC, true);
        }
        if (instanceOf(this.operand, 77)) {
            children = dynamicCast(this.operand, 77).children;
            atomizedChildren = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, children.length, 0, 1);
            for (i_0 = 0; i_0 < children.length; i_0++) {
                setCheck(atomizedChildren, i_0, new Atomizer(children[i_0]));
            }
            newBlock = new Block;
            $setChildren(newBlock, atomizedChildren);
            return $optimize_6($typeCheck_4(newBlock, visitor, contextItemType), visitor, contextItemType);
        }
    }
    return exp_0;
}
;
_.simplify = function simplify_5(visitor){
    var i_0, iter, val;
    this.operand = $simplify(visitor, this.operand);
    if (instanceOf(this.operand, 9)) {
        val = dynamicCast(this.operand, 9).value_0;
        if (instanceOf(val, 13)) {
            return this.operand;
        }
        iter = val.iterate();
        while (true) {
            i_0 = iter.next_0();
            if (!i_0) {
                return this.operand;
            }
            if (instanceOf(i_0, 7)) {
                return this;
            }
        }
    }
    else if (instanceOf(this.operand, 93)) {
        return new CastExpression(dynamicCast(this.operand, 93).select, ($clinit_AtomicType() , UNTYPED_ATOMIC), true);
    }
    return this;
}
;
_.typeCheck = function typeCheck_6(visitor, contextItemType){
    var operandType, th;
    this.operand = $typeCheck_1(visitor, this.operand, contextItemType);
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    $resetStaticProperties(visitor);
    operandType = this.operand.getItemType();
    if ($isSubType(th, operandType, ($clinit_AtomicType() , ANY_ATOMIC))) {
        return this.operand;
    }
    this.operand.setFlattened(true);
    return this;
}
;
var Lclient_net_sf_saxon_ce_expr_Atomizer_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'Atomizer', 140, Lclient_net_sf_saxon_ce_expr_UnaryExpression_2_classLit);
function Atomizer$1(){
}

defineClass(692, 1, {}, Atomizer$1);
_.mapItem = function mapItem_0(item_0){
    return item_0.getTypedValue();
}
;
var Lclient_net_sf_saxon_ce_expr_Atomizer$1_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'Atomizer/1', 692, Ljava_lang_Object_2_classLit);
function AxisExpression(axis_0, nodeTest){
    this.axis_0 = axis_0;
    this.test_0 = nodeTest;
}

defineClass(52, 6, {52:1, 6:1}, AxisExpression);
_.computeCardinality = function computeCardinality_4(){
    return this.axis_0 == 2 && instanceOf(this.test_0, 60)?$intern_20:this.axis_0 == 12?$intern_20:$intern_12;
}
;
_.computeSpecialProperties = function computeSpecialProperties_4(){
    return 12648448 | (($clinit_Axis() , isForwards)[this.axis_0]?$intern_25:$intern_26) | (isPeerAxis[this.axis_0]?$intern_27:0) | (isSubtreeAxis[this.axis_0]?$intern_28:0) | (this.axis_0 == 2 || this.axis_0 == 8?$intern_29:0);
}
;
_.equals$ = function equals_5(other){
    if (!instanceOf(other, 52)) {
        return false;
    }
    if (this.axis_0 != dynamicCast(other, 52).axis_0) {
        return false;
    }
    if (!this.test_0) {
        return !dynamicCast(other, 52).test_0;
    }
    return $equals_5(this.test_0.toString$(), dynamicCast(other, 52).test_0.toString$());
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_0(){
    return 2;
}
;
_.getItemType = function getItemType_5(){
    var p_0;
    p_0 = ($clinit_Axis() , principalNodeType_0)[this.axis_0];
    switch (p_0) {
        case 2:
    case 13:
        return makeNodeKindTest(p_0);
    default:return !this.test_0?($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7):this.test_0;
    }
}
;
_.hashCode$ = function hashCode_6(){
    var h;
    h = 9375162 + this.axis_0 << 20;
    !!this.test_0 && (h ^= this.test_0.hashCode$());
    return h;
}
;
_.iterate_0 = function iterate_4(context){
    var appendText, cName, code_0, err, isAtomic, item_0;
    item_0 = context.getContextItem();
    if (instanceOf(item_0, 7)) {
        return !this.test_0?dynamicCast(item_0, 7).iterateAxis(this.axis_0, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)):dynamicCast(item_0, 7).iterateAxis(this.axis_0, this.test_0);
    }
    else {
        cName = ($clinit_Axis() , axisName)[this.axis_0] + '::' + (!this.test_0?'node()':this.test_0.toString$());
        isAtomic = instanceOf(item_0, 13);
        appendText = ' is ' + (isAtomic?'not a node':'undefined');
        code_0 = isAtomic?'XPTY0020':'XPDY0002';
        err = new XPathException_0('The context item for axis step ' + cName + appendText);
        err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', code_0);
            $setLocator(err, $getSourceLocator(this));
            err.isTypeError = true;
            throw err;
    }
}
;
_.optimize = function optimize_3(visitor, contextItemType){
    return this;
}
;
_.simplify = function simplify_6(visitor){
    var p_0;
    if (this.axis_0 == 9 && (!this.test_0 || instanceOf(this.test_0, 176))) {
        p_0 = new ParentNodeExpression;
        copyLocationInfo(this, p_0);
        return p_0;
    }
    return this;
}
;
_.toString$ = function toString_7(){
    return ($clinit_Axis() , axisName)[this.axis_0] + '::' + (!this.test_0?'node()':this.test_0.toString$());
}
;
_.typeCheck = function typeCheck_7(visitor, contextItemType){
    !contextItemType && $typeError(this, visitor, 'Axis step ' + (($clinit_Axis() , axisName)[this.axis_0] + '::' + (!this.test_0?'node()':this.test_0.toString$())) + ' cannot be used here: the context item is undefined', 'XPDY0002');
    instanceOf(contextItemType, 43) && $typeError(this, visitor, 'Axis step ' + (($clinit_Axis() , axisName)[this.axis_0] + '::' + (!this.test_0?'node()':this.test_0.toString$())) + ' cannot be used here: the context item is an atomic value', 'XPTY0020');
    if (this.contextItemType == contextItemType && this.doneWarnings) {
        return this;
    }
    this.contextItemType = contextItemType;
    this.doneWarnings = true;
    return this;
}
;
_.axis_0 = 0;
_.contextItemType = null;
_.doneWarnings = false;
var Lclient_net_sf_saxon_ce_expr_AxisExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'AxisExpression', 52, Lclient_net_sf_saxon_ce_expr_Expression_2_classLit);
var Lclient_net_sf_saxon_ce_expr_Binding_2_classLit = createForInterface('client.net.sf.saxon.ce.expr', 'Binding');
function $effectiveBooleanValue(this$static, c){
    switch (this$static.operator) {
        case 10:
            return this$static.operand0.effectiveBooleanValue(c) && this$static.operand1.effectiveBooleanValue(c);
        case 9:
            return this$static.operand0.effectiveBooleanValue(c) || this$static.operand1.effectiveBooleanValue(c);
        default:throw new UnsupportedOperationException_0('Unknown operator in boolean expression');
    }
}

function $forceToBoolean(in_$){
    return in_$.getItemType() == ($clinit_AtomicType() , BOOLEAN) && in_$.getCardinality() == $intern_21?in_$:makeSystemFunction('boolean', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [in_$]));
}

function BooleanExpression(p1, operator, p2){
    BinaryExpression.call(this, p1, operator, p2);
}

defineClass(821, 79, $intern_19, BooleanExpression);
_.computeCardinality = function computeCardinality_5(){
    return $intern_21;
}
;
_.effectiveBooleanValue = function effectiveBooleanValue_0(c){
    return $effectiveBooleanValue(this, c);
}
;
_.evaluateItem = function evaluateItem_4(context){
    return $clinit_BooleanValue() , $effectiveBooleanValue(this, context)?TRUE_0:FALSE_0;
}
;
_.getItemType = function getItemType_6(){
    return $clinit_AtomicType() , BOOLEAN;
}
;
_.optimize = function optimize_4(visitor, contextItemType){
    var cond, e, op0, op1, th;
    e = $optimize_0(this, visitor, contextItemType);
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    if (e != this) {
        return e;
    }
    op0 = rewriteEffectiveBooleanValue(this.operand0, visitor, contextItemType);
    !!op0 && (this.operand0 = op0);
    op1 = rewriteEffectiveBooleanValue(this.operand1, visitor, contextItemType);
    !!op1 && (this.operand1 = op1);
    if (this.operator == 10) {
        if (isConstantBoolean(this.operand0, false) || isConstantBoolean(this.operand1, false)) {
            return new Literal(($clinit_BooleanValue() , FALSE_0));
        }
        else if (isConstantBoolean(this.operand0, true)) {
            return $forceToBoolean(this.operand1);
        }
        else if (isConstantBoolean(this.operand1, true)) {
            return $forceToBoolean(this.operand0);
        }
    }
    if (this.operator == 9) {
        if (isConstantBoolean(this.operand0, true) || isConstantBoolean(this.operand1, true)) {
            return new Literal(($clinit_BooleanValue() , TRUE_0));
        }
        else if (isConstantBoolean(this.operand0, false)) {
            return $forceToBoolean(this.operand1);
        }
        else if (isConstantBoolean(this.operand1, false)) {
            return $forceToBoolean(this.operand0);
        }
    }
    if (e == this && this.operator == 10 && instanceOf(this.operand1, 261) && $isSubType(th, this.operand1.getItemType(), ($clinit_AtomicType() , BOOLEAN)) && !$isLoopingSubexpression(visitor, null)) {
        cond = makeConditional_0(this.operand0, this.operand1, makeLiteral(($clinit_BooleanValue() , FALSE_0)));
        copyLocationInfo(this, cond);
        return cond;
    }
    return this;
}
;
_.typeCheck = function typeCheck_8(visitor, contextItemType){
    var e, err0, err1;
    e = (this.operand0 = $typeCheck_1(visitor, this.operand0, contextItemType) , this.operand1 = $typeCheck_1(visitor, this.operand1, contextItemType) , this);
    if (e == this) {
        err0 = ebvError_0(this.operand0);
        if (err0) {
            $setLocator(err0, $getSourceLocator(this));
            throw err0;
        }
        err1 = ebvError_0(this.operand1);
        if (err1) {
            $setLocator(err1, $getSourceLocator(this));
            throw err1;
        }
        instanceOf(this.operand0, 9) && !instanceOf(dynamicCast(this.operand0, 9).value_0, 90) && (this.operand0 = makeLiteral(($clinit_BooleanValue() , this.operand0.effectiveBooleanValue(null)?TRUE_0:FALSE_0)));
        instanceOf(this.operand1, 9) && !instanceOf(dynamicCast(this.operand1, 9).value_0, 90) && (this.operand1 = makeLiteral(($clinit_BooleanValue() , this.operand1.effectiveBooleanValue(null)?TRUE_0:FALSE_0)));
    }
    return e;
}
;
var Lclient_net_sf_saxon_ce_expr_BooleanExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'BooleanExpression', 821, Lclient_net_sf_saxon_ce_expr_BinaryExpression_2_classLit);
function CardinalityChecker(sequence, cardinality, role){
    UnaryExpression.call(this, sequence);
    this.requiredCardinality = -1;
    this.requiredCardinality = cardinality;
    this.role = role;
    this.staticProperties = $computeDependencies(this) | this.requiredCardinality | $getSpecialProperties(this.operand);
    $adoptChildExpression(this, sequence);
}

function makeCardinalityChecker(sequence, cardinality, role){
    var result;
    result = new CardinalityChecker(sequence, cardinality, role);
    copyLocationInfo(sequence, result);
    return result;
}

defineClass(390, 54, {390:1, 6:1, 54:1}, CardinalityChecker);
_.computeCardinality = function computeCardinality_6(){
    return this.requiredCardinality;
}
;
_.computeSpecialProperties = function computeSpecialProperties_5(){
    return $getSpecialProperties(this.operand);
}
;
_.equals$ = function equals_6(other){
    return other != null && Lclient_net_sf_saxon_ce_expr_CardinalityChecker_2_classLit == getClass__Ljava_lang_Class___devirtual$(other) && this.operand.equals$(dynamicCast(other, 54).operand) && this.requiredCardinality == dynamicCast(other, 390).requiredCardinality;
}
;
_.evaluateItem = function evaluateItem_5(context){
    var item_0, iter, nextItem;
    iter = this.operand.iterate_0(context);
    item_0 = null;
    while (true) {
        nextItem = iter.next_0();
        if (!nextItem)
            break;
        if (this.requiredCardinality == $intern_17) {
            $typeError(this, null, 'An empty sequence is required as the ' + $getMessage(this.role), this.role.errorCode);
            return null;
        }
        if (item_0) {
            $typeError(this, null, 'A sequence of more than one item is not allowed as the ' + $getMessage(this.role), this.role.errorCode);
            return null;
        }
        item_0 = nextItem;
    }
    if (!item_0 && (this.requiredCardinality & $intern_17) == 0) {
        $typeError(this, null, 'An empty sequence is not allowed as the ' + $getMessage(this.role), this.role.errorCode);
        return null;
    }
    return item_0;
}
;
_.getImplementationMethod = function getImplementationMethod_1(){
    var m;
    m = 2;
    (this.requiredCardinality & $intern_14) != 0 || (m |= 1);
    return m;
}
;
_.getItemType = function getItemType_7(){
    return this.operand.getItemType();
}
;
_.hashCode$ = function hashCode_7(){
    return getHashCode_0('UnaryExpression ' + Lclient_net_sf_saxon_ce_expr_CardinalityChecker_2_classLit) ^ this.operand.hashCode$() ^ this.requiredCardinality;
}
;
_.iterate_0 = function iterate_5(context){
    var base, first, function_$;
    base = this.operand.iterate_0(context);
    if ((this.requiredCardinality & $intern_17) == 0) {
        first = base.next_0();
        !first?$typeError(this, null, 'An empty sequence is not allowed as the ' + $getMessage(this.role), this.role.errorCode):(base = new OneItemGoneIterator(first, base));
    }
    if ((this.requiredCardinality & $intern_14) != 0) {
        return base;
    }
    else {
        function_$ = new CardinalityChecker$SingletonCheckingFunction(this);
        return new ItemMappingIterator(base, function_$);
    }
}
;
_.optimize = function optimize_5(visitor, contextItemType){
    this.operand = $optimize_1(visitor, this.operand, contextItemType);
    if (this.requiredCardinality == $intern_12 || subsumes(this.requiredCardinality, this.operand.getCardinality())) {
        return this.operand;
    }
    return this;
}
;
_.typeCheck = function typeCheck_9(visitor, contextItemType){
    this.operand = $typeCheck_1(visitor, this.operand, contextItemType);
    if (this.requiredCardinality == $intern_12 || subsumes(this.requiredCardinality, this.operand.getCardinality())) {
        return this.operand;
    }
    return this;
}
;
_.requiredCardinality = 0;
var Lclient_net_sf_saxon_ce_expr_CardinalityChecker_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'CardinalityChecker', 390, Lclient_net_sf_saxon_ce_expr_UnaryExpression_2_classLit);
function CardinalityChecker$SingletonCheckingFunction(this$0){
    this.this$01 = this$0;
}

defineClass(443, 1, $intern_30, CardinalityChecker$SingletonCheckingFunction);
_.getAnother_1 = function getAnother_2(newBaseIterator){
    return new CardinalityChecker$SingletonCheckingFunction(this.this$01);
}
;
_.mapItem = function mapItem_1(item_0){
    if (++this.count > 1) {
        $typeError(this.this$01, null, 'A sequence of more than one item is not allowed as the ' + $getMessage(this.this$01.role), this.this$01.role.errorCode);
        return null;
    }
    else {
        return item_0;
    }
}
;
_.count = 0;
var Lclient_net_sf_saxon_ce_expr_CardinalityChecker$SingletonCheckingFunction_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'CardinalityChecker/SingletonCheckingFunction', 443, Ljava_lang_Object_2_classLit);
function $clinit_CastExpression(){
    $clinit_CastExpression = emptyMethod;
    var b64, boo, dat, dbl, dec, dtd, dtm, dur, flt, gdy, gmd, gmo, gym, gyr, hxb, ing, qnm, str, t01, t02, t03, t04, t05, t06, t07, t08, t09, t10, t11, t12, t13, t14, t15, t16, tim, uat, uri_0, ymd;
    castingTable = new HashMap_0(25);
    uat = ($clinit_AtomicType() , UNTYPED_ATOMIC);
    str = STRING;
    flt = FLOAT;
    dbl = DOUBLE;
    dec = DECIMAL;
    ing = INTEGER;
    dur = DURATION;
    ymd = YEAR_MONTH_DURATION;
    dtd = DAY_TIME_DURATION;
    dtm = DATE_TIME;
    tim = TIME;
    dat = DATE;
    gym = G_YEAR_MONTH;
    gyr = G_YEAR;
    gmd = G_MONTH_DAY;
    gdy = G_DAY;
    gmo = G_MONTH;
    boo = BOOLEAN;
    b64 = BASE64_BINARY;
    hxb = HEX_BINARY;
    uri_0 = ANY_URI;
    qnm = QNAME;
    t01 = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_type_AtomicType_2_classLit, 1), $intern_31, 43, 0, [uat, str, flt, dbl, dec, ing, dur, ymd, dtd, dtm, tim, dat, gym, gyr, gmd, gdy, gmo, boo, b64, hxb, uri_0]);
    $put_0(castingTable, uat, t01);
    t02 = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_type_AtomicType_2_classLit, 1), $intern_31, 43, 0, [uat, str, flt, dbl, dec, ing, dur, ymd, dtd, dtm, tim, dat, gym, gyr, gmd, gdy, gmo, boo, b64, hxb, uri_0, qnm]);
    $put_0(castingTable, str, t02);
    t03 = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_type_AtomicType_2_classLit, 1), $intern_31, 43, 0, [uat, str, flt, dbl, dec, ing, boo]);
    $put_0(castingTable, flt, t03);
    $put_0(castingTable, dbl, t03);
    $put_0(castingTable, dec, t03);
    $put_0(castingTable, ing, t03);
    t04 = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_type_AtomicType_2_classLit, 1), $intern_31, 43, 0, [uat, str, dur, ymd, dtd]);
    $put_0(castingTable, dur, t04);
    $put_0(castingTable, ymd, t04);
    $put_0(castingTable, dtd, t04);
    t05 = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_type_AtomicType_2_classLit, 1), $intern_31, 43, 0, [uat, str, dtm, tim, dat, gym, gyr, gmd, gdy, gmo]);
    $put_0(castingTable, dtm, t05);
    t06 = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_type_AtomicType_2_classLit, 1), $intern_31, 43, 0, [uat, str, tim]);
    $put_0(castingTable, tim, t06);
    t07 = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_type_AtomicType_2_classLit, 1), $intern_31, 43, 0, [uat, str, dtm, dat, gym, gyr, gmd, gdy, gmo]);
    $put_0(castingTable, dat, t07);
    t08 = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_type_AtomicType_2_classLit, 1), $intern_31, 43, 0, [uat, str, gym]);
    $put_0(castingTable, gym, t08);
    t09 = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_type_AtomicType_2_classLit, 1), $intern_31, 43, 0, [uat, str, gyr]);
    $put_0(castingTable, gyr, t09);
    t10 = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_type_AtomicType_2_classLit, 1), $intern_31, 43, 0, [uat, str, gmd]);
    $put_0(castingTable, gmd, t10);
    t11 = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_type_AtomicType_2_classLit, 1), $intern_31, 43, 0, [uat, str, gdy]);
    $put_0(castingTable, gdy, t11);
    t12 = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_type_AtomicType_2_classLit, 1), $intern_31, 43, 0, [uat, str, gmo]);
    $put_0(castingTable, gmo, t12);
    t13 = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_type_AtomicType_2_classLit, 1), $intern_31, 43, 0, [uat, str, flt, dbl, dec, ing, boo]);
    $put_0(castingTable, boo, t13);
    t14 = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_type_AtomicType_2_classLit, 1), $intern_31, 43, 0, [uat, str, b64, hxb]);
    $put_0(castingTable, b64, t14);
    $put_0(castingTable, hxb, t14);
    t15 = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_type_AtomicType_2_classLit, 1), $intern_31, 43, 0, [uat, str, uri_0]);
    $put_0(castingTable, uri_0, t15);
    t16 = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_type_AtomicType_2_classLit, 1), $intern_31, 43, 0, [uat, str, qnm]);
    $put_0(castingTable, qnm, t16);
}

function $computeSpecialProperties(this$static){
    var p_0;
    p_0 = $getSpecialProperties(this$static.operand);
    return p_0 | $intern_22;
}

function $evaluateItem_0(this$static, context){
    var code_0, err, lcode, result, value_0;
    value_0 = dynamicCast(this$static.operand.evaluateItem(context), 13);
    if (!value_0) {
        if (this$static.allowEmpty) {
            return null;
        }
        else {
            throw new XPathException_3('Cast does not allow an empty sequence', 'XPTY0004', $getSourceLocator(this$static));
        }
    }
    if (this$static.upcast) {
        return dynamicCast(value_0.convert(this$static.targetType), 13);
    }
    result = value_0.convert(this$static.targetType);
    if (instanceOf(result, 29)) {
        err = dynamicCast(result, 29);
        code_0 = err.errorCode;
        lcode = !code_0?null:valueOf_3(code_0.content_0, code_0.localNameStart, code_0.prefixStart - code_0.localNameStart);
        lcode == null && (lcode = 'FORG0001');
        $dynamicError(this$static, err.message_0, lcode);
        return null;
    }
    return dynamicCast(result, 13);
}

function $typeCheck_0(this$static, visitor, contextItemType){
    var atomicType, av, literalOperand, p_0, r, role, sourceType, th;
    this$static.operand = $typeCheck_1(visitor, this$static.operand, contextItemType);
    atomicType = ($clinit_SequenceType() , new SequenceType(($clinit_AtomicType() , ANY_ATOMIC), (this$static.staticProperties == -1 && (this$static.staticProperties = $computeDependencies(this$static) | (this$static.allowEmpty && (this$static.operand.getCardinality() & $intern_17) != 0?$intern_20:$intern_21) | $computeSpecialProperties(this$static)) , this$static.staticProperties & $intern_12)));
    role = new RoleLocator(2, 'cast as', 0);
    this$static.operand = staticTypeCheck_1(this$static.operand, atomicType, false, role);
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    sourceType = this$static.operand.getItemType();
    r = $relationship(th, sourceType, this$static.targetType);
    if (r == 0) {
        return this$static.operand;
    }
    else if (r == 2) {
        this$static.upcast = true;
        return this$static;
    }
    if (instanceOf(this$static.operand, 9)) {
        literalOperand = dynamicCast(this$static.operand, 9).value_0;
        if (instanceOf(literalOperand, 13)) {
            av = $evaluateItem_0(this$static, new EarlyEvaluationContext(visitor.configuration));
            return instanceOf(av, 12)?new StringLiteral(dynamicCast(av, 12)):new Literal(av);
        }
        if (instanceOf(literalOperand, 141)) {
            if (this$static.allowEmpty) {
                return this$static.operand;
            }
            else {
                $typeError(this$static, null, 'Cast can never succeed: the operand must not be an empty sequence', 'XPTY0004');
            }
        }
    }
    if (sourceType != ($clinit_EmptySequenceTest() , $clinit_EmptySequenceTest() , THE_INSTANCE_8)) {
        p_0 = sourceType.getAtomizedItemType();
        isPossibleCast(p_0, this$static.targetType) || $typeError(this$static, null, 'Casting from ' + sourceType + ' to ' + this$static.targetType + ' can never succeed', 'XPTY0004');
    }
    return this$static;
}

function CastExpression(source, target, allowEmpty){
    $clinit_CastExpression();
    UnaryExpression.call(this, source);
    this.allowEmpty = false;
    this.upcast = false;
    this.allowEmpty = allowEmpty;
    this.targetType = target;
    $adoptChildExpression(this, source);
}

function castStringToQName(operand, env){
    $clinit_CastExpression();
    var arg, err, qn;
    try {
        arg = toString__Ljava_lang_String___devirtual$_0(trimWhitespace(operand));
        qn = fromLexicalQName(arg, '', env.getNamespaceResolver());
        return new QNameValue(qn);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            !err.errorCode && (err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FONS0004'));
                throw err;
        }
        else 
            throw unwrap($e0);
    }
}

function isPossibleCast(source, target){
    $clinit_CastExpression();
    var t, t$index, t$max, targets;
    if (source == ($clinit_AtomicType() , ANY_ATOMIC)) {
        return true;
    }
    source == NUMERIC && (source = DOUBLE);
    targets = dynamicCast($get_0(castingTable, source), 127);
    if (targets == null) {
        return false;
    }
    for (t$index = 0 , t$max = targets.length; t$index < t$max; ++t$index) {
        t = targets[t$index];
        if (t == target) {
            return true;
        }
    }
    return false;
}

defineClass(104, 54, {104:1, 6:1, 54:1}, CastExpression);
_.computeCardinality = function computeCardinality_7(){
    return this.allowEmpty && (this.operand.getCardinality() & $intern_17) != 0?$intern_20:$intern_21;
}
;
_.computeSpecialProperties = function computeSpecialProperties_6(){
    return $computeSpecialProperties(this);
}
;
_.equals$ = function equals_7(other){
    return other != null && Lclient_net_sf_saxon_ce_expr_CastExpression_2_classLit == getClass__Ljava_lang_Class___devirtual$(other) && this.operand.equals$(dynamicCast(other, 54).operand) && this.targetType == dynamicCast(other, 104).targetType && this.allowEmpty == dynamicCast(other, 104).allowEmpty;
}
;
_.evaluateItem = function evaluateItem_6(context){
    return $evaluateItem_0(this, context);
}
;
_.getItemType = function getItemType_8(){
    return this.targetType;
}
;
_.hashCode$ = function hashCode_8(){
    return getHashCode_0('UnaryExpression ' + Lclient_net_sf_saxon_ce_expr_CastExpression_2_classLit) ^ this.operand.hashCode$() ^ getHashCode(this.targetType);
}
;
_.optimize = function optimize_6(visitor, contextItemType){
    var e, e2, et, it, th;
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    e2 = $optimize(this, visitor, contextItemType);
    if (e2 != this) {
        return e2;
    }
    if (this.targetType == ($clinit_AtomicType() , UNTYPED_ATOMIC)) {
        if (instanceOf(this.operand, 192)) {
            e = dynamicCast(this.operand, 192).argument[0];
            instanceOf(e.getItemType(), 43) && e.getCardinality() == $intern_21 && (this.operand = e);
        }
    }
    if (instanceOf(this.operand, 192)) {
        e = dynamicCast(this.operand, 192).argument[0];
        et = e.getItemType();
        if (instanceOf(et, 43) && e.getCardinality() == $intern_21 && $isSubType(th, et, this.targetType)) {
            return e;
        }
    }
    if (instanceOf(this.operand, 104)) {
        it = dynamicCast(this.operand, 104).targetType;
        if ($isSubType(th, it, STRING) || $isSubType(th, it, UNTYPED_ATOMIC)) {
            e = dynamicCast(this.operand, 104).operand;
            et = e.getItemType();
            if (instanceOf(et, 43) && e.getCardinality() == $intern_21 && $isSubType(th, et, this.targetType)) {
                return e;
            }
        }
    }
    if ((this.operand.getCardinality() & $intern_17) == 0) {
        this.allowEmpty = false;
        this.staticProperties = -1;
    }
    return this;
}
;
_.simplify = function simplify_7(visitor){
    this.operand = $simplify(visitor, this.operand);
    if (isAtomic_0(this.operand)) {
        return $typeCheck_0(this, visitor, ($clinit_Type() , ITEM_TYPE));
    }
    return this;
}
;
_.toString$ = function toString_8(){
    return 'xs:' + this.targetType.localName_0 + '(' + this.operand.toString$() + ')';
}
;
_.typeCheck = function typeCheck_10(visitor, contextItemType){
    return $typeCheck_0(this, visitor, contextItemType);
}
;
_.allowEmpty = false;
_.upcast = false;
var castingTable;
var Lclient_net_sf_saxon_ce_expr_CastExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'CastExpression', 104, Lclient_net_sf_saxon_ce_expr_UnaryExpression_2_classLit);
function $effectiveBooleanValue_0(this$static, context){
    var av, count, item_0, iter;
    count = 0;
    iter = this$static.operand.iterate_0(context);
    while (true) {
        item_0 = iter.next_0();
        if (!item_0) {
            break;
        }
        av = item_0.getTypedValue();
        ++count;
        if (count > 1) {
            return false;
        }
        if (instanceOf(av.convert(this$static.targetType), 29)) {
            return false;
        }
    }
    return count != 0 || this$static.allowEmpty;
}

function $preEvaluate(this$static, visitor){
    if (isAtomic_0(this$static.operand)) {
        return makeLiteral(($clinit_BooleanValue() , $effectiveBooleanValue_0(this$static, new EarlyEvaluationContext(visitor.configuration))?TRUE_0:FALSE_0));
    }
    if (isEmptySequence(this$static.operand)) {
        return new Literal(($clinit_BooleanValue() , this$static.allowEmpty?TRUE_0:FALSE_0));
    }
    return this$static;
}

function CastableExpression(source, target, allowEmpty){
    UnaryExpression.call(this, source);
    this.targetType = target;
    this.allowEmpty = allowEmpty;
}

defineClass(357, 54, {357:1, 6:1, 54:1}, CastableExpression);
_.computeCardinality = function computeCardinality_8(){
    return $intern_21;
}
;
_.computeSpecialProperties = function computeSpecialProperties_7(){
    var p_0;
    p_0 = $getSpecialProperties(this.operand);
    return p_0 | $intern_22;
}
;
_.effectiveBooleanValue = function effectiveBooleanValue_1(context){
    return $effectiveBooleanValue_0(this, context);
}
;
_.equals$ = function equals_8(other){
    return other != null && Lclient_net_sf_saxon_ce_expr_CastableExpression_2_classLit == getClass__Ljava_lang_Class___devirtual$(other) && this.operand.equals$(dynamicCast(other, 54).operand) && this.targetType == dynamicCast(other, 357).targetType && this.allowEmpty == dynamicCast(other, 357).allowEmpty;
}
;
_.evaluateItem = function evaluateItem_7(context){
    return $clinit_BooleanValue() , $effectiveBooleanValue_0(this, context)?TRUE_0:FALSE_0;
}
;
_.getItemType = function getItemType_9(){
    return $clinit_AtomicType() , BOOLEAN;
}
;
_.hashCode$ = function hashCode_9(){
    return getHashCode_0('UnaryExpression ' + Lclient_net_sf_saxon_ce_expr_CastableExpression_2_classLit) ^ this.operand.hashCode$() ^ getHashCode(this.targetType);
}
;
_.optimize = function optimize_7(visitor, contextItemType){
    this.operand = $optimize_1(visitor, this.operand, contextItemType);
    return $preEvaluate(this, visitor);
}
;
_.simplify = function simplify_8(visitor){
    this.operand = $simplify(visitor, this.operand);
    return $preEvaluate(this, visitor);
}
;
_.typeCheck = function typeCheck_11(visitor, contextItemType){
    this.operand = $typeCheck_1(visitor, this.operand, contextItemType);
    $clinit_TypeHierarchy();
    if (!isPossibleCast(this.operand.getItemType().getAtomizedItemType(), this.targetType)) {
        return makeLiteral(($clinit_BooleanValue() , FALSE_0));
    }
    return $preEvaluate(this, visitor);
}
;
_.allowEmpty = false;
var Lclient_net_sf_saxon_ce_expr_CastableExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'CastableExpression', 357, Lclient_net_sf_saxon_ce_expr_UnaryExpression_2_classLit);
function ContextItemExpression(){
    this.itemType = ($clinit_Type() , ITEM_TYPE);
}

defineClass(115, 6, $intern_32, ContextItemExpression);
_.computeCardinality = function computeCardinality_9(){
    return $intern_21;
}
;
_.computeSpecialProperties = function computeSpecialProperties_8(){
    return $intern_22;
}
;
_.equals$ = function equals_9(other){
    return instanceOf(other, 115);
}
;
_.evaluateItem = function evaluateItem_8(context){
    var item_0;
    item_0 = context.getContextItem();
    !item_0 && $dynamicError(this, 'The context item is not set', this.getErrorCodeForUndefinedContext());
    return item_0;
}
;
_.getErrorCodeForUndefinedContext = function getErrorCodeForUndefinedContext(){
    return 'XPDY0002';
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_1(){
    return 2;
}
;
_.getItemType = function getItemType_10(){
    return this.itemType;
}
;
_.hashCode$ = function hashCode_10(){
    return getHashCode_0('ContextItemExpression');
}
;
_.iterate_0 = function iterate_6(context){
    var item_0;
    item_0 = context.getContextItem();
    !item_0 && $dynamicError(this, 'The context item is not set', this.getErrorCodeForUndefinedContext());
    return !item_0?($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1):new SingletonIterator(item_0);
}
;
_.optimize = function optimize_8(visitor, contextItemType){
    return !contextItemType && $typeError(this, null, 'The context item is undefined at this point', this.getErrorCodeForUndefinedContext()) , this.itemType = contextItemType , this;
}
;
_.toString$ = function toString_9(){
    return '.';
}
;
_.typeCheck = function typeCheck_12(visitor, contextItemType){
    return !contextItemType && $typeError(this, null, 'The context item is undefined at this point', this.getErrorCodeForUndefinedContext()) , this.itemType = contextItemType , this;
}
;
var Lclient_net_sf_saxon_ce_expr_ContextItemExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'ContextItemExpression', 115, Lclient_net_sf_saxon_ce_expr_Expression_2_classLit);
function ContextMappingIterator(action, context){
    this.base = context.getCurrentIterator();
    this.action = action;
    this.context = context;
}

defineClass(266, 1, $intern_18, ContextMappingIterator);
_.getAnother = function getAnother_3(){
    var c2, newBase;
    newBase = new FocusIterator(this.base.base.getAnother());
    c2 = this.context.newMinorContext();
    c2.setCurrentIterator(newBase);
    return new ContextMappingIterator(this.action, c2);
}
;
_.next_0 = function next_2(){
    var nextItem;
    while (true) {
        if (this.stepIterator) {
            nextItem = this.stepIterator.next_0();
            if (nextItem) {
                break;
            }
            else {
                this.stepIterator = null;
            }
        }
        if ($next_3(this.base)) {
            this.stepIterator = this.action.map_1(this.context);
            nextItem = this.stepIterator.next_0();
            if (!nextItem) {
                this.stepIterator = null;
            }
            else {
                break;
            }
        }
        else {
            this.stepIterator = null;
            return null;
        }
    }
    return nextItem;
}
;
_.stepIterator = null;
var Lclient_net_sf_saxon_ce_expr_ContextMappingIterator_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'ContextMappingIterator', 266, Ljava_lang_Object_2_classLit);
function CurrentItemExpression(){
    ContextItemExpression.call(this);
}

defineClass(788, 115, $intern_32, CurrentItemExpression);
_.getErrorCodeForUndefinedContext = function getErrorCodeForUndefinedContext_0(){
    return 'XTDE1360';
}
;
var Lclient_net_sf_saxon_ce_expr_CurrentItemExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'CurrentItemExpression', 788, Lclient_net_sf_saxon_ce_expr_ContextItemExpression_2_classLit);
function $clinit_XPathContext(){
    $clinit_XPathContext = emptyMethod;
    EMPTY_STACKFRAME = initDim(Lclient_net_sf_saxon_ce_om_Sequence_2_classLit, $intern_1, 14, 0, 0, 1);
}

function $getTailCallFunction(this$static){
    var fn;
    fn = this$static.tailCallFunction;
    this$static.tailCallFunction = null;
    return fn;
}

function $openStackFrame(this$static, numberOfSlots){
    numberOfSlots == 0?(this$static.stackFrame = EMPTY_STACKFRAME):(this$static.stackFrame = initDim(Lclient_net_sf_saxon_ce_om_Sequence_2_classLit, $intern_1, 14, numberOfSlots, 0, 1));
}

function $requestTailCall(this$static, fn, variables){
    var v2;
    if (variables.length > this$static.stackFrame.length) {
        v2 = initDim(Lclient_net_sf_saxon_ce_om_Sequence_2_classLit, $intern_1, 14, fn.numberOfSlots, 0, 1);
        arraycopy(variables, 0, v2, 0, variables.length);
        this$static.stackFrame = v2;
    }
    else {
        arraycopy(variables, 0, this$static.stackFrame, 0, variables.length);
    }
    this$static.tailCallFunction = fn;
}

function $resetStackFrameMap(this$static, numberOfSlots, numberOfParams){
    var v2;
    if (this$static.stackFrame.length != numberOfSlots) {
        v2 = initDim(Lclient_net_sf_saxon_ce_om_Sequence_2_classLit, $intern_1, 14, numberOfSlots, 0, 1);
        arraycopy(this$static.stackFrame, 0, v2, 0, numberOfParams);
        this$static.stackFrame = v2;
    }
    else {
        fill_2(this$static.stackFrame, numberOfParams, this$static.stackFrame.length);
    }
}

function $setCurrentGroupIterator(this$static, iterator){
    this$static.currentGroupIterator = iterator;
}

function $setParameters_0(this$static, slots, localParameters, tunnelParameters){
    slots == 0?(this$static.stackFrame = EMPTY_STACKFRAME):(this$static.stackFrame = initDim(Lclient_net_sf_saxon_ce_om_Sequence_2_classLit, $intern_1, 14, slots, 0, 1));
    this$static.localParameters = localParameters;
    this$static.tunnelParameters = tunnelParameters;
}

function $setStackFrame(this$static, size_0, variables){
    this$static.stackFrame = variables;
    if (variables.length != size_0) {
        if (variables.length > size_0) {
            throw new IllegalStateException_0('Attempting to set more local variables (' + variables.length + ') than the stackframe can accommodate (' + size_0 + ')');
        }
        this$static.stackFrame = initDim(Lclient_net_sf_saxon_ce_om_Sequence_2_classLit, $intern_1, 14, size_0, 0, 1);
        arraycopy(variables, 0, this$static.stackFrame, 0, variables.length);
    }
}

function XPathContext(controller){
    $clinit_XPathContext();
    this.controller = controller;
    this.stackFrame = EMPTY_STACKFRAME;
}

defineClass(197, 1, {}, XPathContext);
_.changeOutputDestination = function changeOutputDestination(receiver, isFinal){
    var err, ne, out, pipe;
    if (isFinal && this.isTemporaryDestination) {
        err = new XPathException_0('Cannot switch to a final result destination while writing a temporary tree');
        err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTDE1480');
            throw err;
    }
    isFinal || (this.isTemporaryDestination = true);
    pipe = receiver.getPipelineConfiguration();
    out = new ComplexContentOutputter;
    $setPipelineConfiguration_1(out, pipe);
    ne = new NamespaceReducer;
    $setUnderlyingReceiver(ne, receiver);
    $setPipelineConfiguration_0(ne, pipe);
    out.nextReceiver = receiver;
    this.currentReceiver = out;
}
;
_.evaluateLocalVariable = function evaluateLocalVariable(slotnumber){
    return this.stackFrame[slotnumber];
}
;
_.getConfiguration = function getConfiguration(){
    return this.controller.config;
}
;
_.getContextItem = function getContextItem(){
    return !this.currentIterator?null:this.currentIterator.curr;
}
;
_.getContextPosition = function getContextPosition(){
    if (!this.currentIterator) {
        throw new XPathException_2('The context position is currently undefined', 'FONC0001');
    }
    return this.currentIterator.pos;
}
;
_.getController = function getController(){
    return this.controller;
}
;
_.getCurrentGroupIterator = function getCurrentGroupIterator(){
    return this.currentGroupIterator;
}
;
_.getCurrentIterator = function getCurrentIterator(){
    return this.currentIterator;
}
;
_.getCurrentMode = function getCurrentMode(){
    var m, rm;
    m = this.currentMode;
    if (!m) {
        rm = this.getController().ruleManager;
        return rm?rm.unnamedMode:null;
    }
    else {
        return m;
    }
}
;
_.getCurrentRegexIterator = function getCurrentRegexIterator(){
    return this.currentRegexIterator;
}
;
_.getCurrentTemplateRule = function getCurrentTemplateRule(){
    return this.currentTemplate;
}
;
_.getImplicitTimezone = function getImplicitTimezone(){
    return this.getConfiguration().implicitTimezone;
}
;
_.getLast = function getLast(){
    if (!this.currentIterator) {
        throw new XPathException_2('The context size is currently undefined', 'FONC0001');
    }
    return $last(this.currentIterator);
}
;
_.getLocalParameters = function getLocalParameters(){
    !this.localParameters && (this.localParameters = new ParameterSet);
    return this.localParameters;
}
;
_.getReceiver = function getReceiver(){
    return this.currentReceiver;
}
;
_.getStackFrame = function getStackFrame(){
    return this.stackFrame;
}
;
_.getTunnelParameters = function getTunnelParameters(){
    return this.tunnelParameters;
}
;
_.newCleanContext = function newCleanContext(){
    var c;
    c = new XPathContext(this.controller);
    c.stackFrame = EMPTY_STACKFRAME;
    return c;
}
;
_.newContext = function newContext(){
    var c;
    c = new XPathContext(this.controller);
    c.currentIterator = this.currentIterator;
    c.isTemporaryDestination = this.isTemporaryDestination;
    c.stackFrame = this.stackFrame;
    c.localParameters = this.localParameters;
    c.tunnelParameters = this.tunnelParameters;
    c.currentReceiver = this.currentReceiver;
    c.currentMode = this.currentMode;
    c.currentTemplate = this.currentTemplate;
    c.currentRegexIterator = this.currentRegexIterator;
    c.currentGroupIterator = this.currentGroupIterator;
    c.tailCallFunction = null;
    return c;
}
;
_.newMinorContext = function newMinorContext(){
    return this.newContext();
}
;
_.setCurrentIterator = function setCurrentIterator(iter){
    instanceOf(iter, 149)?(this.currentIterator = dynamicCast(iter, 149)):(this.currentIterator = new FocusIterator(iter));
    return this.currentIterator;
}
;
_.setLocalVariable = function setLocalVariable(slotnumber, value_0){
    try {
        setCheck(this.stackFrame, slotnumber, value_0);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (!instanceOf($e0, 295))
            throw unwrap($e0);
    }
}
;
_.setSingletonFocus = function setSingletonFocus(item_0){
    var e, focus_0, iter;
    iter = !item_0?($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1):new SingletonIterator(item_0);
    focus_0 = this.setCurrentIterator(iter);
    try {
        $next_3(focus_0);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            throw new AssertionError(e);
        }
        else 
            throw unwrap($e0);
    }
}
;
_.setTemporaryReceiver = function setTemporaryReceiver(out){
    this.isTemporaryDestination = true;
    this.currentReceiver = out;
}
;
_.isTemporaryDestination = false;
var EMPTY_STACKFRAME;
var Lclient_net_sf_saxon_ce_expr_XPathContext_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'XPathContext', 197, Ljava_lang_Object_2_classLit);
function $newContext(this$static){
    var controller;
    controller = new Controller(this$static.config);
    return new XPathContext(controller);
}

function $notAllowed(){
    throw new UnsupportedOperationException_0('Internal error: early evaluation of subexpression with no context');
}

function EarlyEvaluationContext(config){
    $clinit_XPathContext();
    XPathContext.call(this, null);
    this.config = config;
}

defineClass(125, 197, {}, EarlyEvaluationContext);
_.changeOutputDestination = function changeOutputDestination_0(receiver, isFinal){
    $notAllowed();
}
;
_.evaluateLocalVariable = function evaluateLocalVariable_0(slotnumber){
    $notAllowed();
    return null;
}
;
_.getConfiguration = function getConfiguration_0(){
    return this.config;
}
;
_.getContextItem = function getContextItem_0(){
    return null;
}
;
_.getContextPosition = function getContextPosition_0(){
    var err;
    err = new XPathException_0('The context position is undefined');
    err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FONC0001');
        throw err;
}
;
_.getController = function getController_0(){
    return null;
}
;
_.getCurrentGroupIterator = function getCurrentGroupIterator_0(){
    $notAllowed();
    return null;
}
;
_.getCurrentIterator = function getCurrentIterator_0(){
    return null;
}
;
_.getCurrentMode = function getCurrentMode_0(){
    $notAllowed();
    return null;
}
;
_.getCurrentRegexIterator = function getCurrentRegexIterator_0(){
    return null;
}
;
_.getCurrentTemplateRule = function getCurrentTemplateRule_0(){
    return null;
}
;
_.getImplicitTimezone = function getImplicitTimezone_0(){
    return this.config.implicitTimezone;
}
;
_.getLast = function getLast_0(){
    var err;
    err = new XPathException_0('The context item is undefined');
    err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XPDY0002');
        throw err;
}
;
_.getLocalParameters = function getLocalParameters_0(){
    $notAllowed();
    return null;
}
;
_.getReceiver = function getReceiver_0(){
    $notAllowed();
    return null;
}
;
_.getStackFrame = function getStackFrame_0(){
    $notAllowed();
    return null;
}
;
_.getTunnelParameters = function getTunnelParameters_0(){
    $notAllowed();
    return null;
}
;
_.newCleanContext = function newCleanContext_0(){
    $notAllowed();
    return null;
}
;
_.newContext = function newContext_0(){
    return $newContext(this);
}
;
_.newMinorContext = function newMinorContext_0(){
    return $newContext(this).newMinorContext();
}
;
_.setCurrentIterator = function setCurrentIterator_0(iter){
    $notAllowed();
    return null;
}
;
_.setLocalVariable = function setLocalVariable_0(slotnumber, value_0){
    $notAllowed();
}
;
_.setSingletonFocus = function setSingletonFocus_0(item_0){
    $notAllowed();
}
;
_.setTemporaryReceiver = function setTemporaryReceiver_0(out){
    $notAllowed();
}
;
var Lclient_net_sf_saxon_ce_expr_EarlyEvaluationContext_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'EarlyEvaluationContext', 125, Lclient_net_sf_saxon_ce_expr_XPathContext_2_classLit);
function EmptyTextNodeRemover(p0){
    UnaryExpression.call(this, p0);
}

defineClass(833, 54, $intern_15, EmptyTextNodeRemover);
_.computeCardinality = function computeCardinality_10(){
    return this.operand.getCardinality() | $intern_17;
}
;
_.getImplementationMethod = function getImplementationMethod_2(){
    return 2;
}
;
_.getItemType = function getItemType_11(){
    return this.operand.getItemType();
}
;
_.iterate_0 = function iterate_7(context){
    var map_0;
    map_0 = new EmptyTextNodeRemover$1;
    return new ItemMappingIterator(this.operand.iterate_0(context), map_0);
}
;
var Lclient_net_sf_saxon_ce_expr_EmptyTextNodeRemover_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'EmptyTextNodeRemover', 833, Lclient_net_sf_saxon_ce_expr_UnaryExpression_2_classLit);
function EmptyTextNodeRemover$1(){
}

defineClass(834, 1, {}, EmptyTextNodeRemover$1);
_.mapItem = function mapItem_2(item_0){
    return instanceOf(item_0, 7) && dynamicCast(item_0, 7).getNodeKind() == 3 && item_0.getStringValue().length == 0?null:item_0;
}
;
var Lclient_net_sf_saxon_ce_expr_EmptyTextNodeRemover$1_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'EmptyTextNodeRemover/1', 834, Ljava_lang_Object_2_classLit);
function $evaluateItem_1(this$static){
    var err;
    err = new XPathException_0(this$static.exception.message_0);
    $setLocator(err, $getSourceLocator(this$static));
    $setErrorCodeQName(err, this$static.exception.errorCode);
    throw err;
}

function ErrorExpression(exception){
    Expression.call(this);
    this.exception = exception;
    $setLocator(exception, $getSourceLocator(this));
}

defineClass(133, 6, {133:1, 6:1}, ErrorExpression);
_.computeCardinality = function computeCardinality_11(){
    return $intern_12;
}
;
_.evaluateItem = function evaluateItem_9(context){
    return $evaluateItem_1(this);
}
;
_.getItemType = function getItemType_12(){
    return $clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2;
}
;
_.iterate_0 = function iterate_8(context){
    $evaluateItem_1(this);
    return null;
}
;
_.optimize = function optimize_9(visitor, contextItemType){
    return this;
}
;
_.typeCheck = function typeCheck_13(visitor, contextItemType){
    return this;
}
;
var Lclient_net_sf_saxon_ce_expr_ErrorExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'ErrorExpression', 133, Lclient_net_sf_saxon_ce_expr_Expression_2_classLit);
function $atStartOfRelativePath(this$static){
    switch (this$static.t.currentToken) {
        case 35:
    case 3:
case 201:
    case 208:
case 70:
    case 207:
case 69:
    case 205:
case 206:
    case 34:
case 202:
    case 209:
case 5:
    case 21:
        return true;
    default:return false;
    }
}

function $declareRangeVariable(this$static, declaration){
    $push(this$static.rangeVariables, declaration);
}

function $disallowedAtStartOfRelativePath(this$static){
    switch (this$static.t.currentToken) {
        case 46:
    case 57:
case 45:
    case 47:
        return true;
    default:return false;
    }
}

function $findRangeVariable(this$static, qName){
    var b, v;
    for (v = this$static.rangeVariables.arrayList.array.length - 1; v >= 0; v--) {
        b = dynamicCast($elementAt(this$static.rangeVariables, v), 126);
        if ($equals_0(b.getVariableQName(), qName)) {
            return b;
        }
    }
    return null;
}

function $getAtomicType(this$static, qname){
    var name_0, t;
    name_0 = $makeStructuredQName(this$static, qname, this$static.env.getDefaultElementNamespace());
    if ($equals_5($getNamespaceURI(name_0), 'http://www.w3.org/2001/XMLSchema')) {
        t = getSchemaType(valueOf_3(name_0.content_0, name_0.localNameStart, name_0.prefixStart - name_0.localNameStart));
        if (t) {
            return t;
        }
    }
    $grumble_0(this$static, 'Unknown atomic type ' + qname, new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', 'XPST0051'));
        return null;
}

function $getCurrentOperatorPrecedence(this$static){
    switch (this$static.t.currentToken) {
        case 9:
            return 4;
        case 10:
            return 5;
        case 50:
    case 51:
case 55:
    case 53:
case 54:
    case 52:
case 6:
    case 22:
case 14:
    case 12:
case 13:
    case 11:
case 20:
    case 37:
case 38:
    return 6;
case 29:
    return 7;
case 15:
    case 16:
        return 8;
    case 17:
case 18:
    case 56:
case 19:
    return 9;
case 1:
    return 10;
case 23:
    case 24:
        return 11;
    case 45:
        return 12;
    case 47:
        return 13;
    case 57:
        return 14;
    case 46:
        return 15;
    default:return -1;
    }
}

function $getLanguage(this$static){
    switch (this$static.language) {
        default:case 0:
            return 'XPath';
        case 1:
            return 'XSLT Pattern';
        case 2:
            return 'SequenceType';
    }
}

function $getSystemType(this$static, name_0){
    if ($equals_5('item', name_0))
        return 88;
    else if ($equals_5('document-node', name_0))
        return 9;
    else if ($equals_5('element', name_0))
        return 1;
    else if ($equals_5('attribute', name_0))
        return 2;
    else if ($equals_5('text', name_0))
        return 3;
    else if ($equals_5('comment', name_0))
        return 8;
    else if ($equals_5('processing-instruction', name_0))
        return 7;
    else if ($equals_5('node', name_0))
        return 0;
    else {
        $grumble_0(this$static, 'Unknown type ' + name_0, new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', this$static.language == 1?'XTSE0340':'XPST0003'));
            return -1;
    }
}

function $grumble(this$static, message){
    $grumble_0(this$static, message, new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', this$static.language == 1?'XTSE0340':'XPST0003'));
}

function $grumble_0(this$static, message, errorCode){
    var err, prefix, s;
    !errorCode && (errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XPST0003'));
        s = $recentText(this$static.t);
        prefix = $getLanguage(this$static) + ' syntax error ' + ($equals_5(s.substr(0, 3), '...')?'near':'in') + ' ' + wrap(s, 6) + ':\n    ';
        err = new XPathException_0(message);
        err.locationText = prefix;
        err.isStaticError = true;
        err.errorCode = errorCode;
        throw err;
}

function $makeBinaryExpression(lhs, operator, rhs){
    switch (operator) {
        case 9:
    case 10:
        return new BooleanExpression(lhs, operator, rhs);
    case 50:
case 51:
    case 55:
case 53:
    case 54:
case 52:
    return new ValueComparison(lhs, operator, rhs);
case 6:
    case 22:
case 14:
    case 12:
case 13:
    case 11:
        return new GeneralComparison(lhs, operator, rhs);
    case 20:
case 37:
    case 38:
        return new IdentityComparison(lhs, operator, rhs);
    case 29:
        return new RangeExpression(lhs, 29, rhs);
    case 15:
case 16:
    case 17:
case 18:
    case 56:
case 19:
    return new ArithmeticExpression(lhs, operator, rhs);
case 1:
    case 23:
case 24:
    return new VennExpression(lhs, operator, rhs);
default:throw new IllegalArgumentException;
    }
}

function $makeNamespaceTest(this$static, nodeType, prefix){
    var e, qn, uri_0;
    try {
        qn = fromLexicalQName(prefix + ':a', '', this$static.env.getNamespaceResolver());
        uri_0 = $getNamespaceURI(qn);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            $grumble_0(this$static, e.message_0, new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', 'XPST0081'));
                return null;
        }
        else 
            throw unwrap($e0);
    }
    return new NamespaceTest(nodeType, uri_0);
}

function $makeSequenceTypeExpression(lhs, operator, type_0){
    var e, role;
    switch (operator) {
        case 45:
            return new InstanceOfExpression(lhs, type_0);
        case 47:
            role = new RoleLocator(2, 'treat as', 0);
            role.errorCode = 'XPDY0050';
            e = makeCardinalityChecker(lhs, type_0.cardinality, role);
            return new ItemChecker(e, type_0.primaryType, role);
        default:throw new IllegalArgumentException;
    }
}

function $makeSingleTypeExpression(this$static, lhs, operator, type_0, allowEmpty){
    var e, source;
    if (type_0 == ($clinit_AtomicType() , QNAME) && instanceOf(lhs, 21)) {
        try {
            source = $getPrimitiveStringValue(dynamicCast(dynamicCast(lhs, 21).value_0, 12));
            fromLexicalQName(source, '', this$static.env.getNamespaceResolver());
            return operator == 57?new Literal(($clinit_BooleanValue() , TRUE_0)):new Literal(castStringToQName(source, this$static.env));
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                e = $e0;
                if (operator == 57) {
                    return new Literal(($clinit_BooleanValue() , FALSE_0));
                }
                else {
                    $grumble_0(this$static, e.message_0, e.errorCode);
                    return null;
                }
            }
            else 
                throw unwrap($e0);
        }
    }
    return operator == 57?new CastableExpression(lhs, type_0, allowEmpty):new CastExpression(lhs, type_0, allowEmpty);
}

function $makeStringLiteral(this$static, currentTokenValue){
    var literal;
    literal = new StringLiteral_0(currentTokenValue);
    !literal.container && $setContainer(literal, this$static.defaultContainer);
    return literal;
}

function $makeStructuredQName(this$static, lexicalName, defaultURI){
    return fromLexicalQName(lexicalName, defaultURI, this$static.env.getNamespaceResolver());
}

function $nextToken(this$static){
    var err;
    try {
        $next_1(this$static.t);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $grumble(this$static, err.message_0);
        }
        else 
            throw unwrap($e0);
    }
}

function $parse(this$static, expression, start_0, terminator, env){
    var err, exp_0;
    this$static.env = env;
    this$static.t = new Tokenizer;
    try {
        $tokenize(this$static.t, expression, start_0);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $grumble(this$static, err.message_0);
        }
        else 
            throw unwrap($e0);
    }
    exp_0 = this$static.parseExpression();
    this$static.t.currentToken != terminator && (this$static.t.currentToken == 0 && terminator == 215?$grumble_0(this$static, 'Missing curly brace after expression in attribute value template', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', 'XTSE0350')):$grumble(this$static, 'Unexpected token ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + ($clinit_Token() , tokens_0)[this$static.t.currentToken] + '"') + ' beyond end of expression'));
        return exp_0;
}

function $parseBasicStep(this$static, firstInPattern){
    var ae, ae2, ax, axis_0, cie, defaultAxis, err, pne, principalNodeType, seq, test_0;
    switch (this$static.t.currentToken) {
        case 21:
            return $parseVariableReference(this$static);
        case 5:
            $nextToken(this$static);
            if (this$static.t.currentToken == 204) {
                $nextToken(this$static);
                return new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
            }

            seq = this$static.parseExpression();
            this$static.t.currentToken != 204 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[204] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"'));
            $nextToken(this$static);
            return seq;
        case 202:
            return $parseStringLiteral(this$static);
        case 209:
            return $parseNumericLiteral(this$static);
        case 34:
            return this$static.parseFunctionCall();
        case 205:
            $nextToken(this$static);
            cie = new ContextItemExpression;
            !cie.container && $setContainer(cie, this$static.defaultContainer);
            return cie;
        case 206:
            $nextToken(this$static);
            pne = new ParentNodeExpression;
            !pne.container && $setContainer(pne, this$static.defaultContainer);
            return pne;
        case 69:
    case 201:
case 208:
    case 70:
case 207:
    defaultAxis = 3;
    this$static.t.currentToken == 69 && ($equals_5(this$static.t.currentTokenValue, 'attribute') || $equals_5(this$static.t.currentTokenValue, 'schema-attribute'))?(defaultAxis = 2):firstInPattern && this$static.t.currentToken == 69 && $equals_5(this$static.t.currentTokenValue, 'document-node') && (defaultAxis = 12);
    test_0 = $parseNodeTest(this$static, 1);
    instanceOf(test_0, 176) && (test_0 = defaultAxis == 3?($clinit_AnyChildNodeTest() , $clinit_AnyChildNodeTest() , THE_INSTANCE_5):($clinit_NodeKindTest() , ATTRIBUTE));
    ae = new AxisExpression(defaultAxis, test_0);
    !ae.container && $setContainer(ae, this$static.defaultContainer);
    return ae;
case 3:
    $nextToken(this$static);
    switch (this$static.t.currentToken) {
        case 201:
    case 208:
case 70:
        case 207:
    case 69:
        ae2 = new AxisExpression(2, $parseNodeTest(this$static, 2));
        !ae2.container && $setContainer(ae2, this$static.defaultContainer);
        return ae2;
    default:$grumble_0(this$static, '@ must be followed by a NodeTest', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', this$static.language == 1?'XTSE0340':'XPST0003'));
    }

    break;
case 35:
    try {
        axis_0 = getAxisNumber(this$static.t.currentTokenValue);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $grumble(this$static, err.message_0);
            axis_0 = 3;
        }
        else 
            throw unwrap($e0);
    }

    principalNodeType = ($clinit_Axis() , principalNodeType_0)[axis_0];
    $nextToken(this$static);
    switch (this$static.t.currentToken) {
        case 201:
    case 208:
case 70:
        case 207:
    case 69:
        ax = new AxisExpression(axis_0, $parseNodeTest(this$static, principalNodeType));
        !ax.container && $setContainer(ax, this$static.defaultContainer);
        return ax;
    default:$grumble(this$static, 'Unexpected token ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + ($clinit_Token() , tokens_0)[this$static.t.currentToken] + '"') + ' after axis name');
    }

    break;
default:$grumble(this$static, 'Unexpected token ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + ($clinit_Token() , tokens_0)[this$static.t.currentToken] + '"') + ' in path expression');
    }
    return null;
}

function $parseBinaryExpression(this$static, lhs, minPrecedence){
    var allowEmpty, at, operator, prec, rhs, seq;
    while ($getCurrentOperatorPrecedence(this$static) >= minPrecedence) {
        operator = this$static.t.currentToken;
        prec = $getCurrentOperatorPrecedence(this$static);
        switch (operator) {
            case 45:
        case 47:
            $nextToken(this$static);
            seq = $parseSequenceType(this$static);
            lhs = $makeSequenceTypeExpression(lhs, operator, seq);
            !lhs.getContainer() && $setContainer(lhs, this$static.defaultContainer);
            $getCurrentOperatorPrecedence(this$static) >= prec && $grumble(this$static, "Left operand of '" + ($clinit_Token() , tokens_0)[this$static.t.currentToken] + "' needs parentheses");
            break;
        case 46:
    case 57:
        $nextToken(this$static);
        this$static.t.currentToken != 201 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[201] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"'));
        at = $getAtomicType(this$static, this$static.t.currentTokenValue);
        at == ($clinit_AtomicType() , ANY_ATOMIC) && $grumble_0(this$static, 'No value is castable to xs:anyAtomicType', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', 'XPST0080'));
            $nextToken(this$static);
            allowEmpty = this$static.t.currentToken == 213;
            allowEmpty && $nextToken(this$static);
            lhs = $makeSingleTypeExpression(this$static, lhs, operator, at, allowEmpty);
            !lhs.getContainer() && $setContainer(lhs, this$static.defaultContainer);
            $getCurrentOperatorPrecedence(this$static) >= prec && $grumble(this$static, "Left operand of '" + ($clinit_Token() , tokens_0)[this$static.t.currentToken] + "' needs parentheses");
            break;
        default:$nextToken(this$static);
            rhs = $parseUnaryExpression(this$static);
            while ($getCurrentOperatorPrecedence(this$static) > prec) {
                rhs = $parseBinaryExpression(this$static, rhs, $getCurrentOperatorPrecedence(this$static));
            }

            lhs = $makeBinaryExpression(lhs, operator, rhs);
            !lhs.getContainer() && $setContainer(lhs, this$static.defaultContainer);
        }
    }
    return lhs;
}

function $parseExprSingle(this$static){
    var condition, thenExp, elseExp, ifExp;
    switch (this$static.t.currentToken) {
        case 211:
    case 31:
case 32:
    return $parseMappingExpression(this$static);
case 36:
    return $nextToken(this$static) , condition = this$static.parseExpression() , this$static.t.currentToken != 204 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[204] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"')) , $nextToken(this$static) , this$static.t.currentToken != 26 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[26] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"')) , $nextToken(this$static) , thenExp = $parseExprSingle(this$static) , this$static.t.currentToken != 27 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[27] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"')) , $nextToken(this$static) , elseExp = $parseExprSingle(this$static) , ifExp = makeConditional_0(condition, thenExp, elseExp) , !ifExp.container && $setContainer(ifExp, this$static.defaultContainer) , ifExp;
default:return $parseBinaryExpression(this$static, $parseUnaryExpression(this$static), 4);
    }
}

function $parseExpression(this$static){
    var exp_0, list, next;
    exp_0 = $parseExprSingle(this$static);
    list = null;
    while (this$static.t.currentToken == 7) {
        if (!list) {
            list = new ArrayList_0(10);
            setCheck(list.array, list.array.length, exp_0);
        }
        $nextToken(this$static);
        next = $parseExprSingle(this$static);
        !next.getContainer() && $setContainer(next, this$static.defaultContainer);
        setCheck(list.array, list.array.length, next);
    }
    if (list) {
        exp_0 = makeBlock_0(list);
        !exp_0.getContainer() && $setContainer(exp_0, this$static.defaultContainer);
    }
    return exp_0;
}

function $parseFunctionCall(this$static){
    var arg, args, argument, argument$index, argument$max, arguments_0, av, e, err, exp_0, fcall, fname, functionName, msg;
    fname = this$static.t.currentTokenValue;
    args = new ArrayList_0(10);
    functionName = $makeStructuredQName(this$static, fname, this$static.env.getDefaultFunctionNamespace());
    $nextToken(this$static);
    if (this$static.t.currentToken != 204) {
        while (true) {
            arg = this$static.parseFunctionArgument();
            setCheck(args.array, args.array.length, arg);
            if (this$static.t.currentToken == 7) {
                $nextToken(this$static);
            }
            else {
                break;
            }
        }
        this$static.t.currentToken != 204 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[204] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"'));
    }
    $nextToken(this$static);
    arguments_0 = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, args.array.length, 0, 1);
    $toArray(args, arguments_0);
    try {
        fcall = $bind(this$static.env.getFunctionLibrary(), functionName, arguments_0, this$static.env, this$static.defaultContainer);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            if (!err.errorCode) {
                err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XPST0017');
                    err.isStaticError = true;
            }
            $grumble_0(this$static, err.message_0, err.errorCode);
            return null;
        }
        else 
            throw unwrap($e0);
    }
    if (!fcall) {
        msg = 'Cannot find a matching ' + arguments_0.length + '-argument function named ' + $getClarkName(functionName) + '()';
        if (this$static.env.isInBackwardsCompatibleMode()) {
            err = new XPathException_2(msg, 'XTDE1425');
            exp_0 = new ErrorExpression(err);
            !exp_0.container && $setContainer(exp_0, this$static.defaultContainer);
            return exp_0;
        }
        $grumble_0(this$static, msg, new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', 'XPST0017'));
            return null;
    }
    if (instanceOf(fcall, 104) && fcall.getItemType() == ($clinit_AtomicType() , QNAME) && instanceOf(arguments_0[0], 21)) {
        try {
            av = castStringToQName($getPrimitiveStringValue(dynamicCast(dynamicCast(arguments_0[0], 21).value_0, 12)), this$static.env);
            return new Literal(av);
        }
        catch ($e1) {
            $e1 = wrap_0($e1);
            if (instanceOf($e1, 4)) {
                e = $e1;
                $grumble_0(this$static, e.message_0, e.errorCode);
                return null;
            }
            else 
                throw unwrap($e1);
        }
    }
    if (this$static.language == 1) {
        if (instanceOf(fcall, 353)) {
            return new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
        }
        else if (instanceOf(fcall, 348)) {
            $grumble_0(this$static, 'The current-group() function cannot be used in a pattern', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', 'XTSE1060'));
                return null;
        }
        else if (instanceOf(fcall, 349)) {
            $grumble_0(this$static, 'The current-grouping-key() function cannot be used in a pattern', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', 'XTSE1070'));
                return null;
        }
    }
    !fcall.getContainer() && $setContainer(fcall, this$static.defaultContainer);
    for (argument$index = 0 , argument$max = arguments_0.length; argument$index < argument$max; ++argument$index) {
        argument = arguments_0[argument$index];
        $adoptChildExpression(fcall, argument);
    }
    return fcall;
}

function $parseItemType(this$static){
    var primaryType;
    if (this$static.t.currentToken == 201) {
        primaryType = $getAtomicType(this$static, this$static.t.currentTokenValue);
        $nextToken(this$static);
    }
    else if (this$static.t.currentToken == 69) {
        if ($equals_5(this$static.t.currentTokenValue, 'item')) {
            $nextToken(this$static);
            this$static.t.currentToken != 204 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[204] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"'));
            $nextToken(this$static);
            primaryType = ($clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2);
        }
        else if ($equals_5(this$static.t.currentTokenValue, 'empty-sequence')) {
            $nextToken(this$static);
            this$static.t.currentToken != 204 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[204] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"'));
            $nextToken(this$static);
            primaryType = ($clinit_EmptySequenceTest() , $clinit_EmptySequenceTest() , THE_INSTANCE_8);
        }
        else {
            primaryType = $parseKindTest(this$static);
        }
    }
    else {
        $grumble(this$static, 'Expected type name in SequenceType, found ' + ($clinit_Token() , tokens_0)[this$static.t.currentToken]);
        return null;
    }
    return primaryType;
}

function $parseKindTest(this$static){
    var contentType, empty, inner, innerType, local, nodeQName, piName, primaryType, recognized, result, typeName;
    typeName = this$static.t.currentTokenValue;
    if ($equals_5(typeName.substr(0, 7), 'schema-')) {
        $grumble_0(this$static, typeName + '() requires an imported schema', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', this$static.language == 1?'XTSE0340':'XPST0003'));
            return null;
    }
    primaryType = $getSystemType(this$static, typeName);
    empty = false;
    $nextToken(this$static);
    this$static.t.currentToken == 204 && (empty = true);
    switch (primaryType) {
        case 88:
            $grumble_0(this$static, 'item() is not allowed in a path expression', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', this$static.language == 1?'XTSE0340':'XPST0003'));
                return null;
            case 0:
                result = ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7);
                break;
            case 3:
                result = ($clinit_NodeKindTest() , TEXT);
                break;
            case 8:
                result = ($clinit_NodeKindTest() , COMMENT);
                break;
            case 9:
                result = ($clinit_NodeKindTest() , DOCUMENT);
                if (!empty) {
                    innerType = $getSystemType(this$static, this$static.t.currentTokenValue);
                    innerType != 1 && $grumble_0(this$static, 'Argument to document-node() must be an element type', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', this$static.language == 1?'XTSE0340':'XPST0003'));
                        inner = $parseKindTest(this$static);
                        this$static.t.currentToken != 204 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[204] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"'));
                        $nextToken(this$static);
                        return new DocumentNodeTest(inner);
                }

                break;
            case 7:
                result = ($clinit_NodeKindTest() , PROCESSING_INSTRUCTION);
                if (!empty) {
                    piName = null;
                    if (this$static.t.currentToken == 202) {
                        this$static.t.currentToken = 201;
                        this$static.t.currentTokenValue = trim_0(this$static.t.currentTokenValue);
                    }
                    this$static.t.currentToken == 201 && isValidNCName(this$static.t.currentTokenValue) && (piName = new StructuredQName('', '', this$static.t.currentTokenValue));
                    !piName && $grumble_0(this$static, 'Processing instruction name must be an NCName (optionally in quotes)', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', this$static.language == 1?'XTSE0340':'XPST0003'));
                        $nextToken(this$static);
                        this$static.t.currentToken != 204 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[204] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"'));
                        $nextToken(this$static);
                        return new NameTest(7, piName);
                }

                break;
            case 2:
        case 1:
            result = makeNodeKindTest(primaryType);
            if (!empty) {
                if (this$static.t.currentToken == 207 || this$static.t.currentToken == 17)
                    ;
                else if (this$static.t.currentToken == 201) {
                    nodeQName = $makeStructuredQName(this$static, this$static.t.currentTokenValue, primaryType == 1?this$static.env.getDefaultElementNamespace():'');
                    result = new NameTest(primaryType, nodeQName);
                }
                else {
                    $grumble(this$static, 'Unexpected ' + ($clinit_Token() , tokens_0)[this$static.t.currentToken] + ' in SequenceType');
                }
                $nextToken(this$static);
                if (this$static.t.currentToken == 7) {
                    $nextToken(this$static);
                    contentType = $makeStructuredQName(this$static, this$static.t.currentTokenValue, this$static.env.getDefaultElementNamespace());
                    recognized = false;
                    if ($equals_5($getNamespaceURI(contentType), 'http://www.w3.org/2001/XMLSchema')) {
                        local = valueOf_3(contentType.content_0, contentType.localNameStart, contentType.prefixStart - contentType.localNameStart);
                        recognized = ($clinit_AtomicType() , !!getSchemaType(local) || $equals_5('anyType', local) || $equals_5('untyped', local) || $equals_5('anySimpleType', local));
                        primaryType == 1 && !($equals_5(local, 'anyType') || $equals_5(local, 'untyped')) && (result = ($clinit_EmptySequenceTest() , $clinit_EmptySequenceTest() , THE_INSTANCE_8));
                        primaryType == 2 && !($equals_5(local, 'anyAtomicType') || $equals_5(local, 'untypedAtomic')) && (result = ($clinit_EmptySequenceTest() , $clinit_EmptySequenceTest() , THE_INSTANCE_8));
                    }
                    recognized || $grumble(this$static, 'Unknown type name: ' + this$static.t.currentTokenValue);
                    $nextToken(this$static);
                    primaryType == 1 && this$static.t.currentToken == 213 && $nextToken(this$static);
                }
                this$static.t.currentToken != 204 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[204] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"'));
                $nextToken(this$static);
                return result;
            }

            break;
        default:$grumble_0(this$static, 'Unknown node kind', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', this$static.language == 1?'XTSE0340':'XPST0003'));
            return null;
    }
    empty || $grumble_0(this$static, 'Kind test ' + typeName + '() must be empty', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', this$static.language == 1?'XTSE0340':'XPST0003'));
        this$static.t.currentToken != 204 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[204] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"'));
        $nextToken(this$static);
        return result;
}

function $parseMappingExpression(this$static){
    var action, clause, clauseList, exp_0, fc, i_0, i0, n, operator, type_0, v, var_$;
    operator = this$static.t.currentToken;
    clauseList = new ArrayList_0(3);
    do {
        clause = new ExpressionParser$ForClause;
        $clinit_SequenceType();
        setCheck(clauseList.array, clauseList.array.length, clause);
        $nextToken(this$static);
        this$static.t.currentToken != 21 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[21] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"'));
        $nextToken(this$static);
        this$static.t.currentToken != 201 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[201] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"'));
        var_$ = this$static.t.currentTokenValue;
        if (operator == 211) {
            v = new ForExpression;
        }
        else {
            v = new QuantifiedExpression;
            $setOperator(dynamicCast(v, 410), operator);
        }
        $setVariableQName(v, fromLexicalQName(var_$, '', this$static.env.getNamespaceResolver()));
        clause.rangeVariable = v;
        $nextToken(this$static);
        this$static.t.currentToken != 30 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[30] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"'));
        $nextToken(this$static);
        clause.sequence = $parseExprSingle(this$static);
        $declareRangeVariable(this$static, clause.rangeVariable);
    }
    while (this$static.t.currentToken == 7);
    operator == 211?(this$static.t.currentToken != 25 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[25] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"')) , $nextToken(this$static)):(this$static.t.currentToken != 33 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[33] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"')) , $nextToken(this$static));
    action = $parseExprSingle(this$static);
    $clinit_TypeHierarchy();
    for (i0 = clauseList.array.length - 1; i0 >= 0; i0--) {
        fc = (checkElementIndex(i0, clauseList.array.length) , dynamicCast(clauseList.array[i0], 336));
        exp_0 = fc.rangeVariable;
        !exp_0.container && $setContainer(exp_0, this$static.defaultContainer);
        $setSequence(exp_0, fc.sequence);
        type_0 = ($clinit_SequenceType() , new SequenceType(fc.sequence.getItemType(), $intern_21));
        $setRequiredType(fc.rangeVariable, type_0);
        exp_0.action = action;
        $adoptChildExpression(exp_0, action);
        action = exp_0;
    }
    for (i_0 = clauseList.array.length - 1; i_0 >= 0; i_0--) {
        checkElementIndex(i_0, clauseList.array.length);
        dynamicCast(clauseList.array[i_0], 336);
        for (n = 0; n < 1; n++) {
            $pop(this$static.rangeVariables);
        }
    }
    return action;
}

function $parseNodeTest(this$static, nodeType){
    var nameCode, tok, tokv;
    tok = this$static.t.currentToken;
    tokv = this$static.t.currentTokenValue;
    switch (tok) {
        case 201:
            $nextToken(this$static);
            nameCode = $makeStructuredQName(this$static, tokv, nodeType == 1?this$static.env.getDefaultElementNamespace():'');
            return new NameTest(nodeType, nameCode);
        case 208:
            $nextToken(this$static);
            return $makeNamespaceTest(this$static, nodeType, tokv);
        case 70:
            $nextToken(this$static);
            tokv = this$static.t.currentTokenValue;
            this$static.t.currentToken != 201 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[201] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"'));
            $nextToken(this$static);
            return isValidNCName(tokv) || $grumble_0(this$static, 'Local name [' + tokv + '] contains invalid characters', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', this$static.language == 1?'XTSE0340':'XPST0003')) , new LocalNameTest(nodeType, tokv);
                case 207:
                    $nextToken(this$static);
                    return makeNodeKindTest(nodeType);
                case 69:
                    return $parseKindTest(this$static);
                default:$grumble_0(this$static, 'Unrecognized node test', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', this$static.language == 1?'XTSE0340':'XPST0003'));
                    return null;
    }
}

function $parseNumericLiteral(this$static){
    var lit, number;
    number = parseNumber(this$static.t.currentTokenValue);
    number.isNaN_0() && $grumble(this$static, 'Invalid numeric literal ' + wrap(this$static.t.currentTokenValue, 4));
    $nextToken(this$static);
    lit = new Literal(number);
    !lit.container && $setContainer(lit, this$static.defaultContainer);
    return lit;
}

function $parsePathExpression(this$static){
    var axisExp, exp_0, path, start_0, start2;
    switch (this$static.t.currentToken) {
        case 2:
            $nextToken(this$static);
            start_0 = new RootExpression;
            !start_0.container && $setContainer(start_0, this$static.defaultContainer);
            $disallowedAtStartOfRelativePath(this$static) && $grumble(this$static, "Operator '" + ($clinit_Token() , tokens_0)[this$static.t.currentToken] + "' is not allowed after '/'");
            if ($atStartOfRelativePath(this$static)) {
                path = $parseRemainingPath(this$static, start_0);
                !path.getContainer() && $setContainer(path, this$static.defaultContainer);
                return path;
            }
            else {
                return start_0;
            }

        case 8:
            $nextToken(this$static);
            start2 = new RootExpression;
            !start2.container && $setContainer(start2, this$static.defaultContainer);
            axisExp = new AxisExpression(5, null);
            !axisExp.container && $setContainer(axisExp, this$static.defaultContainer);
            exp_0 = $parseRemainingPath(this$static, new SlashExpression(start2, axisExp));
            !exp_0.getContainer() && $setContainer(exp_0, this$static.defaultContainer);
            return exp_0;
        default:return $parseRelativePath(this$static);
    }
}

function $parseRelativePath(this$static){
    var ae, exp_0, next, op, se;
    exp_0 = $parseStepExpression(this$static, this$static.language == 1);
    while (this$static.t.currentToken == 2 || this$static.t.currentToken == 8) {
        op = this$static.t.currentToken;
        $nextToken(this$static);
        next = $parseStepExpression(this$static, false);
        if (op == 2) {
            exp_0 = new SlashExpression(exp_0, next);
        }
        else {
            ae = new AxisExpression(5, null);
            !ae.container && $setContainer(ae, this$static.defaultContainer);
            se = new SlashExpression(ae, next);
            !se.container && $setContainer(se, this$static.defaultContainer);
            exp_0 = new SlashExpression(exp_0, se);
        }
        !exp_0.getContainer() && $setContainer(exp_0, this$static.defaultContainer);
    }
    return exp_0;
}

function $parseRemainingPath(this$static, start_0){
    var descOrSelf, exp_0, next, op, step;
    exp_0 = start_0;
    op = 2;
    while (true) {
        next = $parseStepExpression(this$static, false);
        if (op == 2) {
            exp_0 = new SlashExpression(exp_0, next);
        }
        else {
            descOrSelf = new AxisExpression(5, null);
            !descOrSelf.container && $setContainer(descOrSelf, this$static.defaultContainer);
            step = new SlashExpression(descOrSelf, next);
            !step.container && $setContainer(step, this$static.defaultContainer);
            exp_0 = new SlashExpression(exp_0, step);
        }
        !exp_0.getContainer() && $setContainer(exp_0, this$static.defaultContainer);
        op = this$static.t.currentToken;
        if (op != 2 && op != 8) {
            break;
        }
        $nextToken(this$static);
    }
    return exp_0;
}

function $parseSequenceType(this$static){
    var occurrenceFlag, primaryType;
    primaryType = $parseItemType(this$static);
    if (instanceOf(primaryType, 123)) {
        return $clinit_SequenceType() , new SequenceType(primaryType, $intern_17);
    }
    switch (this$static.t.currentToken) {
        case 207:
    case 17:
        occurrenceFlag = $intern_12;
        break;
    case 15:
        occurrenceFlag = $intern_33;
        break;
    case 213:
        occurrenceFlag = $intern_20;
        break;
    default:return $clinit_SequenceType() , new SequenceType(primaryType, $intern_21);
    }
    this$static.t.currentToken = 204;
    $nextToken(this$static);
    return $clinit_SequenceType() , new SequenceType(primaryType, occurrenceFlag);
}

function $parseSequenceType_0(this$static, input_0, env){
    var err, req;
    this$static.env = env;
    this$static.language = 2;
    this$static.t = new Tokenizer;
    try {
        $tokenize(this$static.t, input_0, 0);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $grumble(this$static, err.message_0);
        }
        else 
            throw unwrap($e0);
    }
    req = $parseSequenceType(this$static);
    this$static.t.currentToken != 0 && $grumble(this$static, 'Unexpected token ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + ($clinit_Token() , tokens_0)[this$static.t.currentToken] + '"') + ' beyond end of SequenceType');
    return req;
}

function $parseStepExpression(this$static, firstInPattern){
    var predicate, reverse, step;
    step = this$static.parseBasicStep(firstInPattern);
    reverse = instanceOf(step, 52) && !($clinit_Axis() , isForwards)[dynamicCast(step, 52).axis_0];
    while (true) {
        if (this$static.t.currentToken == 4) {
            $nextToken(this$static);
            predicate = this$static.parsePredicate();
            this$static.t.currentToken != 203 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[203] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"'));
            $nextToken(this$static);
            step = new FilterExpression(step, predicate);
            !step.getContainer() && $setContainer(step, this$static.defaultContainer);
        }
        else {
            break;
        }
    }
    return reverse?makeSystemFunction('reverse', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [step])):step;
}

function $parseStringLiteral(this$static){
    var literal;
    literal = $makeStringLiteral(this$static, this$static.t.currentTokenValue);
    $nextToken(this$static);
    return literal;
}

function $parseUnaryExpression(this$static){
    var exp_0;
    switch (this$static.t.currentToken) {
        case 16:
            $nextToken(this$static);
            exp_0 = new ArithmeticExpression(new Literal(($clinit_IntegerValue() , ZERO_2)), 299, $parseUnaryExpression(this$static));
            break;
        case 15:
            $nextToken(this$static);
            exp_0 = new ArithmeticExpression(new Literal(($clinit_IntegerValue() , ZERO_2)), 15, $parseUnaryExpression(this$static));
            break;
        default:exp_0 = $parsePathExpression(this$static);
    }
    !exp_0.getContainer() && $setContainer(exp_0, this$static.defaultContainer);
    return exp_0;
}

function $parseVariableReference(this$static){
    var b, err, ref, var_$, vtest;
    $nextToken(this$static);
    var_$ = this$static.t.currentTokenValue;
    this$static.t.currentToken != 201 && $grumble(this$static, 'expected "' + ($clinit_Token() , tokens_0)[201] + '", found ' + (this$static.t.currentToken == 201?'name "' + this$static.t.currentTokenValue + '"':this$static.t.currentToken == -1?'(unknown token)':'"' + tokens_0[this$static.t.currentToken] + '"'));
    $nextToken(this$static);
    vtest = fromLexicalQName(var_$, '', this$static.env.getNamespaceResolver());
    b = $findRangeVariable(this$static, vtest);
    if (b) {
        ref = new LocalVariableReference_0(b);
    }
    else {
        try {
            ref = this$static.env.bindVariable(vtest);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                err = $e0;
                if ($equals_5('XPST0008', !err.errorCode?null:$getLocalName_1(err.errorCode))) {
                    $grumble_0(this$static, 'Variable $' + var_$ + ' has not been declared', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', 'XPST0008'));
                        return null;
                }
                else {
                    throw err;
                }
            }
            else 
                throw unwrap($e0);
        }
    }
    !ref.container && $setContainer(ref, this$static.defaultContainer);
    return ref;
}

function $setDefaultContainer(this$static, container){
    this$static.defaultContainer = container;
}

function $setLanguage(this$static, language){
    switch (language) {
        case 0:
    case 1:
case 2:
    break;
default:throw new IllegalArgumentException_0('Unknown language ' + language);
    }
    this$static.language = language;
}

function ExpressionParser(){
    this.rangeVariables = new Stack;
}

defineClass(335, 1, {}, ExpressionParser);
_.parseBasicStep = function parseBasicStep(firstInPattern){
    return $parseBasicStep(this, firstInPattern);
}
;
_.parseExpression = function parseExpression(){
    return $parseExpression(this);
}
;
_.parseFunctionArgument = function parseFunctionArgument(){
    return $parseExprSingle(this);
}
;
_.parseFunctionCall = function parseFunctionCall(){
    return $parseFunctionCall(this);
}
;
_.parsePredicate = function parsePredicate(){
    return this.parseExpression();
}
;
_.language = 0;
var Lclient_net_sf_saxon_ce_expr_ExpressionParser_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'ExpressionParser', 335, Ljava_lang_Object_2_classLit);
function ExpressionParser$ForClause(){
}

defineClass(336, 1, {336:1}, ExpressionParser$ForClause);
var Lclient_net_sf_saxon_ce_expr_ExpressionParser$ForClause_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'ExpressionParser/ForClause', 336, Ljava_lang_Object_2_classLit);
function allocateSlots(exp_0, nextFree){
    var binding, child, children, decl, msg, var_$;
    if (instanceOf(exp_0, 99)) {
        dynamicCast(exp_0, 99).setSlotNumber(nextFree);
        ++nextFree;
    }
    if (instanceOf(exp_0, 62)) {
        var_$ = dynamicCast(exp_0, 62);
        binding = var_$.binding;
        instanceOf(exp_0, 191) && $setSlotNumber_0(dynamicCast(var_$, 191), binding.getLocalSlotNumber());
        if (instanceOf(binding, 99) && binding.getLocalSlotNumber() < 0) {
            decl = dynamicCast(binding, 99);
            msg = '*** Internal Saxon error: local variable ' + (!decl.variableName?'zz:var' + getHashCode(decl):$getDisplayName_0(decl.variableName)) + ' encountered whose binding has been deleted';
            throw new IllegalStateException_0(msg);
        }
    }
    for (children = exp_0.iterateSubExpressions(); children.hasNext();) {
        child = dynamicCast(children.next_2(), 6);
        nextFree = allocateSlots(child, nextFree);
    }
    return nextFree;
}

function callsFunction(exp_0, qName){
    var e, iter;
    if (instanceOf(exp_0, 20) && $equals_0(dynamicCast(exp_0, 20).getFunctionName(), qName)) {
        return true;
    }
    iter = exp_0.iterateSubExpressions();
    while (iter.hasNext()) {
        e = dynamicCast(iter.next_2(), 6);
        if (callsFunction(e, qName)) {
            return true;
        }
    }
    return false;
}

function copyLocationInfo(from, to){
    if (!!from && !!to) {
        if (from.sourceLocator) {
            $setSourceLocator(to, $getSourceLocator(from));
            $setContainer(to, from.getContainer());
        }
    }
}

function dependsOnVariable(e, bindingList){
    var child, children, i_0;
    if (bindingList == null || bindingList.length == 0) {
        return false;
    }
    if (instanceOf(e, 62)) {
        for (i_0 = 0; i_0 < bindingList.length; i_0++) {
            if (dynamicCast(e, 62).binding == bindingList[i_0]) {
                return true;
            }
        }
        return false;
    }
    else {
        for (children = e.iterateSubExpressions(); children.hasNext();) {
            child = dynamicCast(children.next_2(), 6);
            if (dependsOnVariable(child, bindingList)) {
                return true;
            }
        }
        return false;
    }
}

function eagerEvaluationMode(exp_0){
    var m;
    if (instanceOf(exp_0, 9)) {
        return 0;
    }
    if (instanceOf(exp_0, 62)) {
        return 1;
    }
    m = exp_0.getImplementationMethod();
    return (m & 1) != 0?7:(m & 2) != 0?8:9;
}

function ebvError(reason){
    var err;
    err = new XPathException_0('Effective boolean value is not defined for ' + reason);
    err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FORG0006');
        err.isTypeError = true;
        throw err;
}

function effectiveBooleanValue_2(iterator){
    var first;
    first = iterator.next_0();
    if (!first) {
        return false;
    }
    if (instanceOf(first, 7)) {
        return true;
    }
    else {
        !!iterator.next_0() && ebvError('a sequence of two or more atomic values');
        if (instanceOf(first, 90)) {
            return dynamicCast(first, 90).value_0;
        }
        else if (instanceOf(first, 12)) {
            return length__I__devirtual$(dynamicCast(first, 12).value_0) != 0;
        }
        else if (instanceOf(first, 25)) {
            return dynamicCast(first, 25).effectiveBooleanValue_0();
        }
        else {
            ebvError('a sequence starting with an atomic value other than a boolean, number, string, or URI');
            return false;
        }
    }
}

function evaluate(exp_0, evaluationMode, context){
    var c2, controller, item_0, pipe, seq, val;
    switch (evaluationMode) {
        case 0:
            return dynamicCast(exp_0, 9).value_0;
        case 1:
            return dynamicCast(exp_0, 62).evaluateVariable(context);
        case 14:
            return $evaluateVariable(dynamicCast(exp_0, 356), context);
        case 5:
            return $clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10;
        case 7:
            item_0 = exp_0.evaluateItem(context);
            return !item_0?($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10):item_0;
        case -1:
    case 8:
        return makeSequenceExtent(exp_0.iterate_0(context));
    case 9:
        controller = context.getController();
        c2 = context.newMinorContext();
        seq = new SequenceOutputter(20);
        pipe = $makePipelineConfiguration_0(controller);
        seq.pipelineConfiguration = pipe;
        c2.setTemporaryReceiver(seq);
        seq.previousAtomic = false;
        exp_0.process(c2);
        seq.previousAtomic = false;
        !!seq.outputter && $close(seq.outputter);
        val = $getSequence(seq);
        seq.list = new ArrayList_0(max_1(seq.list.array.length + 10, 50));
        return val;
    default:throw new IllegalArgumentException_0('Unknown evaluation mode ' + evaluationMode);
    }
}

function gatherVariableReferences(exp_0, binding, list){
    var iter;
    if (instanceOf(exp_0, 62) && dynamicCast(exp_0, 62).binding == binding) {
        list.add_3(dynamicCast(exp_0, 62));
    }
    else {
        for (iter = exp_0.iterateSubExpressions(); iter.hasNext();) {
            gatherVariableReferences(dynamicCast(iter.next_2(), 6), binding, list);
        }
    }
}

function lazyEvaluationMode(exp_0){
    return instanceOf(exp_0, 9)?0:instanceOf(exp_0, 62)?1:instanceOf(exp_0, 356)?14:(exp_0.getDependencies() & 109) != 0?eagerEvaluationMode(exp_0):instanceOf(exp_0, 133)?7:eagerEvaluationMode(exp_0);
}

function make(expression, env, container, terminator, locator){
    var exp_0, parser_0;
    parser_0 = new ExpressionParser;
    parser_0.defaultContainer = container;
    terminator == -1 && (terminator = 0);
    exp_0 = $parse(parser_0, expression, 0, terminator, env);
    exp_0 = $simplify(make_0(env, exp_0.getExecutable()), exp_0);
    $setSourceLocator(exp_0, locator);
    return exp_0;
}

function rebindVariableReferences(exp_0, oldBinding, newBinding){
    var e, iter;
    if (instanceOf(exp_0, 62)) {
        dynamicCast(exp_0, 62).binding == oldBinding && $fixup(dynamicCast(exp_0, 62), newBinding);
    }
    else {
        iter = exp_0.iterateSubExpressions();
        while (iter.hasNext()) {
            e = dynamicCast(iter.next_2(), 6);
            rebindVariableReferences(e, oldBinding, newBinding);
        }
    }
}

function resolveCallsToCurrentFunction(exp_0){
    var let_0, offer;
    if (callsFunction(exp_0, ($clinit_Current() , FN_CURRENT))) {
        let_0 = new LetExpression;
        $setVariableQName(let_0, new StructuredQName('saxon', 'http://saxon.sf.net/', 'current' + exp_0.hashCode$()));
            $setRequiredType(let_0, ($clinit_SequenceType() , SINGLE_ITEM));
            $setSequence(let_0, new CurrentItemExpression);
            offer = new PromotionOffer;
            offer.action = 14;
            offer.containingExpression = let_0;
            exp_0 = exp_0.promote(offer, null);
            let_0.action = exp_0;
            $adoptChildExpression(let_0, exp_0);
            return let_0;
    }
    else {
        return exp_0;
    }
}

function unsorted(exp_0, retainAllNodes){
    var offer;
    if (instanceOf(exp_0, 9)) {
        return exp_0;
    }
    offer = new PromotionOffer;
    offer.action = 13;
    offer.retainAllNodes = retainAllNodes;
    return exp_0.promote(offer, null);
}

function $getLastLocator(this$static){
    var expr, i_0, stackSize;
    stackSize = this$static.stack_0.arrayList.array.length;
    expr = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, stackSize, 0, 1);
    $toArray_0(this$static.stack_0, expr);
    for (i_0 = stackSize - 1; i_0 > -1; i_0--) {
        if (expr[i_0].sourceLocator) {
            return expr[i_0].sourceLocator;
        }
    }
    return null;
}

function $getLocation(this$static){
    var message, pos, sl;
    sl = $getLastLocator(this$static);
    message = '';
    if (sl) {
        message = sl.getLocation();
        pos = message.indexOf(' in ');
        pos > -1 && (message = message.substr(0, pos));
    }
    return message;
}

function $isLoopingSubexpression(this$static, ancestor){
    var parent_0, top_0;
    top_0 = this$static.stack_0.arrayList.array.length - 1;
    while (true) {
        if (top_0 <= 0) {
            return false;
        }
        parent_0 = dynamicCast($get_2(this$static.stack_0, top_0 - 1), 6);
        if (parent_0.hasLoopingSubexpression(dynamicCast($get_2(this$static.stack_0, top_0), 6))) {
            return true;
        }
        if (parent_0 == ancestor) {
            return false;
        }
        --top_0;
    }
}

function $optimize_1(this$static, exp_0, contextItemType){
    var exp2;
    if (exp_0) {
        $push(this$static.stack_0, exp_0);
        exp2 = exp_0.optimize(this$static, contextItemType);
        exp2 != exp_0 && copyLocationInfo(exp_0, exp2);
        $pop(this$static.stack_0);
        return exp2;
    }
    else {
        return null;
    }
}

function $resetStaticProperties(this$static){
    var exp_0, up;
    up = new AbstractList$IteratorImpl(this$static.stack_0.arrayList);
    while (up.i < up.this$01_0.size_1()) {
        exp_0 = (checkCriticalElement(up.i < up.this$01_0.size_1()) , dynamicCast(up.this$01_0.get_1(up.last = up.i++), 6));
        exp_0.staticProperties = -1;
    }
}

function $setConfiguration_0(this$static, configuration){
    this$static.configuration = configuration;
}

function $simplify(this$static, exp_0){
    var exp2;
    if (exp_0) {
        $push(this$static.stack_0, exp_0);
        exp2 = exp_0.simplify(this$static);
        exp2 != exp_0 && copyLocationInfo(exp_0, exp2);
        $pop(this$static.stack_0);
        return exp2;
    }
    else {
        return null;
    }
}

function $typeCheck_1(this$static, exp_0, contextItemType){
    var exp2;
    if (exp_0) {
        $push(this$static.stack_0, exp_0);
        exp2 = exp_0.typeCheck(this$static, contextItemType);
        exp2 != exp_0 && copyLocationInfo(exp_0, exp2);
        $pop(this$static.stack_0);
        return exp2;
    }
    else {
        return null;
    }
}

function ExpressionVisitor(){
    this.stack_0 = new Stack;
}

function make_0(env, exec_0){
    var visitor;
    visitor = new ExpressionVisitor;
    visitor.staticContext = env;
    visitor.executable = exec_0;
    $setConfiguration_0(visitor, env.getConfiguration());
    return visitor;
}

defineClass(666, 1, {}, ExpressionVisitor);
var Lclient_net_sf_saxon_ce_expr_ExpressionVisitor_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'ExpressionVisitor', 666, Ljava_lang_Object_2_classLit);
function $isPositional(this$static, th){
    return isPositionalFilter(this$static.filter, th);
}

function $optimize_2(this$static, visitor, contextItemType){
    var filter2, offer, start2, subsequence, th;
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    start2 = $optimize_1(visitor, this$static.start_0, contextItemType);
    if (start2 != this$static.start_0) {
        this$static.start_0 = start2;
        $adoptChildExpression(this$static, start2);
    }
    filter2 = this$static.filter.optimize(visitor, this$static.start_0.getItemType());
    if (filter2 != this$static.filter) {
        this$static.filter = filter2;
        $adoptChildExpression(this$static, filter2);
    }
    if (instanceOf(this$static.filter, 9) && instanceOf(dynamicCast(this$static.filter, 9).value_0, 90)) {
        return dynamicCast(dynamicCast(this$static.filter, 9).value_0, 90).value_0?this$static.start_0:new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
    }
    this$static.filterIsPositional = isPositionalFilter(this$static.filter, th);
    subsequence = $tryToRewritePositionalFilter(this$static);
    if (subsequence) {
        copyLocationInfo(this$static, subsequence);
        return subsequence.simplify(visitor).typeCheck(visitor, contextItemType).optimize(visitor, contextItemType);
    }
    offer = new PromotionOffer;
    offer.action = 10;
    offer.promoteDocumentDependent = ($getSpecialProperties(this$static.start_0) & $intern_34) != 0;
    offer.containingExpression = this$static;
    filter2 = $doPromotion(this$static, this$static.filter, offer);
    if (filter2 != this$static.filter) {
        this$static.filter = filter2;
        $adoptChildExpression(this$static, filter2);
    }
    instanceOf(offer.containingExpression, 86) && (offer.containingExpression = $optimize_1(visitor, offer.containingExpression, contextItemType));
    return offer.containingExpression;
}

function $tryToRewritePositionalFilter(this$static){
    var card, choice, comparand, exists, existsArg, let_0, lvalue, operands, operator, rewrite, th, val;
    if (instanceOf(this$static.filter, 9)) {
        val = dynamicCast(this$static.filter, 9).value_0;
        if (instanceOf(val, 25)) {
            if (dynamicCast(val, 25).isWholeNumber()) {
                try {
                    lvalue = dynamicCast(val, 25).intValue();
                    return lvalue <= 0?new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10)):lvalue == 1?new FirstItemExpression(this$static.start_0):makeSystemFunction('subsequence', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this$static.start_0, this$static.filter, new Literal(($clinit_IntegerValue() , PLUS_ONE))]));
                }
                catch ($e0) {
                    $e0 = wrap_0($e0);
                    if (instanceOf($e0, 4)) {
                        return null;
                    }
                    else 
                        throw unwrap($e0);
                }
            }
            else {
                return new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
            }
        }
        else {
            return effectiveBooleanValue_2(val.iterate())?this$static.start_0:new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
        }
    }
    if (instanceOf(this$static.filter, 360)) {
        th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
        operands = $getOperands(dynamicCast(this$static.filter, 360));
        operator = dynamicCast(dynamicCast(this$static.filter, 360), 358).operator;
        if (instanceOf(operands[0], 228) && $isSubType(th, operands[1].getItemType(), ($clinit_AtomicType() , NUMERIC))) {
            comparand = operands[1];
        }
        else if (instanceOf(operands[1], 228) && $isSubType(th, operands[0].getItemType(), ($clinit_AtomicType() , NUMERIC))) {
            comparand = operands[0];
            operator = inverse(operator);
        }
        else {
            return null;
        }
        if ((comparand.getDependencies() & 30) != 0) {
            return null;
        }
        card = comparand.getCardinality();
        if ((card & $intern_14) != 0) {
            return null;
        }
        if ((card & $intern_17) != 0) {
            let_0 = new LetExpression;
            $setRequiredType(let_0, ($clinit_SequenceType() , new SequenceType(comparand.getItemType(), card)));
            $setVariableQName(let_0, new StructuredQName('pp', 'http://saxon.sf.net/', 'pp' + getHashCode(let_0)));
                let_0.sequence = comparand;
                $adoptChildExpression(let_0, comparand);
                comparand = new LocalVariableReference_0(let_0);
                existsArg = new LocalVariableReference_0(let_0);
                exists = dynamicCast(makeSystemFunction('exists', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [existsArg])), 299);
                rewrite = tryToRewritePositionalFilterSupport(this$static.start_0, comparand, operator, th);
                if (!rewrite) {
                    return null;
                }
                choice = makeConditional(exists, rewrite);
                let_0.action = choice;
                $adoptChildExpression(let_0, choice);
                return let_0;
        }
        else {
            return tryToRewritePositionalFilterSupport(this$static.start_0, comparand, operator, th);
        }
    }
    else {
        return null;
    }
}

function FilterExpression(start_0, filter){
    Expression.call(this);
    this.start_0 = start_0;
    this.filter = filter;
    $adoptChildExpression(this, start_0);
    $adoptChildExpression(this, filter);
}

function isPositionalFilter(exp_0, th){
    var type_0;
    type_0 = exp_0.getItemType();
    if (type_0.equals$(($clinit_AtomicType() , BOOLEAN))) {
        return (exp_0.getDependencies() & 12) != 0;
    }
    return type_0.equals$(ANY_ATOMIC) || instanceOf(type_0, 159) || type_0.equals$(INTEGER) || type_0.equals$(NUMERIC) || $isSubType(th, type_0, NUMERIC) || (exp_0.getDependencies() & 12) != 0;
}

function tryToRewritePositionalFilterSupport(start_0, comparand, operator, th){
    var args, n;
    if ($isSubType(th, comparand.getItemType(), ($clinit_AtomicType() , INTEGER))) {
        switch (operator) {
            case 50:
                {
                    return isConstantOne(comparand)?new FirstItemExpression(start_0):makeSystemFunction('subsequence', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [start_0, comparand, new Literal(($clinit_IntegerValue() , PLUS_ONE))]));
                }

            case 53:
                {
                    args = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, 3, 0, 1);
                    setCheck(args, 0, start_0);
                    setCheck(args, 1, new Literal(new IntegerValue(1)));
                    if (instanceOf(comparand, 9) && instanceOf(dynamicCast(comparand, 9).value_0, 13)) {
                        n = fromInt(dynamicCast(dynamicCast(comparand, 9).value_0, 25).intValue());
                        setCheck(args, 2, new Literal(new IntegerValue_0(new BigDecimal_1(sub_1(n, {l:1, m:0, h:0})))));
                    }
                    else {
                        setCheck(args, 2, new ArithmeticExpression(comparand, 16, new Literal(new IntegerValue(1))));
                    }
                    return makeSystemFunction('subsequence', args);
                }

            case 55:
                {
                    args = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, 3, 0, 1);
                    setCheck(args, 0, start_0);
                    setCheck(args, 1, new Literal(new IntegerValue(1)));
                    setCheck(args, 2, comparand);
                    return makeSystemFunction('subsequence', args);
                }

            case 51:
                {
                    return makeSystemFunction('remove', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [start_0, comparand]));
                }

            case 52:
                {
                    args = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, 2, 0, 1);
                    setCheck(args, 0, start_0);
                    if (instanceOf(comparand, 9) && instanceOf(dynamicCast(comparand, 9).value_0, 13)) {
                        n = fromInt(dynamicCast(dynamicCast(comparand, 9).value_0, 25).intValue());
                        setCheck(args, 1, new Literal(new IntegerValue_0(new BigDecimal_1(add_11(n, {l:1, m:0, h:0})))));
                    }
                    else {
                        setCheck(args, 1, new ArithmeticExpression(comparand, 15, new Literal(new IntegerValue(1))));
                    }
                    return makeSystemFunction('subsequence', args);
                }

            case 54:
                {
                    return makeSystemFunction('subsequence', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [start_0, comparand]));
                }

            default:throw new IllegalArgumentException_0('operator');
        }
    }
    else {
        return null;
    }
}

defineClass(80, 6, {6:1, 80:1}, FilterExpression);
_.computeCardinality = function computeCardinality_12(){
    if (instanceOf(this.filter, 9) && instanceOf(dynamicCast(this.filter, 9).value_0, 25)) {
        return dynamicCast(dynamicCast(this.filter, 9).value_0, 25).compareTo_1({l:1, m:0, h:0}) == 0 && (this.start_0.getCardinality() & $intern_17) == 0?$intern_21:$intern_20;
    }
    if (this.filterIsIndependentNumeric) {
        return $intern_20;
    }
    if ((this.start_0.getCardinality() & $intern_14) == 0) {
        return $intern_20;
    }
    return $intern_12;
}
;
_.computeDependencies = function computeDependencies_0(){
    return this.start_0.getDependencies() | this.filter.getDependencies() & 481;
}
;
_.computeSpecialProperties = function computeSpecialProperties_9(){
    return $getSpecialProperties(this.start_0);
}
;
_.equals$ = function equals_10(other){
    var f;
    if (instanceOf(other, 80)) {
        f = dynamicCast(other, 80);
        return this.start_0.equals$(f.start_0) && this.filter.equals$(f.filter);
    }
    return false;
}
;
_.getItemType = function getItemType_13(){
    if (instanceOf(this.filter, 259) && instanceOf(dynamicCast(this.filter, 259).operand, 115)) {
        return dynamicCast(this.filter, 259).targetType.primaryType;
    }
    return this.start_0.getItemType();
}
;
_.hasLoopingSubexpression = function hasLoopingSubexpression_0(child){
    return child == this.filter;
}
;
_.hashCode$ = function hashCode_11(){
    return getHashCode_0('FilterExpression') + this.start_0.hashCode$() + this.filter.hashCode$();
}
;
_.iterate_0 = function iterate_9(context){
    var base, startExp, startValue;
    startExp = this.start_0;
    startValue = null;
    if (instanceOf(startExp, 9)) {
        startValue = dynamicCast(startExp, 9).value_0;
    }
    else if (instanceOf(startExp, 62)) {
        startValue = dynamicCast(startExp, 62).evaluateVariable(context);
        startExp = new Literal(startValue);
    }
    if (instanceOf(startValue, 141)) {
        return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
    }
    instanceOf(this.filter, 9)?dynamicCast(this.filter, 9).value_0:instanceOf(this.filter, 62) && dynamicCast(this.filter, 62).evaluateVariable(context);
    base = startExp.iterate_0(context);
    return new FilterIterator(base, this.filter, context);
}
;
_.iterateSubExpressions = function iterateSubExpressions_3(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.start_0, this.filter]));
}
;
_.optimize = function optimize_10(visitor, contextItemType){
    return $optimize_2(this, visitor, contextItemType);
}
;
_.promote = function promote_3(offer, parent_0){
    var exp_0;
    exp_0 = $accept(offer, this);
    if (exp_0) {
        return exp_0;
    }
    else {
        offer.action == 13 && this.filterIsPositional || (this.start_0 = $doPromotion(this, this.start_0, offer));
        offer.action == 14 && (this.filter = $doPromotion(this, this.filter, offer));
        return this;
    }
}
;
_.simplify = function simplify_9(visitor){
    this.start_0 = $simplify(visitor, this.start_0);
    this.filter = $simplify(visitor, this.filter);
    return this;
}
;
_.toString$ = function toString_10(){
    return '(' + this.start_0.toString$() + '[' + this.filter.toString$() + '])';
}
;
_.typeCheck = function typeCheck_14(visitor, contextItemType){
    var filter2, th;
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    this.start_0 = $typeCheck_1(visitor, this.start_0, contextItemType);
    $adoptChildExpression(this, this.start_0);
    filter2 = $typeCheck_1(visitor, this.filter, this.start_0.getItemType());
    if (filter2 != this.filter) {
        this.filter = filter2;
        $adoptChildExpression(this, filter2);
    }
    if (isConstantOne(this.filter)) {
        return new FirstItemExpression(this.start_0);
    }
    if (instanceOf(this.filter, 301)) {
        return new LastItemExpression(this.start_0);
    }
    this.filterIsIndependentNumeric = $isSubType(th, this.filter.getItemType(), ($clinit_AtomicType() , NUMERIC)) && (this.filter.getDependencies() & 6) == 0 && (this.filter.getCardinality() & $intern_14) == 0;
    $resetStaticProperties(visitor);
    return this;
}
;
_.filterIsIndependentNumeric = false;
_.filterIsPositional = false;
var Lclient_net_sf_saxon_ce_expr_FilterExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'FilterExpression', 80, Lclient_net_sf_saxon_ce_expr_Expression_2_classLit);
function $getNextMatchingItem(this$static){
    var next;
    while (true) {
        next = $next_3(this$static.base);
        if (!next) {
            return null;
        }
        if ($matches(this$static)) {
            return next;
        }
    }
}

function $matches(this$static){
    var first, iterator;
    iterator = this$static.filter.iterate_0(this$static.filterContext);
    first = iterator.next_0();
    if (!first) {
        return false;
    }
    if (instanceOf(first, 7)) {
        return true;
    }
    else {
        !!iterator.next_0() && ebvError('sequence of two or more atomic values');
        if (instanceOf(first, 90)) {
            return dynamicCast(first, 90).value_0;
        }
        else if (instanceOf(first, 12)) {
            return first.getStringValue().length != 0;
        }
        else if (instanceOf(first, 25)) {
            return dynamicCast(first, 25).compareTo_1(fromInt(this$static.base.pos)) == 0;
        }
        else {
            ebvError('sequence starting with an atomic value other than a boolean, number, or string');
            return false;
        }
    }
}

function FilterIterator(base, filter, context){
    this.filter = filter;
    this.filterContext = context.newMinorContext();
    this.base = this.filterContext.setCurrentIterator(base);
}

defineClass(520, 1, $intern_18, FilterIterator);
_.getAnother = function getAnother_4(){
    return new FilterIterator(new FocusIterator(this.base.base.getAnother()), this.filter, this.filterContext);
}
;
_.next_0 = function next_3(){
    return $getNextMatchingItem(this);
}
;
var Lclient_net_sf_saxon_ce_expr_FilterIterator_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'FilterIterator', 520, Ljava_lang_Object_2_classLit);
function SingleItemFilter(){
}

defineClass(441, 54, $intern_15);
_.computeCardinality = function computeCardinality_13(){
    return this.operand.getCardinality() & $intern_35;
}
;
_.optimize = function optimize_11(visitor, contextItemType){
    this.operand = $optimize_1(visitor, this.operand, contextItemType);
    if ((this.operand.getCardinality() & $intern_14) == 0) {
        return this.operand;
    }
    return $optimize(this, visitor, contextItemType);
}
;
_.promote = function promote_4(offer, parent_0){
    var exp_0;
    exp_0 = $accept(offer, this);
    if (exp_0) {
        return exp_0;
    }
    else {
        offer.action != 13 && (this.operand = $doPromotion(this, this.operand, offer));
        return this;
    }
}
;
var Lclient_net_sf_saxon_ce_expr_SingleItemFilter_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'SingleItemFilter', 441, Lclient_net_sf_saxon_ce_expr_UnaryExpression_2_classLit);
function FirstItemExpression(base){
    SingleItemFilter.call(this);
    this.operand = base;
    $adoptChildExpression(this, base);
    this.staticProperties = $computeDependencies(this) | this.operand.getCardinality() & $intern_35 | $getSpecialProperties(this.operand);
}

defineClass(190, 441, $intern_15, FirstItemExpression);
_.evaluateItem = function evaluateItem_10(context){
    var iter;
    iter = this.operand.iterate_0(context);
    return iter.next_0();
}
;
var Lclient_net_sf_saxon_ce_expr_FirstItemExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'FirstItemExpression', 190, Lclient_net_sf_saxon_ce_expr_SingleItemFilter_2_classLit);
function $optimize_3(this$static, visitor, contextItemType){
    var act2, e2, let_0, seq2, offer;
    seq2 = $optimize_1(visitor, this$static.sequence, contextItemType);
    if (seq2 != this$static.sequence) {
        this$static.sequence = seq2;
        $adoptChildExpression(this$static, this$static.sequence);
        $resetStaticProperties(visitor);
        return $optimize_3(this$static, visitor, contextItemType);
    }
    if (isEmptySequence(this$static.sequence)) {
        return this$static.sequence;
    }
    act2 = $optimize_1(visitor, this$static.action, contextItemType);
    if (act2 != this$static.action) {
        this$static.action = act2;
        $adoptChildExpression(this$static, this$static.action);
        $resetStaticProperties(visitor);
        return $optimize_3(this$static, visitor, contextItemType);
    }
    if (isEmptySequence(this$static.action)) {
        return this$static.action;
    }
    e2 = (offer = new PromotionOffer , offer.containingExpression = this$static , offer.action = 11 , offer.bindingList = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Binding_2_classLit, 1), $intern_1, 126, 0, [this$static]) , this$static.action = $doPromotion(this$static, this$static.action, offer) , instanceOf(offer.containingExpression, 86) && (offer.containingExpression = $optimize_1(visitor, offer.containingExpression, contextItemType)) , offer.containingExpression);
    if (!!e2 && e2 != this$static) {
        return $optimize_1(visitor, e2, contextItemType);
    }
    if (instanceOf(this$static.action, 62) && dynamicCast(this$static.action, 62).binding == this$static) {
        return this$static.sequence;
    }
    if (this$static.sequence.getCardinality() == $intern_21) {
        let_0 = new LetExpression;
        $setVariableQName(let_0, this$static.variableName);
        $setRequiredType(let_0, ($clinit_SequenceType() , new SequenceType(this$static.sequence.getItemType(), $intern_21)));
        $setSequence(let_0, this$static.sequence);
        $setAction(let_0, this$static.action);
        $setSlotNumber(let_0, this$static.slotNumber);
        rebindVariableReferences(this$static.action, this$static, let_0);
        return $optimize_5(let_0, visitor, contextItemType);
    }
    return this$static;
}

function ForExpression(){
}

defineClass(808, 99, $intern_24, ForExpression);
_.computeCardinality = function computeCardinality_14(){
    var c1, c2;
    c1 = this.sequence.getCardinality();
    c2 = this.action.getCardinality();
    return multiply(c1, c2);
}
;
_.getImplementationMethod = function getImplementationMethod_3(){
    return 6;
}
;
_.getItemType = function getItemType_14(){
    return this.action.getItemType();
}
;
_.hasLoopingSubexpression = function hasLoopingSubexpression_1(child){
    return child == this.action;
}
;
_.iterate_0 = function iterate_10(context){
    var base, map_0;
    base = this.sequence.iterate_0(context);
    map_0 = new ForExpression$MappingAction(context, this.slotNumber, -1, this.action);
    switch (this.actionCardinality) {
        case $intern_21:
            return new ItemMappingIterator_0(base, map_0, true);
        case $intern_20:
            return new ItemMappingIterator_0(base, map_0, false);
        default:return new MappingIterator(base, map_0);
    }
}
;
_.markTailFunctionCalls = function markTailFunctionCalls_0(qName, arity_0){
    return (this.sequence.getCardinality() & $intern_14) != 0?0:this.action.markTailFunctionCalls(qName, arity_0);
}
;
_.optimize = function optimize_12(visitor, contextItemType){
    return $optimize_3(this, visitor, contextItemType);
}
;
_.process = function process_0(context){
    var item_0, iter, slot;
    iter = this.sequence.iterate_0(context);
    slot = this.slotNumber;
    while (true) {
        item_0 = iter.next_0();
        if (!item_0)
            break;
        context.setLocalVariable(slot, item_0);
        this.action.process(context);
    }
}
;
_.setSlotNumber = function setSlotNumber_0(nr){
    this.slotNumber = nr;
}
;
_.toString$ = function toString_11(){
    return 'for $' + (!this.variableName?'zz:var' + getHashCode(this):$getDisplayName_0(this.variableName)) + ' in ' + (!this.sequence?'(...)':this.sequence.toString$()) + ' return ' + (!this.action?'(...)':this.action.toString$());
}
;
_.typeCheck = function typeCheck_15(visitor, contextItemType){
    var actualItemType, decl;
    this.sequence = $typeCheck_1(visitor, this.sequence, contextItemType);
    if (isEmptySequence(this.sequence)) {
        return this.sequence;
    }
    if (this.requiredType) {
        $clinit_TypeHierarchy();
        decl = this.requiredType;
        $clinit_SequenceType();
        new SequenceType(decl.primaryType, $intern_12);
        new RoleLocator(3, this.variableName, 0);
        actualItemType = this.sequence.getItemType();
        $refineTypeInformation(this, actualItemType, $intern_21, null, $getSpecialProperties(this.sequence), visitor, this);
    }
    this.action = $typeCheck_1(visitor, this.action, contextItemType);
    if (isEmptySequence(this.action)) {
        return this.action;
    }
    this.actionCardinality = this.action.getCardinality();
    return this;
}
;
_.actionCardinality = $intern_14;
var Lclient_net_sf_saxon_ce_expr_ForExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'ForExpression', 808, Lclient_net_sf_saxon_ce_expr_Assignation_2_classLit);
function ForExpression$MappingAction(context, slotNumber, pslot, action){
    this.context = context;
    this.slotNumber = slotNumber;
    this.pslot = pslot;
    this.action = action;
}

defineClass(504, 1, {270:1, 897:1, 186:1}, ForExpression$MappingAction);
_.getAnother_1 = function getAnother_5(newBaseIterator){
    var c2, newvars, vars;
    c2 = this.context.newContext();
    vars = this.context.getStackFrame();
    newvars = initDim(Lclient_net_sf_saxon_ce_om_Sequence_2_classLit, $intern_1, 14, vars.length, 0, 1);
    arraycopy(vars, 0, newvars, 0, vars.length);
    $setStackFrame(c2, newvars.length, newvars);
    return new ForExpression$MappingAction(c2, this.slotNumber, this.pslot, this.action);
}
;
_.map_2 = function map_1(item_0){
    var value_0;
    this.context.setLocalVariable(this.slotNumber, item_0);
    if (this.pslot >= 0) {
        value_0 = this.position_0++;
        this.context.setLocalVariable(this.pslot, new IntegerValue(value_0));
    }
    return this.action.iterate_0(this.context);
}
;
_.mapItem = function mapItem_3(item_0){
    var value_0;
    this.context.setLocalVariable(this.slotNumber, item_0);
    if (this.pslot >= 0) {
        value_0 = this.position_0++;
        this.context.setLocalVariable(this.pslot, new IntegerValue(value_0));
    }
    return this.action.evaluateItem(this.context);
}
;
_.position_0 = 1;
_.pslot = -1;
_.slotNumber = 0;
var Lclient_net_sf_saxon_ce_expr_ForExpression$MappingAction_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'ForExpression/MappingAction', 504, Ljava_lang_Object_2_classLit);
function $checkArgumentCount(this$static, min_0, max_0){
    var numArgs;
    numArgs = this$static.argument.length;
    if (min_0 == max_0 && numArgs != min_0) {
        throw new XPathException_1('Function ' + $getDisplayName(this$static) + ' must have ' + min_0 + pluralArguments(min_0), $getSourceLocator(this$static));
    }
    if (numArgs < min_0) {
        throw new XPathException_1('Function ' + $getDisplayName(this$static) + ' must have at least ' + min_0 + pluralArguments(min_0), $getSourceLocator(this$static));
    }
    if (numArgs > max_0) {
        throw new XPathException_1('Function ' + $getDisplayName(this$static) + ' must have no more than ' + max_0 + pluralArguments(max_0), $getSourceLocator(this$static));
    }
    return numArgs;
}

function $getDisplayName(this$static){
    var fName;
    fName = this$static.getFunctionName();
    return !fName?'(anonymous)':$getDisplayName_0(fName);
}

function $optimize_4(this$static, visitor, contextItemType){
    var exp_0, fixed_0, i_0;
    fixed_0 = true;
    for (i_0 = 0; i_0 < this$static.argument.length; i_0++) {
        exp_0 = $optimize_1(visitor, this$static.argument[i_0], contextItemType);
        if (exp_0 != this$static.argument[i_0]) {
            $adoptChildExpression(this$static, exp_0);
            setCheck(this$static.argument, i_0, exp_0);
        }
        fixed_0 && !instanceOf(this$static.argument[i_0], 9) && (fixed_0 = false);
    }
    this$static.checkArguments(visitor);
    return fixed_0?this$static.preEvaluate(visitor):this$static;
}

function $setArguments(this$static, args){
    var a;
    this$static.argument = args;
    for (a = 0; a < args.length; a++) {
        $adoptChildExpression(this$static, args[a]);
    }
}

function $setFunctionName(this$static, name_0){
    this$static.name_0 = name_0;
}

function $simplifyArguments(this$static, visitor){
    var exp_0, i_0;
    for (i_0 = 0; i_0 < this$static.argument.length; i_0++) {
        exp_0 = $simplify(visitor, this$static.argument[i_0]);
        if (exp_0 != this$static.argument[i_0]) {
            $adoptChildExpression(this$static, exp_0);
            setCheck(this$static.argument, i_0, exp_0);
        }
    }
    return this$static;
}

function $typeCheck_2(this$static, visitor, contextItemType){
    var exp_0, fixed_0, i_0;
    fixed_0 = true;
    for (i_0 = 0; i_0 < this$static.argument.length; i_0++) {
        exp_0 = $typeCheck_1(visitor, this$static.argument[i_0], contextItemType);
        if (exp_0 != this$static.argument[i_0]) {
            $adoptChildExpression(this$static, exp_0);
            setCheck(this$static.argument, i_0, exp_0);
        }
        instanceOf(this$static.argument[i_0], 9) || (fixed_0 = false);
    }
    this$static.checkArguments(visitor);
    return fixed_0?this$static.preEvaluate(visitor):this$static;
}

function FunctionCall(){
    Expression.call(this);
}

function pluralArguments(num){
    if (num == 1)
        return ' argument';
    return ' arguments';
}

defineClass(20, 6, $intern_36);
_.equals$ = function equals_11(o){
    var f, i_0;
    if (!instanceOf(o, 20)) {
        return false;
    }
    f = dynamicCast(o, 20);
    if (!$equals_0(this.getFunctionName(), f.getFunctionName())) {
        return false;
    }
    if (this.argument.length != f.argument.length) {
        return false;
    }
    for (i_0 = 0; i_0 < this.argument.length; i_0++) {
        if (!this.argument[i_0].equals$(f.argument[i_0])) {
            return false;
        }
    }
    return true;
}
;
_.getFunctionName = function getFunctionName(){
    return this.name_0;
}
;
_.hashCode$ = function hashCode_12(){
    var h, i_0;
    h = $hashCode(this.getFunctionName());
    for (i_0 = 0; i_0 < this.argument.length; i_0++) {
        h ^= this.argument[i_0].hashCode$();
    }
    return h;
}
;
_.iterateSubExpressions = function iterateSubExpressions_4(){
    return new AbstractList$IteratorImpl(new Arrays$ArrayList(this.argument));
}
;
_.optimize = function optimize_13(visitor, contextItemType){
    return $optimize_4(this, visitor, contextItemType);
}
;
_.preEvaluate = function preEvaluate(visitor){
    var lit;
    if (this.getIntrinsicDependencies() != 0) {
        return this;
    }
    lit = makeLiteral(makeSequenceExtent(this.iterate_0(new EarlyEvaluationContext(visitor.configuration))));
    copyLocationInfo(this, lit);
    return lit;
}
;
_.promote = function promote_5(offer, parent_0){
    var exp_0, i_0;
    exp_0 = $accept(offer, this);
    if (exp_0) {
        return exp_0;
    }
    else {
        if (offer.action != 13) {
            for (i_0 = 0; i_0 < this.argument.length; i_0++) {
                setCheck(this.argument, i_0, $doPromotion(this, this.argument[i_0], offer));
            }
        }
        return this;
    }
}
;
_.simplify = function simplify_10(visitor){
    return $simplifyArguments(this, visitor);
}
;
_.toString$ = function toString_12(){
    var buff, first, iter;
    buff = new FastStringBuffer(64);
    $append_3(buff, $getDisplayName(this));
    iter = new AbstractList$IteratorImpl(new Arrays$ArrayList(this.argument));
    first = true;
    while (iter.i < iter.this$01_0.size_1()) {
        $append_3(buff, first?'(':', ');
        $append_3(buff, (checkCriticalElement(iter.i < iter.this$01_0.size_1()) , toString__Ljava_lang_String___devirtual$(iter.this$01_0.get_1(iter.last = iter.i++))));
        first = false;
    }
    $append_3(buff, first?'()':')');
    return $condense(buff) , valueOf_3(buff.array, 0, buff.used);
}
;
_.typeCheck = function typeCheck_16(visitor, contextItemType){
    return $typeCheck_2(this, visitor, contextItemType);
}
;
var Lclient_net_sf_saxon_ce_expr_FunctionCall_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'FunctionCall', 20, Lclient_net_sf_saxon_ce_expr_Expression_2_classLit);
function $compare(this$static, a0, operator, a1, comparer){
    var s0, s1, t0, t1, v0, v1;
    t0 = a0.getItemType_0();
    t1 = a1.getItemType_0();
    if (this$static.backwardsCompatible) {
        if (instanceOf(a0, 25) || instanceOf(a1, 25)) {
            v0 = convert(a0);
            v1 = convert(a1);
            return compare(v0, operator, v1, comparer, false);
        }
        if (t0 == ($clinit_AtomicType() , STRING) || t1 == STRING || t0 == UNTYPED_ATOMIC && t1 == UNTYPED_ATOMIC) {
            s0 = dynamicCast(a0.convert(STRING).asAtomic(), 12);
            s1 = dynamicCast(a1.convert(STRING).asAtomic(), 12);
            return compare(s0, operator, s1, comparer, false);
        }
    }
    t0 == ($clinit_AtomicType() , UNTYPED_ATOMIC) && (a0 = a0.convert(t1).asAtomic());
    t1 == UNTYPED_ATOMIC && (a1 = a1.convert(t0).asAtomic());
    return compare(a0, operator, a1, comparer, false);
}

function $effectiveBooleanValue_1(this$static, context){
    var a, b, j, map_0, s0, s1, singletonOperator, v0, v1, val1;
    v0 = makeSequenceExtent(this$static.operand0.iterate_0(context));
    v1 = makeSequenceExtent(this$static.operand1.iterate_0(context));
    this$static.backwardsCompatible && (instanceOf(v0, 90)?(v1 = ($clinit_BooleanValue() , effectiveBooleanValue_2(v1.iterate())?TRUE_0:FALSE_0)):instanceOf(v1, 90) && (v0 = ($clinit_BooleanValue() , effectiveBooleanValue_2(v0.iterate())?TRUE_0:FALSE_0)));
    s0 = instanceOf(v0, 13)?makeIterator_0(dynamicCast(v0, 13)):getAtomizingIterator(v0.iterate());
    s1 = instanceOf(v1, 13)?makeIterator_0(dynamicCast(v1, 13)):getAtomizingIterator(v1.iterate());
    if (this$static.backwardsCompatible) {
        if (this$static.operator == 12 || this$static.operator == 14 || this$static.operator == 11 || this$static.operator == 13) {
            map_0 = new GeneralComparison$1;
            instanceOf(v0, 44) || (s0 = new ItemMappingIterator_0(s0, map_0, true));
            instanceOf(v1, 44) || (s1 = new ItemMappingIterator_0(s1, map_0, true));
        }
    }
    val1 = makeSequenceExtent(s1);
    singletonOperator = getSingletonOperator(this$static.operator);
    while (true) {
        a = dynamicCast(s0.next_0(), 13);
        if (!a) {
            return false;
        }
        for (j = 0; j < val1.getLength(); j++) {
            b = dynamicCast(val1.itemAt(j), 13);
            if ($compare(this$static, a, singletonOperator, b, this$static.comparer)) {
                return true;
            }
        }
    }
}

function GeneralComparison(p0, op, p1){
    BinaryExpression.call(this, p0, op, p1);
}

function getSingletonOperator(op){
    switch (op) {
        case 6:
            return 50;
        case 13:
            return 54;
        case 22:
            return 51;
        case 12:
            return 53;
        case 11:
            return 52;
        case 14:
            return 55;
        default:return op;
    }
}

defineClass(822, 79, $intern_19, GeneralComparison);
_.computeCardinality = function computeCardinality_15(){
    return $intern_21;
}
;
_.effectiveBooleanValue = function effectiveBooleanValue_3(context){
    return $effectiveBooleanValue_1(this, context);
}
;
_.evaluateItem = function evaluateItem_11(context){
    return $clinit_BooleanValue() , $effectiveBooleanValue_1(this, context)?TRUE_0:FALSE_0;
}
;
_.getItemType = function getItemType_15(){
    return $clinit_AtomicType() , BOOLEAN;
}
;
_.optimize = function optimize_14(visitor, contextItemType){
    this.operand0 = $optimize_1(visitor, this.operand0, contextItemType);
    this.operand1 = $optimize_1(visitor, this.operand1, contextItemType);
    this.operand0 = unsorted(this.operand0, false);
    this.operand1 = unsorted(this.operand1, false);
    return this;
}
;
_.simplify = function simplify_11(visitor){
    this.backwardsCompatible = visitor.staticContext.isInBackwardsCompatibleMode();
    return this.operand0 = $simplify(visitor, this.operand0) , this.operand1 = $simplify(visitor, this.operand1) , this;
}
;
_.typeCheck = function typeCheck_17(visitor, contextItemType){
    var comp, env;
    this.operand0 = $typeCheck_1(visitor, this.operand0, contextItemType);
    this.operand1 = $typeCheck_1(visitor, this.operand1, contextItemType);
    env = visitor.staticContext;
    comp = $getNamedCollation((env.getConfiguration() , env.getDefaultCollationName()));
    !comp && (comp = ($clinit_CodepointCollator() , $clinit_CodepointCollator() , theInstance_0));
    this.comparer = new GenericAtomicComparer(comp, env.getConfiguration().implicitTimezone);
    return this;
}
;
_.backwardsCompatible = false;
var Lclient_net_sf_saxon_ce_expr_GeneralComparison_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'GeneralComparison', 822, Lclient_net_sf_saxon_ce_expr_BinaryExpression_2_classLit);
function GeneralComparison$1(){
}

defineClass(823, 1, {}, GeneralComparison$1);
_.mapItem = function mapItem_4(item_0){
    return convert(dynamicCast(item_0, 13));
}
;
var Lclient_net_sf_saxon_ce_expr_GeneralComparison$1_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'GeneralComparison/1', 823, Ljava_lang_Object_2_classLit);
function $compareIdentity(this$static, node1, node2){
    switch (this$static.operator) {
        case 20:
            return node1.isSameNodeInfo(node2);
        case 37:
            return $compare_0(($clinit_GlobalOrderComparer() , $clinit_GlobalOrderComparer() , instance_0 , node1), node2) < 0;
        case 38:
            return $compare_0(($clinit_GlobalOrderComparer() , $clinit_GlobalOrderComparer() , instance_0 , node1), node2) > 0;
        default:throw new UnsupportedOperationException_0('Unknown node identity test');
    }
}

function IdentityComparison(p1, op, p2){
    BinaryExpression.call(this, p1, op, p2);
}

defineClass(824, 79, $intern_19, IdentityComparison);
_.effectiveBooleanValue = function effectiveBooleanValue_4(context){
    var node1, node2;
    node1 = dynamicCast(this.operand0.evaluateItem(context), 7);
    if (!node1) {
        return false;
    }
    node2 = dynamicCast(this.operand1.evaluateItem(context), 7);
    return !!node2 && $compareIdentity(this, node1, node2);
}
;
_.evaluateItem = function evaluateItem_12(context){
    var node1, node2;
    node1 = dynamicCast(this.operand0.evaluateItem(context), 7);
    if (!node1) {
        return null;
    }
    node2 = dynamicCast(this.operand1.evaluateItem(context), 7);
    if (!node2) {
        return null;
    }
    return $clinit_BooleanValue() , $compareIdentity(this, node1, node2)?TRUE_0:FALSE_0;
}
;
_.getItemType = function getItemType_16(){
    return $clinit_AtomicType() , BOOLEAN;
}
;
_.typeCheck = function typeCheck_18(visitor, contextItemType){
    var role0, role1;
    this.operand0 = $typeCheck_1(visitor, this.operand0, contextItemType);
    this.operand1 = $typeCheck_1(visitor, this.operand1, contextItemType);
    role0 = new RoleLocator(1, ($clinit_Token() , tokens_0)[this.operator], 0);
    this.operand0 = staticTypeCheck_1(this.operand0, ($clinit_SequenceType() , OPTIONAL_NODE), false, role0);
    role1 = new RoleLocator(1, tokens_0[this.operator], 1);
    this.operand1 = staticTypeCheck_1(this.operand1, OPTIONAL_NODE, false, role1);
    return this;
}
;
var Lclient_net_sf_saxon_ce_expr_IdentityComparison_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'IdentityComparison', 824, Lclient_net_sf_saxon_ce_expr_BinaryExpression_2_classLit);
function $effectiveBooleanValue_2(this$static, context){
    var iter;
    iter = this$static.operand.iterate_0(context);
    return testConformance(iter, this$static.targetType) == null;
}

function InstanceOfExpression(source, target){
    UnaryExpression.call(this, source);
    this.targetType = target;
}

defineClass(259, 54, {6:1, 259:1, 54:1}, InstanceOfExpression);
_.computeCardinality = function computeCardinality_16(){
    return $intern_21;
}
;
_.effectiveBooleanValue = function effectiveBooleanValue_5(context){
    return $effectiveBooleanValue_2(this, context);
}
;
_.equals$ = function equals_12(other){
    return other != null && Lclient_net_sf_saxon_ce_expr_InstanceOfExpression_2_classLit == getClass__Ljava_lang_Class___devirtual$(other) && this.operand.equals$(dynamicCast(other, 54).operand) && $equals_3(this.targetType, other);
}
;
_.evaluateItem = function evaluateItem_13(context){
    return $clinit_BooleanValue() , $effectiveBooleanValue_2(this, context)?TRUE_0:FALSE_0;
}
;
_.getItemType = function getItemType_17(){
    return $clinit_AtomicType() , BOOLEAN;
}
;
_.hashCode$ = function hashCode_13(){
    return getHashCode_0('UnaryExpression ' + Lclient_net_sf_saxon_ce_expr_InstanceOfExpression_2_classLit) ^ this.operand.hashCode$() ^ $hashCode_0(this.targetType);
}
;
_.optimize = function optimize_15(visitor, contextItemType){
    var e;
    e = $optimize(this, visitor, contextItemType);
    if (e != this) {
        return e;
    }
    return this;
}
;
_.typeCheck = function typeCheck_19(visitor, contextItemType){
    var lit, relation, th;
    this.operand = $typeCheck_1(visitor, this.operand, contextItemType);
    if (instanceOf(this.operand, 9)) {
        lit = makeLiteral(($clinit_BooleanValue() , $effectiveBooleanValue_2(this, new EarlyEvaluationContext(visitor.configuration))?TRUE_0:FALSE_0));
        copyLocationInfo(this, lit);
        return lit;
    }
    if (subsumes(this.targetType.cardinality, this.operand.getCardinality())) {
        th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
        relation = $relationship(th, this.operand.getItemType(), this.targetType.primaryType);
        if (relation == 0 || relation == 2) {
            lit = makeLiteral(($clinit_BooleanValue() , TRUE_0));
            copyLocationInfo(this, lit);
            return lit;
        }
        else if (relation == 4) {
            if ((this.targetType.cardinality & $intern_17) == 0 || (this.operand.getCardinality() & $intern_17) == 0) {
                lit = makeLiteral(($clinit_BooleanValue() , FALSE_0));
                copyLocationInfo(this, lit);
                return lit;
            }
        }
    }
    return this;
}
;
var Lclient_net_sf_saxon_ce_expr_InstanceOfExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'InstanceOfExpression', 259, Lclient_net_sf_saxon_ce_expr_UnaryExpression_2_classLit);
function $testConformance(this$static, item_0, context){
    var errorCode, message;
    instanceOf(item_0, 132) && (item_0 = ($clinit_StringValue() , EMPTY_STRING));
    if (!this$static.requiredItemType.matchesItem(item_0)) {
        !context?(message = 'Supplied value of type ' + displayTypeName(item_0) + ' does not match the required type of ' + $getMessage(this$static.role)):(message = $composeErrorMessage(this$static.role, this$static.requiredItemType, getItemType_91(item_0)));
        errorCode = this$static.role.errorCode;
        $equals_5('XPDY0050', errorCode)?$dynamicError(this$static, message, errorCode):$typeError(this$static, null, message, errorCode);
    }
}

function ItemChecker(sequence, itemType, role){
    UnaryExpression.call(this, sequence);
    this.requiredItemType = itemType;
    this.role = role;
    $adoptChildExpression(this, sequence);
}

defineClass(330, 54, {6:1, 330:1, 54:1}, ItemChecker);
_.equals$ = function equals_13(other){
    return other != null && Lclient_net_sf_saxon_ce_expr_ItemChecker_2_classLit == getClass__Ljava_lang_Class___devirtual$(other) && this.operand.equals$(dynamicCast(other, 54).operand) && this.requiredItemType == dynamicCast(other, 330).requiredItemType;
}
;
_.evaluateItem = function evaluateItem_14(context){
    var item_0;
    item_0 = this.operand.evaluateItem(context);
    if (!item_0)
        return null;
    $testConformance(this, item_0, context);
    return item_0;
}
;
_.getImplementationMethod = function getImplementationMethod_4(){
    var m;
    m = 2;
    this.staticProperties == -1 && (this.staticProperties = $computeDependencies(this) | this.operand.getCardinality() | $getSpecialProperties(this.operand));
    (this.staticProperties & $intern_12 & $intern_14) != 0 || (m |= 1);
    return m;
}
;
_.getItemType = function getItemType_18(){
    return this.requiredItemType;
}
;
_.hashCode$ = function hashCode_14(){
    return getHashCode_0('UnaryExpression ' + Lclient_net_sf_saxon_ce_expr_ItemChecker_2_classLit) ^ this.operand.hashCode$() ^ this.requiredItemType.hashCode$();
}
;
_.iterate_0 = function iterate_11(context){
    var base, map_0;
    base = this.operand.iterate_0(context);
    return new ItemMappingIterator_0(base, (map_0 = new ItemChecker$ItemCheckMappingFunction(this) , map_0.externalContext = context , map_0), true);
}
;
_.simplify = function simplify_12(visitor){
    this.operand = $simplify(visitor, this.operand);
    if (instanceOf(this.requiredItemType, 159)) {
        return this.operand;
    }
    return this;
}
;
_.typeCheck = function typeCheck_20(visitor, contextItemType){
    var card, message, relation, supplied, th;
    this.operand = $typeCheck_1(visitor, this.operand, contextItemType);
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    card = this.operand.getCardinality();
    if (card == $intern_17) {
        return this.operand;
    }
    supplied = this.operand.getItemType();
    relation = $relationship(th, this.requiredItemType, supplied);
    if (relation == 0 || relation == 1) {
        return this.operand;
    }
    else if (relation == 4) {
        if ((card & $intern_17) != 0)
            ;
        else if (this.requiredItemType.equals$(($clinit_AtomicType() , STRING)) && $isSubType(th, supplied, ANY_URI)) {
            return this.operand;
        }
        else {
            message = $composeErrorMessage(this.role, this.requiredItemType, this.operand.getItemType());
            $typeError(this, null, message, this.role.errorCode);
        }
    }
    return this;
}
;
var Lclient_net_sf_saxon_ce_expr_ItemChecker_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'ItemChecker', 330, Lclient_net_sf_saxon_ce_expr_UnaryExpression_2_classLit);
function ItemChecker$ItemCheckMappingFunction(this$0){
    this.this$01 = this$0;
}

defineClass(696, 1, {}, ItemChecker$ItemCheckMappingFunction);
_.mapItem = function mapItem_5(item_0){
    $testConformance(this.this$01, item_0, this.externalContext);
    return item_0;
}
;
var Lclient_net_sf_saxon_ce_expr_ItemChecker$ItemCheckMappingFunction_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'ItemChecker/ItemCheckMappingFunction', 696, Ljava_lang_Object_2_classLit);
function $$init_1(this$static){
}

function $next_0(this$static){
    var curr, nextSource;
    while (true) {
        nextSource = this$static.base.next_0();
        if (!nextSource) {
            return null;
        }
        try {
            curr = this$static.action.mapItem(nextSource);
            if (curr) {
                return curr;
            }
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 374)) {
                return null;
            }
            else 
                throw unwrap($e0);
        }
    }
}

function ItemMappingIterator(base, action){
    $$init_1(this);
    this.base = base;
    this.action = action;
}

function ItemMappingIterator_0(base, action, oneToOne){
    $$init_1(this);
    this.base = base;
    this.action = action;
    this.oneToOne = oneToOne;
}

defineClass(85, 1, $intern_37, ItemMappingIterator, ItemMappingIterator_0);
_.getAnother = function getAnother_6(){
    var newAction, newBase;
    newBase = this.base.getAnother();
    newAction = instanceOf(this.action, 186)?dynamicCast(dynamicCast(this.action, 186).getAnother_1(newBase), 270):this.action;
    return new ItemMappingIterator_0(newBase, newAction, this.oneToOne);
}
;
_.getLastPosition = function getLastPosition(){
    return instanceOf(this.base, 105) && this.oneToOne?dynamicCast(this.base, 105).getLastPosition():-1;
}
;
_.next_0 = function next_4(){
    return $next_0(this);
}
;
_.oneToOne = false;
var Lclient_net_sf_saxon_ce_expr_ItemMappingIterator_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'ItemMappingIterator', 85, Ljava_lang_Object_2_classLit);
function ItemMappingIterator$EarlyExitException(){
    XPathException_0.call(this, '');
}

defineClass(374, 4, {374:1, 4:1, 3:1, 19:1, 37:1}, ItemMappingIterator$EarlyExitException);
var Lclient_net_sf_saxon_ce_expr_ItemMappingIterator$EarlyExitException_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'ItemMappingIterator/EarlyExitException', 374, Lclient_net_sf_saxon_ce_trans_XPathException_2_classLit);
function LastItemExpression(base){
    SingleItemFilter.call(this);
    this.operand = base;
    $adoptChildExpression(this, base);
    this.staticProperties = $computeDependencies(this) | this.operand.getCardinality() & $intern_35 | $getSpecialProperties(this.operand);
}

defineClass(847, 441, $intern_15, LastItemExpression);
_.evaluateItem = function evaluateItem_15(context){
    var current, forwards, item_0, val;
    forwards = this.operand.iterate_0(context);
    if (instanceOf(forwards, 185)) {
        val = dynamicCast(forwards, 185).materialize();
        if (val) {
            return val.itemAt(val.getLength() - 1);
        }
    }
    current = null;
    while (true) {
        item_0 = forwards.next_0();
        if (!item_0) {
            return current;
        }
        current = item_0;
    }
}
;
var Lclient_net_sf_saxon_ce_expr_LastItemExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'LastItemExpression', 847, Lclient_net_sf_saxon_ce_expr_SingleItemFilter_2_classLit);
function $allReferencesAreFlattened(this$static){
    var bref, i_0, references;
    references = new ArrayList;
    gatherVariableReferences(this$static.action, this$static, references);
    for (i_0 = references.array.length - 1; i_0 >= 0; i_0--) {
        bref = (checkElementIndex(i_0, references.array.length) , dynamicCast(references.array[i_0], 62));
        if (bref.flattened)
            ;
        else {
            return false;
        }
    }
    return true;
}

function $optimize_5(this$static, visitor, contextItemType){
    var act2, seq2, tries;
    if (instanceOf(this$static.action, 62) && dynamicCast(this$static.action, 62).binding == this$static) {
        return $optimize_1(visitor, this$static.sequence, contextItemType);
    }
    if (instanceOf(this$static.sequence, 260) && dynamicCast(this$static.sequence, 260).textOnly) {
        if ($allReferencesAreFlattened(this$static)) {
            this$static.sequence = $getStringValueExpression(dynamicCast(this$static.sequence, 260));
            this$static.requiredType = ($clinit_SequenceType() , SINGLE_UNTYPED_ATOMIC);
            $adoptChildExpression(this$static, this$static.sequence);
        }
    }
    tries = 0;
    while (tries++ < 5) {
        seq2 = $optimize_1(visitor, this$static.sequence, contextItemType);
        if (seq2 == this$static.sequence) {
            break;
        }
        this$static.sequence = seq2;
        $adoptChildExpression(this$static, this$static.sequence);
        $resetStaticProperties(visitor);
    }
    tries = 0;
    while (tries++ < 5) {
        act2 = $optimize_1(visitor, this$static.action, contextItemType);
        if (act2 == this$static.action) {
            break;
        }
        this$static.action = act2;
        $adoptChildExpression(this$static, this$static.action);
        $resetStaticProperties(visitor);
    }
    this$static.evaluationMode = lazyEvaluationMode(this$static.sequence);
    return this$static;
}

function $setEvaluationMode(this$static, mode){
    this$static.evaluationMode = mode;
}

function LetExpression(){
}

defineClass(86, 99, {99:1, 126:1, 6:1, 86:1, 49:1}, LetExpression);
_.computeCardinality = function computeCardinality_17(){
    return this.action.getCardinality();
}
;
_.computeSpecialProperties = function computeSpecialProperties_10(){
    var props, seqProps;
    props = $getSpecialProperties(this.action);
    seqProps = $getSpecialProperties(this.sequence);
    (seqProps & $intern_22) == 0 && (props &= $intern_38);
    return props;
}
;
_.evaluateItem = function evaluateItem_16(context){
    var let_0, val;
    let_0 = this;
    while (true) {
        val = (let_0.evaluationMode == -1 && (let_0.evaluationMode = lazyEvaluationMode(let_0.sequence)) , evaluate(let_0.sequence, let_0.evaluationMode, context));
        context.setLocalVariable(let_0.slotNumber, val);
        if (instanceOf(let_0.action, 86)) {
            let_0 = dynamicCast(let_0.action, 86);
        }
        else {
            break;
        }
    }
    return let_0.action.evaluateItem(context);
}
;
_.getItemType = function getItemType_19(){
    return this.action.getItemType();
}
;
_.implementsStaticTypeCheck = function implementsStaticTypeCheck_0(){
    return true;
}
;
_.iterate_0 = function iterate_12(context){
    var let_0, val;
    let_0 = this;
    while (true) {
        val = (let_0.evaluationMode == -1 && (let_0.evaluationMode = lazyEvaluationMode(let_0.sequence)) , evaluate(let_0.sequence, let_0.evaluationMode, context));
        context.setLocalVariable(let_0.slotNumber, val);
        if (instanceOf(let_0.action, 86)) {
            let_0 = dynamicCast(let_0.action, 86);
        }
        else {
            break;
        }
    }
    return let_0.action.iterate_0(context);
}
;
_.markTailFunctionCalls = function markTailFunctionCalls_1(qName, arity_0){
    return this.action.markTailFunctionCalls(qName, arity_0);
}
;
_.optimize = function optimize_16(visitor, contextItemType){
    return $optimize_5(this, visitor, contextItemType);
}
;
_.process = function process_1(context){
    var let_0, val;
    let_0 = this;
    while (true) {
        val = (let_0.evaluationMode == -1 && (let_0.evaluationMode = lazyEvaluationMode(let_0.sequence)) , evaluate(let_0.sequence, let_0.evaluationMode, context));
        context.setLocalVariable(let_0.slotNumber, val);
        if (instanceOf(let_0.action, 86)) {
            let_0 = dynamicCast(let_0.action, 86);
        }
        else {
            break;
        }
    }
    let_0.action.process(context);
}
;
_.processLeavingTail = function processLeavingTail(context){
    var let_0, val;
    let_0 = this;
    while (true) {
        val = (let_0.evaluationMode == -1 && (let_0.evaluationMode = lazyEvaluationMode(let_0.sequence)) , evaluate(let_0.sequence, let_0.evaluationMode, context));
        context.setLocalVariable(let_0.slotNumber, val);
        if (instanceOf(let_0.action, 86)) {
            let_0 = dynamicCast(let_0.action, 86);
        }
        else {
            break;
        }
    }
    if (instanceOf(let_0.action, 49)) {
        return dynamicCast(let_0.action, 49).processLeavingTail(context);
    }
    else {
        let_0.action.process(context);
        return null;
    }
}
;
_.promote = function promote_6(offer, parent_0){
    var exp_0, savedBindingList, seq2;
    exp_0 = $accept(offer, this);
    if (exp_0) {
        return exp_0;
    }
    else {
        seq2 = $doPromotion(this, this.sequence, offer);
        seq2 != this.sequence && (this.sequence = seq2);
        if (offer.action == 13 || offer.action == 14) {
            this.action = $doPromotion(this, this.action, offer);
        }
        else if (offer.action == 11 || offer.action == 10) {
            savedBindingList = offer.bindingList;
            offer.bindingList = $extendBindingList(this, offer.bindingList);
            this.action = $doPromotion(this, this.action, offer);
            offer.bindingList = savedBindingList;
        }
        return this;
    }
}
;
_.staticTypeCheck = function staticTypeCheck_0(req, backwardsCompatible, role){
    this.action = staticTypeCheck_1(this.action, req, backwardsCompatible, role);
    return this;
}
;
_.toString$ = function toString_13(){
    return 'let $' + (!this.variableName?'zz:var' + getHashCode(this):$getDisplayName_0(this.variableName)) + ' := ' + this.sequence.toString$() + ' return ' + this.action.toString$();
}
;
_.typeCheck = function typeCheck_21(visitor, contextItemType){
    var actualItemType;
    this.sequence = $typeCheck_1(visitor, this.sequence, contextItemType);
    new RoleLocator(3, this.variableName, 0);
    $clinit_TypeHierarchy();
    actualItemType = this.sequence.getItemType();
    $refineTypeInformation(this, actualItemType, this.sequence.getCardinality(), instanceOf(this.sequence, 9)?dynamicCast(this.sequence, 9).value_0:null, $getSpecialProperties(this.sequence), visitor, this);
    this.action = $typeCheck_1(visitor, this.action, contextItemType);
    return this;
}
;
_.evaluationMode = -1;
var Lclient_net_sf_saxon_ce_expr_LetExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'LetExpression', 86, Lclient_net_sf_saxon_ce_expr_Assignation_2_classLit);
function $evaluateItem_2(this$static){
    if (instanceOf(this$static.value_0, 13)) {
        return dynamicCast(this$static.value_0, 13);
    }
    return this$static.value_0.iterate().next_0();
}

function Literal(value_0){
    Expression.call(this);
    this.value_0 = value_0;
}

function isAtomic_0(exp_0){
    return instanceOf(exp_0, 9) && instanceOf(dynamicCast(exp_0, 9).value_0, 13);
}

function isConstantBoolean(exp_0, value_0){
    var b;
    if (instanceOf(exp_0, 9)) {
        b = dynamicCast(exp_0, 9).value_0;
        return instanceOf(b, 90) && dynamicCast(b, 90).value_0 == value_0;
    }
    return false;
}

function isConstantOne(exp_0){
    var v;
    try {
        if (instanceOf(exp_0, 9)) {
            v = dynamicCast(exp_0, 9).value_0;
            return instanceOf(v, 32) && $intValue(dynamicCast(v, 32)) == 1;
        }
        return false;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            return false;
        }
        else 
            throw unwrap($e0);
    }
}

function isEmptySequence(exp_0){
    return instanceOf(exp_0, 9) && instanceOf(dynamicCast(exp_0, 9).value_0, 141);
}

function makeLiteral(value_0){
    return instanceOf(value_0, 12)?new StringLiteral(dynamicCast(value_0, 12)):new Literal(value_0);
}

defineClass(9, 6, {6:1, 9:1}, Literal);
_.computeCardinality = function computeCardinality_18(){
    var iter, next;
    if (instanceOf(this.value_0, 141)) {
        return $intern_17;
    }
    else if (instanceOf(this.value_0, 13)) {
        return $intern_21;
    }
    try {
        iter = this.value_0.iterate();
        next = iter.next_0();
        return !next?$intern_17:iter.next_0()?$intern_33:$intern_21;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            return $intern_12;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.computeSpecialProperties = function computeSpecialProperties_11(){
    if (instanceOf(this.value_0, 141)) {
        return 50266112;
    }
    return $intern_22;
}
;
_.equals$ = function equals_14(obj){
    var i0, i1, m0, m1, n0, n1, v0, v1;
    if (!instanceOf(obj, 9)) {
        return false;
    }
    v0 = this.value_0;
    v1 = dynamicCast(obj, 9).value_0;
    try {
        i0 = v0.iterate();
        i1 = v1.iterate();
        while (true) {
            m0 = i0.next_0();
            m1 = i1.next_0();
            if (!m0 && !m1) {
                return true;
            }
            if (!m0 || !m1) {
                return false;
            }
            n0 = instanceOf(m0, 7);
            n1 = instanceOf(m1, 7);
            if (n0 != n1) {
                return false;
            }
            if (n0 && n1 && !dynamicCast(m0, 7).isSameNodeInfo(dynamicCast(m1, 7))) {
                return false;
            }
            if (instanceOf(m0, 12) && instanceOf(m1, 12)) {
                if (!$equals_5($getPrimitiveStringValue(dynamicCast(m0, 12)), $getPrimitiveStringValue(dynamicCast(m1, 12)))) {
                    return false;
                }
            }
            else if (instanceOf(m0, 13) && instanceOf(m1, 13)) {
                if (!n0 && !n1 && !dynamicCast(m0, 13).equals$(dynamicCast(m1, 13)) || dynamicCast(m0, 13).getItemType_0() != dynamicCast(m1, 13).getItemType_0()) {
                    return false;
                }
            }
        }
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            return false;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.evaluateAsString = function evaluateAsString_0(context){
    var value_0;
    value_0 = dynamicCast($evaluateItem_2(this), 13);
    if (!value_0)
        return '';
    return toString__Ljava_lang_String___devirtual$_0(value_0.getPrimitiveStringValue());
}
;
_.evaluateItem = function evaluateItem_17(context){
    return $evaluateItem_2(this);
}
;
_.getDependencies = function getDependencies_0(){
    return 0;
}
;
_.getItemType = function getItemType_20(){
    return getItemTypeOfValue(this.value_0);
}
;
_.hashCode$ = function hashCode_15(){
    return this.value_0.hashCode$();
}
;
_.iterate_0 = function iterate_13(context){
    return this.value_0.iterate();
}
;
_.optimize = function optimize_17(visitor, contextItemType){
    return this;
}
;
_.process = function process_2(context){
    var it, iter, out;
    iter = this.value_0.iterate();
    out = context.getReceiver();
    while (true) {
        it = iter.next_0();
        if (!it)
            break;
        out.append(it, 2);
    }
}
;
_.toString$ = function toString_14(){
    return this.value_0.toString$();
}
;
_.typeCheck = function typeCheck_22(visitor, contextItemType){
    return this;
}
;
var Lclient_net_sf_saxon_ce_expr_Literal_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'Literal', 9, Lclient_net_sf_saxon_ce_expr_Expression_2_classLit);
function $computeSpecialProperties_0(this$static){
    var exp_0, p_0;
    p_0 = 0;
    p_0 |= $intern_22;
    if (instanceOf(this$static.binding, 99)) {
        exp_0 = dynamicCast(this$static.binding, 99).sequence;
        !!exp_0 && (p_0 |= (exp_0.staticProperties == -1 && (exp_0.staticProperties = exp_0.computeDependencies() | exp_0.computeCardinality() | exp_0.computeSpecialProperties()) , exp_0.staticProperties & $intern_11 & $intern_23));
    }
    !!this$static.staticType && (this$static.staticType.cardinality & $intern_14) == 0 && instanceOf(this$static.staticType.primaryType, 67) && (p_0 |= $intern_39);
    return p_0;
}

function $fixup(this$static, binding){
    this$static.binding = binding;
    this$static.staticProperties = -1;
}

function $getItemType(this$static){
    var st;
    if (!this$static.staticType || this$static.staticType.primaryType == ($clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2)) {
        if (this$static.binding) {
            st = this$static.binding.getRequiredType();
            if (st) {
                return st.primaryType;
            }
        }
        return $clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2;
    }
    else {
        return this$static.staticType.primaryType;
    }
}

function $setStaticType(this$static, type_0, value_0, properties){
    var dependencies;
    this$static.staticType = type_0;
    this$static.constantValue = value_0;
    dependencies = (this$static.staticProperties == -1 && (this$static.staticProperties = $computeDependencies(this$static) | (!this$static.staticType?!this$static.binding?$intern_12:instanceOf(this$static.binding, 86)?this$static.binding.getRequiredType().cardinality:instanceOf(this$static.binding, 99)?$intern_21:this$static.binding.getRequiredType().cardinality:this$static.staticType.cardinality) | $computeSpecialProperties_0(this$static)) , this$static.staticProperties & $intern_13);
    this$static.staticProperties = properties & -65537 | $intern_22 | type_0.cardinality | dependencies;
}

function VariableReference(){
}

defineClass(62, 6, {6:1, 62:1}, VariableReference);
_.computeCardinality = function computeCardinality_19(){
    return !this.staticType?!this.binding?$intern_12:instanceOf(this.binding, 86)?this.binding.getRequiredType().cardinality:instanceOf(this.binding, 99)?$intern_21:this.binding.getRequiredType().cardinality:this.staticType.cardinality;
}
;
_.computeSpecialProperties = function computeSpecialProperties_12(){
    return $computeSpecialProperties_0(this);
}
;
_.equals$ = function equals_15(other){
    return instanceOf(other, 62) && this.binding == dynamicCast(other, 62).binding && !!this.binding;
}
;
_.evaluateItem = function evaluateItem_18(c){
    var err;
    try {
        return asItem(this.evaluateVariable(c));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $maybeSetLocation(err, $getSourceLocator(this));
            throw err;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.evaluateVariable = function evaluateVariable_0(c){
    var err;
    try {
        return this.binding.evaluateVariable(c);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 108)) {
            err = $e0;
            if (!this.binding) {
                throw new IllegalStateException_0('Variable $' + this.displayName + ' has not been fixed up');
            }
            else {
                throw err;
            }
        }
        else 
            throw unwrap($e0);
    }
}
;
_.getImplementationMethod = function getImplementationMethod_5(){
    return this.staticProperties == -1 && (this.staticProperties = $computeDependencies(this) | (!this.staticType?!this.binding?$intern_12:instanceOf(this.binding, 86)?this.binding.getRequiredType().cardinality:instanceOf(this.binding, 99)?$intern_21:this.binding.getRequiredType().cardinality:this.staticType.cardinality) | $computeSpecialProperties_0(this)) , ((this.staticProperties & $intern_12 & $intern_14) != 0?0:1) | 2 | 4;
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_2(){
    var d;
    d = 0;
    !this.binding?(d |= 1152):this.binding.isGlobal()?instanceOf(this.binding, 306) && (d |= $intern_40):(d |= 128);
    return d;
}
;
_.getItemType = function getItemType_21(){
    return $getItemType(this);
}
;
_.hashCode$ = function hashCode_16(){
    return !this.binding?73619830:getHashCode(this.binding);
}
;
_.iterate_0 = function iterate_14(c){
    var err, logger, msg;
    try {
        return this.evaluateVariable(c).iterate();
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $maybeSetLocation(err, $getSourceLocator(this));
            throw err;
        }
        else if (instanceOf($e0, 48)) {
            err = $e0;
            msg = err.detailMessage + '. Variable reference $' + (this.binding?$getDisplayName_0(this.binding.getVariableQName()):this.displayName) + ((!this.sourceLocator?null:this.sourceLocator.getSystemId()) == null?'':' of ' + (!this.sourceLocator?null:this.sourceLocator.getSystemId()));
            logger = (new LoggerImplRegular , $ensureLogger(getLogManager(), 'VariableReference'));
            $severe(logger.impl, 'internal null reference error: ' + msg);
            throw new XPathException_0(msg);
        }
        else 
            throw unwrap($e0);
    }
}
;
_.optimize = function optimize_18(visitor, contextItemType){
    if (this.constantValue) {
        this.binding = null;
        return makeLiteral(this.constantValue);
    }
    return this;
}
;
_.process = function process_3(c){
    var actual, err;
    try {
        actual = this.evaluateVariable(c);
        process_10(actual.iterate(), c);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $maybeSetLocation(err, $getSourceLocator(this));
            throw err;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.promote = function promote_7(offer, parent_0){
    return this;
}
;
_.setFlattened = function setFlattened_1(flattened){
    this.flattened = flattened;
}
;
_.toString$ = function toString_15(){
    var d;
    d = this.binding?$getDisplayName_0(this.binding.getVariableQName()):this.displayName;
    return '$' + (d == null?'$':d);
}
;
_.typeCheck = function typeCheck_23(visitor, contextItemType){
    if (this.constantValue) {
        this.binding = null;
        return makeLiteral(this.constantValue);
    }
    instanceOf(this.binding, 6)?$isLoopingSubexpression(visitor, dynamicCast(this.binding, 6)):instanceOf(this.binding, 319) && $isLoopingSubexpression(visitor, null);
    return this;
}
;
_.binding = null;
_.constantValue = null;
_.displayName = null;
_.flattened = false;
_.staticType = null;
var Lclient_net_sf_saxon_ce_expr_VariableReference_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'VariableReference', 62, Lclient_net_sf_saxon_ce_expr_Expression_2_classLit);
function $$init_2(this$static){
    this$static.slotNumber = -999;
}

function $setSlotNumber_0(this$static, slotNumber){
    this$static.slotNumber = slotNumber;
}

function LocalVariableReference(){
    VariableReference.call(this);
    $$init_2(this);
}

function LocalVariableReference_0(binding){
    this.displayName = $getDisplayName_0(binding.getVariableQName());
    this.binding = binding;
    this.staticProperties = -1;
    $$init_2(this);
}

defineClass(191, 62, {6:1, 191:1, 62:1}, LocalVariableReference, LocalVariableReference_0);
_.evaluateVariable = function evaluateVariable_1(c){
    var err;
    try {
        return c.getStackFrame()[this.slotNumber];
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 295)) {
            err = $e0;
            if (this.slotNumber == -999) {
                throw new ArrayIndexOutOfBoundsException_0('Local variable ' + (this.binding?$getDisplayName_0(this.binding.getVariableQName()):this.displayName) + ' has not been allocated a stack frame slot');
            }
            throw err;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.slotNumber = 0;
var Lclient_net_sf_saxon_ce_expr_LocalVariableReference_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'LocalVariableReference', 191, Lclient_net_sf_saxon_ce_expr_VariableReference_2_classLit);
function MappingIterator(base, action){
    this.base = base;
    this.action = action;
}

defineClass(233, 1, $intern_18, MappingIterator);
_.getAnother = function getAnother_7(){
    var newAction, newBase;
    newBase = this.base.getAnother();
    newAction = instanceOf(this.action, 186)?dynamicCast(dynamicCast(this.action, 186).getAnother_1(null), 897):this.action;
    return new MappingIterator(newBase, newAction);
}
;
_.next_0 = function next_5(){
    var nextItem, nextSource, obj;
    while (true) {
        if (this.results) {
            nextItem = this.results.next_0();
            if (nextItem) {
                break;
            }
            else {
                this.results = null;
            }
        }
        nextSource = this.base.next_0();
        if (nextSource) {
            obj = this.action.map_2(nextSource);
            if (obj) {
                this.results = obj;
                nextItem = this.results.next_0();
                if (!nextItem) {
                    this.results = null;
                }
                else {
                    break;
                }
            }
        }
        else {
            this.results = null;
            return null;
        }
    }
    return nextItem;
}
;
_.results = null;
var Lclient_net_sf_saxon_ce_expr_MappingIterator_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'MappingIterator', 233, Ljava_lang_Object_2_classLit);
function NegateExpression(base){
    UnaryExpression.call(this, base);
}

defineClass(519, 54, $intern_15, NegateExpression);
_.evaluateItem = function evaluateItem_19(context){
    var v1;
    v1 = dynamicCast(this.operand.evaluateItem(context), 25);
    if (!v1) {
        return this.backwardsCompatible?($clinit_DoubleValue() , NaN_0):null;
    }
    return v1.negate_0();
}
;
_.getItemType = function getItemType_22(){
    return this.operand.getItemType();
}
;
_.typeCheck = function typeCheck_24(visitor, contextItemType){
    var oldop, role;
    oldop = this.operand;
    role = new RoleLocator(9, '-', 0);
    this.operand = staticTypeCheck_1(this.operand, ($clinit_SequenceType() , OPTIONAL_NUMERIC), this.backwardsCompatible, role);
    this.operand = $typeCheck_1(visitor, this.operand, contextItemType);
    this.operand != oldop && $adoptChildExpression(this, this.operand);
    return this;
}
;
_.backwardsCompatible = false;
var Lclient_net_sf_saxon_ce_expr_NegateExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'NegateExpression', 519, Lclient_net_sf_saxon_ce_expr_UnaryExpression_2_classLit);
function NumericPromoter(exp_0){
    UnaryExpression.call(this, exp_0);
}

defineClass(442, 54, $intern_15);
_.evaluateItem = function evaluateItem_20(context){
    var item_0;
    item_0 = this.operand.evaluateItem(context);
    if (!item_0)
        return null;
    return this.promote_0(dynamicCast(item_0, 13));
}
;
_.iterate_0 = function iterate_15(context){
    var base, promoter;
    base = this.operand.iterate_0(context);
    promoter = new NumericPromoter$1(this);
    return new ItemMappingIterator_0(base, promoter, true);
}
;
_.simplify = function simplify_13(visitor){
    this.operand = $simplify(visitor, this.operand);
    return this;
}
;
var Lclient_net_sf_saxon_ce_expr_NumericPromoter_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'NumericPromoter', 442, Lclient_net_sf_saxon_ce_expr_UnaryExpression_2_classLit);
function NumericPromoter$1(this$0){
    this.this$01 = this$0;
}

defineClass(694, 1, {}, NumericPromoter$1);
_.mapItem = function mapItem_6(item_0){
    return this.this$01.promote_0(dynamicCast(item_0, 13));
}
;
var Lclient_net_sf_saxon_ce_expr_NumericPromoter$1_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'NumericPromoter/1', 694, Ljava_lang_Object_2_classLit);
function $typeCheck_3(this$static, visitor, contextItemType){
    var code_0, message;
    if (!contextItemType || instanceOf(contextItemType, 43)) {
        message = '';
        code_0 = '';
        if (loggingIsEnabled()) {
            if (!contextItemType) {
                code_0 = 'XPDY0002';
                message = this$static.noContextMessage() + ': the context item is undefined';
            }
            else {
                code_0 = 'XPTY0020';
                message = this$static.noContextMessage() + ': the context item is an atomic value';
            }
        }
        $typeError(this$static, visitor, message, code_0);
    }
    return this$static;
}

function SingleNodeExpression(){
    Expression.call(this);
}

defineClass(502, 6, {6:1});
_.computeCardinality = function computeCardinality_20(){
    return $intern_20;
}
;
_.computeSpecialProperties = function computeSpecialProperties_13(){
    return 12779520;
}
;
_.evaluateItem = function evaluateItem_21(context){
    return this.getNode(context);
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_3(){
    return 2;
}
;
_.getItemType = function getItemType_23(){
    return $clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7;
}
;
_.iterate_0 = function iterate_16(context){
    return makeIterator_0(this.getNode(context));
}
;
_.optimize = function optimize_19(visitor, contextItemType){
    return $typeCheck_3(this, visitor, contextItemType);
}
;
_.typeCheck = function typeCheck_25(visitor, contextItemType){
    return $typeCheck_3(this, visitor, contextItemType);
}
;
var Lclient_net_sf_saxon_ce_expr_SingleNodeExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'SingleNodeExpression', 502, Lclient_net_sf_saxon_ce_expr_Expression_2_classLit);
function ParentNodeExpression(){
    SingleNodeExpression.call(this);
}

defineClass(267, 502, {6:1, 267:1}, ParentNodeExpression);
_.equals$ = function equals_16(other){
    return instanceOf(other, 267);
}
;
_.getNode = function getNode(context){
    var item_0;
    item_0 = context.getContextItem();
    !item_0 && $dynamicError(this, 'The context item is not set', 'XPDY0002');
    if (instanceOf(item_0, 7)) {
        return dynamicCast(item_0, 7).getParent();
    }
    else {
        $dynamicError(this, 'The context item for the parent axis (..) is not a node', 'XPTY0020');
        return null;
    }
}
;
_.hashCode$ = function hashCode_17(){
    return getHashCode_0('ParentNodeExpression');
}
;
_.noContextMessage = function noContextMessage(){
    return 'Cannot select the parent of the context node';
}
;
_.toString$ = function toString_16(){
    return '..';
}
;
var Lclient_net_sf_saxon_ce_expr_ParentNodeExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'ParentNodeExpression', 267, Lclient_net_sf_saxon_ce_expr_SingleNodeExpression_2_classLit);
function $computeCardinality(this$static){
    var c1, c2;
    c1 = this$static.start_0.getCardinality();
    c2 = this$static.step.getCardinality();
    return multiply(c1, c2);
}

function $getFirstStep(this$static){
    return instanceOf(this$static.start_0, 96)?$getFirstStep(dynamicCast(this$static.start_0, 96)):this$static.start_0;
}

function $getLastStep(this$static){
    return instanceOf(this$static.step, 96)?$getLastStep(dynamicCast(this$static.step, 96)):this$static.step;
}

function $getLeadingSteps(this$static){
    var rem;
    if (instanceOf(this$static.step, 96)) {
        rem = new SlashExpression(this$static.start_0, $getLeadingSteps(dynamicCast(this$static.step, 96)));
        copyLocationInfo(this$static.start_0, rem);
        return rem;
    }
    else {
        return this$static.start_0;
    }
}

function $promoteFocusIndependentSubexpressions(this$static, visitor, contextItemType){
    var offer;
    offer = new PromotionOffer;
    offer.action = 10;
    offer.promoteDocumentDependent = ($getSpecialProperties(this$static.start_0) & $intern_34) != 0;
    offer.containingExpression = this$static;
    $setStepExpression(this$static, $doPromotion(this$static, this$static.step, offer));
    $resetStaticProperties(visitor);
    if (offer.containingExpression != this$static) {
        offer.containingExpression = $optimize_1(visitor, $typeCheck_1(visitor, offer.containingExpression, contextItemType), contextItemType);
        return offer.containingExpression;
    }
    return this$static;
}

function $setStartExpression(this$static, start2){
    if (this$static.start_0 != start2) {
        this$static.start_0 = start2;
        $adoptChildExpression(this$static, this$static.start_0);
    }
}

function $setStepExpression(this$static, step2){
    if (this$static.step != step2) {
        this$static.step = step2;
        $adoptChildExpression(this$static, this$static.step);
    }
}

function $simplify_0(this$static, visitor){
    $setStartExpression(this$static, $simplify(visitor, this$static.start_0));
    $setStepExpression(this$static, $simplify(visitor, this$static.step));
    if (isEmptySequence(this$static.start_0)) {
        return this$static.start_0;
    }
    if (isEmptySequence(this$static.step)) {
        return this$static.step;
    }
    if (instanceOf(this$static.start_0, 210) && instanceOf(this$static.step, 267)) {
        return new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
    }
    return this$static;
}

function SlashExpression(start_0, step){
    Expression.call(this);
    this.start_0 = start_0;
    this.step = step;
    $adoptChildExpression(this, start_0);
    $adoptChildExpression(this, step);
}

defineClass(96, 6, {6:1, 96:1}, SlashExpression);
_.computeCardinality = function computeCardinality_21(){
    return $computeCardinality(this);
}
;
_.computeDependencies = function computeDependencies_1(){
    return this.start_0.getDependencies() | this.step.getDependencies() & 481;
}
;
_.computeSpecialProperties = function computeSpecialProperties_14(){
    var p_0;
    p_0 = 0;
    ($getSpecialProperties(this.start_0) & $getSpecialProperties(this.step) & $intern_22) != 0 && (p_0 |= $intern_22);
    return p_0;
}
;
_.equals$ = function equals_17(other){
    var p_0;
    if (!instanceOf(other, 96)) {
        return false;
    }
    p_0 = dynamicCast(other, 96);
    return this.start_0.equals$(p_0.start_0) && this.step.equals$(p_0.step);
}
;
_.getItemType = function getItemType_24(){
    return this.step.getItemType();
}
;
_.hasLoopingSubexpression = function hasLoopingSubexpression_2(child){
    return child == this.step;
}
;
_.hashCode$ = function hashCode_18(){
    return getHashCode_0('SlashExpression') + this.start_0.hashCode$() + this.step.hashCode$();
}
;
_.iterate_0 = function iterate_17(context){
    var atomicValueChecker, context2, first, loc, nodeChecker, result;
    result = this.start_0.iterate_0(context);
    context2 = context.newMinorContext();
    context2.setCurrentIterator(result);
    result = new ContextMappingIterator(this, context2);
    loc = $getSourceLocator(this);
    first = result.next_0();
    if (!first) {
        return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
    }
    else if (instanceOf(first, 13)) {
        atomicValueChecker = new SlashExpression$1(loc);
        return new ItemMappingIterator_0(new OneItemGoneIterator(first, result), atomicValueChecker, true);
    }
    else {
        nodeChecker = new SlashExpression$2(loc);
        return new DocumentOrderIterator_0(new ItemMappingIterator_0(new OneItemGoneIterator(first, result), nodeChecker, true), ($clinit_GlobalOrderComparer() , $clinit_GlobalOrderComparer() , instance_0));
    }
}
;
_.iterateSubExpressions = function iterateSubExpressions_5(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.start_0, this.step]));
}
;
_.map_1 = function map_2(context){
    return this.step.iterate_0(context);
}
;
_.optimize = function optimize_20(visitor, contextItemType){
    $clinit_TypeHierarchy();
    $setStartExpression(this, $optimize_1(visitor, this.start_0, contextItemType));
    $setStepExpression(this, this.step.optimize(visitor, this.start_0.getItemType()));
    if (isEmptySequence(this.start_0) || isEmptySequence(this.step)) {
        return new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
    }
    return $promoteFocusIndependentSubexpressions(this, visitor, contextItemType);
}
;
_.promote = function promote_8(offer, parent_0){
    var exp_0;
    exp_0 = $accept(offer, this);
    if (exp_0) {
        return exp_0;
    }
    else {
        $setStartExpression(this, $doPromotion(this, this.start_0, offer));
        offer.action == 14 && $setStepExpression(this, $doPromotion(this, this.step, offer));
        return this;
    }
}
;
_.simplify = function simplify_14(visitor){
    return $simplify_0(this, visitor);
}
;
_.toString$ = function toString_17(){
    return this.start_0.toString$() + '/' + this.step.toString$();
}
;
_.typeCheck = function typeCheck_26(visitor, contextItemType){
    var ame, path, role0, sortedPath, start2, step2, stepType, th;
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    start2 = $typeCheck_1(visitor, this.start_0, contextItemType);
    role0 = new RoleLocator(1, '/', 0);
    role0.errorCode = 'XPTY0019';
    $setStartExpression(this, staticTypeCheck_1(start2, ($clinit_SequenceType() , NODE_SEQUENCE), false, role0));
    $setStepExpression(this, $typeCheck_1(visitor, this.step, this.start_0.getItemType()));
    stepType = this.step.getItemType();
    if ($isSubType(th, stepType, ($clinit_Type() , NODE_TYPE))) {
        if (($getSpecialProperties(this.step) & $intern_22) != 0) {
            start2 = unsorted(this.start_0, false);
            step2 = unsorted(this.step, false);
            path = new PathExpression(start2, step2);
            copyLocationInfo(this, path);
            sortedPath = $addDocumentSorter(path);
            copyLocationInfo(this, sortedPath);
            sortedPath = sortedPath.simplify(visitor);
            return sortedPath.typeCheck(visitor, contextItemType);
        }
        else {
            path = new PathExpression(this.start_0, this.step);
            copyLocationInfo(this, path);
            sortedPath = $addDocumentSorter(path);
            copyLocationInfo(this, sortedPath);
            sortedPath = sortedPath.simplify(visitor);
            return sortedPath.typeCheck(visitor, contextItemType);
        }
    }
    else if (instanceOf(stepType, 43)) {
        ame = new ForEach(this.start_0, this.step, false);
        copyLocationInfo(this, ame);
        return $typeCheck_1(visitor, $simplify(visitor, ame), contextItemType);
    }
    else {
        return this;
    }
}
;
var Lclient_net_sf_saxon_ce_expr_SlashExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'SlashExpression', 96, Lclient_net_sf_saxon_ce_expr_Expression_2_classLit);
function $addDocumentSorter(this$static){
    var props;
    props = (this$static.staticProperties == -1 && (this$static.staticProperties = this$static.start_0.getDependencies() | this$static.step.getDependencies() & 481 | $computeCardinality(this$static) | $computeSpecialProperties_1(this$static)) , this$static.staticProperties & $intern_11);
    return (props & $intern_25) != 0?this$static:(props & $intern_26) != 0?makeSystemFunction('reverse', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this$static])):new DocumentSorter(this$static);
}

function $computeSpecialProperties_1(this$static){
    var p_0, startProperties, stepProperties;
    startProperties = $getSpecialProperties(this$static.start_0);
    stepProperties = $getSpecialProperties(this$static.step);
    p_0 = 0;
    (this$static.start_0.getCardinality() & $intern_14) != 0 || (startProperties |= 9043968);
    (this$static.step.getCardinality() & $intern_14) != 0 || (stepProperties |= 9043968);
    (startProperties & stepProperties & $intern_34) != 0 && (p_0 |= $intern_34);
    (startProperties & $intern_39) != 0 && (stepProperties & $intern_34) != 0 && (p_0 |= $intern_39);
    (startProperties & stepProperties & $intern_27) != 0 && (p_0 |= $intern_27);
    (startProperties & stepProperties & $intern_28) != 0 && (p_0 |= $intern_28);
    $testNaturallySorted(this$static, startProperties, stepProperties) && (p_0 |= $intern_25);
    $testNaturallyReverseSorted(this$static) && (p_0 |= $intern_26);
    (startProperties & stepProperties & $intern_22) != 0 && (p_0 |= $intern_22);
    return p_0;
}

function $getRemainingSteps(this$static){
    var rem;
    if (instanceOf(this$static.start_0, 87)) {
        rem = new PathExpression($getRemainingSteps(dynamicCast(this$static.start_0, 87)), this$static.step);
        copyLocationInfo(this$static.start_0, rem);
        return rem;
    }
    else {
        return this$static.step;
    }
}

function $simplifyDescendantPath(this$static){
    var cie, filters, mid, newPath, newStep, st, startPath, stax, test_0, underlyingAxis, underlyingStep;
    st = this$static.start_0;
    if (instanceOf(this$static.start_0, 52)) {
        stax = dynamicCast(this$static.start_0, 52);
        if (stax.axis_0 != 5) {
            return null;
        }
        cie = new ContextItemExpression;
        copyLocationInfo(this$static, cie);
        st = new PathExpression(cie, stax);
        copyLocationInfo(this$static, st);
    }
    if (!instanceOf(st, 87)) {
        return null;
    }
    startPath = dynamicCast(st, 87);
    if (!instanceOf(startPath.step, 52)) {
        return null;
    }
    mid = dynamicCast(startPath.step, 52);
    if (mid.axis_0 != 5) {
        return null;
    }
    test_0 = mid.test_0;
    if (!(!test_0 || instanceOf(test_0, 176))) {
        return null;
    }
    underlyingStep = this$static.step;
    while (instanceOf(underlyingStep, 80)) {
        if ($isPositional(dynamicCast(underlyingStep, 80), ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9))) {
            return null;
        }
        underlyingStep = dynamicCast(underlyingStep, 80).start_0;
    }
    if (!instanceOf(underlyingStep, 52)) {
        return null;
    }
    underlyingAxis = dynamicCast(underlyingStep, 52);
    if (underlyingAxis.axis_0 == 3) {
        newStep = new AxisExpression(4, dynamicCast(underlyingStep, 52).test_0);
        copyLocationInfo(this$static, newStep);
        underlyingStep = this$static.step;
        filters = new Stack;
        while (instanceOf(underlyingStep, 80)) {
            $add_18(filters, dynamicCast(underlyingStep, 80).filter);
            underlyingStep = dynamicCast(underlyingStep, 80).start_0;
        }
        while (filters.arrayList.array.length != 0) {
            newStep = new FilterExpression(newStep, dynamicCast($pop(filters), 6));
            copyLocationInfo(this$static.step, newStep);
        }
        newPath = new PathExpression(startPath.start_0, newStep);
        copyLocationInfo(this$static, newPath);
        return newPath;
    }
    if (underlyingAxis.axis_0 == 2) {
        newStep = new AxisExpression(5, ($clinit_NodeKindTest() , ELEMENT));
        copyLocationInfo(this$static, newStep);
        newPath = new PathExpression(new PathExpression(startPath.start_0, newStep), this$static.step);
        copyLocationInfo(this$static, newPath);
        return newPath;
    }
    return null;
}

function $testNaturallyReverseSorted(this$static){
    if ((this$static.start_0.getCardinality() & $intern_14) == 0 && instanceOf(this$static.step, 52)) {
        return !($clinit_Axis() , isForwards)[dynamicCast(this$static.step, 52).axis_0];
    }
    return (this$static.step.getCardinality() & $intern_14) == 0 && instanceOf(this$static.start_0, 52) && !($clinit_Axis() , isForwards)[dynamicCast(this$static.start_0, 52).axis_0];
}

function $testNaturallySorted(this$static, startProperties, stepProperties){
    if ((stepProperties & $intern_25) == 0) {
        return false;
    }
    if ((this$static.start_0.getCardinality() & $intern_14) != 0) {
        if ((startProperties & $intern_25) == 0) {
            return false;
        }
    }
    else {
        return true;
    }
    if ((stepProperties & $intern_29) != 0) {
        return true;
    }
    return (startProperties & $intern_27) != 0 && (stepProperties & $intern_28) != 0;
}

function PathExpression(start_0, step){
    var stepPath;
    SlashExpression.call(this, start_0, step);
    this.state = 0;
    if (instanceOf(step, 87)) {
        stepPath = dynamicCast(step, 87);
        if (isFilteredAxisPath(stepPath.start_0) && isFilteredAxisPath(stepPath.step)) {
            $setStartExpression(this, new PathExpression(start_0, stepPath.start_0));
            $setStepExpression(this, stepPath.step);
        }
    }
}

function isFilteredAxisPath(exp_0){
    if (instanceOf(exp_0, 52)) {
        return true;
    }
    else {
        while (instanceOf(exp_0, 80)) {
            exp_0 = dynamicCast(exp_0, 80).start_0;
        }
        return instanceOf(exp_0, 52);
    }
}

defineClass(87, 96, {6:1, 87:1, 96:1}, PathExpression);
_.computeSpecialProperties = function computeSpecialProperties_15(){
    return $computeSpecialProperties_1(this);
}
;
_.iterate_0 = function iterate_18(context){
    var context2, master;
    master = this.start_0.iterate_0(context);
    context2 = context.newMinorContext();
    context2.setCurrentIterator(master);
    return new ContextMappingIterator(this, context2);
}
;
_.optimize = function optimize_21(visitor, contextItemType){
    var f2, lastStep, leading, p2, th;
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    if (this.state >= 3) {
        $setStartExpression(this, $optimize_1(visitor, this.start_0, contextItemType));
        $setStepExpression(this, this.step.optimize(visitor, this.start_0.getItemType()));
        return this;
    }
    this.state = 3;
    lastStep = $getLastStep(this);
    if (instanceOf(lastStep, 80) && !$isPositional(dynamicCast(lastStep, 80), th)) {
        leading = $getLeadingSteps(this);
        p2 = new PathExpression(leading, dynamicCast(lastStep, 80).start_0);
        f2 = new FilterExpression(p2, dynamicCast(lastStep, 80).filter);
        return $optimize_2(f2, visitor, contextItemType);
    }
    $setStartExpression(this, $optimize_1(visitor, this.start_0, contextItemType));
    $setStepExpression(this, this.step.optimize(visitor, this.start_0.getItemType()));
    if (isEmptySequence(this.start_0) || isEmptySequence(this.step)) {
        return new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
    }
    return $promoteFocusIndependentSubexpressions(this, visitor, contextItemType);
}
;
_.promote = function promote_9(offer, parent_0){
    var exp_0, p_0;
    p_0 = this;
    exp_0 = $accept(offer, p_0);
    if (exp_0) {
        return exp_0;
    }
    else {
        $setStartExpression(this, $doPromotion(this, this.start_0, offer));
        offer.action == 14 && $setStepExpression(this, $doPromotion(this, this.step, offer));
        return this;
    }
}
;
_.simplify = function simplify_15(visitor){
    var e2;
    if (this.state > 0) {
        return this;
    }
    this.state = 1;
    e2 = $simplify_0(this, visitor);
    if (e2 != this) {
        return e2;
    }
    if (instanceOf(this.start_0, 115)) {
        return this.step;
    }
    if (instanceOf(this.step, 115)) {
        return this.start_0;
    }
    return this;
}
;
_.toString$ = function toString_18(){
    return '(' + this.start_0.toString$() + '/' + this.step.toString$() + ')';
}
;
_.typeCheck = function typeCheck_27(visitor, contextItemType){
    var p_0, role0;
    $clinit_TypeHierarchy();
    if (this.state >= 2) {
        $setStartExpression(this, $typeCheck_1(visitor, this.start_0, contextItemType));
        $setStepExpression(this, $typeCheck_1(visitor, this.step, this.start_0.getItemType()));
        return this;
    }
    this.state = 2;
    $setStartExpression(this, $typeCheck_1(visitor, this.start_0, contextItemType));
    role0 = new RoleLocator(1, '/', 0);
    role0.errorCode = 'XPTY0019';
    $setStartExpression(this, staticTypeCheck_1(this.start_0, ($clinit_SequenceType() , NODE_SEQUENCE), false, role0));
    $setStepExpression(this, $typeCheck_1(visitor, this.step, this.start_0.getItemType()));
    if (instanceOf(this.start_0, 115)) {
        return this.step;
    }
    if (($getSpecialProperties(this.step) & $intern_22) != 0) {
        $setStartExpression(this, unsorted(this.start_0, false));
        $setStepExpression(this, unsorted(this.step, false));
        p_0 = $simplifyDescendantPath(this);
        if (p_0) {
            copyLocationInfo(this, p_0);
            return $typeCheck_1(visitor, $simplify(visitor, p_0), contextItemType);
        }
        else {
            $adoptChildExpression(this, this.start_0);
            $adoptChildExpression(this, this.step);
        }
    }
    return this;
}
;
_.state = 0;
var Lclient_net_sf_saxon_ce_expr_PathExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'PathExpression', 87, Lclient_net_sf_saxon_ce_expr_SlashExpression_2_classLit);
function PromoteToDouble(exp_0){
    NumericPromoter.call(this, exp_0);
}

defineClass(693, 442, $intern_15, PromoteToDouble);
_.getItemType = function getItemType_25(){
    return $clinit_AtomicType() , DOUBLE;
}
;
_.promote_0 = function promote_10(value_0){
    instanceOf(value_0, 25) || instanceOf(value_0, 56) || $typeError(this, null, 'Cannot promote non-numeric value to xs:double', 'XPTY0004');
    return value_0.convert(($clinit_AtomicType() , DOUBLE)).asAtomic();
}
;
var Lclient_net_sf_saxon_ce_expr_PromoteToDouble_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'PromoteToDouble', 693, Lclient_net_sf_saxon_ce_expr_NumericPromoter_2_classLit);
function PromoteToFloat(exp_0){
    NumericPromoter.call(this, exp_0);
}

defineClass(695, 442, $intern_15, PromoteToFloat);
_.getItemType = function getItemType_26(){
    return $clinit_AtomicType() , FLOAT;
}
;
_.promote_0 = function promote_11(value_0){
    instanceOf(value_0, 25) || instanceOf(value_0, 56) || $typeError(this, null, 'Cannot promote non-numeric value to xs:float', 'XPTY0004');
    instanceOf(value_0, 44) && $typeError(this, null, 'Cannot promote from xs:double to xs:float', 'XPTY0004');
    return value_0.convert(($clinit_AtomicType() , FLOAT)).asAtomic();
}
;
var Lclient_net_sf_saxon_ce_expr_PromoteToFloat_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'PromoteToFloat', 695, Lclient_net_sf_saxon_ce_expr_NumericPromoter_2_classLit);
function $accept(this$static, child){
    var dependencies, properties, var_$;
    switch (this$static.action) {
        case 11:
            {
                properties = (child.staticProperties == -1 && (child.staticProperties = child.computeDependencies() | child.computeCardinality() | child.computeSpecialProperties()) , child.staticProperties & $intern_11);
                if ((properties & $intern_22) != 0 && !dependsOnVariable(child, this$static.bindingList) && (child.getDependencies() & $intern_41) == 0) {
                    return $promote(this$static, child);
                }
                break;
            }

        case 10:
            {
                dependencies = child.getDependencies();
                properties = (child.staticProperties == -1 && (child.staticProperties = child.computeDependencies() | child.computeCardinality() | child.computeSpecialProperties()) , child.staticProperties & $intern_11);
                if (!this$static.promoteXSLTFunctions && (dependencies & 97) != 0) {
                    break;
                }
                if (dependsOnVariable(child, this$static.bindingList)) {
                    break;
                }
                if ((dependencies & $intern_41) != 0) {
                    break;
                }
                if ((dependencies & 30) == 0 && (properties & $intern_22) != 0) {
                    return $promote(this$static, child);
                }
                else if (this$static.promoteDocumentDependent && (dependencies & 14) == 0 && (properties & $intern_22) != 0) {
                    return $promote(this$static, child);
                }
                break;
            }

        case 14:
            {
                if (instanceOf(child, 347)) {
                    var_$ = new LocalVariableReference_0(dynamicCast(this$static.containingExpression, 99));
                    copyLocationInfo(child, var_$);
                    return var_$;
                }
                else if (!callsFunction(child, ($clinit_Current() , FN_CURRENT))) {
                    return child;
                }
                break;
            }

        case 13:
            {
                if (instanceOf(child, 304)) {
                    return dynamicCast(child, 304).argument[0];
                }
                else if (instanceOf(child, 268) && !this$static.retainAllNodes) {
                    return dynamicCast(child, 268).operand;
                }
                break;
            }

        default:throw new UnsupportedOperationException_0('Unknown promotion action ' + this$static.action);
    }
    return null;
}

function $promote(this$static, child){
    var let_0, properties, type_0, var_$;
    let_0 = new LetExpression;
    $setVariableQName(let_0, new StructuredQName('zz', 'http://saxon.sf.net/', 'zz' + getHashCode(let_0)));
        type_0 = ($clinit_SequenceType() , new SequenceType(child.getItemType(), child.getCardinality()));
        let_0.requiredType = type_0;
        copyLocationInfo(this$static.containingExpression, let_0);
        let_0.sequence = child;
        $adoptChildExpression(let_0, child);
        $setEvaluationMode(let_0, (child.getCardinality() & $intern_14) != 0?8:7);
        $setAction(let_0, this$static.containingExpression);
        $adoptChildExpression(let_0, this$static.containingExpression);
        this$static.containingExpression = let_0;
        this$static.accepted = true;
        var_$ = new LocalVariableReference_0(let_0);
        properties = (child.staticProperties == -1 && (child.staticProperties = child.computeDependencies() | child.computeCardinality() | child.computeSpecialProperties()) , child.staticProperties & $intern_11 & $intern_23);
        $setStaticType(var_$, type_0, null, properties);
        copyLocationInfo(this$static.containingExpression, var_$);
        return var_$;
}

function PromotionOffer(){
}

defineClass(208, 1, {}, PromotionOffer);
_.accepted = false;
_.action = 0;
_.promoteDocumentDependent = false;
_.promoteXSLTFunctions = true;
_.retainAllNodes = true;
var Lclient_net_sf_saxon_ce_expr_PromotionOffer_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'PromotionOffer', 208, Ljava_lang_Object_2_classLit);
function $effectiveBooleanValue_3(this$static, context){
    var base, it, slot, some_0;
    base = this$static.sequence.iterate_0(context);
    some_0 = this$static.operator == 31;
    slot = this$static.slotNumber;
    while (true) {
        it = base.next_0();
        if (!it) {
            break;
        }
        context.setLocalVariable(slot, it);
        if (some_0 == this$static.action.effectiveBooleanValue(context)) {
            return some_0;
        }
    }
    return !some_0;
}

function $setOperator(this$static, operator){
    this$static.operator = operator;
}

function QuantifiedExpression(){
}

defineClass(410, 99, {99:1, 126:1, 6:1, 410:1}, QuantifiedExpression);
_.computeCardinality = function computeCardinality_22(){
    return $intern_21;
}
;
_.computeSpecialProperties = function computeSpecialProperties_16(){
    return $intern_22;
}
;
_.effectiveBooleanValue = function effectiveBooleanValue_6(context){
    return $effectiveBooleanValue_3(this, context);
}
;
_.evaluateItem = function evaluateItem_22(context){
    return $clinit_BooleanValue() , $effectiveBooleanValue_3(this, context)?TRUE_0:FALSE_0;
}
;
_.getItemType = function getItemType_27(){
    return $clinit_AtomicType() , BOOLEAN;
}
;
_.hasLoopingSubexpression = function hasLoopingSubexpression_3(child){
    return child == this.action;
}
;
_.optimize = function optimize_22(visitor, contextItemType){
    var e2, ebv, offer;
    this.sequence = $optimize_1(visitor, this.sequence, contextItemType);
    this.action = $optimize_1(visitor, this.action, contextItemType);
    ebv = rewriteEffectiveBooleanValue(this.action, visitor, contextItemType);
    if (ebv) {
        this.action = ebv;
        $adoptChildExpression(this, ebv);
    }
    offer = new PromotionOffer;
    offer.containingExpression = this;
    offer.action = 11;
    offer.bindingList = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Binding_2_classLit, 1), $intern_1, 126, 0, [this]);
    this.action = $doPromotion(this, this.action, offer);
    instanceOf(offer.containingExpression, 86) && (offer.containingExpression = $optimize_1(visitor, $typeCheck_1(visitor, offer.containingExpression, contextItemType), contextItemType));
    e2 = offer.containingExpression;
    if (e2 != this) {
        return e2;
    }
    return this;
}
;
_.toString$ = function toString_19(){
    return (this.operator == 31?'some':'every') + ' $' + (!this.variableName?'zz:var' + getHashCode(this):$getDisplayName_0(this.variableName)) + ' in ' + this.sequence.toString$() + ' satisfies ' + this.action.toString$();
}
;
_.typeCheck = function typeCheck_28(visitor, contextItemType){
    var actualItemType, err;
    this.sequence = $typeCheck_1(visitor, this.sequence, contextItemType);
    if (isEmptySequence(this.sequence)) {
        return makeLiteral(($clinit_BooleanValue() , this.operator != 31?TRUE_0:FALSE_0));
    }
    this.sequence = unsorted(this.sequence, false);
    actualItemType = this.sequence.getItemType();
    $refineTypeInformation(this, actualItemType, $intern_21, null, $getSpecialProperties(this.sequence), visitor, this);
    this.action = $typeCheck_1(visitor, this.action, contextItemType);
    err = ebvError_0(this.action);
    if (err) {
        $setLocator(err, $getSourceLocator(this));
        throw err;
    }
    return this;
}
;
_.operator = 0;
var Lclient_net_sf_saxon_ce_expr_QuantifiedExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'QuantifiedExpression', 410, Lclient_net_sf_saxon_ce_expr_Assignation_2_classLit);
function RangeExpression(start_0, op, end){
    BinaryExpression.call(this, start_0, op, end);
}

defineClass(825, 79, $intern_19, RangeExpression);
_.computeCardinality = function computeCardinality_23(){
    return $intern_12;
}
;
_.getItemType = function getItemType_28(){
    return $clinit_AtomicType() , INTEGER;
}
;
_.iterate_0 = function iterate_19(context){
    var av1, av2, v1, v2;
    av1 = dynamicCast(this.operand0.evaluateItem(context), 13);
    if (!av1) {
        return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
    }
    v1 = dynamicCast(av1, 25);
    av2 = dynamicCast(this.operand1.evaluateItem(context), 13);
    if (!av2) {
        return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
    }
    v2 = dynamicCast(av2, 25);
    if (v1.compareTo(v2) > 0) {
        return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
    }
    return new SteppingIterator(v1, new RangeExpression$RangeSteppingFunction(v2.intValue()), true);
}
;
_.optimize = function optimize_23(visitor, contextItemType){
    this.operand0 = $optimize_1(visitor, this.operand0, contextItemType);
    this.operand1 = $optimize_1(visitor, this.operand1, contextItemType);
    return this;
}
;
_.typeCheck = function typeCheck_29(visitor, contextItemType){
    var backCompat, role0, role1;
    this.operand0 = $typeCheck_1(visitor, this.operand0, contextItemType);
    this.operand1 = $typeCheck_1(visitor, this.operand1, contextItemType);
    backCompat = visitor.staticContext.isInBackwardsCompatibleMode();
    role0 = new RoleLocator(1, 'to', 0);
    this.operand0 = staticTypeCheck_1(this.operand0, ($clinit_SequenceType() , OPTIONAL_INTEGER), backCompat, role0);
    role1 = new RoleLocator(1, 'to', 1);
    this.operand1 = staticTypeCheck_1(this.operand1, OPTIONAL_INTEGER, backCompat, role1);
    return this;
}
;
var Lclient_net_sf_saxon_ce_expr_RangeExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'RangeExpression', 825, Lclient_net_sf_saxon_ce_expr_BinaryExpression_2_classLit);
function RangeExpression$RangeSteppingFunction(limit){
    this.limit = limit;
}

defineClass(826, 1, {}, RangeExpression$RangeSteppingFunction);
_.conforms = function conforms(current){
    return true;
}
;
_.step_0 = function step_0(current){
    var curr, e;
    try {
        curr = $intValue(dynamicCast(current, 32));
        return curr >= this.limit?null:new IntegerValue(curr + 1);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            throw new AssertionError(e);
        }
        else 
            throw unwrap($e0);
    }
}
;
_.limit = 0;
var Lclient_net_sf_saxon_ce_expr_RangeExpression$RangeSteppingFunction_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'RangeExpression/RangeSteppingFunction', 826, Ljava_lang_Object_2_classLit);
function $composeErrorMessage(this$static, requiredItemType, suppliedItemType){
    return 'Required item type of ' + $getMessage(this$static) + ' is ' + requiredItemType.toString$() + '; supplied value has item type ' + suppliedItemType.toString$();
}

function $composeRequiredMessage(this$static, requiredItemType){
    return 'Required item type of ' + $getMessage(this$static) + ' is ' + ('xs:' + requiredItemType.localName_0);
}

function $getMessage(this$static){
    var attributeName, name_0, slash;
    isJavaString(this$static.operation)?(name_0 = dynamicCastToString(this$static.operation)):(name_0 = $getDisplayName_0(dynamicCast(this$static.operation, 8)));
    switch (this$static.kind) {
        case 0:
            return ordinal_0(this$static.operand + 1) + ' argument of ' + (name_0.length == 0?'anonymous function':name_0 + '()');
        case 1:
            return ordinal_0(this$static.operand + 1) + " operand of '" + name_0 + "'";
        case 9:
            return "operand of '-'";
        case 2:
            return "value in '" + name_0 + "' expression";
        case 3:
            return 'value of variable $' + name_0;
        case 4:
            slash = $indexOf_3(name_0, fromCodePoint(47));
            attributeName = '';
            if (slash >= 0) {
                attributeName = __substr(name_0, slash + 1, name_0.length - (slash + 1));
                name_0 = name_0.substr(0, slash);
            }

            return '@' + attributeName + ' attribute of ' + name_0;
        case 5:
            return name_0.length == 0?'result of anonymous function':'result of function ' + name_0 + '()';
        case 7:
            return 'result of template ' + name_0;
        case 6:
            return ordinal_0(this$static.operand + 1) + ' sort key';
        case 8:
            return 'value of parameter $' + name_0;
        case 10:
            return 'value of ' + ordinal_0(this$static.operand + 1) + ' operand of ' + name_0 + ' expression';
        case 11:
            return 'value of the grouping key';
        case 12:
            return 'result of the expression {' + name_0 + '} evaluated by xsl:evaluate';
        default:return '';
    }
}

function RoleLocator(kind, operation, operand){
    if (!(isJavaString(operation) || instanceOf(operation, 8))) {
        throw new IllegalArgumentException_0('operation');
    }
    this.kind = kind;
    this.operation = operation;
    this.operand = operand;
}

function ordinal_0(n){
    switch (n) {
        case 1:
            return 'first';
        case 2:
            return 'second';
        case 3:
            return 'third';
        default:return n + 'th';
    }
}

defineClass(46, 1, {}, RoleLocator);
_.errorCode = 'XPTY0004';
_.kind = 0;
_.operand = 0;
var Lclient_net_sf_saxon_ce_expr_RoleLocator_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'RoleLocator', 46, Ljava_lang_Object_2_classLit);
function RootExpression(){
    SingleNodeExpression.call(this);
}

defineClass(210, 502, {6:1, 210:1}, RootExpression);
_.computeCardinality = function computeCardinality_24(){
    return $intern_21;
}
;
_.equals$ = function equals_18(other){
    return instanceOf(other, 210);
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_4(){
    return 16;
}
;
_.getItemType = function getItemType_29(){
    return $clinit_NodeKindTest() , DOCUMENT;
}
;
_.getNode = function getNode_0(context){
    var current, doc;
    current = context.getContextItem();
    !current && $dynamicError(this, 'Finding root of tree: the context item is undefined', 'XPDY0002');
    if (instanceOf(current, 7)) {
        doc = dynamicCast(current, 7).getDocumentRoot();
        !doc && $dynamicError(this, 'The root of the tree containing the context item is not a document node', 'XPDY0050');
        return doc;
    }
    $typeError(this, null, 'Finding root of tree: the context item is not a node', 'XPTY0020');
    return null;
}
;
_.hashCode$ = function hashCode_19(){
    return getHashCode_0('RootExpression');
}
;
_.noContextMessage = function noContextMessage_0(){
    return "Leading '/' cannot select the root node of the tree containing the context item";
}
;
_.toString$ = function toString_20(){
    return '(/)';
}
;
var Lclient_net_sf_saxon_ce_expr_RootExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'RootExpression', 210, Lclient_net_sf_saxon_ce_expr_SingleNodeExpression_2_classLit);
function SlashExpression$1(val$loc){
    this.val$loc2 = val$loc;
}

defineClass(810, 1, {}, SlashExpression$1);
_.mapItem = function mapItem_7(item_0){
    if (instanceOf(item_0, 13)) {
        return item_0;
    }
    else {
        throw new XPathException_3('Cannot mix nodes and atomic values in the result of a path expression', 'XPTY0018', this.val$loc2);
    }
}
;
var Lclient_net_sf_saxon_ce_expr_SlashExpression$1_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'SlashExpression/1', 810, Ljava_lang_Object_2_classLit);
function SlashExpression$2(val$loc){
    this.val$loc2 = val$loc;
}

defineClass(811, 1, {}, SlashExpression$2);
_.mapItem = function mapItem_8(item_0){
    if (instanceOf(item_0, 7)) {
        return item_0;
    }
    else {
        throw new XPathException_3('Cannot mix nodes and atomic values in the result of a path expression', 'XPTY0018', this.val$loc2);
    }
}
;
var Lclient_net_sf_saxon_ce_expr_SlashExpression$2_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'SlashExpression/2', 811, Ljava_lang_Object_2_classLit);
function StringLiteral(value_0){
    Literal.call(this, value_0);
}

function StringLiteral_0(value_0){
    Literal.call(this, ($clinit_StringValue() , value_0 == null || value_0.length == 0?EMPTY_STRING:new StringValue_0(value_0)));
}

defineClass(21, 9, {6:1, 9:1, 21:1}, StringLiteral, StringLiteral_0);
var Lclient_net_sf_saxon_ce_expr_StringLiteral_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'StringLiteral', 21, Lclient_net_sf_saxon_ce_expr_Literal_2_classLit);
function $evaluateVariable(this$static, c){
    return c.evaluateLocalVariable(this$static.slotNumber);
}

function SuppliedParameterReference(slot){
    Expression.call(this);
    this.slotNumber = slot;
}

defineClass(356, 6, {6:1, 356:1}, SuppliedParameterReference);
_.computeCardinality = function computeCardinality_25(){
    return $intern_12;
}
;
_.evaluateItem = function evaluateItem_23(context){
    return asItem(context.evaluateLocalVariable(this.slotNumber));
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_5(){
    return 128;
}
;
_.getItemType = function getItemType_30(){
    return $clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2;
}
;
_.iterate_0 = function iterate_20(context){
    return context.evaluateLocalVariable(this.slotNumber).iterate();
}
;
_.optimize = function optimize_24(visitor, contextItemType){
    return this;
}
;
_.toString$ = function toString_21(){
    return 'suppliedParam(' + this.slotNumber + ')';
}
;
_.typeCheck = function typeCheck_30(visitor, contextItemType){
    return this;
}
;
_.slotNumber = 0;
var Lclient_net_sf_saxon_ce_expr_SuppliedParameterReference_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'SuppliedParameterReference', 356, Lclient_net_sf_saxon_ce_expr_Expression_2_classLit);
function $tailCallDifferentFunction(this$static, fn, cm){
    var err;
    $resetStackFrameMap(cm, fn.numberOfSlots, fn.parameterDefinitions.length);
    try {
        return evaluate(fn.body_0, (fn.evaluationMode == -1 && (fn.tailRecursive?(fn.evaluationMode = eagerEvaluationMode(fn.body_0)):(fn.evaluationMode = lazyEvaluationMode(fn.body_0))) , fn.evaluationMode), cm);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $maybeSetLocation(err, $getSourceLocator(this$static));
            throw err;
        }
        else 
            throw unwrap($e0);
    }
}

function TailCallLoop(function_$){
    UnaryExpression.call(this, function_$.body_0);
    this.containingFunction = function_$;
}

defineClass(761, 54, $intern_15, TailCallLoop);
_.evaluateItem = function evaluateItem_24(context){
    var fn, item_0;
    while (true) {
        item_0 = this.operand.evaluateItem(context);
        fn = $getTailCallFunction(context);
        if (!fn) {
            return item_0;
        }
        if (fn != this.containingFunction) {
            return asItem($tailCallDifferentFunction(this, fn, context));
        }
    }
}
;
_.getImplementationMethod = function getImplementationMethod_6(){
    return this.operand.getImplementationMethod();
}
;
_.getItemType = function getItemType_31(){
    return this.operand.getItemType();
}
;
_.iterate_0 = function iterate_21(context){
    var extent, fn, iter;
    while (true) {
        iter = this.operand.iterate_0(context);
        extent = makeSequenceExtent(iter);
        fn = $getTailCallFunction(context);
        if (!fn) {
            return extent.iterate();
        }
        if (fn != this.containingFunction) {
            return $tailCallDifferentFunction(this, fn, context).iterate();
        }
    }
}
;
_.process = function process_4(context){
    var fn;
    while (true) {
        this.operand.process(context);
        fn = $getTailCallFunction(context);
        if (!fn) {
            return;
        }
        if (fn != this.containingFunction) {
            process_10($tailCallDifferentFunction(this, fn, context).iterate(), context);
            return;
        }
    }
}
;
_.typeCheck = function typeCheck_31(visitor, contextItemType){
    this.operand = $typeCheck_1(visitor, this.operand, contextItemType);
    return this;
}
;
var Lclient_net_sf_saxon_ce_expr_TailCallLoop_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'TailCallLoop', 761, Lclient_net_sf_saxon_ce_expr_UnaryExpression_2_classLit);
function $clinit_Token(){
    $clinit_Token = emptyMethod;
    tokens_0 = initDim(Ljava_lang_String_2_classLit, $intern_8, 2, 300, 4, 1);
    tokens_0[0] = '<eof>';
    tokens_0[1] = '|';
    tokens_0[2] = '/';
    tokens_0[3] = '@';
    tokens_0[4] = '[';
        tokens_0[5] = '(';
            tokens_0[6] = '=';
            tokens_0[7] = ',';
            tokens_0[8] = '//';
            tokens_0[9] = 'or';
            tokens_0[10] = 'and';
            tokens_0[11] = '>';
            tokens_0[12] = '<';
            tokens_0[13] = '>=';
            tokens_0[14] = '<=';
            tokens_0[15] = '+';
            tokens_0[16] = '-';
            tokens_0[17] = '*';
            tokens_0[18] = 'div';
            tokens_0[19] = 'mod';
            tokens_0[20] = 'is';
            tokens_0[21] = '$';
            tokens_0[22] = '!=';
            tokens_0[23] = 'intersect';
            tokens_0[24] = 'except';
            tokens_0[25] = 'return';
            tokens_0[26] = 'then';
            tokens_0[27] = 'else';
            tokens_0[29] = 'to';
            tokens_0[30] = 'in';
            tokens_0[31] = 'some';
            tokens_0[32] = 'every';
            tokens_0[33] = 'satisfies';
            tokens_0[34] = '<function>(';
                tokens_0[35] = '<axis>';
                tokens_0[36] = 'if(';
                    tokens_0[37] = '<<';
                    tokens_0[38] = '>>';
                    tokens_0[39] = '::';
                    tokens_0[40] = ':*';
                    tokens_0[44] = '#';
                    tokens_0[45] = 'instance of';
                    tokens_0[46] = 'cast as';
                    tokens_0[47] = 'treat as';
                    tokens_0[50] = 'eq';
                    tokens_0[51] = 'ne';
                    tokens_0[52] = 'gt';
                    tokens_0[54] = 'ge';
                    tokens_0[53] = 'lt';
                    tokens_0[55] = 'le';
                    tokens_0[56] = 'idiv';
                    tokens_0[57] = 'castable as';
                    tokens_0[71] = 'as';
                    tokens_0[201] = '<name>';
                    tokens_0[202] = '<string-literal>';
                    tokens_0[203] = ']';
                    tokens_0[204] = ')';
                    tokens_0[205] = '.';
                    tokens_0[206] = '..';
                    tokens_0[207] = '*';
                    tokens_0[208] = '<prefix:*>';
                    tokens_0[209] = '<numeric-literal>';
                    tokens_0[69] = '<node-type>()';
                    tokens_0[211] = 'for';
                    tokens_0[70] = '<*:local-name>';
                    tokens_0[215] = '}';
                    tokens_0[299] = '-';
                    doubleKeywords = new HashMap_0(30);
                    $putStringValue(doubleKeywords, 'instance of', new Integer(45));
                    tokens_0[45] = 'instance of';
                    $putStringValue(doubleKeywords, 'cast as', new Integer(46));
                    tokens_0[46] = 'cast as';
                    $putStringValue(doubleKeywords, 'treat as', new Integer(47));
                    tokens_0[47] = 'treat as';
                    $putStringValue(doubleKeywords, 'castable as', new Integer(57));
                    tokens_0[57] = 'castable as';
}

function inverse(operator){
    $clinit_Token();
    switch (operator) {
        case 12:
            return 11;
        case 14:
            return 13;
        case 11:
            return 12;
        case 13:
            return 14;
        case 53:
            return 52;
        case 55:
            return 54;
        case 52:
            return 53;
        case 54:
            return 55;
        default:return operator;
    }
}

function isOrderedOperator(operator){
    $clinit_Token();
    return operator != 50 && operator != 51;
}

var LAST_OPERATOR = 150, doubleKeywords, tokens_0;
function $lookAhead(this$static){
    var ahead, allowDot, allowE, allowSign, c, n, nc, nestingDepth;
    this$static.precedingToken = this$static.nextToken;
    this$static.nextTokenValue = null;
    this$static.nextTokenStartOffset = this$static.inputOffset;
    for (;;) {
        if (this$static.inputOffset >= this$static.inputLength) {
            this$static.nextToken = 0;
            return;
        }
        c = $charAt_1(this$static.input_0, this$static.inputOffset++);
        switch (c) {
            case 47:
                if (this$static.inputOffset < this$static.inputLength && $charAt_1(this$static.input_0, this$static.inputOffset) == 47) {
                    ++this$static.inputOffset;
                    this$static.nextToken = 8;
                    return;
                }

                this$static.nextToken = 2;
                return;
            case 58:
                if (this$static.inputOffset < this$static.inputLength) {
                    if ($charAt_1(this$static.input_0, this$static.inputOffset) == 58) {
                        ++this$static.inputOffset;
                        this$static.nextToken = 39;
                        return;
                    }
                }

                throw new XPathException_0('Unexpected colon at start of token');
            case 64:
                this$static.nextToken = 3;
                return;
            case 63:
                this$static.nextToken = 213;
                return;
            case 91:
                this$static.nextToken = 4;
                return;
            case 93:
                this$static.nextToken = 203;
                return;
            case 125:
                this$static.nextToken = 215;
                return;
            case 40:
                if (this$static.inputOffset < this$static.inputLength && $charAt_1(this$static.input_0, this$static.inputOffset) == 58) {
                    ++this$static.inputOffset;
                    nestingDepth = 1;
                    while (nestingDepth > 0 && this$static.inputOffset < this$static.inputLength - 1) {
                        if ($charAt_1(this$static.input_0, this$static.inputOffset) == 58 && $charAt_1(this$static.input_0, this$static.inputOffset + 1) == 41) {
                            --nestingDepth;
                            ++this$static.inputOffset;
                        }
                        else if ($charAt_1(this$static.input_0, this$static.inputOffset) == 40 && $charAt_1(this$static.input_0, this$static.inputOffset + 1) == 58) {
                            ++nestingDepth;
                            ++this$static.inputOffset;
                        }
                        ++this$static.inputOffset;
                    }
                    if (nestingDepth > 0) {
                        throw new XPathException_0('Unclosed XPath comment');
                    }
                    $lookAhead(this$static);
                }
                else {
                    this$static.nextToken = 5;
                }

                return;
            case 41:
                this$static.nextToken = 204;
                return;
            case 43:
                this$static.nextToken = 15;
                return;
            case 45:
                this$static.nextToken = 16;
                return;
            case 61:
                this$static.nextToken = 6;
                return;
            case 33:
                if (this$static.inputOffset < this$static.inputLength && $charAt_1(this$static.input_0, this$static.inputOffset) == 61) {
                    ++this$static.inputOffset;
                    this$static.nextToken = 22;
                    return;
                }

                throw new XPathException_0("'!' without '='");
            case 42:
                if (this$static.inputOffset < this$static.inputLength && $charAt_1(this$static.input_0, this$static.inputOffset) == 58) {
                    ++this$static.inputOffset;
                    this$static.nextToken = 70;
                    if (this$static.inputOffset < this$static.inputLength) {
                        ahead = $charAt_1(this$static.input_0, this$static.inputOffset);
                        if ($indexOf_3(' \r\t\n(', fromCodePoint(ahead)) >= 0) {
                            throw new XPathException_0("Whitespace and comments are not allowed after '*:'");
                        }
                    }
                    return;
                }

                this$static.nextToken = 207;
                return;
            case 44:
                this$static.nextToken = 7;
                return;
            case 36:
                this$static.nextToken = 21;
                return;
            case 124:
                this$static.nextToken = 1;
                return;
            case 35:
                this$static.nextToken = 44;
                return;
            case 60:
                if (this$static.inputOffset < this$static.inputLength && $charAt_1(this$static.input_0, this$static.inputOffset) == 61) {
                    ++this$static.inputOffset;
                    this$static.nextToken = 14;
                    return;
                }

                if (this$static.inputOffset < this$static.inputLength && $charAt_1(this$static.input_0, this$static.inputOffset) == 60) {
                    ++this$static.inputOffset;
                    this$static.nextToken = 37;
                    return;
                }

                this$static.nextToken = 12;
                return;
            case 62:
                if (this$static.inputOffset < this$static.inputLength && $charAt_1(this$static.input_0, this$static.inputOffset) == 61) {
                    ++this$static.inputOffset;
                    this$static.nextToken = 13;
                    return;
                }

                if (this$static.inputOffset < this$static.inputLength && $charAt_1(this$static.input_0, this$static.inputOffset) == 62) {
                    ++this$static.inputOffset;
                    this$static.nextToken = 38;
                    return;
                }

                this$static.nextToken = 11;
                return;
            case 46:
                if (this$static.inputOffset < this$static.inputLength && $charAt_1(this$static.input_0, this$static.inputOffset) == 46) {
                    ++this$static.inputOffset;
                    this$static.nextToken = 206;
                    return;
                }

                if (this$static.inputOffset == this$static.inputLength || $charAt_1(this$static.input_0, this$static.inputOffset) < 48 || $charAt_1(this$static.input_0, this$static.inputOffset) > 57) {
                    this$static.nextToken = 205;
                    return;
                }

            case 48:
        case 49:
    case 50:
case 51:
      case 52:
  case 53:
      case 54:
  case 55:
      case 56:
  case 57:
      allowE = true;
      allowSign = false;
      allowDot = true;
      numloop: while (true) {
          switch (c) {
              case 48:
          case 49:
      case 50:
  case 51:
            case 52:
        case 53:
    case 54:
case 55:
            case 56:
        case 57:
            allowSign = false;
            break;
        case 46:
            if (allowDot) {
                allowDot = false;
                allowSign = false;
            }
            else {
                --this$static.inputOffset;
                break numloop;
            }

            break;
        case 69:
    case 101:
        if (allowE) {
            allowSign = true;
            allowE = false;
        }
        else {
            --this$static.inputOffset;
            break numloop;
        }

        break;
    case 43:
case 45:
    if (allowSign) {
        allowSign = false;
    }
    else {
        --this$static.inputOffset;
        break numloop;
    }

    break;
default:if (97 <= c && c <= 122 || c > 127) {
    throw new XPathException_0('Separator needed after numeric literal');
}

--this$static.inputOffset;
break numloop;
          }
          if (this$static.inputOffset >= this$static.inputLength)
              break;
          c = $charAt_1(this$static.input_0, this$static.inputOffset++);
      }

      this$static.nextTokenValue = $substring_1(this$static.input_0, this$static.nextTokenStartOffset, this$static.inputOffset);
      this$static.nextToken = 209;
      return;
  case 34:
      case 39:
          this$static.nextTokenValue = '';
          while (true) {
              this$static.inputOffset = $indexOf_2(this$static.input_0, c, this$static.inputOffset);
              if (this$static.inputOffset < 0) {
                  this$static.inputOffset = this$static.nextTokenStartOffset + 1;
                  throw new XPathException_0('Unmatched quote in expression');
              }
              this$static.nextTokenValue += $substring_1(this$static.input_0, this$static.nextTokenStartOffset + 1, this$static.inputOffset++);
              if (this$static.inputOffset < this$static.inputLength) {
                  n = $charAt_1(this$static.input_0, this$static.inputOffset);
                  if (n == c) {
                      this$static.nextTokenValue += charToString(c);
                      this$static.nextTokenStartOffset = this$static.inputOffset;
                      ++this$static.inputOffset;
                  }
                  else {
                      break;
                  }
              }
              else {
                  break;
              }
          }

          this$static.nextToken = 202;
          return;
      case 10:
  case 32:
      case 9:
  case 13:
      this$static.nextTokenStartOffset = this$static.inputOffset;
      break;
  default:if (c < 128 && !(null != String.fromCharCode(c).match(/[A-Z]/i))) {
      throw new XPathException_0("Invalid character '" + charToString(c) + "' in expression");
  }

      case 95:
          loop: for (; this$static.inputOffset < this$static.inputLength; this$static.inputOffset++) {
              c = $charAt_1(this$static.input_0, this$static.inputOffset);
              switch (c) {
                  case 58:
                      if (this$static.inputOffset + 1 < this$static.inputLength) {
                          nc = $charAt_1(this$static.input_0, this$static.inputOffset + 1);
                          if (nc == 58) {
                              this$static.nextTokenValue = $substring_1(this$static.input_0, this$static.nextTokenStartOffset, this$static.inputOffset);
                              this$static.nextToken = 35;
                              this$static.inputOffset += 2;
                              return;
                          }
                          else if (nc == 42) {
                              this$static.nextTokenValue = $substring_1(this$static.input_0, this$static.nextTokenStartOffset, this$static.inputOffset);
                              this$static.nextToken = 208;
                              this$static.inputOffset += 2;
                              return;
                          }
                          else if (nc == 61) {
                              this$static.nextTokenValue = $substring_1(this$static.input_0, this$static.nextTokenStartOffset, this$static.inputOffset);
                              this$static.nextToken = 201;
                              return;
                          }
                      }

                      break;
                  case 46:
              case 45:
          case 95:
              break;
          default:if (c < 128 && !isLetterOrDigit(c))
              break loop;
              }
          }

          this$static.nextTokenValue = $substring_1(this$static.input_0, this$static.nextTokenStartOffset, this$static.inputOffset);
          this$static.nextToken = 201;
          return;
        }
    }
}

function $next_1(this$static){
    var composite, oldPrecedingToken, op, optype, val;
    this$static.precedingToken = this$static.currentToken;
    this$static.currentToken = this$static.nextToken;
    this$static.currentTokenValue = this$static.nextTokenValue;
    this$static.currentTokenValue == null && (this$static.currentTokenValue = '');
    this$static.currentTokenStartOffset = this$static.nextTokenStartOffset;
    switch (this$static.currentToken) {
        case 201:
            optype = getBinaryOp(this$static.currentTokenValue);
            optype != -1 && this$static.precedingToken > ($clinit_Token() , LAST_OPERATOR) && (this$static.currentToken = optype);
            break;
        case 207:
            this$static.precedingToken <= ($clinit_Token() , LAST_OPERATOR) || (this$static.currentToken = 17);
    }
    if (this$static.currentToken == 215) {
        return;
    }
    oldPrecedingToken = this$static.precedingToken;
    $lookAhead(this$static);
    if (this$static.currentToken == 201) {
        if (oldPrecedingToken == 21) {
            return;
        }
        switch (this$static.nextToken) {
            case 5:
                op = getBinaryOp(this$static.currentTokenValue);
                if (op == -1 || oldPrecedingToken <= ($clinit_Token() , LAST_OPERATOR)) {
                    this$static.currentToken = getFunctionType(this$static.currentTokenValue);
                    $lookAhead(this$static);
                }
                else {
                    this$static.currentToken = op;
                }

                break;
            case 39:
                $lookAhead(this$static);
                this$static.currentToken = 35;
                break;
            case 40:
                $lookAhead(this$static);
                this$static.currentToken = 208;
                break;
            case 21:
                $equals_5(this$static.currentTokenValue, 'for')?(this$static.currentToken = 211):$equals_5(this$static.currentTokenValue, 'some')?(this$static.currentToken = 31):$equals_5(this$static.currentTokenValue, 'every') && (this$static.currentToken = 32);
                break;
            case 201:
                composite = this$static.currentTokenValue + ' ' + this$static.nextTokenValue;
                val = dynamicCast($getStringValue_1(($clinit_Token() , doubleKeywords), composite), 83);
                if (!val) {
                    break;
                }
                else {
                    this$static.currentToken = val.value_0;
                    this$static.currentTokenValue = composite;
                    $lookAhead(this$static);
                    return;
                }

        }
    }
}

function $recentText(this$static){
    this$static.inputOffset > this$static.inputLength && (this$static.inputOffset = this$static.inputLength);
    return this$static.inputOffset < 34?$substring_1(this$static.input_0, 0, this$static.inputOffset):toString__Ljava_lang_String___devirtual$_0(collapseWhitespace('...' + $substring_1(this$static.input_0, this$static.inputOffset - 30, this$static.inputOffset)));
}

function $tokenize(this$static, input_0, start_0){
    this$static.nextToken = 0;
    this$static.nextTokenValue = null;
    this$static.nextTokenStartOffset = 0;
    this$static.inputOffset = start_0;
    this$static.input_0 = input_0;
    this$static.inputLength = input_0.length;
    $lookAhead(this$static);
    $next_1(this$static);
}

function Tokenizer(){
}

function getBinaryOp(s){
    switch (s.length) {
        case 2:
            if ($equals_5(s, 'or'))
                return 9;
            if ($equals_5(s, 'is'))
                return 20;
            if ($equals_5(s, 'to'))
                return 29;
            if ($equals_5(s, 'in'))
                return 30;
            if ($equals_5(s, 'eq'))
                return 50;
            if ($equals_5(s, 'ne'))
                return 51;
            if ($equals_5(s, 'gt'))
                return 52;
            if ($equals_5(s, 'ge'))
                return 54;
            if ($equals_5(s, 'lt'))
                return 53;
            if ($equals_5(s, 'le'))
                return 55;
            if ($equals_5(s, 'as'))
                return 71;
            break;
        case 3:
            if ($equals_5(s, 'and'))
                return 10;
            if ($equals_5(s, 'div'))
                return 18;
            if ($equals_5(s, 'mod'))
                return 19;
            break;
        case 4:
            if ($equals_5(s, 'idiv'))
                return 56;
            if ($equals_5(s, 'then'))
                return 26;
            if ($equals_5(s, 'else'))
                return 27;
            break;
        case 5:
            if ($equals_5(s, 'union'))
                return 1;
            break;
        case 6:
            if ($equals_5(s, 'except'))
                return 24;
            if ($equals_5(s, 'return'))
                return 25;
            break;
        case 9:
            if ($equals_5(s, 'intersect'))
                return 23;
            if ($equals_5(s, 'satisfies'))
                return 33;
    }
    return -1;
}

function getFunctionType(s){
    switch (s.length) {
        case 2:
            if ($equals_5(s, 'if'))
                return 36;
            break;
        case 4:
            if ($equals_5(s, 'node'))
                return 69;
            if ($equals_5(s, 'item'))
                return 69;
            if ($equals_5(s, 'text'))
                return 69;
            break;
        case 7:
            if ($equals_5(s, 'element'))
                return 69;
            if ($equals_5(s, 'comment'))
                return 69;
            break;
        case 9:
            if ($equals_5(s, 'attribute'))
                return 69;
            break;
        default:if ($equals_5(s, 'document-node'))
            return 69;
        if ($equals_5(s, 'empty-sequence'))
            return 69;
        if ($equals_5(s, 'schema-element'))
            return 69;
        if ($equals_5(s, 'schema-attribute'))
            return 69;
        if ($equals_5(s, 'processing-instruction'))
            return 69;
    }
    return 34;
}

defineClass(455, 1, {}, Tokenizer);
_.currentToken = 0;
_.currentTokenStartOffset = 0;
_.currentTokenValue = null;
_.inputLength = 0;
_.inputOffset = 0;
_.nextToken = 0;
_.nextTokenStartOffset = 0;
_.nextTokenValue = null;
_.precedingToken = -1;
var Lclient_net_sf_saxon_ce_expr_Tokenizer_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'Tokenizer', 455, Ljava_lang_Object_2_classLit);
function $process(this$static, context){
    var err, tc;
    try {
        tc = this$static.processLeavingTail(context);
        while (tc) {
            tc = tc.processLeavingTail_0();
        }
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $maybeSetLocation(err, $getSourceLocator(this$static));
            throw err;
        }
        else 
            throw unwrap($e0);
    }
}

function $pushToSequence(this$static, len, context){
    var c2, controller, pipe, seq;
    controller = context.getController();
    c2 = context.newMinorContext();
    seq = new SequenceOutputter(len);
    pipe = $makePipelineConfiguration_0(controller);
    seq.pipelineConfiguration = pipe;
    c2.setTemporaryReceiver(seq);
    this$static.process(c2);
    seq.previousAtomic = false;
    !!seq.outputter && $close(seq.outputter);
    return seq;
}

function Instruction(){
    Expression.call(this);
}

function assembleParams(context, actualParams){
    var actualParam, actualParam$index, actualParam$max, params;
    if (actualParams == null || actualParams.length == 0) {
        return null;
    }
    params = new ParameterSet_0(actualParams.length);
    for (actualParam$index = 0 , actualParam$max = actualParams.length; actualParam$index < actualParam$max; ++actualParam$index) {
        actualParam = actualParams[actualParam$index];
        $put(params, actualParam.parameterId, $getSelectValue(actualParam, context), actualParam.typeChecked);
    }
    return params;
}

function assembleTunnelParams(context, actualParams){
    var actualParam, actualParam$index, actualParam$max, existingParams, newParams;
    existingParams = context.getTunnelParameters();
    if (!existingParams) {
        return assembleParams(context, actualParams);
    }
    newParams = new ParameterSet_1(existingParams, actualParams == null?0:actualParams.length);
    if (actualParams == null || actualParams.length == 0) {
        return newParams;
    }
    for (actualParam$index = 0 , actualParam$max = actualParams.length; actualParam$index < actualParam$max; ++actualParam$index) {
        actualParam = actualParams[actualParam$index];
        $put(newParams, actualParam.parameterId, $getSelectValue(actualParam, context), false);
    }
    return newParams;
}

function dynamicError(loc, error){
    if (instanceOf(error, 413)) {
        return error;
    }
    !error.locator && (error.locator = loc);
    return error;
}

defineClass(39, 6, $intern_42);
_.computeCardinality = function computeCardinality_26(){
    return $intern_12;
}
;
_.computeSpecialProperties = function computeSpecialProperties_17(){
    return this.createsNewNodes()?0:$intern_22;
}
;
_.createsNewNodes = function createsNewNodes(){
    return false;
}
;
_.evaluateItem = function evaluateItem_25(context){
    var m, result, seq;
    m = this.getImplementationMethod();
    if ((m & 1) != 0) {
        throw new AssertionError('evaluateItem() is not implemented in the subclass ' + this.___clazz$);
    }
    else if ((m & 2) != 0) {
        return this.iterate_0(context).next_0();
    }
    else {
        seq = $pushToSequence(this, 1, context);
        result = seq.list.array.length == 0?null:dynamicCast($get_1(seq.list, 0), 15);
        seq.list = new ArrayList_0(max_1(seq.list.array.length + 10, 50));
        return result;
    }
}
;
_.getImplementationMethod = function getImplementationMethod_7(){
    return 4;
}
;
_.getItemType = function getItemType_32(){
    return $clinit_Type() , ITEM_TYPE;
}
;
_.iterate_0 = function iterate_22(context){
    var m, seq;
    m = this.getImplementationMethod();
    if ((m & 1) != 0) {
        return $iterate(this, context);
    }
    else if ((m & 2) != 0) {
        throw new AssertionError('iterate');
    }
    else {
        seq = $pushToSequence(this, 20, context);
        return seq.list.array.length == 0?($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1):new ListIterator(seq.list);
    }
}
;
_.process = function process_5(context){
    $process(this, context);
}
;
_.promote = function promote_12(offer, parent_0){
    var exp_0;
    exp_0 = $accept(offer, this);
    if (exp_0) {
        return exp_0;
    }
    else {
        this.promoteInst(offer);
        return this;
    }
}
;
_.promoteInst = function promoteInst(offer){
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'Instruction', 39, Lclient_net_sf_saxon_ce_expr_Expression_2_classLit);
function $setConstructType(this$static, type_0){
    this$static.constructType = type_0;
}

function $setObjectName(this$static, qName){
    this$static.objectName = qName;
}

function $setProperty(this$static, name_0, value_0){
    $putStringValue(this$static.properties, name_0, value_0);
}

function TraceExpression(child){
    Instruction.call(this);
    this.properties = new HashMap_0(10);
    this.child = child;
    $adoptChildExpression(this, child);
    $putStringValue(this.properties, 'expression', child);
}

defineClass(162, 39, {6:1, 162:1, 39:1, 49:1, 359:1}, TraceExpression);
_.computeDependencies = function computeDependencies_2(){
    return this.child.computeDependencies();
}
;
_.createsNewNodes = function createsNewNodes_0(){
    return ($getSpecialProperties(this.child) & $intern_22) == 0;
}
;
_.evaluateItem = function evaluateItem_26(context){
    var result;
    if (loggingIsEnabled() && isTraceEnabled) {
        $enter(traceListener, this);
        result = this.child.evaluateItem(context);
        $leave(traceListener, this);
    }
    else {
        result = this.child.evaluateItem(context);
    }
    return result;
}
;
_.getCardinality = function getCardinality_0(){
    return this.child.getCardinality();
}
;
_.getDependencies = function getDependencies_1(){
    return this.child.getDependencies();
}
;
_.getImplementationMethod = function getImplementationMethod_8(){
    return this.child.getImplementationMethod();
}
;
_.getItemType = function getItemType_33(){
    return this.child.getItemType();
}
;
_.iterate_0 = function iterate_23(context){
    var result;
    if (loggingIsEnabled() && isTraceEnabled) {
        $enter(traceListener, this);
        result = this.child.iterate_0(context);
        $leave(traceListener, this);
    }
    else {
        result = this.child.iterate_0(context);
    }
    return result;
}
;
_.iterateSubExpressions = function iterateSubExpressions_6(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.child]));
}
;
_.optimize = function optimize_25(visitor, contextItemType){
    this.child = $optimize_1(visitor, this.child, contextItemType);
    $adoptChildExpression(this, this.child);
    return this;
}
;
_.processLeavingTail = function processLeavingTail_0(context){
    var listener;
    context.getController();
    if (loggingIsEnabled() && isTraceEnabled) {
        listener = traceListener;
        $enter(listener, this);
        this.child.process(context);
        $leave(listener, this);
    }
    else {
        this.child.process(context);
    }
    return null;
}
;
_.promote = function promote_13(offer, parent_0){
    var newChild;
    newChild = this.child.promote(offer, parent_0);
    if (newChild != this.child) {
        this.child = newChild;
        $adoptChildExpression(this, this.child);
        return this;
    }
    return this;
}
;
_.simplify = function simplify_16(visitor){
    this.child = $simplify(visitor, this.child);
    if (instanceOf(this.child, 162)) {
        return this.child;
    }
    return this;
}
;
_.typeCheck = function typeCheck_32(visitor, contextItemType){
    this.child = $typeCheck_1(visitor, this.child, contextItemType);
    $adoptChildExpression(this, this.child);
    return this;
}
;
var Lclient_net_sf_saxon_ce_expr_TraceExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'TraceExpression', 162, Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit);
function ebvError_0(exp_0){
    var err, t, th;
    if ((exp_0.getCardinality() & $intern_17) != 0) {
        return null;
    }
    t = exp_0.getItemType();
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    if ($relationship(th, t, ($clinit_Type() , NODE_TYPE)) == 4 && $relationship(th, t, ($clinit_AtomicType() , BOOLEAN)) == 4 && $relationship(th, t, ($clinit_AtomicType() , STRING)) == 4 && $relationship(th, t, ($clinit_AtomicType() , ANY_URI)) == 4 && $relationship(th, t, ($clinit_AtomicType() , UNTYPED_ATOMIC)) == 4 && $relationship(th, t, ($clinit_AtomicType() , NUMERIC)) == 4) {
        err = new XPathException_2('Effective boolean value is defined only for sequences containing booleans, strings, numbers, URIs, or nodes', 'FORG0006');
        err.isTypeError = true;
        return err;
    }
    return null;
}

function staticTypeCheck_1(supplied, req, backwardsCompatible, role){
    var allowsMany, cardOK, cexp, err, exp_0, itemTypeOK, relation, relation0, reqCard, reqItemType, suppliedCard, suppliedItemType, th;
    if (supplied.implementsStaticTypeCheck()) {
        return supplied.staticTypeCheck(req, backwardsCompatible, role);
    }
    exp_0 = supplied;
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    reqItemType = req.primaryType;
    reqCard = req.cardinality;
    allowsMany = (reqCard & $intern_14) != 0;
    suppliedItemType = null;
    suppliedCard = -1;
    cardOK = reqCard == $intern_12;
    if (!cardOK) {
        suppliedCard = supplied.getCardinality();
        cardOK = (reqCard | suppliedCard) == reqCard;
    }
    itemTypeOK = instanceOf(reqItemType, 159);
    if (!itemTypeOK) {
        suppliedItemType = supplied.getItemType();
        if (instanceOf(suppliedItemType, 123)) {
            itemTypeOK = true;
        }
        else {
            if (!reqItemType || !suppliedItemType) {
                throw new NullPointerException;
            }
            relation0 = $relationship(th, reqItemType, suppliedItemType);
            itemTypeOK = relation0 == 0 || relation0 == 1;
        }
    }
    if (backwardsCompatible && !allowsMany) {
        if ((suppliedCard & $intern_14) != 0) {
            cexp = new FirstItemExpression(supplied);
            $adoptChildExpression(cexp, supplied);
            exp_0 = cexp;
            suppliedCard = $intern_20;
            cardOK = (reqCard | $intern_20) == reqCard;
        }
        if (!itemTypeOK) {
            if (reqItemType.equals$(($clinit_AtomicType() , STRING))) {
                exp_0 = makeSystemFunction('string', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [exp_0]));
                suppliedItemType = STRING;
                suppliedCard = $intern_21;
                cardOK = (reqCard | $intern_21) == reqCard;
                itemTypeOK = true;
            }
            if (reqItemType.equals$(NUMERIC) || reqItemType.equals$(DOUBLE)) {
                exp_0 = makeSystemFunction('number', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [exp_0]));
                suppliedItemType = DOUBLE;
                suppliedCard = $intern_21;
                cardOK = (reqCard | $intern_21) == reqCard;
                itemTypeOK = true;
            }
        }
    }
    if (!itemTypeOK) {
        if (instanceOf(reqItemType, 43)) {
            if (!instanceOf(suppliedItemType, 43) && suppliedCard != $intern_17) {
                exp_0 = new Atomizer(exp_0);
                suppliedItemType = exp_0.getItemType();
                suppliedCard = exp_0.getCardinality();
                cardOK = (reqCard | suppliedCard) == reqCard;
            }
            if (suppliedItemType.equals$(($clinit_AtomicType() , UNTYPED_ATOMIC)) && !(reqItemType.equals$(UNTYPED_ATOMIC) || reqItemType.equals$(ANY_ATOMIC))) {
                exp_0 = new UntypedAtomicConverter(exp_0, dynamicCast(reqItemType, 43), true, role);
                itemTypeOK = true;
                suppliedItemType = reqItemType;
            }
            suppliedItemType.equals$(ANY_ATOMIC) && !(reqItemType.equals$(UNTYPED_ATOMIC) || reqItemType.equals$(ANY_ATOMIC)) && (exp_0.staticProperties == -1 && (exp_0.staticProperties = exp_0.computeDependencies() | exp_0.computeCardinality() | exp_0.computeSpecialProperties()) , (exp_0.staticProperties & $intern_11 & $intern_23) == 0) && (exp_0 = new UntypedAtomicConverter(exp_0, dynamicCast(reqItemType, 43), false, role));
            if (reqItemType == DOUBLE && $relationship(th, suppliedItemType, NUMERIC) != 4) {
                exp_0 = new PromoteToDouble(exp_0);
                suppliedItemType = DOUBLE;
                suppliedCard = -1;
            }
            else if (reqItemType == FLOAT && $relationship(th, suppliedItemType, NUMERIC) != 4 && !$isSubType(th, suppliedItemType, DOUBLE)) {
                exp_0 = new PromoteToFloat(exp_0);
                suppliedItemType = reqItemType == DOUBLE?DOUBLE:FLOAT;
                suppliedCard = -1;
            }
            if (reqItemType == STRING && $isSubType(th, suppliedItemType, ANY_URI)) {
                suppliedItemType = STRING;
                itemTypeOK = true;
            }
        }
    }
    if (itemTypeOK && cardOK) {
        return exp_0;
    }
    if (suppliedCard == -1) {
        suppliedCard = exp_0.getCardinality();
        cardOK || (cardOK = (reqCard | suppliedCard) == reqCard);
    }
    if (cardOK && suppliedCard == $intern_17) {
        return exp_0;
    }
    if (suppliedCard == $intern_17 && (reqCard & $intern_17) == 0) {
        err = new XPathException_1('An empty sequence is not allowed as the ' + $getMessage(role), $getSourceLocator(supplied));
        $setErrorCode(err, role.errorCode);
        err.isTypeError = true;
        throw err;
    }
    relation = itemTypeOK?2:$relationship(th, suppliedItemType, reqItemType);
    if (relation == 4) {
        if ((suppliedCard & $intern_17) != 0 && (reqCard & $intern_17) != 0)
            ;
        else {
            err = new XPathException_1('Required item type of ' + $getMessage(role) + ' is ' + reqItemType.toString$() + '; supplied value has item type ' + suppliedItemType.toString$(), $getSourceLocator(supplied));
            $setErrorCode(err, role.errorCode);
            err.isTypeError = true;
            throw err;
        }
    }
    if (!(relation == 0 || relation == 2)) {
        if (instanceOf(exp_0, 9)) {
            err = new XPathException_1('Required item type of ' + $getMessage(role) + ' is ' + reqItemType.toString$() + '; supplied value has item type ' + suppliedItemType.toString$(), $getSourceLocator(supplied));
            $setErrorCode(err, role.errorCode);
            err.isTypeError = true;
            throw err;
        }
        cexp = new ItemChecker(exp_0, reqItemType, role);
        copyLocationInfo(exp_0, cexp);
        exp_0 = cexp;
    }
    if (!cardOK) {
        if (instanceOf(exp_0, 9)) {
            err = new XPathException_1('Required cardinality of ' + $getMessage(role) + ' is ' + toString_68(reqCard) + '; supplied value has cardinality ' + toString_68(suppliedCard), $getSourceLocator(supplied));
            err.isTypeError = true;
            $setErrorCode(err, role.errorCode);
            throw err;
        }
        else {
            cexp = makeCardinalityChecker(exp_0, reqCard, role);
            copyLocationInfo(exp_0, cexp);
            exp_0 = cexp;
        }
    }
    return exp_0;
}

function testConformance(iter, requiredType){
    var count, item_0, reqCardinality, reqItemType;
    reqItemType = requiredType.primaryType;
    count = 0;
    while (true) {
        item_0 = iter.next_0();
        if (!item_0) {
            break;
        }
        ++count;
        if (!reqItemType.matchesItem(item_0)) {
            return 'Required type is ' + reqItemType + '; supplied value includes an item of type ' + getItemType_91(item_0);
        }
    }
    reqCardinality = requiredType.cardinality;
    if (count == 0 && (reqCardinality & $intern_17) == 0) {
        return 'Required type does not allow empty sequence, but supplied value is empty';
    }
    if (count > 1 && (reqCardinality & $intern_14) == 0) {
        return 'Required type requires a singleton sequence; supplied value contains ' + count + ' items';
    }
    if (count > 0 && reqCardinality == $intern_17) {
        return 'Required type requires an empty sequence, but supplied value is non-empty';
    }
    return null;
}

function $getAnother(this$static){
    var action, e, newAction, newBase;
    try {
        newBase = dynamicCast(this$static.base, 165).getAnother_0();
        action = this$static.action;
        newAction = instanceOf(action, 186)?dynamicCast(dynamicCast(action, 186).getAnother_1(newBase), 270):action;
        return new UnfailingItemMappingIterator(newBase, newAction);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            throw new AssertionError(e);
        }
        else 
            throw unwrap($e0);
    }
}

function UnfailingItemMappingIterator(base, action){
    ItemMappingIterator.call(this, base, action);
}

defineClass(373, 85, {105:1, 64:1, 165:1}, UnfailingItemMappingIterator);
_.getAnother = function getAnother_8(){
    return $getAnother(this);
}
;
_.getAnother_0 = function getAnother_9(){
    return $getAnother(this);
}
;
_.next_0 = function next_6(){
    var err;
    try {
        return $next_0(this);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            throw new AssertionError(err);
        }
        else 
            throw unwrap($e0);
    }
}
;
var Lclient_net_sf_saxon_ce_expr_UnfailingItemMappingIterator_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'UnfailingItemMappingIterator', 373, Lclient_net_sf_saxon_ce_expr_ItemMappingIterator_2_classLit);
function $convertItem(this$static, item_0){
    var err, msg, val;
    val = $convert_5(item_0, this$static.requiredItemType);
    if (instanceOf(val, 29)) {
        msg = $composeRequiredMessage(this$static.role, this$static.requiredItemType);
        msg += '. ' + dynamicCast(val, 29).message_0;
        err = new XPathException_0(msg);
        $setErrorCode(err, this$static.role.errorCode);
        $setLocator(err, $getSourceLocator(this$static));
        throw err;
    }
    return val;
}

function $iterate_1(this$static, context){
    var base;
    base = this$static.operand.iterate_0(context);
    return new ItemMappingIterator_0(base, this$static, true);
}

function UntypedAtomicConverter(sequence, requiredItemType, allConverted, role){
    UnaryExpression.call(this, sequence);
    this.singleton = false;
    this.requiredItemType = requiredItemType;
    this.allConverted = allConverted;
    this.role = role;
    copyLocationInfo(sequence, this);
}

defineClass(252, 54, $intern_15, UntypedAtomicConverter);
_.computeCardinality = function computeCardinality_27(){
    return this.singleton?$intern_20:this.operand.getCardinality();
}
;
_.computeSpecialProperties = function computeSpecialProperties_18(){
    var p_0;
    p_0 = $getSpecialProperties(this.operand);
    return p_0 | $intern_22 | $intern_23;
}
;
_.evaluateItem = function evaluateItem_27(context){
    var item_0;
    item_0 = this.operand.evaluateItem(context);
    return !item_0?null:instanceOf(item_0, 56)?$convertItem(this, dynamicCast(item_0, 56)).asAtomic():item_0;
}
;
_.getItemType = function getItemType_34(){
    var it;
    it = this.operand.getItemType();
    this.singleton = instanceOf(it, 43) && (this.operand.getCardinality() & $intern_14) == 0;
    return this.allConverted?this.requiredItemType:getCommonSuperType(this.requiredItemType, this.operand.getItemType());
}
;
_.iterate_0 = function iterate_24(context){
    return $iterate_1(this, context);
}
;
_.mapItem = function mapItem_9(item_0){
    var val;
    if (instanceOf(item_0, 56)) {
        val = $convertItem(this, dynamicCast(item_0, 56));
        return dynamicCast(val, 13);
    }
    else {
        return item_0;
    }
}
;
_.optimize = function optimize_26(visitor, contextItemType){
    var e, e2, et, it, th;
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    e2 = $optimize(this, visitor, contextItemType);
    if (e2 != this) {
        return e2;
    }
    if (instanceOf(this.operand, 104)) {
        it = dynamicCast(this.operand, 104).targetType;
        if ($isSubType(th, it, ($clinit_AtomicType() , UNTYPED_ATOMIC))) {
            e = dynamicCast(this.operand, 104).operand;
            et = e.getItemType();
            if (instanceOf(et, 43) && $isSubType(th, et, this.requiredItemType)) {
                return e;
            }
        }
    }
    return this;
}
;
_.typeCheck = function typeCheck_33(visitor, contextItemType){
    var fn, map_0, nodeExp, type_0;
    this.allConverted && this.requiredItemType == ($clinit_AtomicType() , QNAME) && $typeError(this, null, 'Cannot convert untypedAtomic values to QNames', 'XPTY0004');
    this.operand = $typeCheck_1(visitor, this.operand, contextItemType);
    if (instanceOf(this.operand, 9)) {
        return makeLiteral(makeSequenceExtent($iterate_1(this, new EarlyEvaluationContext(visitor.configuration))));
    }
    type_0 = this.operand.getItemType();
    if (instanceOf(type_0, 67)) {
        return this;
    }
    this.singleton = instanceOf(type_0, 43) && (this.operand.getCardinality() & $intern_14) == 0;
    if (instanceOf(this.operand, 140) && type_0.equals$(($clinit_AtomicType() , UNTYPED_ATOMIC)) && this.requiredItemType == ($clinit_AtomicType() , STRING) && instanceOf(dynamicCast(this.operand, 140).operand.getItemType(), 67)) {
        nodeExp = dynamicCast(this.operand, 140).operand;
        if (nodeExp.getCardinality() != $intern_21) {
            fn = makeSystemFunction('string', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [new ContextItemExpression]));
            $setContainer(fn, this.container);
            map_0 = new ForEach(nodeExp, fn, false);
            $setContainer(map_0, this.container);
            return map_0;
        }
        else {
            fn = makeSystemFunction('string', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [nodeExp]));
            $setContainer(fn, this.container);
            return fn;
        }
    }
    if (type_0.equals$(($clinit_AtomicType() , ANY_ATOMIC)) || instanceOf(type_0, 159) || type_0.equals$(UNTYPED_ATOMIC)) {
        return this;
    }
    return this.operand;
}
;
_.allConverted = false;
_.singleton = false;
var Lclient_net_sf_saxon_ce_expr_UntypedAtomicConverter_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'UntypedAtomicConverter', 252, Lclient_net_sf_saxon_ce_expr_UnaryExpression_2_classLit);
function $callFunction(this$static, c){
    var actualArgs, c2;
    actualArgs = $evaluateArguments(this$static, c);
    if (this$static.tailCall) {
        $requestTailCall(c, this$static.function_$, actualArgs);
        return $clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10;
    }
    c2 = c.newCleanContext();
    c2.isTemporaryDestination = true;
    return $call(this$static.function_$, actualArgs, c2);
}

function $checkFunctionCall(this$static, compiledFunction){
    var i_0, n, role;
    n = compiledFunction.parameterDefinitions.length;
    for (i_0 = 0; i_0 < n; i_0++) {
        role = new RoleLocator(0, compiledFunction.functionName, i_0);
        role.errorCode = 'XTTE0790';
        setCheck(this$static.argument, i_0, staticTypeCheck_1(this$static.argument[i_0], compiledFunction.parameterDefinitions[i_0].requiredType, false, role));
    }
}

function $evaluateArguments(this$static, c){
    var actualArgs, i_0, numArgs;
    numArgs = this$static.argument.length;
    actualArgs = initDim(Lclient_net_sf_saxon_ce_om_Sequence_2_classLit, $intern_1, 14, numArgs, 0, 1);
    for (i_0 = 0; i_0 < numArgs; i_0++) {
        setCheck(actualArgs, i_0, makeSequenceExtent(this$static.argument[i_0].iterate_0(c)));
    }
    return actualArgs;
}

function $getFunctionName(this$static){
    var n;
    n = this$static.name_0;
    return !n?this$static.function_$.functionName:n;
}

function $setStaticType_0(this$static, type_0){
    this$static.staticType = type_0;
}

function UserFunctionCall(){
    FunctionCall.call(this);
}

defineClass(261, 20, {6:1, 20:1, 261:1}, UserFunctionCall);
_.checkArguments = function checkArguments(visitor){
}
;
_.computeCardinality = function computeCardinality_28(){
    return !this.staticType?$intern_12:this.staticType.cardinality;
}
;
_.evaluateItem = function evaluateItem_28(c){
    var val;
    val = $callFunction(this, c);
    return asItem(val);
}
;
_.getFunctionName = function getFunctionName_0(){
    return $getFunctionName(this);
}
;
_.getImplementationMethod = function getImplementationMethod_9(){
    return this.staticProperties == -1 && (this.staticProperties = $computeDependencies(this) | (!this.staticType?$intern_12:this.staticType.cardinality) | 0) , (this.staticProperties & $intern_12 & $intern_14) != 0?6:1;
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_6(){
    return 256;
}
;
_.getItemType = function getItemType_35(){
    return !this.staticType?($clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2):this.staticType.primaryType;
}
;
_.iterate_0 = function iterate_25(c){
    return $callFunction(this, c).iterate();
}
;
_.markTailFunctionCalls = function markTailFunctionCalls_2(qName, arity_0){
    this.tailCall = true;
    return $equals_0($getFunctionName(this), qName) && arity_0 == this.argument.length?2:1;
}
;
_.preEvaluate = function preEvaluate_0(visitor){
    return this;
}
;
_.process = function process_6(context){
    var actualArgs, c2, out;
    actualArgs = $evaluateArguments(this, context);
    if (this.tailCall) {
        $requestTailCall(context, this.function_$, actualArgs);
    }
    else {
        out = context.getReceiver();
        c2 = context.newCleanContext();
        c2.setTemporaryReceiver(out);
        $process_1(this.function_$, actualArgs, c2);
    }
}
;
_.promote = function promote_14(offer, parent_0){
    var exp_0, i_0;
    exp_0 = $accept(offer, this);
    if (exp_0) {
        return exp_0;
    }
    else {
        if (offer.action != 13) {
            for (i_0 = 0; i_0 < this.argument.length; i_0++) {
                setCheck(this.argument, i_0, $doPromotion(this, this.argument[i_0], offer));
            }
        }
        return this;
    }
}
;
_.typeCheck = function typeCheck_34(visitor, contextItemType){
    var e;
    e = $typeCheck_2(this, visitor, contextItemType);
    !!this.function_$ && this.staticType == ($clinit_SequenceType() , ANY_SEQUENCE) && (this.staticType = $getResultType(this.function_$));
    return e;
}
;
_.tailCall = false;
var Lclient_net_sf_saxon_ce_expr_UserFunctionCall_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'UserFunctionCall', 261, Lclient_net_sf_saxon_ce_expr_FunctionCall_2_classLit);
function ValueComparison(p1, op, p2){
    BinaryExpression.call(this, p1, op, p2);
}

function compare(v0, op, v1, comparer, checkTypes){
    var e2;
    if (checkTypes && !isComparable(v0.getItemType_0(), v1.getItemType_0(), ($clinit_Token() , op != 50 && op != 51))) {
        throw new XPathException_2('Cannot compare ' + displayTypeName(v0) + ' to ' + displayTypeName(v1), 'XPTY0004');
    }
    if (v0.isNaN_0() || v1.isNaN_0()) {
        return op == 51;
    }
    try {
        switch (op) {
            case 50:
                return comparer.comparesEqual(v0, v1);
            case 51:
                return !comparer.comparesEqual(v0, v1);
            case 52:
                return comparer.compareAtomicValues(v0, v1) > 0;
            case 53:
                return comparer.compareAtomicValues(v0, v1) < 0;
            case 54:
                return comparer.compareAtomicValues(v0, v1) >= 0;
            case 55:
                return comparer.compareAtomicValues(v0, v1) <= 0;
            default:throw new UnsupportedOperationException_0('Unknown operator ' + op);
        }
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 72)) {
            e2 = new XPathException_0('Cannot compare ' + displayTypeName(v0) + ' to ' + displayTypeName(v1));
            e2.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XPTY0004');
                e2.isTypeError = true;
                throw e2;
        }
        else 
            throw unwrap($e0);
    }
}

defineClass(358, 79, {79:1, 360:1, 6:1, 358:1}, ValueComparison);
_.effectiveBooleanValue = function effectiveBooleanValue_7(context){
    var e, v0, v1;
    try {
        v0 = dynamicCast(this.operand0.evaluateItem(context), 13);
        if (!v0) {
            return false;
        }
        v1 = dynamicCast(this.operand1.evaluateItem(context), 13);
        if (!v1) {
            return false;
        }
        return compare(v0, this.operator, v1, this.comparer, this.needsRuntimeCheck);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            $maybeSetLocation(e, $getSourceLocator(this));
            throw e;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.evaluateItem = function evaluateItem_29(context){
    var e, v0, v1;
    try {
        v0 = dynamicCast(this.operand0.evaluateItem(context), 13);
        if (!v0) {
            return null;
        }
        v1 = dynamicCast(this.operand1.evaluateItem(context), 13);
        if (!v1) {
            return null;
        }
        return $clinit_BooleanValue() , compare(v0, this.operator, v1, this.comparer, this.needsRuntimeCheck)?TRUE_0:FALSE_0;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            $maybeSetLocation(e, $getSourceLocator(this));
            throw e;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.getItemType = function getItemType_36(){
    return $clinit_AtomicType() , BOOLEAN;
}
;
_.optimize = function optimize_27(visitor, contextItemType){
    var e, filter, val, value1, vc;
    e = $optimize_0(this, visitor, contextItemType);
    if (e != this) {
        return e;
    }
    if (instanceOf(this.operand0, 226) && isAtomic_0(this.operand1)) {
        value1 = dynamicCast(dynamicCast(this.operand1, 9).value_0, 13);
        if (instanceOf(value1, 25) && dynamicCast(value1, 25).compareTo_1({l:0, m:0, h:0}) == 0) {
            return this.operator == 50 || this.operator == 55?makeSystemFunction('empty', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [dynamicCast(this.operand0, 20).argument[0]])):this.operator == 51 || this.operator == 52?makeSystemFunction('exists', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [dynamicCast(this.operand0, 20).argument[0]])):this.operator == 54?makeLiteral(($clinit_BooleanValue() , TRUE_0)):makeLiteral(($clinit_BooleanValue() , FALSE_0));
        }
        else if (instanceOf(value1, 32) && (this.operator == 52 || this.operator == 54)) {
            val = fromInt($intValue(dynamicCast(value1, 32)));
            this.operator == 52 && (val = add_11(val, {l:1, m:0, h:0}));
            filter = new FilterExpression(dynamicCast(this.operand0, 20).argument[0], makeLiteral(new IntegerValue_0(new BigDecimal_1(val))));
            copyLocationInfo(this, filter);
            return makeSystemFunction('exists', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [filter]));
        }
    }
    if (instanceOf(this.operand1, 226) && isAtomic_0(this.operand0)) {
        vc = new ValueComparison(this.operand1, inverse(this.operator), this.operand0);
        copyLocationInfo(this, vc);
        return $optimize_1(visitor, vc, contextItemType);
    }
    return this;
}
;
_.typeCheck = function typeCheck_35(visitor, contextItemType){
    var comp, defaultCollationName, env, opt0, opt1, optionalAtomic, p0, p1, role0, role1;
    env = visitor.staticContext;
    this.operand0 = $typeCheck_1(visitor, this.operand0, contextItemType);
    if (isEmptySequence(this.operand0)) {
        return this.operand0;
    }
    this.operand1 = $typeCheck_1(visitor, this.operand1, contextItemType);
    if (isEmptySequence(this.operand1)) {
        return this.operand1;
    }
    optionalAtomic = ($clinit_SequenceType() , OPTIONAL_ATOMIC);
    role0 = new RoleLocator(1, ($clinit_Token() , tokens_0)[this.operator], 0);
    this.operand0 = staticTypeCheck_1(this.operand0, optionalAtomic, false, role0);
    role1 = new RoleLocator(1, tokens_0[this.operator], 1);
    this.operand1 = staticTypeCheck_1(this.operand1, optionalAtomic, false, role1);
    p0 = this.operand0.getItemType().getAtomizedItemType();
    p1 = this.operand1.getItemType().getAtomizedItemType();
    p0 == ($clinit_AtomicType() , UNTYPED_ATOMIC) && (p0 = STRING);
    p1 == UNTYPED_ATOMIC && (p1 = STRING);
    this.needsRuntimeCheck = p0 == ANY_ATOMIC || p1 == ANY_ATOMIC;
    if (!this.needsRuntimeCheck && !isComparable(p0, p1, isOrderedOperator(this.operator))) {
        opt0 = (this.operand0.getCardinality() & $intern_17) != 0;
        opt1 = (this.operand1.getCardinality() & $intern_17) != 0;
        opt0 || opt1?(this.needsRuntimeCheck = true):$typeError(this, null, 'Cannot compare ' + ('xs:' + p0.localName_0) + ' to ' + ('xs:' + p1.localName_0), 'XPTY0004');
    }
    if (!(this.operator == 50 || this.operator == 51)) {
        p0.ordered || $typeError(this, null, 'Type ' + ('xs:' + p0.localName_0) + ' is not an ordered type', 'XPTY0004');
        p1.ordered || $typeError(this, null, 'Type ' + ('xs:' + p1.localName_0) + ' is not an ordered type', 'XPTY0004');
    }
    if (!this.comparer) {
        defaultCollationName = env.getDefaultCollationName();
        comp = $getNamedCollation((env.getConfiguration() , defaultCollationName));
        !comp && (comp = ($clinit_CodepointCollator() , $clinit_CodepointCollator() , theInstance_0));
        this.comparer = makeAtomicComparer(p0, p1, comp, env.getConfiguration().implicitTimezone);
    }
    return this;
}
;
_.needsRuntimeCheck = false;
var Lclient_net_sf_saxon_ce_expr_ValueComparison_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'ValueComparison', 358, Lclient_net_sf_saxon_ce_expr_BinaryExpression_2_classLit);
function $iterate_2(this$static, c){
    var i1, i2;
    i1 = this$static.operand0.iterate_0(c);
    ($getSpecialProperties(this$static.operand0) & $intern_25) == 0 && (i1 = new DocumentOrderIterator_0(i1, ($clinit_GlobalOrderComparer() , $clinit_GlobalOrderComparer() , instance_0)));
    i2 = this$static.operand1.iterate_0(c);
    ($getSpecialProperties(this$static.operand1) & $intern_25) == 0 && (i2 = new DocumentOrderIterator_0(i2, ($clinit_GlobalOrderComparer() , $clinit_GlobalOrderComparer() , instance_0)));
    return new VennIterator(i1, i2, ($clinit_GlobalOrderComparer() , $clinit_GlobalOrderComparer() , instance_0), this$static.operator);
}

function $testContextDocumentNodeSet(this$static, prop0, prop1){
    switch (this$static.operator) {
        case 1:
            return (prop0 & prop1 & $intern_34) != 0;
        case 23:
            return ((prop0 | prop1) & $intern_34) != 0;
        case 24:
            return (prop0 & $intern_34) != 0;
    }
    return false;
}

function $testSubTree(this$static, prop0, prop1){
    switch (this$static.operator) {
        case 1:
            return (prop0 & prop1 & $intern_28) != 0;
        case 23:
            return ((prop0 | prop1) & $intern_28) != 0;
        case 24:
            return (prop0 & $intern_28) != 0;
    }
    return false;
}

function VennExpression(p1, op, p2){
    BinaryExpression.call(this, p1, op, p2);
}

defineClass(235, 79, {79:1, 6:1, 235:1}, VennExpression);
_.computeCardinality = function computeCardinality_29(){
    var c1, c2;
    c1 = this.operand0.getCardinality();
    c2 = this.operand1.getCardinality();
    switch (this.operator) {
        case 1:
            if (isEmptySequence(this.operand0))
                return c2;
            if (isEmptySequence(this.operand1))
                return c1;
            return c1 | c2 | $intern_21 | $intern_14;
        case 23:
            if (isEmptySequence(this.operand0))
                return $intern_17;
            if (isEmptySequence(this.operand1))
                return $intern_17;
            return c1 & c2 | $intern_17 | $intern_21;
        case 24:
            if (isEmptySequence(this.operand0))
                return $intern_17;
            if (isEmptySequence(this.operand1))
                return c1;
            return c1 | $intern_17 | $intern_21;
    }
    return $intern_12;
}
;
_.computeSpecialProperties = function computeSpecialProperties_19(){
    var prop0, prop1, props;
    prop0 = $getSpecialProperties(this.operand0);
    prop1 = $getSpecialProperties(this.operand1);
    props = $intern_25;
    $testContextDocumentNodeSet(this, prop0, prop1) && (props |= $intern_34);
    $testSubTree(this, prop0, prop1) && (props |= $intern_28);
    !((prop0 & $intern_22) != 0 && (prop1 & $intern_22) != 0) || (props |= $intern_22);
    return props;
}
;
_.effectiveBooleanValue = function effectiveBooleanValue_8(context){
    return this.operator == 1?this.operand0.effectiveBooleanValue(context) || this.operand1.effectiveBooleanValue(context):effectiveBooleanValue_2($iterate_2(this, context));
}
;
_.getItemType = function getItemType_37(){
    var t1, t2;
    t1 = this.operand0.getItemType();
    t2 = this.operand1.getItemType();
    return getCommonSuperType(t1, t2);
}
;
_.iterate_0 = function iterate_26(c){
    return $iterate_2(this, c);
}
;
_.optimize = function optimize_28(visitor, contextItemType){
    var a0, a1, b, e;
    e = $optimize_0(this, visitor, contextItemType);
    if (e != this) {
        return e;
    }
    if (this.operator == 1 && instanceOf(this.operand0, 52) && instanceOf(this.operand1, 52)) {
        a0 = dynamicCast(this.operand0, 52);
        a1 = dynamicCast(this.operand1, 52);
        if (a0.axis_0 == 2 && a1.axis_0 == 3) {
            b = new Block;
            $setChildren(b, initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.operand0, this.operand1]));
            return b;
        }
        else if (a1.axis_0 == 2 && a0.axis_0 == 3) {
            b = new Block;
            $setChildren(b, initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.operand1, this.operand0]));
            return b;
        }
    }
    return this;
}
;
_.simplify = function simplify_17(visitor){
    var path, path1, path2, venn;
    this.operand0 = $simplify(visitor, this.operand0);
    this.operand1 = $simplify(visitor, this.operand1);
    switch (this.operator) {
        case 1:
            if (isEmptySequence(this.operand0) && ($getSpecialProperties(this.operand1) & $intern_25) != 0)
                return this.operand1;
            if (isEmptySequence(this.operand1) && ($getSpecialProperties(this.operand0) & $intern_25) != 0)
                return this.operand0;
            break;
        case 23:
            if (isEmptySequence(this.operand0))
                return this.operand0;
            if (isEmptySequence(this.operand1))
                return this.operand1;
            break;
        case 24:
            if (isEmptySequence(this.operand0))
                return this.operand0;
            if (isEmptySequence(this.operand1) && ($getSpecialProperties(this.operand0) & $intern_25) != 0)
                return this.operand0;
    }
    if (instanceOf(this.operand0, 87) && instanceOf(this.operand1, 87) && this.operator == 1) {
        path1 = dynamicCast(this.operand0, 87);
        path2 = dynamicCast(this.operand1, 87);
        if ($getFirstStep(path1).equals$($getFirstStep(path2))) {
            venn = new VennExpression($getRemainingSteps(path1), this.operator, $getRemainingSteps(path2));
            copyLocationInfo(this, venn);
            path = new PathExpression($getFirstStep(path1), venn);
            copyLocationInfo(this, path);
            return $simplify(visitor, path);
        }
    }
    return this;
}
;
_.typeCheck = function typeCheck_36(visitor, contextItemType){
    var role0, role1;
    this.operand0 = $typeCheck_1(visitor, this.operand0, contextItemType);
    this.operand1 = $typeCheck_1(visitor, this.operand1, contextItemType);
    role0 = new RoleLocator(1, ($clinit_Token() , tokens_0)[this.operator], 0);
    this.operand0 = staticTypeCheck_1(this.operand0, ($clinit_SequenceType() , NODE_SEQUENCE), false, role0);
    role1 = new RoleLocator(1, tokens_0[this.operator], 1);
    this.operand1 = staticTypeCheck_1(this.operand1, NODE_SEQUENCE, false, role1);
    return this;
}
;
var Lclient_net_sf_saxon_ce_expr_VennExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'VennExpression', 235, Lclient_net_sf_saxon_ce_expr_BinaryExpression_2_classLit);
function $deliverCommon(this$static){
    this$static.current = this$static.nextNode1;
    this$static.nextNode1 = dynamicCast(this$static.e2.next_0(), 7);
    this$static.nextNode2 = dynamicCast(this$static.e2.next_0(), 7);
    return this$static.current;
}

function VennIterator(p1, p2, comparer, operator){
    this.e1 = p1;
    this.e2 = p2;
    this.comparer = comparer;
    this.operator = operator;
    this.nextNode1 = dynamicCast(this.e1.next_0(), 7);
    this.nextNode2 = dynamicCast(this.e2.next_0(), 7);
}

defineClass(507, 1, $intern_18, VennIterator);
_.getAnother = function getAnother_10(){
    return new VennIterator(this.e1.getAnother(), this.e2.getAnother(), this.comparer, this.operator);
}
;
_.next_0 = function next_7(){
    var c;
    switch (this.operator) {
        case 1:
            if (!!this.nextNode1 && !!this.nextNode2) {
                c = this.comparer.compare_0(this.nextNode1, this.nextNode2);
                if (c < 0) {
                    return this.current = this.nextNode1 , this.nextNode1 = dynamicCast(this.e1.next_0(), 7) , this.current;
                }
                else if (c > 0) {
                    return this.current = this.nextNode2 , this.nextNode2 = dynamicCast(this.e2.next_0(), 7) , this.current;
                }
                else {
                    $deliverCommon(this);
                }
            }

            if (this.nextNode1) {
                return this.current = this.nextNode1 , this.nextNode1 = dynamicCast(this.e1.next_0(), 7) , this.current;
            }

            if (this.nextNode2) {
                return this.current = this.nextNode2 , this.nextNode2 = dynamicCast(this.e2.next_0(), 7) , this.current;
            }

            return this.current = null , null;
        case 23:
            if (!this.nextNode1 || !this.nextNode2) {
                return this.current = null , null;
            }

            while (!!this.nextNode1 && !!this.nextNode2) {
                c = this.comparer.compare_0(this.nextNode1, this.nextNode2);
                if (c < 0) {
                    this.nextNode1 = dynamicCast(this.e1.next_0(), 7);
                }
                else if (c > 0) {
                    this.nextNode2 = dynamicCast(this.e2.next_0(), 7);
                }
                else {
                    return $deliverCommon(this);
                }
            }

            return this.current = null , null;
        case 24:
            while (true) {
                !this.nextNode1 && (this.current = null , null);
                if (!this.nextNode2) {
                    return this.current = this.nextNode1 , this.nextNode1 = dynamicCast(this.e1.next_0(), 7) , this.current;
                }
                c = this.comparer.compare_0(this.nextNode1, this.nextNode2);
                if (c < 0) {
                    return this.current = this.nextNode1 , this.nextNode1 = dynamicCast(this.e1.next_0(), 7) , this.current;
                }
                else if (c > 0) {
                    this.nextNode2 = dynamicCast(this.e2.next_0(), 7);
                    if (!this.nextNode2) {
                        return this.current = this.nextNode1 , this.nextNode1 = dynamicCast(this.e1.next_0(), 7) , this.current;
                    }
                }
                else {
                    this.nextNode2 = dynamicCast(this.e2.next_0(), 7);
                    this.nextNode1 = dynamicCast(this.e1.next_0(), 7);
                }
            }

        default:return null;
    }
}
;
_.current = null;
_.nextNode1 = null;
_.nextNode2 = null;
_.operator = 0;
var Lclient_net_sf_saxon_ce_expr_VennIterator_2_classLit = createForClass('client.net.sf.saxon.ce.expr', 'VennIterator', 507, Ljava_lang_Object_2_classLit);
function $getRegexIterator(this$static, context){
    var flagstr, input_0, re;
    input_0 = this$static.select.evaluateAsString(context);
    flagstr = toString__Ljava_lang_String___devirtual$_0(this$static.flags.evaluateAsString(context));
    re = new ARegularExpression(this$static.regex.evaluateAsString(context), flagstr);
    $matches_0(re, '') && $dynamicError(this$static, 'The regular expression must not be one that matches a zero-length string', 'XTDE1150');
    return new ARegexIterator(containsSurrogatePairs(input_0)?new GeneralUnicodeString(input_0):new BMPString(input_0), re.rawPattern, new REMatcher(re.regex));
}

function AnalyzeString(select, regex, flags, matching, nonMatching){
    var child, kids;
    Instruction.call(this);
    this.select = select;
    this.regex = regex;
    this.flags = flags;
    this.matching = matching;
    this.nonMatching = nonMatching;
    kids = $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.select, this.regex, this.flags, this.matching, this.nonMatching]));
    while (kids.i < kids.this$01_0.size_1()) {
        child = (checkCriticalElement(kids.i < kids.this$01_0.size_1()) , dynamicCast(kids.this$01_0.get_1(kids.last = kids.i++), 6));
        $adoptChildExpression(this, child);
    }
}

defineClass(752, 39, $intern_42, AnalyzeString);
_.computeDependencies = function computeDependencies_3(){
    var dependencies;
    dependencies = 0;
    dependencies |= this.select.getDependencies();
    dependencies |= this.regex.getDependencies();
    dependencies |= this.flags.getDependencies();
    !!this.matching && (dependencies |= this.matching.getDependencies() & -95);
    !!this.nonMatching && (dependencies |= this.nonMatching.getDependencies() & -95);
    return dependencies;
}
;
_.getImplementationMethod = function getImplementationMethod_10(){
    return 6;
}
;
_.getItemType = function getItemType_38(){
    return this.matching?this.nonMatching?getCommonSuperType(this.matching.getItemType(), this.nonMatching.getItemType()):this.matching.getItemType():this.nonMatching?this.nonMatching.getItemType():($clinit_EmptySequenceTest() , $clinit_EmptySequenceTest() , THE_INSTANCE_8);
}
;
_.hasLoopingSubexpression = function hasLoopingSubexpression_4(child){
    return child == this.matching || child == this.nonMatching;
}
;
_.iterate_0 = function iterate_27(context){
    var c2, fn, iter;
    iter = $getRegexIterator(this, context);
    c2 = context.newContext();
    c2.setCurrentIterator(iter);
    c2.currentRegexIterator = iter;
    fn = new AnalyzeString$AnalyzeMappingFunction(this, iter, c2);
    return new ContextMappingIterator(fn, c2);
}
;
_.iterateSubExpressions = function iterateSubExpressions_7(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.select, this.regex, this.flags, this.matching, this.nonMatching]));
}
;
_.optimize = function optimize_29(visitor, contextItemType){
    this.select = $optimize_1(visitor, this.select, contextItemType);
    $adoptChildExpression(this, this.select);
    this.regex = $optimize_1(visitor, this.regex, contextItemType);
    $adoptChildExpression(this, this.regex);
    this.flags = $optimize_1(visitor, this.flags, contextItemType);
    $adoptChildExpression(this, this.flags);
    if (this.matching) {
        this.matching = this.matching.optimize(visitor, ($clinit_AtomicType() , STRING));
        $adoptChildExpression(this, this.matching);
    }
    if (this.nonMatching) {
        this.nonMatching = this.nonMatching.optimize(visitor, ($clinit_AtomicType() , STRING));
        $adoptChildExpression(this, this.nonMatching);
    }
    return this;
}
;
_.processLeavingTail = function processLeavingTail_1(context){
    var c2, focus_0, it, iter;
    iter = $getRegexIterator(this, context);
    c2 = context.newContext();
    focus_0 = c2.setCurrentIterator(iter);
    c2.currentRegexIterator = iter;
    while (true) {
        it = $next_3(focus_0);
        if (!it) {
            break;
        }
        !iter.next && iter.prevEnd >= 0?!!this.matching && this.matching.process(c2):!!this.nonMatching && this.nonMatching.process(c2);
    }
    return null;
}
;
_.promoteInst = function promoteInst_0(offer){
    this.select = $doPromotion(this, this.select, offer);
    this.regex = $doPromotion(this, this.regex, offer);
    this.flags = $doPromotion(this, this.flags, offer);
    !!this.matching && (this.matching = $doPromotion(this, this.matching, offer));
    !!this.nonMatching && (this.nonMatching = $doPromotion(this, this.nonMatching, offer));
}
;
_.simplify = function simplify_18(visitor){
    this.select = $simplify(visitor, this.select);
    this.regex = $simplify(visitor, this.regex);
    this.flags = $simplify(visitor, this.flags);
    this.matching = $simplify(visitor, this.matching);
    this.nonMatching = $simplify(visitor, this.nonMatching);
    return this;
}
;
_.typeCheck = function typeCheck_37(visitor, contextItemType){
    var required, role;
    this.select = $typeCheck_1(visitor, this.select, contextItemType);
    $adoptChildExpression(this, this.select);
    this.regex = $typeCheck_1(visitor, this.regex, contextItemType);
    $adoptChildExpression(this, this.regex);
    this.flags = $typeCheck_1(visitor, this.flags, contextItemType);
    $adoptChildExpression(this, this.flags);
    if (this.matching) {
        this.matching = $typeCheck_1(visitor, this.matching, ($clinit_AtomicType() , STRING));
        $adoptChildExpression(this, this.matching);
    }
    if (this.nonMatching) {
        this.nonMatching = $typeCheck_1(visitor, this.nonMatching, ($clinit_AtomicType() , STRING));
        $adoptChildExpression(this, this.nonMatching);
    }
    role = new RoleLocator(4, 'analyze-string/select', 0);
    required = ($clinit_SequenceType() , SINGLE_STRING);
    this.select = staticTypeCheck_1(this.select, required, false, role);
    role = new RoleLocator(4, 'analyze-string/regex', 0);
    this.regex = staticTypeCheck_1(this.regex, SINGLE_STRING, false, role);
    role = new RoleLocator(4, 'analyze-string/flags', 0);
    this.flags = staticTypeCheck_1(this.flags, SINGLE_STRING, false, role);
    return this;
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_AnalyzeString_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'AnalyzeString', 752, Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit);
function AnalyzeString$AnalyzeMappingFunction(this$0, base, c2){
    this.this$01 = this$0;
    this.base = base;
    this.c2 = c2;
}

defineClass(753, 1, {}, AnalyzeString$AnalyzeMappingFunction);
_.map_1 = function map_3(context){
    if ($isMatching(this.base)) {
        if (this.this$01.matching) {
            return this.this$01.matching.iterate_0(this.c2);
        }
    }
    else {
        if (this.this$01.nonMatching) {
            return this.this$01.nonMatching.iterate_0(this.c2);
        }
    }
    return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_AnalyzeString$AnalyzeMappingFunction_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'AnalyzeString/AnalyzeMappingFunction', 753, Ljava_lang_Object_2_classLit);
function $setActualParameters(this$static, actualParams, tunnelParams){
    this$static.actualParams = actualParams;
    this$static.tunnelParams = tunnelParams;
}

function ApplyImports(operation){
    Instruction.call(this);
    this.operation = operation;
}

defineClass(498, 39, $intern_42, ApplyImports);
_.createsNewNodes = function createsNewNodes_1(){
    return true;
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_7(){
    return 2;
}
;
_.iterateSubExpressions = function iterateSubExpressions_8(){
    var list;
    list = new ArrayList_0(10);
    getXPathExpressions(this.actualParams, list);
    getXPathExpressions(this.tunnelParams, list);
    return new AbstractList$IteratorImpl(list);
}
;
_.optimize = function optimize_30(visitor, contextItemType){
    optimize_51(visitor, this.actualParams, contextItemType);
    optimize_51(visitor, this.tunnelParams, contextItemType);
    return this;
}
;
_.processLeavingTail = function processLeavingTail_2(context){
    var c2, controller, currentItem, currentTemplateRule, max_0, min_0, mode, nh, params, rule, tunnels;
    controller = context.getController();
    params = assembleParams(context, this.actualParams);
    tunnels = assembleTunnelParams(context, this.tunnelParams);
    currentTemplateRule = context.getCurrentTemplateRule();
    if (!currentTemplateRule) {
        $dynamicError(this, 'There is no current template rule', 'XTDE0560');
        return null;
    }
    mode = context.getCurrentMode();
    !mode && (mode = controller.ruleManager.unnamedMode);
    if (!context.getCurrentIterator()) {
        throw new XPathException_2('There is no context item', 'XTDE0565');
    }
    currentItem = context.getContextItem();
    instanceOf(currentItem, 7) || $dynamicError(this, 'The context item is not a node', 'XTDE0565');
    if (this.operation == 1) {
        min_0 = currentTemplateRule.minImportPrecedence;
        max_0 = currentTemplateRule.precedence - 1;
        rule = $getTemplateRule(controller.ruleManager, dynamicCast(currentItem, 7), mode, min_0, max_0, context);
    }
    else {
        rule = $getNextMatchHandler(controller.ruleManager, dynamicCast(currentItem, 7), mode, currentTemplateRule, context);
    }
    if (!rule) {
        defaultAction(dynamicCast(currentItem, 7), params, tunnels, context, $getSourceLocator(this));
    }
    else {
        nh = rule.action;
        c2 = context.newContext();
        $setParameters_0(c2, nh.numberOfSlots, params, tunnels);
        c2.currentTemplate = rule;
        $apply_0(nh, c2);
    }
    return null;
}
;
_.promoteInst = function promoteInst_1(offer){
    promoteParams(this, this.actualParams, offer);
    promoteParams(this, this.tunnelParams, offer);
}
;
_.simplify = function simplify_19(visitor){
    simplify_43(this.actualParams, visitor);
    simplify_43(this.tunnelParams, visitor);
    return this;
}
;
_.typeCheck = function typeCheck_38(visitor, contextItemType){
    typeCheck_58(this.actualParams, visitor, contextItemType);
    typeCheck_58(this.tunnelParams, visitor, contextItemType);
    return this;
}
;
_.actualParams = null;
_.operation = 0;
_.tunnelParams = null;
var Lclient_net_sf_saxon_ce_expr_instruct_ApplyImports_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'ApplyImports', 498, Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit);
function $apply(this$static, context, returnTailCall){
    var c2, c20, evaluationMode, iter, params, tc, thisMode, tunnels;
    thisMode = this$static.mode;
    this$static.useCurrentMode && (thisMode = context.getCurrentMode());
    params = assembleParams(context, this$static.actualParams);
    tunnels = assembleTunnelParams(context, this$static.tunnelParams);
    if (returnTailCall) {
        c20 = context.newContext();
        evaluationMode = lazyEvaluationMode(this$static.select);
        return new ApplyTemplates$ApplyTemplatesPackage(evaluate(this$static.select, evaluationMode, context), thisMode, params, tunnels, c20, $getSourceLocator(this$static));
    }
    iter = this$static.select.iterate_0(context);
    if (instanceOf(iter, 316)) {
        return null;
    }
    c2 = context.newContext();
    tc = applyTemplates(iter, thisMode, params, tunnels, c2, $getSourceLocator(this$static));
    while (tc) {
        tc = tc.processLeavingTail_0();
    }
    return null;
}

function $setActualParameters_0(this$static, actualParams, tunnelParams){
    this$static.actualParams = actualParams;
    this$static.tunnelParams = tunnelParams;
}

function ApplyTemplates(select, useCurrentMode, useTailRecursion, implicitSelect, mode){
    Instruction.call(this);
    this.select = select;
    this.useCurrentMode = useCurrentMode;
    this.useTailRecursion = useTailRecursion;
    this.mode = mode;
    $adoptChildExpression(this, select);
    this.implicitSelect = implicitSelect;
}

function applyTemplates(iterator, mode, parameters, tunnelParameters, context){
    var focus_0, iter, node, previousTemplate, rule, tc, template;
    tc = null;
    focus_0 = context.setCurrentIterator(iterator);
    context.currentMode = mode;
    previousTemplate = null;
    while (true) {
        if (tc) {
            do {
                tc = tc.processLeavingTail_0();
            }
            while (tc);
        }
        node = dynamicCast($next_3(focus_0), 7);
        if (!node) {
            break;
        }
        rule = $getRule(mode, node, context);
        !rule && (rule = $getVirtualRule(mode, context));
        if (!rule) {
            defaultAction(node, parameters, tunnelParameters, context);
        }
        else {
            template = rule.action;
            if (template != previousTemplate) {
                previousTemplate = template;
                $setParameters_0(context, template.numberOfSlots, parameters, tunnelParameters);
            }
            context.currentTemplate = rule;
            if (rule.isVirtual) {
                iter = convertFromJavaScript($getUserData(context.getController(), 'Saxon-CE', 'current-object'), context.getConfiguration());
                iter.next_0();
                context.setCurrentIterator(iter);
            }
            tc = $applyLeavingTail(template, context);
        }
    }
    return tc;
}

function defaultAction(node, parameters, tunnelParams, context){
    var c2, iter, tc;
    switch (node.getNodeKind()) {
        case 9:
    case 1:
        iter = node.iterateAxis(3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
        c2 = context.newContext();
        tc = applyTemplates(iter, context.getCurrentMode(), parameters, tunnelParams, c2);
        while (tc) {
            tc = tc.processLeavingTail_0();
        }

        return;
    case 3:
case 2:
    context.getReceiver().characters(node.getStringValue());
    return;
    }
}

defineClass(645, 39, $intern_42, ApplyTemplates);
_.createsNewNodes = function createsNewNodes_2(){
    return true;
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_8(){
    return 0 | (this.useCurrentMode?1:0);
}
;
_.hasLoopingSubexpression = function hasLoopingSubexpression_5(child){
    return instanceOf(child, 317);
}
;
_.iterateSubExpressions = function iterateSubExpressions_9(){
    var list;
    list = new ArrayList_0(10);
    $add_16(list, this.select);
    getXPathExpressions(this.actualParams, list);
    getXPathExpressions(this.tunnelParams, list);
    return new AbstractList$IteratorImpl(list);
}
;
_.optimize = function optimize_31(visitor, contextItemType){
    optimize_51(visitor, this.actualParams, contextItemType);
    optimize_51(visitor, this.tunnelParams, contextItemType);
    this.select = $typeCheck_1(visitor, this.select, contextItemType);
    this.select = $optimize_1(visitor, this.select, contextItemType);
    $adoptChildExpression(this, this.select);
    if (isEmptySequence(this.select)) {
        return this.select;
    }
    return this;
}
;
_.process = function process_7(context){
    $apply(this, context, false);
}
;
_.processLeavingTail = function processLeavingTail_3(context){
    return $apply(this, context, this.useTailRecursion);
}
;
_.promoteInst = function promoteInst_2(offer){
    this.select = $doPromotion(this, this.select, offer);
    promoteParams(this, this.actualParams, offer);
    promoteParams(this, this.tunnelParams, offer);
}
;
_.simplify = function simplify_20(visitor){
    simplify_43(this.actualParams, visitor);
    simplify_43(this.tunnelParams, visitor);
    this.select = $simplify(visitor, this.select);
    return this;
}
;
_.typeCheck = function typeCheck_39(visitor, contextItemType){
    var code_0, e, err;
    typeCheck_58(this.actualParams, visitor, contextItemType);
    typeCheck_58(this.tunnelParams, visitor, contextItemType);
    try {
        this.select = $typeCheck_1(visitor, this.select, contextItemType);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            if (this.implicitSelect) {
                code_0 = !e.errorCode?null:$getLocalName_1(e.errorCode);
                if ($equals_5('XPTY0020', code_0)) {
                    err = new XPathException_0('Cannot apply-templates to child nodes when the context item is an atomic value');
                    err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTTE0510');
                        err.isTypeError = true;
                        throw err;
                }
                else if ($equals_5('XPDY0002', code_0)) {
                    err = new XPathException_0('Cannot apply-templates to child nodes when the context item is undefined');
                    err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTTE0510');
                        err.isTypeError = true;
                        throw err;
                }
            }
            throw e;
        }
        else 
            throw unwrap($e0);
    }
    $adoptChildExpression(this, this.select);
    if (isEmptySequence(this.select)) {
        return this.select;
    }
    return this;
}
;
_.actualParams = null;
_.implicitSelect = false;
_.tunnelParams = null;
_.useCurrentMode = false;
_.useTailRecursion = false;
var Lclient_net_sf_saxon_ce_expr_instruct_ApplyTemplates_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'ApplyTemplates', 645, Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit);
function ApplyTemplates$ApplyTemplatesPackage(selectedNodes, mode, params, tunnelParams, context){
    this.selectedNodes = selectedNodes;
    this.mode = mode;
    this.params = params;
    this.tunnelParams = tunnelParams;
    this.evaluationContext = context;
}

defineClass(646, 1, {}, ApplyTemplates$ApplyTemplatesPackage);
_.processLeavingTail_0 = function processLeavingTail_4(){
    return applyTemplates(this.selectedNodes.iterate(), this.mode, this.params, this.tunnelParams, this.evaluationContext);
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_ApplyTemplates$ApplyTemplatesPackage_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'ApplyTemplates/ApplyTemplatesPackage', 646, Ljava_lang_Object_2_classLit);
function $evaluateItem_3(this$static, context){
    var content_0, contentItem, o;
    contentItem = this$static.select.evaluateItem(context);
    if (!contentItem) {
        return null;
    }
    content_0 = contentItem.getStringValue();
    content_0 = this$static.checkContent(content_0, context);
    $clinit_TypeHierarchy();
    o = new Orphan;
    $setNodeKind(o, dynamicCast(this$static.getItemType(), 67).getRequiredNodeKind());
    o.stringValue = content_0;
    $setNodeName_0(o, this$static.evaluateNameCode(context));
    return o;
}

function $processLeavingTail(this$static, context){
    var value_0;
    value_0 = this$static.select.evaluateAsString(context);
    this$static.processValue(value_0, context);
    return null;
}

function SimpleNodeConstructor(){
    Instruction.call(this);
}

defineClass(124, 39, $intern_43);
_.checkContent = function checkContent(data_0, context){
    return data_0;
}
;
_.computeCardinality = function computeCardinality_30(){
    return this.select.getCardinality();
}
;
_.computeSpecialProperties = function computeSpecialProperties_20(){
    return $intern_39;
}
;
_.createsNewNodes = function createsNewNodes_3(){
    return true;
}
;
_.evaluateItem = function evaluateItem_30(context){
    return $evaluateItem_3(this, context);
}
;
_.evaluateNameCode = function evaluateNameCode(context){
    return null;
}
;
_.iterate_0 = function iterate_28(context){
    return makeIterator_0(this.evaluateItem(context));
}
;
_.iterateSubExpressions = function iterateSubExpressions_10(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.select]));
}
;
_.optimize = function optimize_32(visitor, contextItemType){
    return this.select = $optimize_1(visitor, this.select, contextItemType) , $adoptChildExpression(this, this.select) , this;
}
;
_.processLeavingTail = function processLeavingTail_5(context){
    return $processLeavingTail(this, context);
}
;
_.promoteInst = function promoteInst_3(offer){
    !!this.select && (this.select = $doPromotion(this, this.select, offer));
}
;
_.setSelect = function setSelect(select, config){
    this.select = select;
    $adoptChildExpression(this, select);
}
;
_.simplify = function simplify_21(visitor){
    return this.select = $simplify(visitor, this.select) , this;
}
;
_.typeCheck = function typeCheck_40(visitor, contextItemType){
    var arg, fn, th, valSelect;
    this.localTypeCheck(visitor, contextItemType);
    if (this.select) {
        th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
        this.select = $typeCheck_1(visitor, this.select, contextItemType);
        if (instanceOf(this.select, 93)) {
            valSelect = dynamicCast(this.select, 93).select;
            $isSubType(th, valSelect.getItemType(), ($clinit_AtomicType() , STRING)) && (valSelect.getCardinality() & $intern_14) == 0 && (this.select = valSelect);
        }
        if (instanceOf(this.select, 192)) {
            fn = dynamicCast(this.select, 192);
            arg = fn.argument[0];
            arg.getItemType() == ($clinit_AtomicType() , UNTYPED_ATOMIC) && (arg.getCardinality() & $intern_14) == 0 && (this.select = arg);
        }
        else if (instanceOf(this.select, 104) && dynamicCast(this.select, 104).targetType == ($clinit_AtomicType() , STRING)) {
            arg = dynamicCast(this.select, 104).operand;
            arg.getItemType() == ($clinit_AtomicType() , UNTYPED_ATOMIC) && (arg.getCardinality() & $intern_14) == 0 && (this.select = arg);
        }
        $adoptChildExpression(this, this.select);
    }
    return this;
}
;
_.select = null;
var Lclient_net_sf_saxon_ce_expr_instruct_SimpleNodeConstructor_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'SimpleNodeConstructor', 124, Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit);
function AttributeCreator(){
    SimpleNodeConstructor.call(this);
}

defineClass(458, 124, $intern_43);
_.processValue = function processValue(value_0, context){
    var err, nameCode, out;
    nameCode = this.evaluateNameCode(context);
    out = context.getReceiver();
    $equals_0(nameCode, ($clinit_StructuredQName() , XML_ID)) && (value_0 = collapseWhitespace(value_0));
    try {
        out.attribute(nameCode, value_0);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            throw dynamicError($getSourceLocator(this), err);
        }
        else 
            throw unwrap($e0);
    }
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_AttributeCreator_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'AttributeCreator', 458, Lclient_net_sf_saxon_ce_expr_instruct_SimpleNodeConstructor_2_classLit);
function $allocateSlots(this$static, reserved){
    this$static.numberOfSlots = allocateSlots(this$static.body_0, reserved);
}

function $setBody(this$static, body_0){
    this$static.body_0 = body_0;
    $setContainer(body_0, this$static);
}

function $setExecutable(this$static, executable){
    this$static.executable = executable;
}

function $setSourceLocator_0(this$static, locator){
    this$static.sourceLocator = locator;
}

defineClass(279, 1, $intern_44);
_.getContainerGranularity = function getContainerGranularity(){
    return 2;
}
;
_.getExecutable = function getExecutable_0(){
    return this.executable;
}
;
_.getSourceLocator = function getSourceLocator_0(){
    return this.sourceLocator;
}
;
_.getSystemId = function getSystemId_2(){
    return '';
}
;
_.numberOfSlots = 0;
var Lclient_net_sf_saxon_ce_expr_instruct_Procedure_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'Procedure', 279, Ljava_lang_Object_2_classLit);
function $expand(this$static, context){
    var c2;
    this$static.useAttributeSets != null && expand(this$static.useAttributeSets, context);
    if (this$static.numberOfSlots != 0) {
        c2 = context.newContext();
        $openStackFrame(c2, this$static.numberOfSlots);
        this$static.body_0.process(c2);
    }
    else {
        this$static.body_0.process(context);
    }
}

function $getFocusDependencies(this$static){
    var d, useAttributeSet, useAttributeSet$array, useAttributeSet$index, useAttributeSet$max;
    d = 0;
    !!this$static.body_0 && (d |= this$static.body_0.getDependencies() & 30);
    if (this$static.useAttributeSets != null) {
        for (useAttributeSet$array = this$static.useAttributeSets , useAttributeSet$index = 0 , useAttributeSet$max = useAttributeSet$array.length; useAttributeSet$index < useAttributeSet$max; ++useAttributeSet$index) {
            useAttributeSet = useAttributeSet$array[useAttributeSet$index];
            d |= $getFocusDependencies(useAttributeSet);
        }
    }
    return d;
}

function $setName(this$static, attributeSetName){
    this$static.attributeSetName = attributeSetName;
}

function $setUseAttributeSets(this$static, useAttributeSets){
    this$static.useAttributeSets = useAttributeSets;
}

function AttributeSet(){
}

function expand(asets, context){
    var aset, aset$index, aset$max;
    for (aset$index = 0 , aset$max = asets.length; aset$index < aset$max; ++aset$index) {
        aset = asets[aset$index];
        $expand(aset, context);
    }
}

defineClass(370, 279, {28:1, 370:1, 279:1, 359:1}, AttributeSet);
var Lclient_net_sf_saxon_ce_expr_instruct_AttributeSet_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'AttributeSet', 370, Lclient_net_sf_saxon_ce_expr_instruct_Procedure_2_classLit);
function $allocateGlobals(this$static, numberOfGlobals){
    var i_0, n;
    n = numberOfGlobals + 1;
    this$static.globals = initDim(Lclient_net_sf_saxon_ce_om_Sequence_2_classLit, $intern_1, 14, n, 0, 1);
    this$static.busy = initDim(Z_classLit, $intern_9, 0, n, 8, 1);
    for (i_0 = 0; i_0 < n; i_0++) {
        setCheck(this$static.globals, i_0, null);
        this$static.busy[i_0] = false;
    }
}

function $defineGlobalParameters(this$static, params){
    this$static.globalParameters = params;
}

function $getGlobalVariable(this$static, slot){
    return this$static.globals[slot];
}

function $saveGlobalVariableValue(this$static, binding, value_0){
    var slot;
    slot = binding.slotNumber;
    if (this$static.globals[slot]) {
        return this$static.globals[slot];
    }
    else {
        this$static.busy[slot] = false;
        setCheck(this$static.globals, slot, value_0);
        return value_0;
    }
}

function $setExecuting(this$static, binding){
    var slot;
    slot = binding.slotNumber;
    if (this$static.busy[slot]) {
        throw new XPathException$Circularity('Circular definition of variable ' + $getDisplayName_0(binding.variableQName));
    }
    this$static.busy[slot] = false;
    return true;
}

function $useGlobalParameter(this$static, qName, slot, requiredType, context){
    var err, obj, pool, systemId, val, role, e;
    if (this$static.globals != null && !!this$static.globals[slot]) {
        return true;
    }
    if (!this$static.globalParameters) {
        return false;
    }
    obj = $get_0(this$static.globalParameters, qName);
    if (obj == null) {
        return false;
    }
    if (instanceOf(obj, 109)) {
        systemId = dynamicCast(obj, 109).getSystemId();
        try {
            if (systemId != null && (new URI_2(systemId)).m_scheme != null) {
                pool = context.getController().config.sourceDocumentPool;
                !dynamicCast($get_0(pool.documentNameMap, new DocumentURI(systemId)), 109) && $add_2(pool, dynamicCast(obj, 109), systemId);
            }
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (!instanceOf($e0, 51))
                throw unwrap($e0);
        }
    }
    val = null;
    instanceOf(obj, 14) && (val = dynamicCast(obj, 14));
    !val && (val = ($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
    val = (role = new RoleLocator(8, qName, 0) , e = staticTypeCheck_1(new Literal(val), requiredType, false, role) , makeSequenceExtent(e.iterate_0(context)));
    err = testConformance(val.iterate(), requiredType);
    if (err != null) {
        throw new XPathException_2(err, 'XPTY0004');
    }
    setCheck(this$static.globals, slot, val);
    return true;
}

function Bindery(){
}

defineClass(426, 1, {}, Bindery);
var Lclient_net_sf_saxon_ce_expr_instruct_Bindery_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'Bindery', 426, Ljava_lang_Object_2_classLit);
function $createsNewNodes(this$static){
    var i_0, props;
    for (i_0 = 0; i_0 < this$static.children.length; i_0++) {
        props = $getSpecialProperties(this$static.children[i_0]);
        if ((props & $intern_22) == 0) {
            return true;
        }
    }
    return false;
}

function $flatten(this$static, targetList){
    var currentLiteralList, i_0, item_0, iterator;
    currentLiteralList = null;
    for (i_0 = 0; i_0 < this$static.children.length; i_0++) {
        if (isEmptySequence(this$static.children[i_0]))
            ;
        else if (instanceOf(this$static.children[i_0], 77)) {
            $flushCurrentLiteralList(currentLiteralList, targetList);
            currentLiteralList = null;
            $flatten(dynamicCast(this$static.children[i_0], 77), targetList);
        }
        else if (instanceOf(this$static.children[i_0], 9)) {
            iterator = dynamicCast(this$static.children[i_0], 9).value_0.iterate();
            !currentLiteralList && (currentLiteralList = new ArrayList_0(10));
            while (true) {
                item_0 = iterator.next_0();
                if (!item_0) {
                    break;
                }
                setCheck(currentLiteralList.array, currentLiteralList.array.length, item_0);
            }
        }
        else {
            $flushCurrentLiteralList(currentLiteralList, targetList);
            currentLiteralList = null;
            targetList.add_3(this$static.children[i_0]);
        }
    }
    $flushCurrentLiteralList(currentLiteralList, targetList);
}

function $flushCurrentLiteralList(currentLiteralList, list){
    var iter;
    if (currentLiteralList) {
        iter = new ListIterator(currentLiteralList);
        list.add_3(makeLiteral(makeSequenceExtent(iter)));
    }
}

function $mergeAdjacentTextInstructions(this$static){
    var content_0, hasAdjacentTextNodes, i_0, i0, inst, isLiteralText, pendingText;
    isLiteralText = initDim(Z_classLit, $intern_9, 0, this$static.children.length, 8, 1);
    hasAdjacentTextNodes = false;
    for (i0 = 0; i0 < this$static.children.length; i0++) {
        isLiteralText[i0] = instanceOf(this$static.children[i0], 93) && instanceOf(dynamicCast(this$static.children[i0], 93).select, 21);
        i0 > 0 && isLiteralText[i0] && isLiteralText[i0 - 1] && (hasAdjacentTextNodes = true);
    }
    if (hasAdjacentTextNodes) {
        content_0 = new ArrayList_0(this$static.children.length);
        pendingText = null;
        for (i_0 = 0; i_0 < this$static.children.length; i_0++) {
            if (isLiteralText[i_0]) {
                pendingText = (pendingText == null?'':pendingText) + $getPrimitiveStringValue(dynamicCast(dynamicCast(dynamicCast(this$static.children[i_0], 93).select, 21).value_0, 12));
            }
            else {
                if (pendingText != null) {
                    inst = new ValueOf(new StringLiteral_0(pendingText));
                    setCheck(content_0.array, content_0.array.length, inst);
                    pendingText = null;
                }
                $add_16(content_0, this$static.children[i_0]);
            }
        }
        if (pendingText != null) {
            inst = new ValueOf(new StringLiteral_0(pendingText));
            setCheck(content_0.array, content_0.array.length, inst);
        }
        return makeBlock_0(content_0);
    }
    else {
        return this$static;
    }
}

function $optimize_6(this$static, visitor, contextItemType){
    var c, c0, canSimplify, i_0, list, prevLiteral;
    for (c0 = 0; c0 < this$static.children.length; c0++) {
        setCheck(this$static.children, c0, $optimize_1(visitor, this$static.children[c0], contextItemType));
        $adoptChildExpression(this$static, this$static.children[c0]);
    }
    canSimplify = false;
    prevLiteral = false;
    for (c = 0; c < this$static.children.length; c++) {
        if (instanceOf(this$static.children[c], 77)) {
            canSimplify = true;
            break;
        }
        if (instanceOf(this$static.children[c], 9)) {
            if (prevLiteral || isEmptySequence(this$static.children[c])) {
                canSimplify = true;
                break;
            }
            prevLiteral = true;
        }
        else {
            prevLiteral = false;
        }
    }
    if (canSimplify) {
        list = new ArrayList_0(this$static.children.length * 2);
        $flatten(this$static, list);
        this$static.children = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, list.array.length, 0, 1);
        for (i_0 = 0; i_0 < this$static.children.length; i_0++) {
            setCheck(this$static.children, i_0, (checkElementIndex(i_0, list.array.length) , dynamicCast(list.array[i_0], 6)));
            $adoptChildExpression(this$static, this$static.children[i_0]);
        }
    }
    return this$static.children.length == 0?new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10)):this$static.children.length == 1?this$static.children[0]:this$static;
}

function $setChildren(this$static, children){
    var c;
    this$static.children = children;
    for (c = 0; c < children.length; c++) {
        $adoptChildExpression(this$static, children[c]);
    }
}

function $typeCheck_4(this$static, visitor, contextItemType){
    var c;
    for (c = 0; c < this$static.children.length; c++) {
        setCheck(this$static.children, c, $typeCheck_1(visitor, this$static.children[c], contextItemType));
        $adoptChildExpression(this$static, this$static.children[c]);
    }
    return this$static;
}

function Block(){
    Instruction.call(this);
}

function makeBlock(e1, e2){
    var b, exps, it1, it2, list;
    if (!e1 || instanceOf(e1, 9) && instanceOf(dynamicCast(e1, 9).value_0, 141)) {
        return e2;
    }
    if (!e2 || instanceOf(e2, 9) && instanceOf(dynamicCast(e2, 9).value_0, 141)) {
        return e1;
    }
    if (instanceOf(e1, 77) || instanceOf(e2, 77)) {
        list = new ArrayList_0(10);
        if (instanceOf(e1, 77)) {
            it1 = e1.iterateSubExpressions();
            while (it1.hasNext()) {
                $add_16(list, it1.next_2());
            }
        }
        else {
            setCheck(list.array, list.array.length, e1);
        }
        if (instanceOf(e2, 77)) {
            it2 = e2.iterateSubExpressions();
            while (it2.hasNext()) {
                $add_16(list, it2.next_2());
            }
        }
        else {
            setCheck(list.array, list.array.length, e2);
        }
        exps = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, list.array.length, 0, 1);
        exps = dynamicCast($toArray(list, exps), 17);
        b = new Block;
        $setChildren(b, exps);
        return b;
    }
    else {
        exps = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [e1, e2]);
        b = new Block;
        $setChildren(b, exps);
        return b;
    }
}

function makeBlock_0(list){
    var b, exps;
    if (list.array.length == 0) {
        return new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
    }
    else if (list.array.length == 1) {
        return checkElementIndex(0, list.array.length) , dynamicCast(list.array[0], 6);
    }
    else {
        exps = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, list.array.length, 0, 1);
        exps = dynamicCast($toArray(list, exps), 17);
        b = new Block;
        $setChildren(b, exps);
        return b;
    }
}

defineClass(77, 39, {6:1, 77:1, 39:1, 49:1}, Block);
_.computeSpecialProperties = function computeSpecialProperties_21(){
    var allAxisExpressions, allChildAxis, allSubtreeAxis, axis_0, i_0, p_0;
    if (this.children.length == 0) {
        return 50266112;
    }
    p_0 = $createsNewNodes(this)?0:$intern_22;
    allAxisExpressions = true;
    allChildAxis = true;
    allSubtreeAxis = true;
    for (i_0 = 0; i_0 < this.children.length; i_0++) {
        if (!instanceOf(this.children[i_0], 52)) {
            allAxisExpressions = false;
            allChildAxis = false;
            allSubtreeAxis = false;
            break;
        }
        axis_0 = dynamicCast(this.children[i_0], 52).axis_0;
        axis_0 != 3 && (allChildAxis = false);
        ($clinit_Axis() , isSubtreeAxis)[axis_0] || (allSubtreeAxis = false);
    }
    if (allAxisExpressions) {
        p_0 |= 12648448;
        allChildAxis && (p_0 |= $intern_27);
        allSubtreeAxis && (p_0 |= $intern_28);
        this.children.length == 2 && dynamicCast(this.children[0], 52).axis_0 == 2 && dynamicCast(this.children[1], 52).axis_0 == 3 && (p_0 |= $intern_25);
    }
    return p_0;
}
;
_.createsNewNodes = function createsNewNodes_4(){
    return $createsNewNodes(this);
}
;
_.getCardinality = function getCardinality_1(){
    var c1, i_0;
    if (this.children.length == 0) {
        return $intern_17;
    }
    c1 = this.children[0].getCardinality();
    for (i_0 = 1; i_0 < this.children.length; i_0++) {
        c1 = sum_0(c1, this.children[i_0].getCardinality());
        if (c1 == $intern_12) {
            break;
        }
    }
    return c1;
}
;
_.getImplementationMethod = function getImplementationMethod_11(){
    return 6;
}
;
_.getItemType = function getItemType_39(){
    var i_0, t1;
    if (this.children.length == 0) {
        return $clinit_EmptySequenceTest() , $clinit_EmptySequenceTest() , THE_INSTANCE_8;
    }
    t1 = this.children[0].getItemType();
    for (i_0 = 1; i_0 < this.children.length; i_0++) {
        t1 = getCommonSuperType(t1, this.children[i_0].getItemType());
        if (instanceOf(t1, 159)) {
            return t1;
        }
    }
    return t1;
}
;
_.iterate_0 = function iterate_29(context){
    return this.children.length == 0?($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1):this.children.length == 1?this.children[0].iterate_0(context):new BlockIterator(this.children, context);
}
;
_.iterateSubExpressions = function iterateSubExpressions_11(){
    return new AbstractList$IteratorImpl(new Arrays$ArrayList(this.children));
}
;
_.optimize = function optimize_33(visitor, contextItemType){
    return $optimize_6(this, visitor, contextItemType);
}
;
_.processLeavingTail = function processLeavingTail_6(context){
    var e, i_0, tc;
    tc = null;
    for (i_0 = 0; i_0 < this.children.length; i_0++) {
        try {
            if (instanceOf(this.children[i_0], 49)) {
                tc = dynamicCast(this.children[i_0], 49).processLeavingTail(context);
            }
            else {
                this.children[i_0].process(context);
                tc = null;
            }
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                e = $e0;
                $maybeSetLocation(e, $getSourceLocator(this.children[i_0]));
                throw e;
            }
            else 
                throw unwrap($e0);
        }
    }
    return tc;
}
;
_.promoteInst = function promoteInst_4(offer){
    var c;
    for (c = 0; c < this.children.length; c++) {
        setCheck(this.children, c, $doPromotion(this, this.children[c], offer));
    }
}
;
_.simplify = function simplify_22(visitor){
    var allAtomic, c, c0, i_0, list, nested, result, values;
    allAtomic = true;
    nested = false;
    for (c0 = 0; c0 < this.children.length; c0++) {
        setCheck(this.children, c0, $simplify(visitor, this.children[c0]));
        isAtomic_0(this.children[c0]) || (allAtomic = false);
        instanceOf(this.children[c0], 77)?(nested = true):isEmptySequence(this.children[c0]) && (nested = true);
    }
    if (this.children.length == 1) {
        return this.children[0];
    }
    if (this.children.length == 0) {
        result = new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
        copyLocationInfo(this, result);
        return result;
    }
    if (nested) {
        list = new ArrayList_0(this.children.length * 2);
        $flatten(this, list);
        this.children = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, list.array.length, 0, 1);
        for (i_0 = 0; i_0 < this.children.length; i_0++) {
            setCheck(this.children, i_0, (checkElementIndex(i_0, list.array.length) , dynamicCast(list.array[i_0], 6)));
            $adoptChildExpression(this, this.children[i_0]);
        }
    }
    if (allAtomic) {
        values = initDim(Lclient_net_sf_saxon_ce_value_AtomicValue_2_classLit, $intern_3, 13, this.children.length, 0, 1);
        for (c = 0; c < this.children.length; c++) {
            setCheck(values, c, dynamicCast(dynamicCast(this.children[c], 9).value_0, 13));
        }
        result = makeLiteral(new SequenceExtent_1(values));
        copyLocationInfo(this, result);
        return result;
    }
    return this;
}
;
_.typeCheck = function typeCheck_41(visitor, contextItemType){
    return $typeCheck_4(this, visitor, contextItemType);
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_Block_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'Block', 77, Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit);
function BlockIterator(children, context){
    this.children = children;
    this.context = context;
}

defineClass(506, 1, $intern_18, BlockIterator);
_.getAnother = function getAnother_11(){
    return new BlockIterator(this.children, this.context);
}
;
_.next_0 = function next_8(){
    if (this.position_0 < 0) {
        return null;
    }
    while (true) {
        !this.child && (this.child = this.children[this.i++].iterate_0(this.context));
        this.current = this.child.next_0();
        if (this.current) {
            ++this.position_0;
            return this.current;
        }
        this.child = null;
        if (this.i >= this.children.length) {
            this.current = null;
            this.position_0 = -1;
            return null;
        }
    }
}
;
_.i = 0;
_.position_0 = 0;
var Lclient_net_sf_saxon_ce_expr_instruct_BlockIterator_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'BlockIterator', 506, Ljava_lang_Object_2_classLit);
function $process_0(this$static, context){
    var c2, t, tc;
    t = this$static.template;
    c2 = context.newContext();
    $setParameters_0(c2, t.numberOfSlots, assembleParams(context, this$static.actualParams), assembleTunnelParams(context, this$static.tunnelParams));
    tc = $expand_0(t, c2);
    while (tc) {
        tc = tc.processLeavingTail_0();
    }
}

function $processLeavingTail_0(this$static, context){
    var params, target, tunnels;
    if (!this$static.useTailRecursion) {
        $process_0(this$static, context);
        return null;
    }
    target = this$static.template;
    params = assembleParams(context, this$static.actualParams);
    tunnels = assembleTunnelParams(context, this$static.tunnelParams);
    !params && (params = ($clinit_ParameterSet() , EMPTY_PARAMETER_SET));
    fill_3(context.getStackFrame());
    return new CallTemplate$CallTemplatePackage(target, params, tunnels, context);
}

function $setActualParameters_1(this$static, actualParams, tunnelParams){
    var actualParam, actualParam$index, actualParam$max, tunnelParam, tunnelParam$index, tunnelParam$max;
    this$static.actualParams = actualParams;
    this$static.tunnelParams = tunnelParams;
    for (actualParam$index = 0 , actualParam$max = actualParams.length; actualParam$index < actualParam$max; ++actualParam$index) {
        actualParam = actualParams[actualParam$index];
        $adoptChildExpression(this$static, actualParam);
    }
    for (tunnelParam$index = 0 , tunnelParam$max = tunnelParams.length; tunnelParam$index < tunnelParam$max; ++tunnelParam$index) {
        tunnelParam = tunnelParams[tunnelParam$index];
        $adoptChildExpression(this$static, tunnelParam);
    }
}

function CallTemplate(template, useTailRecursion){
    Instruction.call(this);
    this.template = template;
    this.useTailRecursion = useTailRecursion;
}

defineClass(258, 39, {6:1, 258:1, 39:1, 49:1}, CallTemplate);
_.computeCardinality = function computeCardinality_31(){
    return !this.template?$intern_12:$getRequiredType(this.template).cardinality;
}
;
_.createsNewNodes = function createsNewNodes_5(){
    return true;
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_9(){
    return 127;
}
;
_.getItemType = function getItemType_40(){
    return !this.template?($clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2):$getRequiredType(this.template).primaryType;
}
;
_.iterateSubExpressions = function iterateSubExpressions_12(){
    var list;
    list = new ArrayList_0(10);
    getXPathExpressions(this.actualParams, list);
    getXPathExpressions(this.tunnelParams, list);
    return new AbstractList$IteratorImpl(list);
}
;
_.optimize = function optimize_34(visitor, contextItemType){
    optimize_51(visitor, this.actualParams, contextItemType);
    optimize_51(visitor, this.tunnelParams, contextItemType);
    return this;
}
;
_.process = function process_8(context){
    $process_0(this, context);
}
;
_.processLeavingTail = function processLeavingTail_7(context){
    return $processLeavingTail_0(this, context);
}
;
_.promoteInst = function promoteInst_5(offer){
    promoteParams(this, this.actualParams, offer);
    promoteParams(this, this.tunnelParams, offer);
}
;
_.simplify = function simplify_23(visitor){
    simplify_43(this.actualParams, visitor);
    simplify_43(this.tunnelParams, visitor);
    return this;
}
;
_.typeCheck = function typeCheck_42(visitor, contextItemType){
    var backwards, id_0, lp, p_0, req, role, select, wp;
    typeCheck_58(this.actualParams, visitor, contextItemType);
    typeCheck_58(this.tunnelParams, visitor, contextItemType);
    if (this.template.body_0) {
        backwards = visitor.staticContext.isInBackwardsCompatibleMode();
        for (p_0 = 0; p_0 < this.actualParams.length; p_0++) {
            wp = this.actualParams[p_0];
            id_0 = wp.parameterId;
            lp = $getLocalParam(this.template, id_0);
            if (lp) {
                req = lp.requiredType;
                role = new RoleLocator(8, $getDisplayName_0(wp.variableQName), p_0);
                select = staticTypeCheck_1(wp.select, req, backwards, role);
                $setSelectExpression(wp, select);
                wp.typeChecked = true;
            }
        }
    }
    return this;
}
;
_.actualParams = null;
_.template = null;
_.tunnelParams = null;
_.useTailRecursion = false;
var Lclient_net_sf_saxon_ce_expr_instruct_CallTemplate_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'CallTemplate', 258, Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit);
function $processLeavingTail_1(this$static){
    var c2;
    c2 = this$static.evaluationContext.newContext();
    $setParameters_0(c2, this$static.target_0.numberOfSlots, this$static.params, this$static.tunnelParams);
    return $expand_0(this$static.target_0, c2);
}

function $setEvaluationContext(this$static, evaluationContext){
    this$static.evaluationContext = evaluationContext;
}

function CallTemplate$CallTemplatePackage(template, params, tunnelParams, evaluationContext){
    this.target_0 = template;
    this.params = params;
    this.tunnelParams = tunnelParams;
    this.evaluationContext = evaluationContext;
}

defineClass(755, 1, {}, CallTemplate$CallTemplatePackage);
_.processLeavingTail_0 = function processLeavingTail_8(){
    return $processLeavingTail_1(this);
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_CallTemplate$CallTemplatePackage_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'CallTemplate/CallTemplatePackage', 755, Ljava_lang_Object_2_classLit);
function $choose(this$static, context){
    var b, e, i_0;
    for (i_0 = 0; i_0 < this$static.conditions.length; i_0++) {
        try {
            b = this$static.conditions[i_0].effectiveBooleanValue(context);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                e = $e0;
                $maybeSetLocation(e, $getSourceLocator(this$static.conditions[i_0]));
                throw e;
            }
            else 
                throw unwrap($e0);
        }
        if (b) {
            return i_0;
        }
    }
    return -1;
}

function $computeCardinality_0(this$static){
    var card, i_0, includesTrue;
    card = 0;
    includesTrue = false;
    for (i_0 = 0; i_0 < this$static.actions.length; i_0++) {
        card = union(card, this$static.actions[i_0].getCardinality());
        isConstantBoolean(this$static.conditions[i_0], true) && (includesTrue = true);
    }
    includesTrue || (card = union(card, $intern_17));
    return card;
}

function $computeSpecialProperties_2(this$static){
    var i_0, props;
    props = $getSpecialProperties(this$static.actions[0]);
    for (i_0 = 1; i_0 < this$static.actions.length; i_0++) {
        props &= $getSpecialProperties(this$static.actions[i_0]);
    }
    return props;
}

function $enterConditionTrace(this$static, i_0){
    var xlt;
    if (loggingIsEnabled() && isTraceEnabled && this$static.conditionTests != null) {
        xlt = traceListener;
        $enterChooseItem(xlt, this$static.conditionTests[i_0]);
    }
}

function $leaveConditionTrace(this$static, i_0){
    var xlt;
    if (loggingIsEnabled() && isTraceEnabled && this$static.conditionTests != null) {
        xlt = traceListener;
        $leaveChooseItem(xlt, this$static.conditionTests[i_0]);
    }
}

function Choose(conditions, actions){
    var i_0;
    Instruction.call(this);
    this.conditions = conditions;
    this.actions = actions;
    if (conditions.length != actions.length) {
        throw new IllegalArgumentException_0('Choose: unequal length arguments');
    }
    for (i_0 = 0; i_0 < conditions.length; i_0++) {
        $adoptChildExpression(this, conditions[i_0]);
        $adoptChildExpression(this, actions[i_0]);
    }
}

function makeConditional(condition, thenExp){
    var actions, conditions;
    conditions = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [condition]);
    actions = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [thenExp]);
    return new Choose(conditions, actions);
}

function makeConditional_0(condition, thenExp, elseExp){
    var actions, conditions;
    if (instanceOf(elseExp, 9) && instanceOf(dynamicCast(elseExp, 9).value_0, 141)) {
        conditions = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [condition]);
        actions = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [thenExp]);
        return new Choose(conditions, actions);
    }
    else {
        conditions = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [condition, new Literal(($clinit_BooleanValue() , TRUE_0))]);
        actions = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [thenExp, elseExp]);
        return new Choose(conditions, actions);
    }
}

defineClass(207, 39, {6:1, 207:1, 39:1, 49:1}, Choose);
_.computeCardinality = function computeCardinality_32(){
    return $computeCardinality_0(this);
}
;
_.computeSpecialProperties = function computeSpecialProperties_22(){
    return $computeSpecialProperties_2(this);
}
;
_.createsNewNodes = function createsNewNodes_6(){
    var action, action$array, action$index, action$max;
    for (action$array = this.actions , action$index = 0 , action$max = action$array.length; action$index < action$max; ++action$index) {
        action = action$array[action$index];
        action.staticProperties == -1 && (action.staticProperties = action.computeDependencies() | action.computeCardinality() | action.computeSpecialProperties());
        if ((action.staticProperties & $intern_11 & $intern_22) == 0) {
            return true;
        }
    }
    return false;
}
;
_.evaluateItem = function evaluateItem_31(context){
    var i_0;
    i_0 = $choose(this, context);
    return i_0 < 0?null:this.actions[i_0].evaluateItem(context);
}
;
_.getImplementationMethod = function getImplementationMethod_12(){
    var m;
    m = 6;
    this.staticProperties == -1 && (this.staticProperties = $computeDependencies(this) | $computeCardinality_0(this) | $computeSpecialProperties_2(this));
    (this.staticProperties & $intern_12 & $intern_14) != 0 || (m |= 1);
    return m;
}
;
_.getItemType = function getItemType_41(){
    var i_0, type_0;
    type_0 = this.actions[0].getItemType();
    for (i_0 = 1; i_0 < this.actions.length; i_0++) {
        type_0 = getCommonSuperType(type_0, this.actions[i_0].getItemType());
    }
    return type_0;
}
;
_.implementsStaticTypeCheck = function implementsStaticTypeCheck_1(){
    return true;
}
;
_.iterate_0 = function iterate_30(context){
    var i_0;
    i_0 = $choose(this, context);
    return i_0 < 0?($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1):this.actions[i_0].iterate_0(context);
}
;
_.iterateSubExpressions = function iterateSubExpressions_13(){
    var all;
    all = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, this.conditions.length * 2, 0, 1);
    arraycopy(this.conditions, 0, all, 0, this.conditions.length);
    arraycopy(this.actions, 0, all, this.conditions.length, this.conditions.length);
    return new AbstractList$IteratorImpl(new Arrays$ArrayList(all));
}
;
_.markTailFunctionCalls = function markTailFunctionCalls_3(qName, arity_0){
    var action, action$array, action$index, action$max, result;
    result = 0;
    for (action$array = this.actions , action$index = 0 , action$max = action$array.length; action$index < action$max; ++action$index) {
        action = action$array[action$index];
        result = max_1(result, action.markTailFunctionCalls(qName, arity_0));
    }
    return result;
}
;
_.optimize = function optimize_35(visitor, contextItemType){
    var ebv, err, i_0, i0;
    for (i0 = 0; i0 < this.conditions.length; i0++) {
        setCheck(this.conditions, i0, $optimize_1(visitor, this.conditions[i0], contextItemType));
        ebv = rewriteEffectiveBooleanValue(this.conditions[i0], visitor, contextItemType);
        if (!!ebv && ebv != this.conditions[i0]) {
            setCheck(this.conditions, i0, ebv);
            $adoptChildExpression(this, ebv);
        }
    }
    for (i_0 = 0; i_0 < this.actions.length; i_0++) {
        try {
            setCheck(this.actions, i_0, $optimize_1(visitor, this.actions[i_0], contextItemType));
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                err = $e0;
                if (err.isTypeError) {
                    throw err;
                }
                else {
                    setCheck(this.actions, i_0, new ErrorExpression(err));
                }
            }
            else 
                throw unwrap($e0);
        }
    }
    if (this.actions.length == 0) {
        return new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
    }
    return this;
}
;
_.processLeavingTail = function processLeavingTail_9(context){
    var i_0, tail;
    i_0 = $choose(this, context);
    if (i_0 >= 0) {
        $enterConditionTrace(this, i_0);
        if (instanceOf(this.actions[i_0], 49)) {
            tail = dynamicCast(this.actions[i_0], 49).processLeavingTail(context);
        }
        else {
            this.actions[i_0].process(context);
            tail = null;
        }
        $leaveConditionTrace(this, i_0);
        return tail;
    }
    return null;
}
;
_.promoteInst = function promoteInst_6(offer){
    var i_0, i0;
    if (offer.action == 13 || offer.action == 14) {
        for (i0 = 0; i0 < this.conditions.length; i0++) {
            setCheck(this.conditions, i0, $doPromotion(this, this.conditions[i0], offer));
        }
        for (i_0 = 0; i_0 < this.actions.length; i_0++) {
            setCheck(this.actions, i_0, $doPromotion(this, this.actions[i_0], offer));
        }
    }
    else {
        setCheck(this.conditions, 0, $doPromotion(this, this.conditions[0], offer));
    }
}
;
_.simplify = function simplify_24(visitor){
    var err, i_0;
    for (i_0 = 0; i_0 < this.conditions.length; i_0++) {
        setCheck(this.conditions, i_0, $simplify(visitor, this.conditions[i_0]));
        try {
            setCheck(this.actions, i_0, $simplify(visitor, this.actions[i_0]));
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                err = $e0;
                if (err.isTypeError) {
                    throw err;
                }
                else {
                    setCheck(this.actions, i_0, new ErrorExpression(err));
                }
            }
            else 
                throw unwrap($e0);
        }
    }
    return this;
}
;
_.staticTypeCheck = function staticTypeCheck_2(req, backwardsCompatible, role){
    var cond, err, i_0;
    for (i_0 = 0; i_0 < this.actions.length; i_0++) {
        setCheck(this.actions, i_0, staticTypeCheck_1(this.actions[i_0], req, backwardsCompatible, role));
    }
    if (!isConstantBoolean(this.conditions[this.conditions.length - 1], true) && (req.cardinality & $intern_17) == 0) {
        cond = this.conditions.length == 1?'the condition is not':'none of the conditions is';
        err = new XPathException_0('Conditional expression: If ' + cond + ' satisfied, an empty sequence will be returned, ' + 'but this is not allowed as the ' + $getMessage(role));
        $setErrorCode(err, role.errorCode);
        err.isTypeError = true;
        throw err;
    }
    return this;
}
;
_.toString$ = function toString_22(){
    var i_0, sb;
    sb = new FastStringBuffer(64);
    $append_3(sb, 'if (');
    for (i_0 = 0; i_0 < this.conditions.length; i_0++) {
        $append_3(sb, this.conditions[i_0].toString$());
        $append_3(sb, ') then (');
        $append_3(sb, this.actions[i_0].toString$());
        i_0 == this.conditions.length - 1?$append_3(sb, ')'):$append_3(sb, ') else if (');
    }
    return $condense(sb) , valueOf_3(sb.array, 0, sb.used);
}
;
_.typeCheck = function typeCheck_43(visitor, contextItemType){
    var err, i_0, i0;
    for (i0 = 0; i0 < this.conditions.length; i0++) {
        setCheck(this.conditions, i0, $typeCheck_1(visitor, this.conditions[i0], contextItemType));
        err = ebvError_0(this.conditions[i0]);
        if (err) {
            $setLocator(err, $getSourceLocator(this.conditions[i0]));
            throw err;
        }
    }
    for (i_0 = 0; i_0 < this.actions.length; i_0++) {
        try {
            setCheck(this.actions, i_0, $typeCheck_1(visitor, this.actions[i_0], contextItemType));
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                err = $e0;
                if (err.isStaticError) {
                    throw err;
                }
                else if (err.isTypeError) {
                    if (isEmptySequence(this.actions[i_0])) {
                        setCheck(this.actions, i_0, new ErrorExpression(err));
                    }
                    else {
                        throw err;
                    }
                }
                else {
                    setCheck(this.actions, i_0, new ErrorExpression(err));
                }
            }
            else 
                throw unwrap($e0);
        }
    }
    return this;
}
;
_.conditionTests = null;
var Lclient_net_sf_saxon_ce_expr_instruct_Choose_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'Choose', 207, Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit);
function $checkContent(comment){
    var hh;
    while (true) {
        hh = comment.indexOf('--');
        if (hh < 0)
            break;
        comment = comment.substr(0, hh + 1) + ' ' + __substr(comment, hh + 1, comment.length - (hh + 1));
    }
    comment.length > 0 && $charAt_1(comment, comment.length - 1) == 45 && (comment = comment + ' ');
    return comment;
}

function Comment_0(){
    SimpleNodeConstructor.call(this);
}

defineClass(756, 124, $intern_43, Comment_0);
_.checkContent = function checkContent_0(comment, context){
    return $checkContent(comment);
}
;
_.getCardinality = function getCardinality_2(){
    return $intern_21;
}
;
_.getItemType = function getItemType_42(){
    return $clinit_NodeKindTest() , COMMENT;
}
;
_.localTypeCheck = function localTypeCheck(visitor, contextItemType){
}
;
_.processValue = function processValue_0(value_0, context){
    var comment, out;
    comment = $checkContent(toString__Ljava_lang_String___devirtual$_0(value_0));
    out = context.getReceiver();
    out.comment_0(comment);
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_Comment_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'Comment', 756, Lclient_net_sf_saxon_ce_expr_instruct_SimpleNodeConstructor_2_classLit);
function $evaluateNameCode(this$static, context){
    var localName, nameValue, p_0, parts, prefix, prefixes, rawName, uri_0;
    nameValue = this$static.attributeName.evaluateItem(context);
    prefix = null;
    localName = null;
    uri_0 = null;
    if (instanceOf(nameValue, 12)) {
        rawName = nameValue.getStringValue();
        rawName = trimWhitespace(rawName);
        try {
            parts = getQNameParts(rawName);
            prefix = parts[0];
            localName = parts[1];
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 145)) {
                $dynamicError(this$static, 'Invalid attribute name: ' + rawName, 'XTDE0850');
            }
            else 
                throw unwrap($e0);
        }
        $equals_5(toString__Ljava_lang_String___devirtual$_0(rawName), 'xmlns') && !this$static.namespace && $dynamicError(this$static, 'Invalid attribute name: ' + rawName, 'XTDE0855');
        $equals_5(prefix, 'xmlns') && (!this$static.namespace?$dynamicError(this$static, 'Invalid attribute name: ' + rawName, 'XTDE0860'):(prefix = ''));
    }
    else {
        $typeError(this$static, null, 'Attribute name must be either a string or a QName', 'XPTY0004');
    }
    if (!this$static.namespace) {
        if (prefix.length == 0) {
            uri_0 = '';
        }
        else {
            uri_0 = $getURIForPrefix(this$static.nsContext, prefix, false);
            uri_0 == null && $dynamicError(this$static, 'Undeclared prefix in attribute name: ' + prefix, 'XTDE0860');
        }
    }
    else {
        uri_0 = toString__Ljava_lang_String___devirtual$_0(this$static.namespace.evaluateAsString(context));
        if (uri_0.length == 0) {
            prefix = '';
        }
        else {
            if (prefix.length == 0) {
                prefix = 'ns0';
                prefixes = new InscopeNamespaceResolver$1(this$static.nsContext);
                while ($hasNext_0(prefixes)) {
                    p_0 = $next_2(prefixes);
                    if ($equals_5($getURIForPrefix(this$static.nsContext, p_0, false), uri_0)) {
                        prefix = p_0;
                        break;
                    }
                }
            }
        }
    }
    $equals_5(uri_0, 'http://www.w3.org/2000/xmlns/') && $dynamicError(this$static, 'Cannot create attribute in namespace ' + uri_0, 'XTDE0835');
        return new StructuredQName(prefix, uri_0, localName);
}

function ComputedAttribute(attributeName, namespace, nsContext){
    AttributeCreator.call(this);
    this.attributeName = attributeName;
    this.namespace = namespace;
    this.nsContext = nsContext;
    $adoptChildExpression(this, attributeName);
    $adoptChildExpression(this, namespace);
}

defineClass(754, 458, $intern_43, ComputedAttribute);
_.computeSpecialProperties = function computeSpecialProperties_23(){
    return $intern_39;
}
;
_.evaluateNameCode = function evaluateNameCode_0(context){
    return $evaluateNameCode(this, context);
}
;
_.getCardinality = function getCardinality_3(){
    return $intern_21;
}
;
_.getItemType = function getItemType_43(){
    return $clinit_NodeKindTest() , ATTRIBUTE;
}
;
_.iterateSubExpressions = function iterateSubExpressions_14(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.select, this.attributeName, this.namespace]));
}
;
_.localTypeCheck = function localTypeCheck_0(visitor, contextItemType){
    var role, th;
    this.attributeName = $typeCheck_1(visitor, this.attributeName, contextItemType);
    $adoptChildExpression(this, this.attributeName);
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    $isSubType(th, this.attributeName.getItemType(), ($clinit_AtomicType() , STRING)) || (this.attributeName = makeSystemFunction('string', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.attributeName])));
    if (this.namespace) {
        $typeCheck_1(visitor, this.namespace, contextItemType);
        $adoptChildExpression(this, this.namespace);
        role = new RoleLocator(4, 'attribute/namespace', 0);
        this.namespace = staticTypeCheck_1(this.namespace, ($clinit_SequenceType() , SINGLE_STRING), false, role);
    }
}
;
_.optimize = function optimize_36(visitor, contextItemType){
    var context, exp_0, fa, nc;
    this.attributeName = $optimize_1(visitor, this.attributeName, contextItemType);
    !!this.namespace && (this.namespace = $optimize_1(visitor, this.namespace, contextItemType));
    exp_0 = (this.select = $optimize_1(visitor, this.select, contextItemType) , $adoptChildExpression(this, this.select) , this);
    if (exp_0 != this) {
        return exp_0;
    }
    if (instanceOf(this.attributeName, 9) && (!this.namespace || instanceOf(this.namespace, 9))) {
        context = new EarlyEvaluationContext(visitor.configuration);
        nc = $evaluateNameCode(this, context);
        fa = new FixedAttribute(nc);
        $setSelect(fa, this.select);
        return fa;
    }
    return this;
}
;
_.promoteInst = function promoteInst_7(offer){
    this.attributeName = $doPromotion(this, this.attributeName, offer);
    !!this.namespace && (this.namespace = $doPromotion(this, this.namespace, offer));
    !!this.select && (this.select = $doPromotion(this, this.select, offer));
}
;
_.simplify = function simplify_25(visitor){
    this.attributeName = $simplify(visitor, this.attributeName);
    this.namespace = $simplify(visitor, this.namespace);
    return this.select = $simplify(visitor, this.select) , this;
}
;
_.namespace = null;
var Lclient_net_sf_saxon_ce_expr_instruct_ComputedAttribute_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'ComputedAttribute', 754, Lclient_net_sf_saxon_ce_expr_instruct_AttributeCreator_2_classLit);
function $setBaseURI_0(this$static, uri_0){
    this$static.baseURI = uri_0;
}

function ParentNodeConstructor(){
    Instruction.call(this);
}

defineClass(456, 39, $intern_42);
_.computeCardinality = function computeCardinality_33(){
    return $intern_21;
}
;
_.createsNewNodes = function createsNewNodes_7(){
    return true;
}
;
_.getCardinality = function getCardinality_4(){
    return $intern_21;
}
;
_.iterateSubExpressions = function iterateSubExpressions_15(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.content_0]));
}
;
_.optimize = function optimize_37(visitor, contextItemType){
    return this.content_0 = $optimize_1(visitor, this.content_0, contextItemType) , instanceOf(this.content_0, 77) && (this.content_0 = $mergeAdjacentTextInstructions(dynamicCast(this.content_0, 77))) , $adoptChildExpression(this, this.content_0) , this;
}
;
_.promoteInst = function promoteInst_8(offer){
    offer.action != 13 && (this.content_0 = $doPromotion(this, this.content_0, offer));
}
;
_.simplify = function simplify_26(visitor){
    return this.content_0 = $simplify(visitor, this.content_0) , this;
}
;
_.typeCheck = function typeCheck_44(visitor, contextItemType){
    return this.content_0 = $typeCheck_1(visitor, this.content_0, contextItemType) , $adoptChildExpression(this, this.content_0) , this;
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_ParentNodeConstructor_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'ParentNodeConstructor', 456, Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit);
function $constructElement(this$static, context){
    var c2, controller, err, nameCode, pipe, properties, result, seq;
    try {
        controller = context.getController();
        c2 = context.newMinorContext();
        seq = new SequenceOutputter(1);
        pipe = $makePipelineConfiguration_0(controller);
        seq.pipelineConfiguration = pipe;
        nameCode = this$static.getNameCode(c2, null);
        c2.setTemporaryReceiver(seq);
        seq.systemId == null && $setSystemId_0(seq, this$static.getNewBaseURI(c2, null));
        seq.previousAtomic = false;
        properties = this$static.inheritNamespaces?0:128;
        $startElement_0(seq, nameCode, properties);
        this$static.outputNamespaceNodes(c2, seq, nameCode, null);
        this$static.content_0.process(c2);
        $endElement_0(seq);
        seq.previousAtomic = false;
        !!seq.outputter && $close(seq.outputter);
        result = dynamicCast(seq.list.array.length == 0?null:dynamicCast($get_1(seq.list, 0), 15), 7);
        seq.list = new ArrayList_0(max_1(seq.list.array.length + 10, 50));
        return result;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $maybeSetLocation(err, $getSourceLocator(this$static));
            throw err;
        }
        else 
            throw unwrap($e0);
    }
}

function $processLeavingTail_2(this$static, context, copiedNode){
    var e, nameCode, out, properties;
    try {
        nameCode = this$static.getNameCode(context, copiedNode);
        out = context.getReceiver();
        out.systemId == null && out.setSystemId(this$static.getNewBaseURI(context, copiedNode));
        properties = this$static.inheritNamespaces?0:128;
        out.startElement(nameCode, properties);
        this$static.outputNamespaceNodes(context, out, nameCode, copiedNode);
        this$static.content_0.process(context);
        out.endElement();
        return null;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            $maybeSetLocation(e, $getSourceLocator(this$static));
            throw e;
        }
        else 
            throw unwrap($e0);
    }
}

function ElementCreator(){
    ParentNodeConstructor.call(this);
}

defineClass(398, 456, $intern_42);
_.computeSpecialProperties = function computeSpecialProperties_24(){
    return $intern_39;
}
;
_.evaluateItem = function evaluateItem_32(context){
    return $constructElement(this, context);
}
;
_.getImplementationMethod = function getImplementationMethod_13(){
    return 5;
}
;
_.getItemType = function getItemType_44(){
    return $clinit_NodeKindTest() , ELEMENT;
}
;
_.processLeavingTail = function processLeavingTail_10(context){
    return $processLeavingTail_2(this, context, null);
}
;
_.inheritNamespaces = true;
var Lclient_net_sf_saxon_ce_expr_instruct_ElementCreator_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'ElementCreator', 398, Lclient_net_sf_saxon_ce_expr_instruct_ParentNodeConstructor_2_classLit);
function ComputedElement(elementName, namespace, nsContext, inheritNamespaces){
    ElementCreator.call(this);
    this.elementName = elementName;
    this.namespace = namespace;
    this.nsContext = nsContext;
    this.inheritNamespaces = inheritNamespaces;
    $adoptChildExpression(this, elementName);
    $adoptChildExpression(this, namespace);
    loggingIsEnabled() && isTraceEnabled && $AddTraceProperty(this, 'name', elementName);
}

defineClass(759, 398, $intern_42, ComputedElement);
_.getNameCode = function getNameCode(context, copiedNode){
    var err, localName, message, nameValue, parts, prefix, rawName, uri_0;
    prefix = null;
    localName = null;
    uri_0 = null;
    nameValue = dynamicCast(this.elementName.evaluateItem(context), 13);
    !nameValue && $dynamicError(this, 'Invalid element name (empty sequence)', 'XTDE0820');
    if (instanceOf(nameValue, 12)) {
        rawName = toString__Ljava_lang_String___devirtual$_0(nameValue.getPrimitiveStringValue());
        rawName = trimWhitespace(rawName);
        try {
            parts = getQNameParts(rawName);
            prefix = parts[0];
            localName = parts[1];
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 145)) {
                err = $e0;
                message = 'Invalid element name. ' + err.message_0;
                length__I__devirtual$(rawName) == 0 && (message = 'Supplied element name is a zero-length string');
                $dynamicError(this, message, 'XTDE0820');
            }
            else 
                throw unwrap($e0);
        }
    }
    else {
        $dynamicError(this, 'Computed element name has incorrect type', 'XTDE0820');
    }
    if (!this.namespace) {
        uri_0 = $getURIForPrefix(this.nsContext, prefix, true);
        uri_0 == null && $dynamicError(this, 'Undeclared prefix in element name: ' + prefix, 'XTDE0830');
    }
    else {
        uri_0 = toString__Ljava_lang_String___devirtual$_0(this.namespace.evaluateAsString(context));
        uri_0.length == 0 && (prefix = '');
        $equals_5(prefix, 'xmlns') && (prefix = 'x-xmlns');
    }
    $equals_5(uri_0, 'http://www.w3.org/2000/xmlns/') && $dynamicError(this, 'Cannot create element in namespace ' + uri_0, 'XTDE0835');
        if ($equals_5(uri_0, 'http://www.w3.org/XML/1998/namespace') != $equals_5(prefix, 'xml')) {
            $equals_5(prefix, 'xml')?(message = "When the prefix is 'xml', the namespace URI must be http://www.w3.org/XML/1998/namespace"):(message = "When the namespace URI is http://www.w3.org/XML/1998/namespace, the prefix must be 'xml'");
                $dynamicError(this, message, 'XTDE0835');
        }
        return new StructuredQName(prefix, uri_0, localName);
}
;
_.getNewBaseURI = function getNewBaseURI(context, copiedNode){
    return this.baseURI;
}
;
_.iterateSubExpressions = function iterateSubExpressions_16(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.content_0, this.elementName, this.namespace]));
}
;
_.optimize = function optimize_38(visitor, contextItemType){
    this.elementName = $optimize_1(visitor, this.elementName, contextItemType);
    return this.content_0 = $optimize_1(visitor, this.content_0, contextItemType) , instanceOf(this.content_0, 77) && (this.content_0 = $mergeAdjacentTextInstructions(dynamicCast(this.content_0, 77))) , $adoptChildExpression(this, this.content_0) , this;
}
;
_.outputNamespaceNodes = function outputNamespaceNodes(context, out, nameCode, copiedNode){
}
;
_.promoteInst = function promoteInst_9(offer){
    this.elementName = $doPromotion(this, this.elementName, offer);
    !!this.namespace && (this.namespace = $doPromotion(this, this.namespace, offer));
    offer.action != 13 && (this.content_0 = $doPromotion(this, this.content_0, offer));
}
;
_.simplify = function simplify_27(visitor){
    this.elementName = $simplify(visitor, this.elementName);
    this.namespace = $simplify(visitor, this.namespace);
    return this.content_0 = $simplify(visitor, this.content_0) , this;
}
;
_.typeCheck = function typeCheck_45(visitor, contextItemType){
    var code_0, e, parts, prefix, role, se, th, uri_0, val;
    this.elementName = $typeCheck_1(visitor, this.elementName, contextItemType);
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    $isSubType(th, this.elementName.getItemType(), ($clinit_AtomicType() , STRING)) || (this.elementName = makeSystemFunction('string', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.elementName])));
    if (this.namespace) {
        this.namespace = $typeCheck_1(visitor, this.namespace, contextItemType);
        role = new RoleLocator(4, 'element/namespace', 0);
        this.namespace = staticTypeCheck_1(this.namespace, ($clinit_SequenceType() , SINGLE_STRING), false, role);
    }
    if (isAtomic_0(this.elementName)) {
        try {
            val = dynamicCast(dynamicCast(this.elementName, 9).value_0, 13);
            if (instanceOf(val, 12)) {
                parts = checkQNameParts(toString__Ljava_lang_String___devirtual$_0(val.getPrimitiveStringValue()));
                if (!this.namespace) {
                    prefix = parts[0];
                    uri_0 = $getURIForPrefix(this.nsContext, prefix, true);
                    if (uri_0 == null) {
                        se = new XPathException_2('Prefix ' + prefix + ' has not been declared', 'XPST0081');
                        se.isStaticError = true;
                        throw se;
                    }
                    this.namespace = new StringLiteral_0(uri_0);
                }
            }
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                e = $e0;
                code_0 = !e.errorCode?null:$getLocalName_1(e.errorCode);
                code_0 == null || $equals_5(code_0, 'FORG0001')?(e.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTDE0820')):$equals_5(code_0, 'XPST0081') && (e.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTDE0830'));
                    $maybeSetLocation(e, $getSourceLocator(this));
                    e.isStaticError = true;
                    throw e;
            }
            else 
                throw unwrap($e0);
        }
    }
    return this.content_0 = $typeCheck_1(visitor, this.content_0, contextItemType) , $adoptChildExpression(this, this.content_0) , this;
}
;
_.namespace = null;
var Lclient_net_sf_saxon_ce_expr_instruct_ComputedElement_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'ComputedElement', 759, Lclient_net_sf_saxon_ce_expr_instruct_ElementCreator_2_classLit);
function Copy(select, copyNamespaces, inheritNamespaces){
    ElementCreator.call(this);
    this.copyNamespaces = copyNamespaces;
    this.inheritNamespaces = inheritNamespaces;
    this.select = select;
}

defineClass(757, 398, $intern_42, Copy);
_.evaluateItem = function evaluateItem_33(context){
    var c2, controller, item_0, pipe, seq;
    controller = context.getController();
    c2 = context.newMinorContext();
    seq = new SequenceOutputter(1);
    pipe = $makePipelineConfiguration_0(controller);
    seq.pipelineConfiguration = pipe;
    c2.setTemporaryReceiver(seq);
    $process(this, c2);
    seq.previousAtomic = false;
    !!seq.outputter && $close(seq.outputter);
    item_0 = seq.list.array.length == 0?null:dynamicCast($get_1(seq.list, 0), 15);
    seq.list = new ArrayList_0(max_1(seq.list.array.length + 10, 50));
    return item_0;
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_10(){
    return 2;
}
;
_.getItemType = function getItemType_45(){
    if (this.resultItemType) {
        return this.resultItemType;
    }
    else {
        this.resultItemType = this.select.getItemType();
        return this.resultItemType;
    }
}
;
_.getNameCode = function getNameCode_0(context, copiedNode){
    return copiedNode.getNodeName();
}
;
_.getNewBaseURI = function getNewBaseURI_0(context, copiedNode){
    return copiedNode.getBaseURI();
}
;
_.iterateSubExpressions = function iterateSubExpressions_17(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.select, this.content_0]));
}
;
_.optimize = function optimize_39(visitor, contextItemType){
    var exp_0;
    this.select = $optimize_1(visitor, this.select, contextItemType);
    exp_0 = (this.content_0 = $optimize_1(visitor, this.content_0, contextItemType) , instanceOf(this.content_0, 77) && (this.content_0 = $mergeAdjacentTextInstructions(dynamicCast(this.content_0, 77))) , $adoptChildExpression(this, this.content_0) , this);
    if (exp_0 == this) {
        !this.resultItemType && (this.resultItemType = this.select.getItemType());
        if (instanceOf(this.resultItemType, 43)) {
            return this.select;
        }
    }
    return exp_0;
}
;
_.outputNamespaceNodes = function outputNamespaceNodes_0(context, receiver, nameCode, copiedNode){
    this.copyNamespaces?sendNamespaces(copiedNode, receiver):receiver.namespace_0(new NamespaceBinding(valueOf_3(nameCode.content_0, nameCode.prefixStart, nameCode.content_0.length - nameCode.prefixStart), $getNamespaceURI(nameCode)), 0);
}
;
_.processLeavingTail = function processLeavingTail_11(context){
    var err, item_0, out, source;
    out = context.getReceiver();
    item_0 = this.select.evaluateItem(context);
    if (!instanceOf(item_0, 7)) {
        out.append(item_0, 2);
        return null;
    }
    source = dynamicCast(item_0, 7);
    switch (source.getNodeKind()) {
        case 1:
            return $processLeavingTail_2(this, context, dynamicCast(item_0, 7));
        case 2:
            try {
                context.getReceiver().attribute(source.getNodeName(), source.getStringValue());
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 255)) {
                    err = $e0;
                    throw dynamicError($getSourceLocator(this), err);
                }
                else 
                    throw unwrap($e0);
            }

            break;
        case 3:
            out.characters(source.getStringValue());
            break;
        case 7:
            out.processingInstruction(source.getDisplayName(), source.getStringValue());
            break;
        case 8:
            out.comment_0(source.getStringValue());
            break;
        case 13:
            try {
                source.copy(out, 0);
            }
            catch ($e1) {
                $e1 = wrap_0($e1);
                if (instanceOf($e1, 255)) {
                    err = $e1;
                    $dynamicError(this, err.message_0, !err.errorCode?null:$getLocalName_1(err.errorCode));
                }
                else 
                    throw unwrap($e1);
            }

            break;
        case 9:
            out.startDocument();
            this.content_0.process(context);
            out.endDocument();
            break;
        default:throw new IllegalArgumentException_0('Unknown node kind ' + source.getNodeKind());
    }
    return null;
}
;
_.simplify = function simplify_28(visitor){
    this.select = $simplify(visitor, this.select);
    return this.content_0 = $simplify(visitor, this.content_0) , this;
}
;
_.typeCheck = function typeCheck_46(visitor, contextItemType){
    var err, selectItemType;
    try {
        this.select = $typeCheck_1(visitor, this.select, contextItemType);
        $adoptChildExpression(this, this.select);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            if ($equals_5(!err.errorCode?null:$getLocalName_1(err.errorCode), 'XPDY0002')) {
                err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTTE0945');
                    $maybeSetLocation(err, $getSourceLocator(this));
            }
            this.select = new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
            throw err;
        }
        else 
            throw unwrap($e0);
    }
    selectItemType = this.select.getItemType();
    if (instanceOf(selectItemType, 67)) {
        switch (dynamicCast(selectItemType, 67).getRequiredNodeKind()) {
            case 1:
                this.resultItemType = ($clinit_NodeKindTest() , ELEMENT);
                break;
            case 2:
                this.resultItemType = ($clinit_NodeKindTest() , ATTRIBUTE);
                break;
            case 9:
                this.resultItemType = ($clinit_NodeKindTest() , DOCUMENT);
                break;
            default:this.resultItemType = selectItemType;
        }
    }
    else {
        this.resultItemType = selectItemType;
    }
    return this.content_0 = $typeCheck_1(visitor, this.content_0, contextItemType) , $adoptChildExpression(this, this.content_0) , this;
}
;
_.copyNamespaces = false;
var Lclient_net_sf_saxon_ce_expr_instruct_Copy_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'Copy', 757, Lclient_net_sf_saxon_ce_expr_instruct_ElementCreator_2_classLit);
function $computeNewBaseUri(this$static, source){
    var abs_0, newBaseUri, sbu, xmlBase, xmlBaseUri;
    xmlBase = getAttributeValue(source, 'http://www.w3.org/XML/1998/namespace', 'base');
        if (xmlBase != null) {
            try {
                xmlBaseUri = new URI_2(xmlBase);
                if (xmlBaseUri.m_scheme != null) {
                    newBaseUri = xmlBase;
                }
                else if (this$static.staticBaseUri != null) {
                    sbu = new URI_1(this$static.staticBaseUri);
                    abs_0 = new URI_0(sbu, $toString_1(xmlBaseUri));
                    newBaseUri = $toString_1(abs_0);
                }
                else {
                    newBaseUri = source.getBaseURI();
                }
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 51)) {
                    newBaseUri = source.getBaseURI();
                }
                else 
                    throw unwrap($e0);
            }
        }
        else {
            newBaseUri = source.getBaseURI();
        }
        return newBaseUri;
}

function $setStaticBaseUri(this$static, base){
    this$static.staticBaseUri = base;
}

function CopyOf(select, copyNamespaces){
    Instruction.call(this);
    this.select = select;
    this.copyNamespaces = copyNamespaces;
    $adoptChildExpression(this, select);
}

defineClass(758, 39, $intern_42, CopyOf);
_.createsNewNodes = function createsNewNodes_8(){
    return !instanceOf(this.select.getItemType(), 43);
}
;
_.getCardinality = function getCardinality_5(){
    return this.select.getCardinality();
}
;
_.getDependencies = function getDependencies_2(){
    return this.select.getDependencies();
}
;
_.getImplementationMethod = function getImplementationMethod_14(){
    return 4;
}
;
_.getItemType = function getItemType_46(){
    return this.select.getItemType();
}
;
_.iterateSubExpressions = function iterateSubExpressions_18(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.select]));
}
;
_.optimize = function optimize_40(visitor, contextItemType){
    this.select = $optimize_1(visitor, this.select, contextItemType);
    $adoptChildExpression(this, this.select);
    if (instanceOf(this.select.getItemType(), 43)) {
        return this.select;
    }
    return this;
}
;
_.processLeavingTail = function processLeavingTail_12(context){
    var copyBaseURI, copyOptions, err, item_0, iter, kind, out, source;
    out = context.getReceiver();
    copyBaseURI = out.systemId == null;
    copyOptions = 4;
    this.copyNamespaces && (copyOptions |= 2);
    iter = this.select.iterate_0(context);
    while (true) {
        item_0 = iter.next_0();
        if (!item_0) {
            break;
        }
        if (instanceOf(item_0, 7)) {
            source = dynamicCast(item_0, 7);
            kind = source.getNodeKind();
            switch (kind) {
                case 1:
                    {
                        copyBaseURI && out.setSystemId($computeNewBaseUri(this, source));
                        source.copy(out, copyOptions);
                        break;
                    }

                case 2:
                    try {
                        context.getReceiver().attribute(source.getNodeName(), source.getStringValue());
                    }
                    catch ($e0) {
                        $e0 = wrap_0($e0);
                        if (instanceOf($e0, 255)) {
                            err = $e0;
                            $dynamicError(this, err.message_0, !err.errorCode?null:$getLocalName_1(err.errorCode));
                        }
                        else 
                            throw unwrap($e0);
                    }

                    break;
                case 3:
                    out.characters(source.getStringValue());
                    break;
                case 7:
                    copyBaseURI && out.setSystemId(source.getBaseURI());
                    out.processingInstruction(source.getDisplayName(), source.getStringValue());
                    break;
                case 8:
                    out.comment_0(source.getStringValue());
                    break;
                case 13:
                    try {
                        source.copy(out, 0);
                    }
                    catch ($e1) {
                        $e1 = wrap_0($e1);
                        if (instanceOf($e1, 255)) {
                            err = $e1;
                            $dynamicError(this, err.message_0, !err.errorCode?null:$getLocalName_1(err.errorCode));
                        }
                        else 
                            throw unwrap($e1);
                    }

                    break;
                case 9:
                    {
                        out.setPipelineConfiguration(out.pipelineConfiguration);
                        copyBaseURI && out.setSystemId(source.getBaseURI());
                        source.copy(out, copyOptions);
                        break;
                    }

                default:throw new IllegalArgumentException_0('Unknown node kind ' + source.getNodeKind());
            }
        }
        else {
            out.append(item_0, 2);
        }
    }
    return null;
}
;
_.promoteInst = function promoteInst_10(offer){
    this.select = $doPromotion(this, this.select, offer);
}
;
_.simplify = function simplify_29(visitor){
    this.select = $simplify(visitor, this.select);
    return this;
}
;
_.typeCheck = function typeCheck_47(visitor, contextItemType){
    this.select = $typeCheck_1(visitor, this.select, contextItemType);
    $adoptChildExpression(this, this.select);
    return this;
}
;
_.copyNamespaces = false;
var Lclient_net_sf_saxon_ce_expr_instruct_CopyOf_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'CopyOf', 758, Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit);
function $getStringValueExpression(this$static){
    var cast, fn;
    if (this$static.textOnly) {
        if (this$static.constantText != null) {
            return new StringLiteral(new UntypedAtomicValue(this$static.constantText));
        }
        else if (instanceOf(this$static.content_0, 93)) {
            return new CastExpression(dynamicCast(this$static.content_0, 93).select, ($clinit_AtomicType() , UNTYPED_ATOMIC), true);
        }
        else {
            fn = dynamicCast(makeSystemFunction('string-join', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this$static.content_0, new StringLiteral(($clinit_StringValue() , EMPTY_STRING))])), 257);
            cast = new CastExpression(fn, ($clinit_AtomicType() , UNTYPED_ATOMIC), false);
            copyLocationInfo(this$static, cast);
            return cast;
        }
    }
    else {
        throw new AssertionError('getStringValueExpression() called on non-text-only document instruction');
    }
}

function DocumentInstr(textOnly, constantText, baseURI){
    ParentNodeConstructor.call(this);
    this.textOnly = textOnly;
    this.constantText = constantText;
    this.baseURI = baseURI;
}

defineClass(260, 456, {6:1, 260:1, 39:1, 49:1}, DocumentInstr);
_.evaluateItem = function evaluateItem_34(context){
    var builder, c2, controller, e, item_0, iter, out, pipe, root, sb, textValue;
    controller = context.getController();
    if (this.textOnly) {
        if (this.constantText != null) {
            textValue = this.constantText;
        }
        else {
            sb = new FastStringBuffer(64);
            iter = this.content_0.iterate_0(context);
            while (true) {
                item_0 = iter.next_0();
                if (!item_0)
                    break;
                $append_3(sb, item_0.getStringValue());
            }
            textValue = $condense(sb);
        }
        root = new TextFragmentValue(textValue, this.baseURI);
        $setConfiguration_3(dynamicCast(root, 412), controller.config);
    }
    else {
        try {
            c2 = context.newMinorContext();
            builder = new LinkedTreeBuilder;
            $setBaseURI(builder, this.baseURI);
            pipe = $makePipelineConfiguration_0(controller);
            builder.pipe = pipe;
            builder.config = pipe.config;
            c2.changeOutputDestination(builder, false);
            out = c2.getReceiver();
            out.open_1();
            out.startDocument();
            this.content_0.process(c2);
            out.endDocument();
            out.close_0();
            root = dynamicCast($getCurrentRoot(builder), 109);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                e = $e0;
                $maybeSetLocation(e, $getSourceLocator(this));
                throw e;
            }
            else 
                throw unwrap($e0);
        }
    }
    return root;
}
;
_.getImplementationMethod = function getImplementationMethod_15(){
    return 1;
}
;
_.getItemType = function getItemType_47(){
    return $clinit_NodeKindTest() , DOCUMENT;
}
;
_.processLeavingTail = function processLeavingTail_13(context){
    var out;
    out = context.getReceiver();
    out.startDocument();
    this.content_0.process(context);
    out.endDocument();
    return null;
}
;
_.simplify = function simplify_30(visitor){
    return this.content_0 = $simplify(visitor, this.content_0) , this;
}
;
_.textOnly = false;
var Lclient_net_sf_saxon_ce_expr_instruct_DocumentInstr_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'DocumentInstr', 260, Lclient_net_sf_saxon_ce_expr_instruct_ParentNodeConstructor_2_classLit);
function $addRequiredParam(this$static, qName){
    !this$static.requiredParams && (this$static.requiredParams = new HashSet_0(5));
    $add_17(this$static.requiredParams, qName);
}

function $checkAllRequiredParamsArePresent(this$static, params){
    var req, req$iterator;
    if (!this$static.requiredParams) {
        return;
    }
    for (req$iterator = $iterator(new AbstractMap$1(this$static.requiredParams.map_0)); $hasNext_2(req$iterator.val$outerIter2);) {
        req = dynamicCast($next_11(req$iterator), 8);
        if (!params || !$getEntry(params.hashCodeMap, req)) {
            throw new XPathException_2('No value supplied for required parameter ' + $getDisplayName_0(req), 'XTDE0050');
        }
    }
}

function $getDecimalFormatManager(this$static){
    !this$static.decimalFormatManager && (this$static.decimalFormatManager = new DecimalFormatManager);
    return this$static.decimalFormatManager;
}

function $getKeyManager(this$static){
    !this$static.keyManager && (this$static.keyManager = new KeyManager);
    return this$static.keyManager;
}

function $getNamedTemplate(this$static, qName){
    if (!this$static.namedTemplateTable) {
        return null;
    }
    return dynamicCast($get_0(this$static.namedTemplateTable, qName), 280);
}

function $getStripperRules(this$static){
    !this$static.stripperRules && (this$static.stripperRules = new StripSpaceRules);
    return this$static.stripperRules;
}

function $initializeBindery(this$static, bindery){
    $allocateGlobals(bindery, this$static.numberOfGlobals);
}

function $loadStylesheetModule(this$static, rawDoc){
    var commentStripper, doc, nodeFactory, nsReducer, pipe, startTagBuffer, styleBuilder, styleStripper, useWhenFilter;
    nodeFactory = new StyleNodeFactory;
    styleBuilder = new LinkedTreeBuilder;
    pipe = $makePipelineConfiguration(this$static.config);
    styleBuilder.pipe = pipe;
    styleBuilder.config = pipe.config;
    $setSystemId(styleBuilder, rawDoc.docWrapper.baseURI);
    styleBuilder.nodeFactory = nodeFactory;
    startTagBuffer = new StartTagBuffer;
    nsReducer = new NamespaceReducer;
    $setUnderlyingReceiver(nsReducer, startTagBuffer);
    useWhenFilter = new UseWhenFilter(startTagBuffer, nsReducer);
    $setUnderlyingReceiver(useWhenFilter, styleBuilder);
    $setUnderlyingReceiver(startTagBuffer, useWhenFilter);
    styleStripper = new StylesheetStripper;
    $setUnderlyingReceiver(styleStripper, nsReducer);
    commentStripper = new CommentStripper;
    $setUnderlyingReceiver(commentStripper, styleStripper);
    $setPipelineConfiguration_0(commentStripper, pipe);
    $open(commentStripper);
    copy_12(rawDoc, commentStripper, 2);
    commentStripper.nextReceiver.close_0();
    doc = dynamicCast($getCurrentRoot(styleBuilder), 148);
    styleBuilder.pipe = null;
    styleBuilder.config = null;
    styleBuilder.systemId = null;
    styleBuilder.baseURI = null;
    styleBuilder.currentRoot = null;
    styleBuilder.currentNode = null;
    styleBuilder.nodeFactory = null;
    styleBuilder.depth = 0;
    styleBuilder.allocateSequenceNumbers = true;
    styleBuilder.nextNodeNumber = 1;
    return doc;
}

function $newTransformer(this$static){
    var c;
    c = new Controller_0(this$static.config, this$static);
    c.executable = this$static;
    return c;
}

function $prepare(this$static, doc){
    var e, message;
    message = '';
    try {
        $setStylesheetDocument(this$static, $loadStylesheetModule(this$static, doc));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            this$static.errorCount == 0 && ++this$static.errorCount;
            message = e.message_0 + '. ';
        }
        else 
            throw unwrap($e0);
    }
    if (this$static.errorCount > 0) {
        throw new XPathException_0('Failed to compile stylesheet. ' + message + this$static.errorCount + (this$static.errorCount == 1?' error ':' errors ') + 'detected.');
    }
}

function $putNamedTemplate(this$static, templateName, template){
    !this$static.namedTemplateTable && (this$static.namedTemplateTable = new HashMap_0(32));
    $put_0(this$static.namedTemplateTable, templateName, template);
}

function $reportError(this$static, err){
    if (!err.hasBeenReported) {
        ++this$static.errorCount;
        $error(this$static.config.errorListener, err);
        err.hasBeenReported = true;
    }
}

function $setFunctionLibrary(this$static, functionLibrary){
    this$static.functionLibrary = functionLibrary;
}

function $setStylesheetDocument(this$static, doc){
    var psm, styleDoc, top_0, topnode;
    styleDoc = doc;
    topnode = dynamicCast(doc.documentElement_0, 11);
    if (!topnode) {
        throw new XPathException_0('Failed to parse stylesheet');
    }
    instanceOf(topnode, 174) && (styleDoc = $makeStylesheet(dynamicCast(topnode, 174), this$static));
    if (!instanceOf(styleDoc.documentElement_0, 61)) {
        throw new XPathException_0('Outermost element of stylesheet is not xsl:stylesheet or xsl:transform or literal result element');
    }
    top_0 = dynamicCast(styleDoc.documentElement_0, 61);
    $compareTo_5($getEffectiveVersion(top_0), ($clinit_DecimalValue() , TWO)) != 0 && $issueWarning(this$static.config, 'Running an XSLT ' + $getEffectiveVersion(top_0) + ' stylesheet with an XSLT 2.0 processor');
    psm = new PrincipalStylesheetModule(top_0);
    psm.preparedStylesheet = this$static;
    !top_0.attributeList?null:$getValue_0(top_0.attributeList, '', 'version');
    psm.functionLibrary = new FunctionLibraryList;
    $addFunctionLibrary(psm.functionLibrary, ($clinit_SystemFunctionLibrary() , $get_0(THE_INSTANCES, valueOf(3)) == null && $put_0(THE_INSTANCES, valueOf(3), new SystemFunctionLibrary(3)) , dynamicCast($get_0(THE_INSTANCES, valueOf(3)), 284)));
    $addFunctionLibrary(psm.functionLibrary, new StylesheetFunctionLibrary(psm, true));
    $addFunctionLibrary(psm.functionLibrary, ($clinit_ConstructorFunctionLibrary() , $clinit_ConstructorFunctionLibrary() , THE_INSTANCE_3));
    $addFunctionLibrary(psm.functionLibrary, new IXSLFunctionLibrary);
    $addFunctionLibrary(psm.functionLibrary, new StylesheetFunctionLibrary(psm, false));
    psm.functionLibrary;
    $setFunctionLibrary(this$static, psm.functionLibrary);
    top_0.principalStylesheetModule = psm;
    top_0.exec_0 = psm.preparedStylesheet;
    $preprocess(psm);
    $compileStylesheet(psm);
}

function Executable(config){
    this.ruleManager = new RuleManager;
    this.config = config;
}

defineClass(272, 1, {}, Executable);
_.createsSecondaryResult = false;
_.errorCount = 0;
_.numberOfGlobals = 0;
_.requiredParams = null;
var Lclient_net_sf_saxon_ce_expr_instruct_Executable_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'Executable', 272, Ljava_lang_Object_2_classLit);
function $setSelect(this$static, select){
    this$static.select = select;
    $adoptChildExpression(this$static, select);
    if ($equals_0(this$static.nameCode, ($clinit_StructuredQName() , XML_ID))) {
        select = makeSystemFunction('normalize-space', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [select]));
        this$static.select = select;
        $adoptChildExpression(this$static, select);
    }
}

function FixedAttribute(nameCode){
    AttributeCreator.call(this);
    this.nameCode = nameCode;
}

defineClass(399, 458, $intern_43, FixedAttribute);
_.evaluateNameCode = function evaluateNameCode_1(context){
    return this.nameCode;
}
;
_.getCardinality = function getCardinality_6(){
    return $intern_21;
}
;
_.getItemType = function getItemType_48(){
    return $clinit_NodeKindTest() , ATTRIBUTE;
}
;
_.localTypeCheck = function localTypeCheck_1(visitor, contextItemType){
}
;
_.setSelect = function setSelect_0(select, config){
    $setSelect(this, select);
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_FixedAttribute_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'FixedAttribute', 399, Lclient_net_sf_saxon_ce_expr_instruct_AttributeCreator_2_classLit);
function FixedElement(nameCode, namespaceCodes, inheritNamespaces){
    ElementCreator.call(this);
    this.nameCode = nameCode;
    this.namespaceCodes = namespaceCodes;
    this.inheritNamespaces = inheritNamespaces;
}

defineClass(457, 398, $intern_42, FixedElement);
_.getNameCode = function getNameCode_1(context, copiedNode){
    return this.nameCode;
}
;
_.getNewBaseURI = function getNewBaseURI_1(context, copiedNode){
    return this.baseURI;
}
;
_.outputNamespaceNodes = function outputNamespaceNodes_1(context, out, nameCode, copiedNode){
    var namespaceCode, namespaceCode$array, namespaceCode$index, namespaceCode$max;
    if (this.namespaceCodes != null) {
        for (namespaceCode$array = this.namespaceCodes , namespaceCode$index = 0 , namespaceCode$max = namespaceCode$array.length; namespaceCode$index < namespaceCode$max; ++namespaceCode$index) {
            namespaceCode = namespaceCode$array[namespaceCode$index];
            out.namespace_0(namespaceCode, 0);
        }
    }
}
;
_.namespaceCodes = null;
var Lclient_net_sf_saxon_ce_expr_instruct_FixedElement_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'FixedElement', 457, Lclient_net_sf_saxon_ce_expr_instruct_ElementCreator_2_classLit);
function ForEach(select, action, containsTailCall){
    Instruction.call(this);
    this.select = select;
    this.action = action;
    this.containsTailCall = containsTailCall;
    $adoptChildExpression(this, select);
    $adoptChildExpression(this, action);
}

defineClass(404, 39, $intern_42, ForEach);
_.computeDependencies = function computeDependencies_4(){
    var dependencies;
    dependencies = 0;
    dependencies |= this.select.getDependencies();
    dependencies |= this.action.getDependencies() & -31;
    return dependencies;
}
;
_.createsNewNodes = function createsNewNodes_9(){
    var props;
    props = $getSpecialProperties(this.action);
    return (props & $intern_22) == 0;
}
;
_.getImplementationMethod = function getImplementationMethod_16(){
    return 6;
}
;
_.getItemType = function getItemType_49(){
    return this.action.getItemType();
}
;
_.hasLoopingSubexpression = function hasLoopingSubexpression_6(child){
    return child == this.action;
}
;
_.iterate_0 = function iterate_31(context){
    var c2, master;
    master = this.select.iterate_0(context);
    c2 = context.newContext();
    c2.currentTemplate = null;
    c2.setCurrentIterator(master);
    master = new ContextMappingIterator(this, c2);
    return master;
}
;
_.iterateSubExpressions = function iterateSubExpressions_19(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.select, this.action]));
}
;
_.map_1 = function map_4(context){
    return this.action.iterate_0(context);
}
;
_.optimize = function optimize_41(visitor, contextItemType){
    var e2, offer;
    $clinit_TypeHierarchy();
    this.select = $optimize_1(visitor, this.select, contextItemType);
    $adoptChildExpression(this, this.select);
    this.action = this.action.optimize(visitor, this.select.getItemType());
    $adoptChildExpression(this, this.action);
    if (isEmptySequence(this.select)) {
        return this.select;
    }
    if (isEmptySequence(this.action)) {
        return this.action;
    }
    offer = new PromotionOffer;
    offer.action = 10;
    offer.promoteDocumentDependent = ($getSpecialProperties(this.select) & $intern_34) != 0;
    offer.promoteXSLTFunctions = false;
    offer.containingExpression = this;
    offer.bindingList = initDim(Lclient_net_sf_saxon_ce_expr_Binding_2_classLit, $intern_1, 126, 0, 0, 1);
    this.action = $doPromotion(this, this.action, offer);
    instanceOf(offer.containingExpression, 86) && (offer.containingExpression = $optimize_1(visitor, offer.containingExpression, contextItemType));
    e2 = offer.containingExpression;
    if (e2 != this) {
        return e2;
    }
    return this;
}
;
_.processLeavingTail = function processLeavingTail_14(context){
    var c2, focus_0, item_0, iter, listener, tc;
    iter = this.select.iterate_0(context);
    c2 = context.newContext();
    focus_0 = c2.setCurrentIterator(iter);
    c2.currentTemplate = null;
    if (this.containsTailCall) {
        if (loggingIsEnabled() && isTraceEnabled) {
            listener = traceListener;
            item_0 = $next_3(focus_0);
            if (!item_0) {
                return null;
            }
            $startCurrentItem(listener, item_0);
            tc = dynamicCast(this.action, 49).processLeavingTail(c2);
            $endCurrentItem(listener, item_0);
            return tc;
        }
        else {
            item_0 = $next_3(focus_0);
            if (!item_0) {
                return null;
            }
        }
        return dynamicCast(this.action, 49).processLeavingTail(c2);
    }
    else {
        if (loggingIsEnabled() && isTraceEnabled) {
            listener = traceListener;
            while (true) {
                item_0 = $next_3(focus_0);
                if (!item_0) {
                    break;
                }
                $startCurrentItem(listener, item_0);
                this.action.process(c2);
                $endCurrentItem(listener, item_0);
            }
        }
        else {
            while (true) {
                item_0 = $next_3(focus_0);
                if (!item_0) {
                    break;
                }
                this.action.process(c2);
            }
        }
    }
    return null;
}
;
_.promoteInst = function promoteInst_11(offer){
    this.select = $doPromotion(this, this.select, offer);
}
;
_.simplify = function simplify_31(visitor){
    this.select = $simplify(visitor, this.select);
    this.action = $simplify(visitor, this.action);
    return this;
}
;
_.typeCheck = function typeCheck_48(visitor, contextItemType){
    $clinit_TypeHierarchy();
    this.select = $typeCheck_1(visitor, this.select, contextItemType);
    $adoptChildExpression(this, this.select);
    this.action = $typeCheck_1(visitor, this.action, this.select.getItemType());
    $adoptChildExpression(this, this.action);
    if (isEmptySequence(this.select)) {
        return this.select;
    }
    if (isEmptySequence(this.action)) {
        return this.action;
    }
    return this;
}
;
_.containsTailCall = false;
var Lclient_net_sf_saxon_ce_expr_instruct_ForEach_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'ForEach', 404, Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit);
function $adoptChildExpressions(this$static){
    $adoptChildExpression(this$static, this$static.select);
    $adoptChildExpression(this$static, this$static.action);
    $adoptChildExpression(this$static, this$static.key);
    $adoptChildExpression(this$static, this$static.collationNameExpression);
}

function $getCollator(this$static, context){
    var cname, collationURI, collationValue;
    if (this$static.collationNameExpression) {
        collationValue = dynamicCast(this$static.collationNameExpression.evaluateItem(context), 12);
        cname = dynamicCastToString(collationValue.value_0 = toString__Ljava_lang_String___devirtual$_0(collationValue.value_0));
        try {
            collationURI = new URI_2(cname);
            if (collationURI.m_scheme == null) {
                this$static.baseURI == null && $dynamicError(this$static, "Cannot resolve relative collation URI '" + cname + "': unknown or invalid base URI", 'XTDE1110');
                collationURI = new URI_0(new URI_1(this$static.baseURI), $toString_1(collationURI));
                cname = $toString_1(collationURI);
            }
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 51)) {
                $dynamicError(this$static, "Collation name '" + cname + "' is not a valid URI", 'XTDE1110');
            }
            else 
                throw unwrap($e0);
        }
        return $getNamedCollation((context.getConfiguration() , cname));
    }
    else {
        return $clinit_CodepointCollator() , $clinit_CodepointCollator() , theInstance_0;
    }
}

function $getGroupIterator(this$static, context){
    var c2, comps, groupIterator, population, s, xpc;
    population = this$static.select.iterate_0(context);
    switch (this$static.algorithm) {
        case 0:
            {
                c2 = context.newMinorContext();
                c2.setCurrentIterator(population);
                groupIterator = new GroupByIterator(population, this$static.key, c2, $getCollator(this$static, context));
                break;
            }

        case 1:
            {
                groupIterator = new GroupAdjacentIterator(population, this$static.key, context, $getCollator(this$static, context));
                break;
            }

        case 2:
            groupIterator = new GroupStartingIterator(population, dynamicCast(this$static.key, 193).pattern, context);
            break;
        case 3:
            groupIterator = new GroupEndingIterator(population, dynamicCast(this$static.key, 193).pattern, context);
            break;
        default:throw new AssertionError('Unknown grouping algorithm');
    }
    if (this$static.sortKeys != null) {
        comps = this$static.sortComparators;
        xpc = context.newMinorContext();
        if (comps == null) {
            comps = initDim(Lclient_net_sf_saxon_ce_expr_sort_AtomicComparer_2_classLit, $intern_1, 167, this$static.sortKeys.length, 0, 1);
            for (s = 0; s < this$static.sortKeys.length; s++) {
                setCheck(comps, s, $makeComparator(this$static.sortKeys[s], xpc));
            }
        }
        groupIterator = new SortedGroupIterator(xpc, groupIterator, this$static, comps);
    }
    return groupIterator;
}

function ForEachGroup(select, action, algorithm, key, collationNameExpression, baseURI, sortKeys){
    Instruction.call(this);
    this.select = select;
    this.action = action;
    this.select = select;
    this.action = action;
    this.algorithm = algorithm;
    this.key = key;
    this.collationNameExpression = collationNameExpression;
    this.baseURI = baseURI;
    this.sortKeys = sortKeys;
    $adoptChildExpressions(this);
}

defineClass(760, 39, $intern_42, ForEachGroup);
_.computeDependencies = function computeDependencies_5(){
    var dependencies, e, i_0, skd, skd$array, skd$index, skd$max;
    dependencies = 0;
    dependencies |= this.select.getDependencies();
    dependencies |= this.key.getDependencies() & -31;
    dependencies |= this.action.getDependencies() & -63;
    if (this.sortKeys != null) {
        for (skd$array = this.sortKeys , skd$index = 0 , skd$max = skd$array.length; skd$index < skd$max; ++skd$index) {
            skd = skd$array[skd$index];
            dependencies |= skd.sortKey.getDependencies() & -31;
            for (i_0 = 0; i_0 < 6; i_0++) {
                e = skd.sortProperties[i_0];
                !!e && !instanceOf(e, 9) && (dependencies |= e.getDependencies());
            }
        }
    }
    !!this.collationNameExpression && (dependencies |= this.collationNameExpression.getDependencies());
    return dependencies;
}
;
_.createsNewNodes = function createsNewNodes_10(){
    var props;
    props = $getSpecialProperties(this.action);
    return (props & $intern_22) == 0;
}
;
_.evaluateSortKey = function evaluateSortKey(n, c){
    return this.sortKeys[n].sortKey.evaluateItem(c);
}
;
_.getItemType = function getItemType_50(){
    return this.action.getItemType();
}
;
_.hasLoopingSubexpression = function hasLoopingSubexpression_7(child){
    return child == this.action || child == this.key;
}
;
_.iterate_0 = function iterate_32(context){
    var c2, master;
    master = $getGroupIterator(this, context);
    c2 = context.newContext();
    c2.setCurrentIterator(master);
    c2.currentGroupIterator = master;
    c2.currentTemplate = null;
    return new ContextMappingIterator(this, c2);
}
;
_.iterateSubExpressions = function iterateSubExpressions_20(){
    var e, i_0, list, skd, skd$array, skd$index, skd$max;
    list = new ArrayList_0(8);
    $add_16(list, this.select);
    $add_16(list, this.action);
    $add_16(list, this.key);
    !!this.collationNameExpression && $add_16(list, this.collationNameExpression);
    if (this.sortKeys != null) {
        for (skd$array = this.sortKeys , skd$index = 0 , skd$max = skd$array.length; skd$index < skd$max; ++skd$index) {
            skd = skd$array[skd$index];
            $add_16(list, skd.sortKey);
            for (i_0 = 0; i_0 < 6; i_0++) {
                e = skd.sortProperties[i_0];
                !!e && (setCheck(list.array, list.array.length, e) , true);
            }
        }
    }
    return new AbstractList$IteratorImpl(list);
}
;
_.map_1 = function map_5(context){
    return this.action.iterate_0(context);
}
;
_.optimize = function optimize_42(visitor, contextItemType){
    var selectedItemType, skd, skd$array, skd$index, skd$max, sortKey;
    $clinit_TypeHierarchy();
    this.select = $optimize_1(visitor, this.select, contextItemType);
    this.action = this.action.optimize(visitor, this.select.getItemType());
    this.key = this.key.optimize(visitor, this.select.getItemType());
    $adoptChildExpression(this, this.select);
    $adoptChildExpression(this, this.action);
    $adoptChildExpression(this, this.key);
    if (isEmptySequence(this.select)) {
        return this.select;
    }
    if (isEmptySequence(this.action)) {
        return this.action;
    }
    selectedItemType = this.select.getItemType();
    if (this.sortKeys != null) {
        for (skd$array = this.sortKeys , skd$index = 0 , skd$max = skd$array.length; skd$index < skd$max; ++skd$index) {
            skd = skd$array[skd$index];
            sortKey = skd.sortKey;
            sortKey = $optimize_1(visitor, sortKey, selectedItemType);
            skd.sortKey = sortKey;
        }
    }
    return this;
}
;
_.processLeavingTail = function processLeavingTail_15(context){
    var c2, focus_0, groupIterator, item_0, listener;
    groupIterator = $getGroupIterator(this, context);
    c2 = context.newContext();
    focus_0 = c2.setCurrentIterator(groupIterator);
    c2.currentGroupIterator = groupIterator;
    c2.currentTemplate = null;
    if (loggingIsEnabled() && isTraceEnabled) {
        listener = traceListener;
        while (true) {
            item_0 = $next_3(focus_0);
            if (!item_0) {
                break;
            }
            $startCurrentItem(listener, item_0);
            this.action.process(c2);
            $endCurrentItem(listener, item_0);
        }
    }
    else {
        while (true) {
            item_0 = $next_3(focus_0);
            if (!item_0) {
                break;
            }
            this.action.process(c2);
        }
    }
    return null;
}
;
_.promoteInst = function promoteInst_12(offer){
    this.select = $doPromotion(this, this.select, offer);
}
;
_.simplify = function simplify_32(visitor){
    this.select = $simplify(visitor, this.select);
    this.action = $simplify(visitor, this.action);
    this.key = $simplify(visitor, this.key);
    this.collationNameExpression = $simplify(visitor, this.collationNameExpression);
    $adoptChildExpressions(this);
    return this;
}
;
_.typeCheck = function typeCheck_49(visitor, contextItemType){
    var allFixed, comp, i_0, role, selectedItemType, skd, skd$array, skd$index, skd$max, sortKey;
    this.select = $typeCheck_1(visitor, this.select, contextItemType);
    selectedItemType = this.select.getItemType();
    this.action = $typeCheck_1(visitor, this.action, selectedItemType);
    this.key = $typeCheck_1(visitor, this.key, selectedItemType);
    this.collationNameExpression = $typeCheck_1(visitor, this.collationNameExpression, contextItemType);
    $adoptChildExpressions(this);
    if (this.sortKeys != null) {
        allFixed = true;
        for (skd$array = this.sortKeys , skd$index = 0 , skd$max = skd$array.length; skd$index < skd$max; ++skd$index) {
            skd = skd$array[skd$index];
            sortKey = skd.sortKey;
            sortKey = $typeCheck_1(visitor, sortKey, selectedItemType);
            if (visitor.staticContext.isInBackwardsCompatibleMode()) {
                sortKey = new FirstItemExpression(sortKey);
            }
            else {
                role = new RoleLocator(4, 'xsl:sort/select', 0);
                role.errorCode = 'XTTE1020';
                sortKey = makeCardinalityChecker(sortKey, $intern_20, role);
            }
            skd.sortKey = sortKey;
            if ($isFixed(skd)) {
                comp = $makeComparator(skd, new EarlyEvaluationContext(visitor.configuration));
                skd.finalComparator = comp;
            }
            else {
                allFixed = false;
            }
        }
        if (allFixed) {
            this.sortComparators = initDim(Lclient_net_sf_saxon_ce_expr_sort_AtomicComparer_2_classLit, $intern_1, 167, this.sortKeys.length, 0, 1);
            for (i_0 = 0; i_0 < this.sortKeys.length; i_0++) {
                setCheck(this.sortComparators, i_0, this.sortKeys[i_0].finalComparator);
            }
        }
    }
    return this;
}
;
_.algorithm = 0;
_.sortComparators = null;
_.sortKeys = null;
var Lclient_net_sf_saxon_ce_expr_instruct_ForEachGroup_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'ForEachGroup', 760, Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit);
function $getSelectValue(this$static, context){
    if (!this$static.select) {
        throw new AssertionError('*** No select expression!!');
    }
    else {
        return evaluate(this$static.select, this$static.evaluationMode, context);
    }
}

function $init(this$static, select, qName){
    this$static.select = select;
    this$static.variableQName = qName;
    $adoptChildExpression(this$static, select);
}

function $setImplicitlyRequiredParam(this$static, requiredParam){
    requiredParam?(this$static.properties = narrow_byte(this$static.properties | 16)):(this$static.properties = narrow_byte(this$static.properties & -17));
}

function $setRequiredParam(this$static, requiredParam){
    requiredParam?(this$static.properties = narrow_byte(this$static.properties | 4)):(this$static.properties = narrow_byte(this$static.properties & -5));
}

function $setRequiredType_0(this$static, required){
    this$static.requiredType = required;
}

function $setSelectExpression(this$static, select){
    this$static.select = select;
    this$static.evaluationMode = -1;
    $adoptChildExpression(this$static, select);
}

function $setSlotNumber_1(this$static, s){
    this$static.slotNumber = s;
}

function $setTunnel(this$static, tunnel){
    tunnel?(this$static.properties = narrow_byte(this$static.properties | 8)):(this$static.properties = narrow_byte(this$static.properties & -9));
}

function $setVariableQName_0(this$static, s){
    this$static.variableQName = s;
}

function GeneralVariable(){
    Instruction.call(this);
}

defineClass(173, 39, $intern_45);
_.evaluateItem = function evaluateItem_35(context){
    return $process(this, context) , null;
}
;
_.getCardinality = function getCardinality_7(){
    return $intern_17;
}
;
_.getItemType = function getItemType_51(){
    return $clinit_EmptySequenceTest() , $clinit_EmptySequenceTest() , THE_INSTANCE_8;
}
;
_.getLocalSlotNumber = function getLocalSlotNumber_0(){
    return this.slotNumber;
}
;
_.getRequiredType = function getRequiredType_0(){
    return this.requiredType;
}
;
_.getVariableQName = function getVariableQName_0(){
    return this.variableQName;
}
;
_.isGlobal = function isGlobal_0(){
    return false;
}
;
_.iterate_0 = function iterate_33(context){
    $process(this, context);
    return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
}
;
_.iterateSubExpressions = function iterateSubExpressions_21(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.select]));
}
;
_.optimize = function optimize_43(visitor, contextItemType){
    if (this.select) {
        this.select = $optimize_1(visitor, this.select, contextItemType);
        $adoptChildExpression(this, this.select);
        this.evaluationMode = lazyEvaluationMode(this.select);
    }
    return this;
}
;
_.promoteInst = function promoteInst_13(offer){
    var e2;
    if (this.select) {
        e2 = $doPromotion(this, this.select, offer);
        if (e2 != this.select) {
            this.select = e2;
            this.evaluationMode = lazyEvaluationMode(this.select);
        }
    }
}
;
_.simplify = function simplify_33(visitor){
    !!this.select && (this.select = $simplify(visitor, this.select));
    return this;
}
;
_.typeCheck = function typeCheck_50(visitor, contextItemType){
    var role, r;
    if (this.select) {
        this.select = $typeCheck_1(visitor, this.select, contextItemType);
        $adoptChildExpression(this, this.select);
    }
    role = new RoleLocator(3, this.variableQName, 0);
    r = this.requiredType;
    !!r && !!this.select && (this.select = staticTypeCheck_1(this.select, this.requiredType, false, role));
    return this;
}
;
_.evaluationMode = -1;
_.properties = 0;
_.select = null;
_.slotNumber = 0;
var Lclient_net_sf_saxon_ce_expr_instruct_GeneralVariable_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'GeneralVariable', 173, Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit);
function $actuallyEvaluate(this$static, context){
    var b, controller, err, go, value_0, slot;
    controller = context.getController();
    b = controller.bindery;
    try {
        go = $setExecuting(b, this$static);
        if (!go) {
            return $getGlobalVariable(b, this$static.slotNumber);
        }
        value_0 = $getSelectValue_0(this$static, context);
        return $saveGlobalVariableValue(b, this$static, value_0);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            slot = this$static.slotNumber;
            b.busy[slot] = false;
            if (instanceOf(err, 365)) {
                err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTDE0640');
                    $setLocator(err, $getSourceLocator(this$static));
                    throw err;
            }
            else {
                throw err;
            }
        }
        else 
            throw unwrap($e0);
    }
}

function $getSelectValue_0(this$static, context){
    var c2;
    if (!this$static.select) {
        throw new AssertionError('*** No select expression for global variable $' + $getDisplayName_0(this$static.variableQName) + '!!');
    }
    else {
        c2 = context.newCleanContext();
        c2.setSingletonFocus(c2.getController().contextForGlobalVariables);
        this$static.numberOfSlots != 0 && $openStackFrame(c2, this$static.numberOfSlots);
        return evaluate(this$static.select, this$static.evaluationMode, c2);
    }
}

function $setContainsLocals(this$static, numberOfSlots){
    this$static.numberOfSlots = numberOfSlots;
}

function $setExecutable_0(this$static, executable){
    this$static.executable = executable;
}

function GlobalVariable(){
    GeneralVariable.call(this);
}

defineClass(230, 173, {126:1, 28:1, 6:1, 173:1, 230:1, 39:1, 49:1}, GlobalVariable);
_.evaluateVariable = function evaluateVariable_2(context){
    var b, controller, v;
    controller = context.getController();
    b = controller.bindery;
    v = $getGlobalVariable(b, this.slotNumber);
    return v?v:$actuallyEvaluate(this, context);
}
;
_.getContainerGranularity = function getContainerGranularity_0(){
    return 2;
}
;
_.getExecutable = function getExecutable_1(){
    return this.executable;
}
;
_.isGlobal = function isGlobal_1(){
    return true;
}
;
_.processLeavingTail = function processLeavingTail_16(context){
    return null;
}
;
_.numberOfSlots = 0;
var Lclient_net_sf_saxon_ce_expr_instruct_GlobalVariable_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'GlobalVariable', 230, Lclient_net_sf_saxon_ce_expr_instruct_GeneralVariable_2_classLit);
function GlobalParam(){
    GlobalVariable.call(this);
}

defineClass(306, 230, {126:1, 28:1, 6:1, 173:1, 306:1, 230:1, 39:1, 49:1}, GlobalParam);
_.evaluateVariable = function evaluateVariable_3(context){
    var b, controller, e, val, wasSupplied;
    controller = context.getController();
    b = controller.bindery;
    try {
        wasSupplied = $useGlobalParameter(b, this.variableQName, this.slotNumber, this.requiredType, context);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            $maybeSetLocation(e, $getSourceLocator(this));
            throw e;
        }
        else 
            throw unwrap($e0);
    }
    val = $getGlobalVariable(b, this.slotNumber);
    if (wasSupplied || !!val) {
        return val;
    }
    else {
        (this.properties & 4) != 0?$dynamicError(this, 'No value supplied for required global parameter $' + $getDisplayName_0(this.variableQName), 'XTDE0050'):(this.properties & 16) != 0 && $dynamicError(this, 'A value must be supplied for global parameter $' + $getDisplayName_0(this.variableQName) + ' because there is no default value for the required type', 'XTDE0610');
        return $actuallyEvaluate(this, context);
    }
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_GlobalParam_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'GlobalParam', 306, Lclient_net_sf_saxon_ce_expr_instruct_GlobalVariable_2_classLit);
function $setConversion(this$static, convertor){
    this$static.conversion = convertor;
    !!convertor && (this$static.conversionEvaluationMode = eagerEvaluationMode(this$static.conversion));
}

function $setParameterId(this$static, id_0){
    this$static.parameterId = id_0;
}

function LocalParam(){
    GeneralVariable.call(this);
}

defineClass(231, 173, {126:1, 6:1, 173:1, 39:1, 231:1, 49:1}, LocalParam);
_.evaluateVariable = function evaluateVariable_4(c){
    return c.evaluateLocalVariable(this.slotNumber);
}
;
_.iterateSubExpressions = function iterateSubExpressions_22(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.select, this.conversion]));
}
;
_.processLeavingTail = function processLeavingTail_17(context){
    var checked, index_0, name_0, params, val;
    params = (this.properties & 8) != 0?context.getTunnelParameters():context.getLocalParameters();
    index_0 = !params?-1:$getIndex(params, this.parameterId);
    if (index_0 < 0) {
        if ((this.properties & 16) != 0) {
            name_0 = '$' + $getDisplayName_0(this.variableQName);
            throw new XPathException_2('A value must be supplied for parameter ' + name_0 + ' because ' + 'the default value is not a valid instance of the required type', 'XTDE0610');
        }
        else if ((this.properties & 4) != 0) {
            name_0 = '$' + $getDisplayName_0(this.variableQName);
            throw new XPathException_2('No value supplied for required parameter ' + name_0, 'XTDE0700');
        }
        context.setLocalVariable(this.slotNumber, $getSelectValue(this, context));
    }
    else {
        val = params.values[index_0];
        context.setLocalVariable(this.slotNumber, val);
        checked = params.typeChecked[index_0];
        !checked && !!this.conversion && context.setLocalVariable(this.slotNumber, evaluate(this.conversion, this.conversionEvaluationMode, context));
    }
    return null;
}
;
_.conversion = null;
_.conversionEvaluationMode = -1;
_.parameterId = 0;
var Lclient_net_sf_saxon_ce_expr_instruct_LocalParam_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'LocalParam', 231, Lclient_net_sf_saxon_ce_expr_instruct_GeneralVariable_2_classLit);
function LocalVariable(){
    GeneralVariable.call(this);
}

defineClass(789, 173, $intern_45, LocalVariable);
_.evaluateVariable = function evaluateVariable_5(c){
    throw new UnsupportedOperationException_0('LocalVariable');
}
;
_.processLeavingTail = function processLeavingTail_18(context){
    throw new UnsupportedOperationException_0('LocalVariable');
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_LocalVariable_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'LocalVariable', 789, Lclient_net_sf_saxon_ce_expr_instruct_GeneralVariable_2_classLit);
function $clinit_Message(){
    $clinit_Message = emptyMethod;
    logger_2 = (new LoggerImplRegular , $ensureLogger(getLogManager(), 'Message'));
}

function Message(select, terminate){
    $clinit_Message();
    Instruction.call(this);
    this.terminate = terminate;
    this.select = select;
    $adoptChildExpression(this, terminate);
    $adoptChildExpression(this, select);
}

defineClass(764, 39, $intern_42, Message);
_.createsNewNodes = function createsNewNodes_11(){
    return true;
}
;
_.getCardinality = function getCardinality_8(){
    return $intern_20;
}
;
_.getItemType = function getItemType_52(){
    return $clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2;
}
;
_.iterateSubExpressions = function iterateSubExpressions_23(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.select, this.terminate]));
}
;
_.optimize = function optimize_44(visitor, contextItemType){
    this.select = $optimize_1(visitor, this.select, contextItemType);
    $adoptChildExpression(this, this.select);
    if (this.terminate) {
        this.terminate = $optimize_1(visitor, this.terminate, contextItemType);
        $adoptChildExpression(this, this.terminate);
    }
    return this;
}
;
_.processLeavingTail = function processLeavingTail_19(context){
    var abort, item_0, iter, message, sb, term;
    iter = this.select.iterate_0(context);
    sb = new FastStringBuffer(64);
    item_0 = iter.next_0();
    if (item_0) {
        while (true) {
            $append_3(sb, item_0.getStringValue());
            item_0 = iter.next_0();
            if (!item_0) {
                break;
            }
            $ensureCapacity_0(sb, 1);
            sb.array[sb.used++] = 32;
        }
    }
    message = ($condense(sb) , valueOf_3(sb.array, 0, sb.used));
    abort = false;
    if (this.terminate) {
        term = toString__Ljava_lang_String___devirtual$_0(this.terminate.evaluateAsString(context));
        if ($equals_5(term, 'no'))
            ;
        else if ($equals_5(term, 'yes')) {
            abort = true;
        }
        else {
            throw new XPathException_2("The terminate attribute of xsl:message must be 'yes' or 'no'", 'XTDE0030');
        }
    }
    $log_1(logger_2, ($clinit_Level() , INFO), message);
    if (abort) {
        throw new TerminationException('Processing terminated by xsl:message in ' + abbreviatePath(!this.sourceLocator?null:this.sourceLocator.getSystemId()));
    }
    return null;
}
;
_.promoteInst = function promoteInst_14(offer){
    !!this.select && (this.select = $doPromotion(this, this.select, offer));
    !!this.terminate && (this.terminate = $doPromotion(this, this.terminate, offer));
}
;
_.simplify = function simplify_34(visitor){
    this.select = $simplify(visitor, this.select);
    this.terminate = $simplify(visitor, this.terminate);
    return this;
}
;
_.typeCheck = function typeCheck_51(visitor, contextItemType){
    this.select = $typeCheck_1(visitor, this.select, contextItemType);
    $adoptChildExpression(this, this.select);
    if (this.terminate) {
        this.terminate = $typeCheck_1(visitor, this.terminate, contextItemType);
        $adoptChildExpression(this, this.terminate);
    }
    return this;
}
;
var logger_2;
var Lclient_net_sf_saxon_ce_expr_instruct_Message_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'Message', 764, Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit);
function $checkPrefixAndUri(this$static, prefix, uri_0){
    $equals_5(prefix, 'xml') != $equals_5(uri_0, 'http://www.w3.org/XML/1998/namespace') && $dynamicError(this$static, "Namespace prefix 'xml' and namespace uri http://www.w3.org/XML/1998/namespace must only be used together", 'XTDE0925');
        uri_0.length == 0 && $dynamicError(this$static, 'Namespace URI is an empty string', 'XTDE0930');
        $equals_5(uri_0, 'http://www.w3.org/2000/xmlns/') && $dynamicError(this$static, 'A namespace node cannot have the reserved namespace http://www.w3.org/2000/xmlns/', 'XTDE0935');
}

function $evaluatePrefix(this$static, context){
    var prefix;
    prefix = trim_0(this$static.name_0.evaluateAsString(context));
    prefix.length == 0 || isValidNCName(prefix) || $dynamicError(this$static, 'Namespace prefix is invalid: ' + prefix, 'XTDE0920');
    $equals_5(prefix, 'xmlns') && $dynamicError(this$static, "Namespace prefix 'xmlns' is not allowed", 'XTDE0920');
    return prefix;
}

function NamespaceConstructor(name_0){
    SimpleNodeConstructor.call(this);
    this.name_0 = name_0;
    $adoptChildExpression(this, name_0);
}

defineClass(766, 124, $intern_43, NamespaceConstructor);
_.evaluateItem = function evaluateItem_36(context){
    var node, prefix, uri_0;
    node = $evaluateItem_3(this, context);
    prefix = !node.qName?'':$getLocalName_1(node.qName);
    uri_0 = toString__Ljava_lang_String___devirtual$_0(node.stringValue);
    $checkPrefixAndUri(this, prefix, uri_0);
    return node;
}
;
_.evaluateNameCode = function evaluateNameCode_2(context){
    var prefix;
    prefix = $evaluatePrefix(this, context);
    return new StructuredQName('', '', prefix);
}
;
_.getCardinality = function getCardinality_9(){
    return $intern_21;
}
;
_.getItemType = function getItemType_53(){
    return $clinit_NodeKindTest() , NAMESPACE;
}
;
_.iterateSubExpressions = function iterateSubExpressions_24(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.select, this.name_0]));
}
;
_.localTypeCheck = function localTypeCheck_2(visitor, contextItemType){
    this.name_0 = $typeCheck_1(visitor, this.name_0, contextItemType);
}
;
_.processValue = function processValue_1(value_0, context){
    var out, prefix, uri_0;
    prefix = $evaluatePrefix(this, context);
    uri_0 = toString__Ljava_lang_String___devirtual$_0(value_0);
    $checkPrefixAndUri(this, prefix, uri_0);
    out = context.getReceiver();
    out.namespace_0(new NamespaceBinding(prefix, uri_0), 32);
}
;
_.promoteInst = function promoteInst_15(offer){
    !!this.select && (this.select = $doPromotion(this, this.select, offer));
    this.name_0 = $doPromotion(this, this.name_0, offer);
    !!this.select && (this.select = $doPromotion(this, this.select, offer));
}
;
_.simplify = function simplify_35(visitor){
    this.name_0 = $simplify(visitor, this.name_0);
    return this.select = $simplify(visitor, this.select) , this;
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_NamespaceConstructor_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'NamespaceConstructor', 766, Lclient_net_sf_saxon_ce_expr_instruct_SimpleNodeConstructor_2_classLit);
function $iterateSubExpressions(this$static){
    var i_0, sub_0;
    sub_0 = new ArrayList_0(9);
    for (i_0 = 0; i_0 < 8; i_0++) {
        !!this$static.arguments_0[i_0] && $add_16(sub_0, this$static.arguments_0[i_0]);
    }
    !!this$static.count && $add_16(sub_0, new PatternSponsor(this$static.count));
    !!this$static.from && $add_16(sub_0, new PatternSponsor(this$static.from));
    return new AbstractList$IteratorImpl(sub_0);
}

function NumberInstruction(select, level, count, from, value_0, format, groupSize, groupSeparator, letterValue, ordinal, lang_0, formatter, numberer, hasVariablesInPatterns, backwardsCompatible){
    var child, kids;
    this.arguments_0 = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, 8, 0, 1);
    setCheck(this.arguments_0, 0, select);
    this.level_0 = level;
    this.count = count;
    this.from = from;
    setCheck(this.arguments_0, 1, value_0);
    setCheck(this.arguments_0, 2, format);
    setCheck(this.arguments_0, 3, groupSize);
    setCheck(this.arguments_0, 4, groupSeparator);
    setCheck(this.arguments_0, 5, letterValue);
    setCheck(this.arguments_0, 6, ordinal);
    setCheck(this.arguments_0, 7, lang_0);
    this.formatter = formatter;
    this.numberer = numberer;
    this.hasVariablesInPatterns = hasVariablesInPatterns;
    this.backwardsCompatible = backwardsCompatible;
    $clinit_TypeHierarchy();
    !!this.arguments_0[1] && !instanceOf(this.arguments_0[1].getItemType(), 43) && setCheck(this.arguments_0, 1, new Atomizer(this.arguments_0[1]));
    kids = $iterateSubExpressions(this);
    while (kids.i < kids.this$01_0.size_1()) {
        child = (checkCriticalElement(kids.i < kids.this$01_0.size_1()) , dynamicCast(kids.this$01_0.get_1(kids.last = kids.i++), 6));
        $adoptChildExpression(this, child);
    }
}

defineClass(765, 6, {6:1}, NumberInstruction);
_.computeCardinality = function computeCardinality_34(){
    return $intern_21;
}
;
_.evaluateItem = function evaluateItem_37(context){
    var err, g, gpseparator, gpsize, i_0, item_0, iter, language, letterVal, nf, num, numb, ordinalVal, s, source, val, value_0, vec;
    value_0 = {l:$intern_46, m:$intern_46, h:$intern_47};
    vec = null;
    if (this.arguments_0[1]) {
        iter = this.arguments_0[1].iterate_0(context);
        vec = new ArrayList_0(4);
        while (true) {
            val = dynamicCast(iter.next_0(), 13);
            if (!val) {
                break;
            }
            if (this.backwardsCompatible && !vec.isEmpty()) {
                break;
            }
            try {
                instanceOf(val, 25)?(num = dynamicCast(val, 25)):(num = convert(val));
                if (num.isNaN_0()) {
                    throw new XPathException_0('NaN');
                }
                num = num.round_0();
                if (num.signum() >= 0) {
                    i_0 = fromInt(dynamicCast(num.convert(($clinit_AtomicType() , INTEGER)).asAtomic(), 25).intValue());
                    vec.add_3(valueOf_0(i_0));
                }
                else {
                    if (num.compareTo(($clinit_IntegerValue() , ZERO_2)) < 0) {
                        throw new XPathException_0('The numbers to be formatted must not be negative');
                    }
                    i_0 = fromInt(dynamicCast(num.convert(($clinit_AtomicType() , INTEGER)).asAtomic(), 25).intValue());
                    vec.add_3(valueOf_0(i_0));
                }
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 4)) {
                    err = $e0;
                    if (this.backwardsCompatible) {
                        vec.add_3('NaN');
                    }
                    else {
                        vec.add_3(toString__Ljava_lang_String___devirtual$_0(val.getPrimitiveStringValue()));
                        throw new XPathException_2('Cannot convert supplied value to an integer. ' + err.message_0, 'XTDE0980');
                    }
                }
                else 
                    throw unwrap($e0);
            }
        }
        this.backwardsCompatible && vec.isEmpty() && vec.add_3('NaN');
    }
    else {
        if (this.arguments_0[0]) {
            source = dynamicCast(this.arguments_0[0].evaluateItem(context), 7);
        }
        else {
            item_0 = context.getContextItem();
            if (!instanceOf(item_0, 7)) {
                err = new XPathException_2('context item for xsl:number must be a node', 'XTTE0990');
                err.isTypeError = true;
                throw err;
            }
            source = dynamicCast(item_0, 7);
        }
        if (this.level_0 == 3) {
            value_0 = fromInt(getNumberSimple(source));
        }
        else if (this.level_0 == 0) {
            value_0 = fromInt(getNumberSingle(source, this.count, this.from, context));
            eq(value_0, {l:0, m:0, h:0}) && (vec = ($clinit_Collections() , EMPTY_LIST));
        }
        else if (this.level_0 == 2) {
            value_0 = fromInt(getNumberAny(this, source, this.count, this.from, context, this.hasVariablesInPatterns));
            eq(value_0, {l:0, m:0, h:0}) && (vec = ($clinit_Collections() , EMPTY_LIST));
        }
        else 
            this.level_0 == 1 && (vec = getNumberMulti(source, this.count, this.from, context));
    }
    gpsize = 0;
    gpseparator = '';
    ordinalVal = null;
    if (this.arguments_0[3]) {
        g = toString__Ljava_lang_String___devirtual$_0(this.arguments_0[3].evaluateAsString(context));
        try {
            gpsize = __parseAndValidateInt(g, 10);
        }
        catch ($e1) {
            $e1 = wrap_0($e1);
            if (instanceOf($e1, 57)) {
                throw new XPathException_2('grouping-size must be numeric', 'XTDE0030');
            }
            else 
                throw unwrap($e1);
        }
    }
    !!this.arguments_0[4] && (gpseparator = toString__Ljava_lang_String___devirtual$_0(this.arguments_0[4].evaluateAsString(context)));
    !!this.arguments_0[6] && (ordinalVal = toString__Ljava_lang_String___devirtual$_0(this.arguments_0[6].evaluateAsString(context)));
    if (!vec && !this.arguments_0[2] && gpsize == 0 && !this.arguments_0[7]) {
        return new StringValue_0('' + toString_77(value_0));
    }
    numb = this.numberer;
    if (!numb) {
        language = toString__Ljava_lang_String___devirtual$_0(this.arguments_0[7].evaluateAsString(context));
        $clinit_StringValue();
        if (!$matches_1(language, '[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*')) {
            throw new XPathException_2('The lang attribute of xsl:number must be a valid language code', 'XTDE0030');
        }
        numb = new Numberer_en;
    }
    if (!this.arguments_0[5]) {
        letterVal = '';
    }
    else {
        letterVal = toString__Ljava_lang_String___devirtual$_0(this.arguments_0[5].evaluateAsString(context));
        if (!($equals_5('alphabetic', letterVal) || $equals_5('traditional', letterVal))) {
            throw new XPathException_2('letter-value must be "traditional" or "alphabetic"', 'XTDE0030');
        }
    }
    if (!vec) {
        vec = new ArrayList_0(1);
        vec.add_3(valueOf_0(value_0));
    }
    if (!this.formatter) {
        nf = new NumberFormatter;
        $prepare_0(nf, toString__Ljava_lang_String___devirtual$_0(this.arguments_0[2].evaluateAsString(context)));
    }
    else {
        nf = this.formatter;
    }
    s = $format_0(nf, vec, gpsize, gpseparator, letterVal, ordinalVal, numb);
    return new StringValue_0(s);
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_11(){
    return !this.arguments_0[0] && !this.arguments_0[1]?2:0;
}
;
_.getItemType = function getItemType_54(){
    return $clinit_AtomicType() , STRING;
}
;
_.iterateSubExpressions = function iterateSubExpressions_25(){
    return $iterateSubExpressions(this);
}
;
_.optimize = function optimize_45(visitor, contextItemType){
    var i_0;
    for (i_0 = 0; i_0 < 8; i_0++) {
        setCheck(this.arguments_0, i_0, $optimize_1(visitor, this.arguments_0[i_0], contextItemType));
    }
    return this;
}
;
_.promote = function promote_15(offer, parent_0){
    var exp_0, i_0;
    exp_0 = $accept(offer, this);
    if (exp_0) {
        return exp_0;
    }
    else {
        for (i_0 = 0; i_0 < 8; i_0++) {
            !!this.arguments_0[i_0] && setCheck(this.arguments_0, i_0, $doPromotion(this, this.arguments_0[i_0], offer));
        }
        !!this.count && this.count.promote_1(offer, this);
        !!this.from && this.from.promote_1(offer, this);
        return this;
    }
}
;
_.simplify = function simplify_36(visitor){
    var i_0;
    for (i_0 = 0; i_0 < 8; i_0++) {
        setCheck(this.arguments_0, i_0, $simplify(visitor, this.arguments_0[i_0]));
    }
    !!this.count && (this.count = this.count.simplify_0(visitor));
    !!this.from && (this.from = this.from.simplify_0(visitor));
    return this;
}
;
_.typeCheck = function typeCheck_52(visitor, contextItemType){
    var err, i_0;
    if (!this.arguments_0[0] && !this.arguments_0[1]) {
        err = null;
        !contextItemType?(err = new XPathException_0('xsl:number requires a select attribute, a value attribute, or a context item')):instanceOf(contextItemType, 43) && (err = new XPathException_0('xsl:number requires the context item to be a node, but it is an atomic value'));
        if (err) {
            err.isTypeError = true;
            err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTTE0990');
                $setLocator(err, $getSourceLocator(this));
                throw err;
        }
    }
    for (i_0 = 0; i_0 < 8; i_0++) {
        setCheck(this.arguments_0, i_0, $typeCheck_1(visitor, this.arguments_0[i_0], contextItemType));
    }
    !!this.count && $typeCheck_1(visitor, new PatternSponsor(this.count), contextItemType);
    !!this.from && $typeCheck_1(visitor, new PatternSponsor(this.from), contextItemType);
    return this;
}
;
_.backwardsCompatible = false;
_.count = null;
_.formatter = null;
_.from = null;
_.hasVariablesInPatterns = false;
_.level_0 = 0;
_.numberer = null;
var Lclient_net_sf_saxon_ce_expr_instruct_NumberInstruction_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'NumberInstruction', 765, Lclient_net_sf_saxon_ce_expr_Expression_2_classLit);
function $clinit_ParameterSet(){
    $clinit_ParameterSet = emptyMethod;
    EMPTY_PARAMETER_SET = new ParameterSet_0(0);
}

function $getIndex(this$static, id_0){
    var i_0;
    for (i_0 = 0; i_0 < this$static.used; i_0++) {
        if (this$static.keys_0[i_0] == id_0) {
            return i_0;
        }
    }
    return -1;
}

function $put(this$static, id_0, value_0, checked){
    var i_0, newChecked, newkeys, newlength, newvalues;
    for (i_0 = 0; i_0 < this$static.used; i_0++) {
        if (this$static.keys_0[i_0] == id_0) {
            setCheck(this$static.values, i_0, value_0);
            this$static.typeChecked[i_0] = checked;
            return;
        }
    }
    if (this$static.used + 1 > this$static.keys_0.length) {
        newlength = this$static.used <= 5?10:this$static.used * 2;
        newkeys = initDim(I_classLit, $intern_4, 0, newlength, 7, 1);
        newChecked = initDim(Z_classLit, $intern_9, 0, newlength, 8, 1);
        newvalues = initDim(Lclient_net_sf_saxon_ce_om_Sequence_2_classLit, $intern_1, 14, newlength, 0, 1);
        arraycopy(this$static.values, 0, newvalues, 0, this$static.used);
        arraycopy(this$static.keys_0, 0, newkeys, 0, this$static.used);
        arraycopy(this$static.typeChecked, 0, newChecked, 0, this$static.used);
        this$static.values = newvalues;
        this$static.keys_0 = newkeys;
    }
    this$static.keys_0[this$static.used] = id_0;
    this$static.typeChecked[this$static.used] = checked;
    setCheck(this$static.values, this$static.used++, value_0);
}

function ParameterSet(){
    $clinit_ParameterSet();
    ParameterSet_0.call(this, 10);
}

function ParameterSet_0(capacity){
    $clinit_ParameterSet();
    this.keys_0 = initDim(I_classLit, $intern_4, 0, capacity, 7, 1);
    this.values = initDim(Lclient_net_sf_saxon_ce_om_Sequence_2_classLit, $intern_1, 14, capacity, 0, 1);
    this.typeChecked = initDim(Z_classLit, $intern_9, 0, capacity, 8, 1);
}

function ParameterSet_1(existing, extra){
    $clinit_ParameterSet();
    var i_0;
    ParameterSet_0.call(this, existing.used + extra);
    for (i_0 = 0; i_0 < existing.used; i_0++) {
        $put(this, existing.keys_0[i_0], existing.values[i_0], existing.typeChecked[i_0]);
    }
}

defineClass(202, 1, {}, ParameterSet, ParameterSet_0, ParameterSet_1);
_.used = 0;
var EMPTY_PARAMETER_SET;
var Lclient_net_sf_saxon_ce_expr_instruct_ParameterSet_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'ParameterSet', 202, Ljava_lang_Object_2_classLit);
function $checkContent_0(data_0){
    var hh;
    while ((hh = data_0.indexOf('?>')) >= 0) {
        data_0 = data_0.substr(0, hh + 1) + ' ' + __substr(data_0, hh + 1, data_0.length - (hh + 1));
    }
    data_0 = removeLeadingWhitespace(data_0);
    return data_0;
}

function $evaluateName(this$static, context){
    var expandedName;
    expandedName = null;
    try {
        expandedName = trim_0(this$static.name_0.evaluateAsString(context));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 72)) {
            $dynamicError(this$static, 'Processing instruction name is not a string', 'XQDY0041');
        }
        else 
            throw unwrap($e0);
    }
    isValidNCName(expandedName) || $dynamicError(this$static, 'Processing instruction name ' + wrap(expandedName, 6) + ' is not a valid NCName', 'XTDE0890');
    $equalsIgnoreCase(expandedName, 'xml') && $dynamicError(this$static, "Processing instructions cannot be named 'xml' in any combination of upper/lower case", 'XTDE0890');
    return expandedName;
}

function ProcessingInstruction_0(name_0){
    SimpleNodeConstructor.call(this);
    this.name_0 = name_0;
    $adoptChildExpression(this, name_0);
}

defineClass(767, 124, $intern_43, ProcessingInstruction_0);
_.checkContent = function checkContent_1(data_0, context){
    return $checkContent_0(data_0);
}
;
_.evaluateNameCode = function evaluateNameCode_3(context){
    var expandedName;
    expandedName = $evaluateName(this, context);
    return new StructuredQName('', '', expandedName);
}
;
_.getCardinality = function getCardinality_10(){
    return $intern_21;
}
;
_.getDependencies = function getDependencies_3(){
    return this.name_0.getDependencies() | (this.staticProperties == -1 && (this.staticProperties = $computeDependencies(this) | this.select.getCardinality() | $intern_39) , this.staticProperties & $intern_13);
}
;
_.getItemType = function getItemType_55(){
    return $clinit_NodeKindTest() , PROCESSING_INSTRUCTION;
}
;
_.iterateSubExpressions = function iterateSubExpressions_26(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.select, this.name_0]));
}
;
_.localTypeCheck = function localTypeCheck_3(visitor, contextItemType){
    var role;
    this.name_0 = $typeCheck_1(visitor, this.name_0, contextItemType);
    $adoptChildExpression(this, this.name_0);
    role = new RoleLocator(4, 'processing-instruction/name', 0);
    this.name_0 = staticTypeCheck_1(this.name_0, ($clinit_SequenceType() , SINGLE_STRING), false, role);
    $adoptChildExpression(this, this.name_0);
}
;
_.processValue = function processValue_2(value_0, context){
    var data_0, expandedName, out;
    expandedName = $evaluateName(this, context);
    if (expandedName != null) {
        data_0 = $checkContent_0(toString__Ljava_lang_String___devirtual$_0(value_0));
        out = context.getReceiver();
        out.processingInstruction(expandedName, data_0);
    }
}
;
_.promoteInst = function promoteInst_16(offer){
    this.name_0 = $doPromotion(this, this.name_0, offer);
    !!this.select && (this.select = $doPromotion(this, this.select, offer));
}
;
_.simplify = function simplify_37(visitor){
    this.name_0 = $simplify(visitor, this.name_0);
    return this.select = $simplify(visitor, this.select) , this;
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_ProcessingInstruction_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'ProcessingInstruction', 767, Lclient_net_sf_saxon_ce_expr_instruct_SimpleNodeConstructor_2_classLit);
function $addResultDocument(this$static, context, documentKey, doc){
    var controller;
    controller = context.getController();
    !!$find_0(controller.config.sourceDocumentPool, documentKey.displayValue) && $dynamicError(this$static, 'Cannot write to a URI that has already been read: ' + documentKey.displayValue, 'XTRE1500');
    !controller.allOutputDestinations && (controller.allOutputDestinations = new HashSet_0(20));
    $contains_4(controller.allOutputDestinations, documentKey)?$dynamicError(this$static, 'Cannot write more than one result document to the same URI: ' + documentKey.displayValue, 'XTDE1490'):(!controller.allOutputDestinations && (controller.allOutputDestinations = new HashSet_0(20)) , $add_17(controller.allOutputDestinations, documentKey) , !controller.resultDocumentPool && (controller.resultDocumentPool = new HashMap_0(20)) , $put_0(controller.resultDocumentPool, documentKey, doc));
}

function ResultDocument(href_0, methodExpression, nsResolver){
    Instruction.call(this);
    this.logger = (new LoggerImplRegular , $ensureLogger(getLogManager(), 'Xstl20Processor'));
    this.href_0 = href_0;
    this.methodExpression = methodExpression;
    this.nsResolver = nsResolver;
    $adoptChildExpression(this, href_0);
    loggingIsEnabled() && isTraceEnabled && $AddTraceProperty(this, 'href', href_0);
}

function getValidAbsoluteURI(controller, href_0){
    var baseURI, ue;
    baseURI = controller.principalResultURI != null && controller.principalResultURI.length > 0?controller.principalResultURI:$doc.URL;
    try {
        return $toString_1(makeAbsolute(href_0, baseURI));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 51)) {
            ue = $e0;
            throw new XPathException_0(ue.detailMessage);
        }
        else 
            throw unwrap($e0);
    }
}

defineClass(769, 39, $intern_42, ResultDocument);
_.getIntrinsicDependencies = function getIntrinsicDependencies_12(){
    return $intern_41;
}
;
_.getItemType = function getItemType_56(){
    return $clinit_EmptySequenceTest() , $clinit_EmptySequenceTest() , THE_INSTANCE_8;
}
;
_.iterateSubExpressions = function iterateSubExpressions_27(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.content_0, this.href_0, this.methodExpression]));
}
;
_.optimize = function optimize_46(visitor, contextItemType){
    this.content_0 = $optimize_1(visitor, this.content_0, contextItemType);
    $adoptChildExpression(this, this.content_0);
    if (this.href_0) {
        this.href_0 = $optimize_1(visitor, this.href_0, contextItemType);
        $adoptChildExpression(this, this.href_0);
    }
    if (this.methodExpression) {
        this.methodExpression = $optimize_1(visitor, this.methodExpression, contextItemType);
        $adoptChildExpression(this, this.methodExpression);
    }
    return this;
}
;
_.processLeavingTail = function processLeavingTail_20(context){
    var absURI, action, c2, c3, cItem, child, command, container, container0, contextItem, contextNodeName, controller, currentContextItem, env, err, existingChildren, expr, hrefValue, i_0, iter, list, method, methodQ, out, page, pipe, resultItem, select, target, targetNode, useCurrentContext, visitor;
    controller = context.getController();
    command = controller.commandType;
    c2 = context.newMinorContext();
    action = 0;
    if (this.methodExpression) {
        method = toString__Ljava_lang_String___devirtual$_0(this.methodExpression.evaluateAsString(context));
        $indexOf_3(method, fromCodePoint(58)) >= 0?(methodQ = fromLexicalQName(method, '', this.nsResolver)):(methodQ = new StructuredQName('', '', method));
        $equals_5('replace-content', valueOf_3(methodQ.content_0, methodQ.localNameStart, methodQ.prefixStart - methodQ.localNameStart)) && (action = 1);
    }
    hrefValue = null;
    if (this.href_0) {
        hrefValue = toString__Ljava_lang_String___devirtual$_0(this.href_0.evaluateAsString(context));
    }
    else if (command == ($clinit_Controller$APIcommand() , UPDATE_HTML)) {
        throw new XPathException_0('html update - no href value for result-document instruction');
    }
    else {
        hrefValue = 'result' + ((!controller.resultDocumentPool?0:controller.resultDocumentPool.size_0) + 1);
    }
    targetNode = null;
    contextNodeName = '';
    absURI = '';
    if (command == ($clinit_Controller$APIcommand() , TRANSFORM_TO_DOCUMENT)) {
        absURI = getValidAbsoluteURI(controller, hrefValue);
        targetNode = createDocument(absURI);
    }
    else if (command == TRANSFORM_TO_FRAGMENT || command == TRANSFORM_TO_HTML_FRAGMENT) {
        absURI = getValidAbsoluteURI(controller, hrefValue);
        targetNode = controller.targetNode.createDocumentFragment();
    }
    else if ($equals_5(hrefValue.substr(0, 1), '#')) {
        hrefValue = __substr(hrefValue, 1, hrefValue.length - 1);
        targetNode = $getElementById(controller.targetNode, hrefValue);
    }
    else if ($equals_5(hrefValue.substr(0, 8), '?select=')) {
        select = __substr(hrefValue, 8, hrefValue.length - 8);
        env = new ResultDocument$1(controller);
        visitor = make_0(env, new Executable(context.getConfiguration()));
        $setConfiguration_1(env, context.getConfiguration());
        container0 = dynamicCast($getSourceLocator(this), 11);
        try {
            expr = make(select, env, container0, 0, $getSourceLocator(this));
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 19)) {
                throw new XPathException_0('Error on evaluating (in static context) result-document href: ' + hrefValue);
            }
            else 
                throw unwrap($e0);
        }
        expr = $typeCheck_1(visitor, expr, ($clinit_NodeKindTest() , DOCUMENT));
        c3 = context.newCleanContext();
        page = controller.targetNode;
        cItem = context.getContextItem();
        instanceOf(cItem, 160)?(currentContextItem = null):(currentContextItem = dynamicCast(cItem, 7));
        !currentContextItem?(useCurrentContext = false):(useCurrentContext = $equals_5(currentContextItem.getBaseURI(), page.URL));
        if (useCurrentContext) {
            contextItem = currentContextItem;
            loggingIsEnabled() && currentContextItem.getNodeKind() == 1 && (contextNodeName = currentContextItem.getDisplayName());
        }
        else {
            contextItem = new HTMLDocumentWrapper(page, page.URL, context.getConfiguration(), 2);
        }
        loggingIsEnabled() && (contextNodeName = $equals_5(contextNodeName, '')?'':' context node: ' + contextNodeName);
        c3.setSingletonFocus(contextItem);
        iter = expr.iterate_0(c3);
        resultItem = iter.next_0();
        if (!resultItem)
            ;
        else if (instanceOf(resultItem, 7)) {
            target = dynamicCast(resultItem, 7);
            targetNode = dynamicCast(target, 94).node;
        }
        else {
            throw new XPathException_0('non-node returned by result-document href: ' + hrefValue);
        }
    }
    else if (command == UPDATE_HTML) {
        throw new XPathException_0("expected '?select=' or '#' at start of result-document href, found: " + hrefValue);
    }
    if (!targetNode) {
        $warning_0(this.logger, 'result-document target not found for href: ' + hrefValue + contextNodeName);
        return null;
    }
    else {
        $fine_0(this.logger, 'processing result-document for href: ' + hrefValue + contextNodeName);
    }
    if (command == UPDATE_HTML) {
        container = controller.targetNode.createDocumentFragment();
    }
    else {
        $addResultDocument(this, context, new DocumentURI(absURI), targetNode);
        container = targetNode;
    }
    pipe = $makePipelineConfiguration_0(controller);
    out = $openResult(controller, pipe, c2, container);
    try {
        this.content_0.process(c2);
        out.nextReceiver.endDocument();
    }
    catch ($e1) {
        $e1 = wrap_0($e1);
        if (instanceOf($e1, 4)) {
            err = $e1;
            $maybeSetLocation(err, $getSourceLocator(this));
            throw err;
        }
        else 
            throw unwrap($e1);
    }
    $closeResult(c2);
    if (command == UPDATE_HTML) {
        list = controller.pendingUpdateList;
        if (action == 1 && command == UPDATE_HTML) {
            existingChildren = targetNode.childNodes.length;
            for (i_0 = 0; i_0 < existingChildren; i_0++) {
                child = targetNode.childNodes[i_0];
                $add_3(list, new DeleteAction(child));
            }
        }
        $add_3(list, new InsertAction(container, targetNode));
    }
    return null;
}
;
_.promoteInst = function promoteInst_17(offer){
    this.content_0 = $doPromotion(this, this.content_0, offer);
    !!this.href_0 && (this.href_0 = $doPromotion(this, this.href_0, offer));
}
;
_.simplify = function simplify_38(visitor){
    this.content_0 = $simplify(visitor, this.content_0);
    this.href_0 = $simplify(visitor, this.href_0);
    return this;
}
;
_.typeCheck = function typeCheck_53(visitor, contextItemType){
    this.content_0 = $typeCheck_1(visitor, this.content_0, contextItemType);
    $adoptChildExpression(this, this.content_0);
    if (this.href_0) {
        this.href_0 = $typeCheck_1(visitor, this.href_0, contextItemType);
        $adoptChildExpression(this, this.href_0);
    }
    if (this.methodExpression) {
        this.methodExpression = $typeCheck_1(visitor, this.methodExpression, contextItemType);
        $adoptChildExpression(this, this.methodExpression);
    }
    return this;
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_ResultDocument_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'ResultDocument', 769, Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit);
function $setBaseURI_1(this$static, baseURI){
    this$static.baseURI = baseURI;
}

function $setConfiguration_1(this$static, config){
    this$static.config = config;
}

function AbstractStaticContext(){
    this.libraryList = new FunctionLibraryList;
}

defineClass(434, 1, {});
_.getBaseURI = function getBaseURI_1(){
    return this.baseURI == null?'':this.baseURI;
}
;
_.getConfiguration = function getConfiguration_1(){
    return this.config;
}
;
_.getDefaultCollationName = function getDefaultCollationName(){
    return 'http://www.w3.org/2005/xpath-functions/collation/codepoint';
}
;
_.getDefaultElementNamespace = function getDefaultElementNamespace(){
    return this.defaultElementNamespace;
}
;
_.getDefaultFunctionNamespace = function getDefaultFunctionNamespace(){
    return this.defaultFunctionNamespace;
}
;
_.getFunctionLibrary = function getFunctionLibrary(){
    return this.libraryList;
}
;
_.isInBackwardsCompatibleMode = function isInBackwardsCompatibleMode(){
    return false;
}
;
_.baseURI = null;
_.defaultElementNamespace = '';
_.defaultFunctionNamespace = 'http://www.w3.org/2005/xpath-functions';
var Lclient_net_sf_saxon_ce_sxpath_AbstractStaticContext_2_classLit = createForClass('client.net.sf.saxon.ce.sxpath', 'AbstractStaticContext', 434, Ljava_lang_Object_2_classLit);
function ResultDocument$1(val$controller){
    this.val$controller2 = val$controller;
    AbstractStaticContext.call(this);
}

defineClass(770, 434, {}, ResultDocument$1);
_.bindVariable = function bindVariable(qName){
    return null;
}
;
_.getFunctionLibrary = function getFunctionLibrary_0(){
    return this.val$controller2.executable.functionLibrary;
}
;
_.getNamespaceResolver = function getNamespaceResolver(){
    return null;
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_ResultDocument$1_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'ResultDocument/1', 770, Lclient_net_sf_saxon_ce_sxpath_AbstractStaticContext_2_classLit);
function $clinit_ScheduleExecution(){
    $clinit_ScheduleExecution = emptyMethod;
    logger_3 = (new LoggerImplRegular , $ensureLogger(getLogManager(), 'ScheduleExecution'));
}

function ScheduleExecution(call_0, wait, href_0){
    $clinit_ScheduleExecution();
    Instruction.call(this);
    this.call_0 = call_0;
    this.wait = wait;
    this.href_0 = href_0;
    $adoptChildExpression(this, call_0);
    $adoptChildExpression(this, wait);
    $adoptChildExpression(this, href_0);
}

defineClass(771, 39, $intern_42, ScheduleExecution);
_.getIntrinsicDependencies = function getIntrinsicDependencies_13(){
    return $intern_41;
}
;
_.getItemType = function getItemType_57(){
    return $clinit_EmptySequenceTest() , $clinit_EmptySequenceTest() , THE_INSTANCE_8;
}
;
_.iterateSubExpressions = function iterateSubExpressions_28(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.call_0, this.wait, this.href_0]));
}
;
_.optimize = function optimize_47(visitor, contextItemType){
    this.call_0 = dynamicCast($optimize_1(visitor, this.call_0, contextItemType), 258);
    this.wait = $optimize_1(visitor, this.wait, contextItemType);
    this.href_0 = $optimize_1(visitor, this.href_0, contextItemType);
    return this;
}
;
_.processLeavingTail = function processLeavingTail_21(context){
    var abs_0, c2, e, existingDoc, hrefVal, pack, pool, t, tc, time, uri_0;
    time = 1;
    hrefVal = null;
    this.href_0?(hrefVal = toString__Ljava_lang_String___devirtual$_0(this.href_0.evaluateAsString(context))):!!this.wait && (time = $intValue(dynamicCast(this.wait.evaluateItem(context), 32)));
    pack = $processLeavingTail_0(this.call_0, context);
    if (this.href_0) {
        try {
            abs_0 = makeAbsolute(hrefVal, this.staticBaseURI);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 51)) {
                e = $e0;
                throw new XPathException_4('Cannot resolve URI ' + hrefVal, e);
            }
            else 
                throw unwrap($e0);
        }
        uri_0 = $toString_1(abs_0);
        pool = context.getController().config.sourceDocumentPool;
        existingDoc = dynamicCast($get_0(pool.documentNameMap, new DocumentURI(uri_0)), 109);
        if (existingDoc) {
            c2 = context.newMinorContext();
            c2.setSingletonFocus(existingDoc);
            pack.evaluationContext = c2;
            tc = $processLeavingTail_1(pack);
            while (tc) {
                tc = tc.processLeavingTail_0();
            }
            $apply_1(context.getController().pendingUpdateList, context);
        }
        else {
            $log_1(logger_3, ($clinit_Level() , FINE), 'Aynchronous GET for: ' + abs_0);
            $doGet(uri_0, new ScheduleExecution$1(uri_0, context, pool, pack));
        }
    }
    else {
        t = new ScheduleExecution$2(pack, context);
        $schedule(t, time);
    }
    return null;
}
;
_.promoteInst = function promoteInst_18(offer){
    this.call_0 = dynamicCast($doPromotion(this, this.call_0, offer), 258);
    this.wait = $doPromotion(this, this.wait, offer);
    this.href_0 = $doPromotion(this, this.href_0, offer);
}
;
_.simplify = function simplify_39(visitor){
    this.call_0 = dynamicCast($simplify(visitor, this.call_0), 258);
    this.wait = $simplify(visitor, this.wait);
    this.href_0 = $simplify(visitor, this.href_0);
    this.staticBaseURI = visitor.staticContext.getBaseURI();
    return this;
}
;
_.typeCheck = function typeCheck_54(visitor, contextItemType){
    this.call_0 = dynamicCast($typeCheck_1(visitor, this.call_0, contextItemType), 258);
    this.wait = $typeCheck_1(visitor, this.wait, contextItemType);
    this.href_0 = $typeCheck_1(visitor, this.href_0, contextItemType);
    return this;
}
;
var logger_3;
var Lclient_net_sf_saxon_ce_expr_instruct_ScheduleExecution_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'ScheduleExecution', 771, Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit);
function ScheduleExecution$1(val$uri, val$context, val$pool, val$pack){
    this.val$uri2 = val$uri;
    this.val$context3 = val$context;
    this.val$pool4 = val$pool;
    this.val$pack5 = val$pack;
}

defineClass(772, 1, {}, ScheduleExecution$1);
_.onError = function onError_0(request, exception){
    var msg;
    msg = 'HTTP Error ' + exception.detailMessage + ' for URI ' + this.val$uri2;
    $log_1(($clinit_ScheduleExecution() , logger_3), ($clinit_Level() , SEVERE), msg);
    if (processorWasJsInitiated && !handler_0) {
        throw new RuntimeException_0(exception.detailMessage);
    }
}
;
_.onResponseReceived = function onResponseReceived_0(request, response){
    var c2, doc, e, msg, responseNode, statusCode, tc;
    statusCode = response.xmlHttpRequest.status;
    if (statusCode == 200) {
        $fine_0((new LoggerImplRegular , $ensureLogger(getLogManager(), 'ResponseReceived')), 'GET Ok for: ' + this.val$uri2);
        try {
            responseNode = parseXML(response.xmlHttpRequest.responseText);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 19)) {
                e = $e0;
                $log_1(($clinit_ScheduleExecution() , logger_3), ($clinit_Level() , SEVERE), 'Failed to parse XML: ' + e.getMessage());
                if (processorWasJsInitiated && !handler_0) {
                    throw new RuntimeException_0(e.getMessage());
                }
                return;
            }
            else 
                throw unwrap($e0);
        }
        doc = $wrapXMLDocument(this.val$context3.getConfiguration(), responseNode, this.val$uri2);
        $getStripperRules(this.val$context3.getController().executable);
        $add_2(this.val$pool4, doc, this.val$uri2);
        c2 = this.val$context3.newMinorContext();
        c2.setSingletonFocus(doc);
        $setEvaluationContext(this.val$pack5, c2);
        try {
            tc = $processLeavingTail_1(this.val$pack5);
            while (tc) {
                tc = tc.processLeavingTail_0();
            }
            $apply_1(this.val$context3.getController().pendingUpdateList, this.val$context3);
        }
        catch ($e1) {
            $e1 = wrap_0($e1);
            if (instanceOf($e1, 4)) {
                e = $e1;
                $log_1(($clinit_ScheduleExecution() , logger_3), ($clinit_Level() , SEVERE), 'In async document processing: ' + e.message_0);
                if (processorWasJsInitiated && !handler_0) {
                    throw new RuntimeException_0(e.message_0);
                }
            }
            else 
                throw unwrap($e1);
        }
    }
    else if (statusCode < 400)
        ;
    else {
        msg = 'HTTP Error ' + statusCode + ' ' + response.xmlHttpRequest.statusText + ' for URI ' + this.val$uri2;
        $log_1(($clinit_ScheduleExecution() , logger_3), ($clinit_Level() , SEVERE), msg);
    }
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_ScheduleExecution$1_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'ScheduleExecution/1', 772, Ljava_lang_Object_2_classLit);
function $cancel(this$static){
    if (!this$static.timerId) {
        return;
    }
    ++this$static.cancelCounter;
    this$static.isRepeating?clearInterval_0(this$static.timerId.value_0):clearTimeout_0(this$static.timerId.value_0);
    this$static.timerId = null;
}

function $schedule(this$static, delayMillis){
    if (delayMillis < 0) {
        throw new IllegalArgumentException_0('must be non-negative');
    }
    !!this$static.timerId && $cancel(this$static);
    this$static.isRepeating = false;
    this$static.timerId = valueOf(setTimeout_0(createCallback(this$static, this$static.cancelCounter), delayMillis));
}

function Timer(){
}

function clearInterval_0(timerId){
    $wnd.clearInterval(timerId);
}

function clearTimeout_0(timerId){
    $wnd.clearTimeout(timerId);
}

function createCallback(timer, cancelCounter){
    return $entry(function(){
        timer.fire(cancelCounter);
    }
    );
}

function setTimeout_0(func, time){
    return $wnd.setTimeout(func, time);
}

defineClass(366, 1, {});
_.fire = function fire(scheduleCancelCounter){
    if (scheduleCancelCounter != this.cancelCounter) {
        return;
    }
    this.isRepeating || (this.timerId = null);
    this.run_0();
}
;
_.cancelCounter = 0;
_.isRepeating = false;
_.timerId = null;
var Lcom_google_gwt_user_client_Timer_2_classLit = createForClass('com.google.gwt.user.client', 'Timer', 366, Ljava_lang_Object_2_classLit);
function ScheduleExecution$2(val$pack, val$context){
    this.val$pack2 = val$pack;
    this.val$context3 = val$context;
    Timer.call(this);
}

defineClass(773, 366, {}, ScheduleExecution$2);
_.run_0 = function run(){
    var err, success, tc;
    success = false;
    $fine_0(($clinit_ScheduleExecution() , logger_3), 'processing ixsl:schedule-action');
    loggingIsEnabled() && isTraceEnabled && isTraceEnabled && $open_1(traceListener);
    try {
        tc = $processLeavingTail_1(this.val$pack2);
        while (tc) {
            tc = tc.processLeavingTail_0();
        }
        $apply_1(this.val$context3.getController().pendingUpdateList, this.val$context3);
        success = true;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            err = $e0;
            $log_1(logger_3, ($clinit_Level() , SEVERE), 'In delayed event: ' + err.getMessage());
            if (processorWasJsInitiated && !handler_0) {
                throw new RuntimeException_0(err.getMessage());
            }
        }
        else 
            throw unwrap($e0);
    }
    loggingIsEnabled() && isTraceEnabled && !!traceListener && (success?isTraceEnabled && $close_0(traceListener):(traceListener.indent = 0));
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_ScheduleExecution$2_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'ScheduleExecution/2', 773, Lcom_google_gwt_user_client_Timer_2_classLit);
function SetAttribute(content_0, action){
    Instruction.call(this);
    this.content_0 = content_0;
    this.action = action;
    $adoptChildExpression(this, content_0);
}

defineClass(499, 39, $intern_42, SetAttribute);
_.getIntrinsicDependencies = function getIntrinsicDependencies_14(){
    return $intern_41;
}
;
_.getItemType = function getItemType_58(){
    return $clinit_EmptySequenceTest() , $clinit_EmptySequenceTest() , THE_INSTANCE_8;
}
;
_.iterateSubExpressions = function iterateSubExpressions_29(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.content_0]));
}
;
_.optimize = function optimize_48(visitor, contextItemType){
    this.content_0 = $optimize_1(visitor, this.content_0, contextItemType);
    return this;
}
;
_.processLeavingTail = function processLeavingTail_22(context){
    var att, element, parent_0, pul;
    element = context.getContextItem();
    if (!(instanceOf(element, 94) && !!dynamicCast(element, 94).node)) {
        return null;
    }
    parent_0 = dynamicCast(element, 94).node;
    pul = context.getController().pendingUpdateList;
    att = this.content_0.evaluateItem(context);
    instanceOf(att, 7) && dynamicCast(att, 7).getNodeKind() == 2 && $add_3(pul, new SetAttributeAction(parent_0, dynamicCast(att, 7).getURI(), dynamicCast(att, 7).getLocalPart(), this.action == 0?att.getStringValue():null));
    return null;
}
;
_.promoteInst = function promoteInst_19(offer){
    this.content_0 = $doPromotion(this, this.content_0, offer);
}
;
_.simplify = function simplify_40(visitor){
    this.content_0 = $simplify(visitor, this.content_0);
    return this;
}
;
_.typeCheck = function typeCheck_55(visitor, contextItemType){
    this.content_0 = $typeCheck_1(visitor, this.content_0, contextItemType);
    return this;
}
;
_.action = 0;
var Lclient_net_sf_saxon_ce_expr_instruct_SetAttribute_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'SetAttribute', 499, Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit);
function $adoptChildren(this$static){
    $adoptChildExpression(this$static, this$static.select);
    $adoptChildExpression(this$static, this$static.targetObject);
    $adoptChildExpression(this$static, this$static.name_0);
}

function SetProperty(object, select, name_0){
    Instruction.call(this);
    this.targetObject = object;
    this.name_0 = name_0;
    this.select = select;
    $adoptChildren(this);
}

defineClass(774, 39, $intern_42, SetProperty);
_.getIntrinsicDependencies = function getIntrinsicDependencies_15(){
    return $intern_41;
}
;
_.getItemType = function getItemType_59(){
    return $clinit_EmptySequenceTest() , $clinit_EmptySequenceTest() , THE_INSTANCE_8;
}
;
_.iterateSubExpressions = function iterateSubExpressions_30(){
    return $nonNullChildren(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.select, this.targetObject, this.name_0]));
}
;
_.optimize = function optimize_49(visitor, contextItemType){
    this.targetObject = $optimize_1(visitor, this.targetObject, contextItemType);
    this.name_0 = $optimize_1(visitor, this.name_0, contextItemType);
    this.select = $optimize_1(visitor, this.select, contextItemType);
    $adoptChildren(this);
    return this;
}
;
_.processLeavingTail = function processLeavingTail_23(context){
    var clientObject, content_0, e, member;
    content_0 = convertToJavaScript(evaluate(this.select, 8, context));
    clientObject = dynamicCastJso(convertToJavaScript(evaluate(this.targetObject, 8, context)));
    member = dynamicCastToString(convertToJavaScript(evaluate(this.name_0, 8, context)));
    try {
        setProperty(clientObject, member, content_0);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            e = $e0;
            throw new XPathException_0('Error setting client-property: ' + member + ' ' + e.getMessage());
        }
        else 
            throw unwrap($e0);
    }
    return null;
}
;
_.promoteInst = function promoteInst_20(offer){
    this.targetObject = $doPromotion(this, this.targetObject, offer);
    this.name_0 = $doPromotion(this, this.name_0, offer);
    this.select = $doPromotion(this, this.select, offer);
}
;
_.simplify = function simplify_41(visitor){
    this.targetObject = $simplify(visitor, this.targetObject);
    this.name_0 = $simplify(visitor, this.name_0);
    this.select = $simplify(visitor, this.select);
    return this;
}
;
_.typeCheck = function typeCheck_56(visitor, contextItemType){
    this.targetObject = $typeCheck_1(visitor, this.targetObject, contextItemType);
    this.name_0 = $typeCheck_1(visitor, this.name_0, contextItemType);
    this.select = $typeCheck_1(visitor, this.select, contextItemType);
    $adoptChildren(this);
    return this;
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_SetProperty_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'SetProperty', 774, Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit);
function $apply_0(this$static, context){
    var tc;
    tc = $applyLeavingTail(this$static, context);
    while (tc) {
        tc = tc.processLeavingTail_0();
    }
}

function $applyLeavingTail(this$static, context){
    if (this$static.bodyIsTailCallReturner) {
        return dynamicCast(this$static.body_0, 49).processLeavingTail(context);
    }
    else {
        this$static.body_0.process(context);
        return null;
    }
}

function $expand_0(this$static, context){
    if (this$static.bodyIsTailCallReturner) {
        return dynamicCast(this$static.body_0, 49).processLeavingTail(context);
    }
    else 
        !!this$static.body_0 && this$static.body_0.process(context);
    return null;
}

function $getLocalParam(this$static, id_0){
    var child, iter;
    iter = this$static.body_0.iterateSubExpressions();
    while (iter.hasNext()) {
        child = dynamicCast(iter.next_2(), 6);
        if (instanceOf(child, 231) && dynamicCast(child, 231).parameterId == id_0) {
            return dynamicCast(child, 231);
        }
    }
    return null;
}

function $getRequiredType(this$static){
    return !this$static.requiredType?($clinit_SequenceType() , ANY_SEQUENCE):this$static.requiredType;
}

function $setBody_0(this$static, body_0){
    this$static.body_0 = body_0;
    $setContainer(body_0, this$static);
    this$static.bodyIsTailCallReturner = instanceOf(body_0, 49);
}

function $setHasRequiredParams(this$static, has){
    this$static.hasRequiredParams = has;
}

function $setRequiredType_1(this$static, type_0){
    this$static.requiredType = type_0;
}

function $setTemplateName(this$static, templateName){
    this$static.templateName = templateName;
}

function Template(){
}

defineClass(280, 279, {28:1, 279:1, 280:1, 359:1}, Template);
_.bodyIsTailCallReturner = false;
_.hasRequiredParams = false;
var Lclient_net_sf_saxon_ce_expr_instruct_Template_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'Template', 280, Lclient_net_sf_saxon_ce_expr_instruct_Procedure_2_classLit);
function TerminationException(message){
    XPathException_0.call(this, message);
    this.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTMM9000');
}

defineClass(413, 4, {413:1, 4:1, 3:1, 19:1, 37:1}, TerminationException);
var Lclient_net_sf_saxon_ce_expr_instruct_TerminationException_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'TerminationException', 413, Lclient_net_sf_saxon_ce_trans_XPathException_2_classLit);
function UseAttributeSets(sets){
    Instruction.call(this);
    this.attributeSets = sets;
}

defineClass(223, 39, {6:1, 39:1, 49:1, 223:1}, UseAttributeSets);
_.equals$ = function equals_19(obj){
    var as0, as1, i_0;
    if (!instanceOf(obj, 223)) {
        return false;
    }
    if (this.attributeSets.length != dynamicCast(obj, 223).attributeSets.length) {
        return false;
    }
    for (i_0 = 0; i_0 < this.attributeSets.length; i_0++) {
        as0 = this.attributeSets[i_0];
        as1 = dynamicCast(obj, 223).attributeSets[i_0];
        if (!$equals_0(as0.attributeSetName, as1.attributeSetName)) {
            return false;
        }
    }
    return true;
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_16(){
    var as, d, i_0;
    d = 0;
    for (i_0 = 0; i_0 < this.attributeSets.length; i_0++) {
        as = this.attributeSets[i_0];
        d |= $getFocusDependencies(as);
    }
    return d;
}
;
_.getItemType = function getItemType_60(){
    return $clinit_NodeKindTest() , ATTRIBUTE;
}
;
_.hashCode$ = function hashCode_20(){
    var h, i_0;
    h = -2042480871;
    for (i_0 = 0; i_0 < this.attributeSets.length; i_0++) {
        h ^= $hashCode(this.attributeSets[i_0].attributeSetName);
    }
    return h;
}
;
_.optimize = function optimize_50(visitor, contextItemType){
    return this;
}
;
_.processLeavingTail = function processLeavingTail_24(context){
    expand(this.attributeSets, context);
    return null;
}
;
_.simplify = function simplify_42(visitor){
    return this;
}
;
_.typeCheck = function typeCheck_57(visitor, contextItemType){
    return this;
}
;
var Lclient_net_sf_saxon_ce_expr_instruct_UseAttributeSets_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'UseAttributeSets', 223, Lclient_net_sf_saxon_ce_expr_instruct_Instruction_2_classLit);
function $call(this$static, actualArgs, context){
    var err, result;
    this$static.evaluationMode == -1 && (this$static.tailRecursive?(this$static.evaluationMode = eagerEvaluationMode(this$static.body_0)):(this$static.evaluationMode = lazyEvaluationMode(this$static.body_0)));
    $setStackFrame(context, this$static.numberOfSlots, actualArgs);
    try {
        result = evaluate(this$static.body_0, this$static.evaluationMode, context);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $maybeSetLocation(err, this$static.sourceLocator);
            throw err;
        }
        else 
            throw unwrap($e0);
    }
    return result;
}

function $computeEvaluationMode(this$static){
    this$static.tailRecursive?(this$static.evaluationMode = eagerEvaluationMode(this$static.body_0)):(this$static.evaluationMode = lazyEvaluationMode(this$static.body_0));
}

function $getResultType(this$static){
    this$static.resultType == ($clinit_SequenceType() , ANY_SEQUENCE) && (containsUserFunctionCalls(this$static.body_0) || (this$static.resultType = new SequenceType(this$static.body_0.getItemType(), this$static.body_0.getCardinality())));
    return this$static.resultType;
}

function $process_1(this$static, actualArgs, context){
    $setStackFrame(context, this$static.numberOfSlots, actualArgs);
    this$static.body_0.process(context);
}

function $setFunctionName_0(this$static, name_0){
    this$static.functionName = name_0;
}

function $setResultType(this$static, resultType){
    this$static.resultType = resultType;
}

function $setTailRecursive(this$static, recursiveTailCalls){
    this$static.tailRecursive = recursiveTailCalls;
}

function UserFunction(){
}

function containsUserFunctionCalls(exp_0){
    var e, i_0;
    if (instanceOf(exp_0, 261)) {
        return true;
    }
    i_0 = exp_0.iterateSubExpressions();
    while (i_0.hasNext()) {
        e = dynamicCast(i_0.next_2(), 6);
        if (containsUserFunctionCalls(e)) {
            return true;
        }
    }
    return false;
}

defineClass(653, 279, $intern_44, UserFunction);
_.evaluationMode = -1;
_.tailRecursive = false;
var Lclient_net_sf_saxon_ce_expr_instruct_UserFunction_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'UserFunction', 653, Lclient_net_sf_saxon_ce_expr_instruct_Procedure_2_classLit);
function $setRequiredType_2(this$static, type_0){
    this$static.requiredType = type_0;
}

function $setSlotNumber_2(this$static, slot){
    this$static.slotNumber = slot;
}

function $setVariableQName_1(this$static, name_0){
    this$static.variableQName = name_0;
}

function UserFunctionParameter(){
}

defineClass(319, 1, {126:1, 319:1}, UserFunctionParameter);
_.evaluateVariable = function evaluateVariable_6(context){
    return context.evaluateLocalVariable(this.slotNumber);
}
;
_.getLocalSlotNumber = function getLocalSlotNumber_1(){
    return this.slotNumber;
}
;
_.getRequiredType = function getRequiredType_1(){
    return this.requiredType;
}
;
_.getVariableQName = function getVariableQName_1(){
    return this.variableQName;
}
;
_.isGlobal = function isGlobal_2(){
    return false;
}
;
_.slotNumber = 0;
var Lclient_net_sf_saxon_ce_expr_instruct_UserFunctionParameter_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'UserFunctionParameter', 319, Ljava_lang_Object_2_classLit);
function $processValue(value_0, context){
    var out;
    out = context.getReceiver();
    out.characters(value_0);
}

function ValueOf(select){
    SimpleNodeConstructor.call(this);
    this.select = select;
    this.noNodeIfEmpty = false;
    $adoptChildExpression(this, select);
}

defineClass(93, 124, {6:1, 39:1, 124:1, 49:1, 93:1}, ValueOf);
_.computeCardinality = function computeCardinality_35(){
    return this.noNodeIfEmpty?$intern_20:$intern_21;
}
;
_.evaluateItem = function evaluateItem_38(context){
    var err, item_0, o, val;
    try {
        item_0 = this.select.evaluateItem(context);
        if (!item_0) {
            if (this.noNodeIfEmpty) {
                return null;
            }
            else {
                val = '';
            }
        }
        else {
            val = item_0.getStringValue();
        }
        o = new Orphan;
        o.kind = 3;
        o.stringValue = val;
        return o;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $maybeSetLocation(err, $getSourceLocator(this));
            throw err;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.getItemType = function getItemType_61(){
    return $clinit_NodeKindTest() , TEXT;
}
;
_.localTypeCheck = function localTypeCheck_4(visitor, contextItemType){
}
;
_.processLeavingTail = function processLeavingTail_25(context){
    var value_0;
    if (this.noNodeIfEmpty) {
        value_0 = dynamicCast(this.select.evaluateItem(context), 12);
        !!value_0 && $processValue(dynamicCastToString(value_0.value_0 = toString__Ljava_lang_String___devirtual$_0(value_0.value_0)), context);
        return null;
    }
    else {
        return $processLeavingTail(this, context);
    }
}
;
_.processValue = function processValue_3(value_0, context){
    $processValue(value_0, context);
}
;
_.noNodeIfEmpty = false;
var Lclient_net_sf_saxon_ce_expr_instruct_ValueOf_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'ValueOf', 93, Lclient_net_sf_saxon_ce_expr_instruct_SimpleNodeConstructor_2_classLit);
function $setParameterId_0(this$static, id_0){
    this$static.parameterId = id_0;
}

function WithParam(){
    GeneralVariable.call(this);
}

function getXPathExpressions(params, list){
    params != null && $addAll(list, new Arrays$ArrayList(params));
}

function optimize_51(visitor, params, contextItemType){
    var i_0;
    for (i_0 = 0; i_0 < params.length; i_0++) {
        $optimize_1(visitor, params[i_0], contextItemType);
    }
}

function promoteParams(parent_0, params, offer){
    var i_0, select;
    for (i_0 = 0; i_0 < params.length; i_0++) {
        select = params[i_0].select;
        !!select && $setSelectExpression(params[i_0], select.promote(offer, parent_0));
    }
}

function simplify_43(params, visitor){
    var i_0, select;
    for (i_0 = 0; i_0 < params.length; i_0++) {
        select = params[i_0].select;
        !!select && $setSelectExpression(params[i_0], $simplify(visitor, select));
    }
}

function typeCheck_58(params, visitor, contextItemType){
    var i_0, select;
    for (i_0 = 0; i_0 < params.length; i_0++) {
        select = params[i_0].select;
        !!select && $setSelectExpression(params[i_0], $typeCheck_1(visitor, select, contextItemType));
    }
}

defineClass(317, 173, {126:1, 6:1, 173:1, 39:1, 49:1, 317:1}, WithParam);
_.evaluateVariable = function evaluateVariable_7(context){
    throw new UnsupportedOperationException;
}
;
_.processLeavingTail = function processLeavingTail_26(context){
    return null;
}
;
_.parameterId = 0;
_.typeChecked = false;
var Lclient_net_sf_saxon_ce_expr_instruct_WithParam_2_classLit = createForClass('client.net.sf.saxon.ce.expr.instruct', 'WithParam', 317, Lclient_net_sf_saxon_ce_expr_instruct_GeneralVariable_2_classLit);
function $clinit_AbstractNumberer(){
    $clinit_AbstractNumberer = emptyMethod;
    westernDigits = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [48, 49, 50, 51, 52, 53, 54, 55, 56, 57]);
    romanThousands = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['', 'm', 'mm', 'mmm', 'mmmm', 'mmmmm', 'mmmmmm', 'mmmmmmm', 'mmmmmmmm', 'mmmmmmmmm']);
    romanHundreds = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['', 'c', 'cc', 'ccc', 'cd', 'd', 'dc', 'dcc', 'dccc', 'cm']);
    romanTens = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['', 'x', 'xx', 'xxx', 'xl', 'l', 'lx', 'lxx', 'lxxx', 'xc']);
    romanUnits = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix']);
}

function $format(this$static, number, picture, numGroupFormatter, letterValue, ordinal){
    var digitValue, digits, formchar, pictureLength, sb, wordCase, z_0, zero, penult, ult, s;
    if (lt(number, {l:0, m:0, h:0}) || picture == null || picture.length == 0) {
        return '' + toString_77(number);
    }
    pictureLength = getStringLength(picture);
    sb = new FastStringBuffer(16);
    formchar = picture.charCodeAt(0);
    $intern_48 <= formchar && formchar <= $intern_49 && (formchar = ((formchar & $intern_2) - $intern_48) * $intern_40 + (picture.charCodeAt(1) - $intern_50) + $intern_34);
    switch (formchar) {
        case 48:
    case 49:
        $append_3(sb, $toRadical(number, westernDigits, pictureLength, numGroupFormatter));
        ordinal != null && ordinal.length > 0 && $append_3(sb, (penult = ~~(toInt(mod(number, {l:100, m:0, h:0})) / 10) , ult = toInt(mod(number, {l:10, m:0, h:0})) , penult == 1?'th':ult == 1?'st':ult == 2?'nd':ult == 3?'rd':'th'));
        break;
    case 65:
        if (eq(number, {l:0, m:0, h:0})) {
            return '0';
        }

        return $toAlphaSequence(this$static, number, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');
    case 97:
        if (eq(number, {l:0, m:0, h:0})) {
            return '0';
        }

        return $toAlphaSequence(this$static, number, 'abcdefghijklmnopqrstuvwxyz');
    case 119:
case 87:
    $equals_5(picture, 'W')?(wordCase = 0):$equals_5(picture, 'w')?(wordCase = 1):(wordCase = 2);
    return ordinal != null && ordinal.length > 0?$toOrdinalWords(this$static, ordinal, number, wordCase):(eq(number, {l:0, m:0, h:0})?(s = 'Zero'):(s = $toWords(this$static, number)) , wordCase == 0?s.toUpperCase():wordCase == 1?s.toLowerCase():s);
case 105:
    if (letterValue == null || letterValue.length == 0 || $equals_5(letterValue, 'traditional')) {
        return toRoman(number);
    }

    break;
case 73:
    if (letterValue == null || letterValue.length == 0 || $equals_5(letterValue, 'traditional')) {
        return toRoman(number).toUpperCase();
    }

    break;
case 9312:
    if (eq(number, {l:0, m:0, h:0}) || gt(number, {l:20, m:0, h:0})) {
        return '' + toString_77(number);
    }

    return '' + charToString(toInt(sub_1(add_11({l:9312, m:0, h:0}, number), {l:1, m:0, h:0})) & $intern_2);
case 9332:
    if (eq(number, {l:0, m:0, h:0}) || gt(number, {l:20, m:0, h:0})) {
        return '' + toString_77(number);
    }

    return '' + charToString(toInt(sub_1(add_11({l:9332, m:0, h:0}, number), {l:1, m:0, h:0})) & $intern_2);
case 9352:
    if (eq(number, {l:0, m:0, h:0}) || gt(number, {l:20, m:0, h:0})) {
        return '' + toString_77(number);
    }

    return '' + charToString(toInt(sub_1(add_11({l:9352, m:0, h:0}, number), {l:1, m:0, h:0})) & $intern_2);
case 913:
    return $toAlphaSequence(this$static, number, '\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A2\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9');
case 945:
    return $toAlphaSequence(this$static, number, '\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C2\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9');
default:digitValue = getDigitValue(formchar);
    if (digitValue >= 0) {
        zero = formchar - digitValue;
        digits = initDim(I_classLit, $intern_4, 0, 10, 7, 1);
        for (z_0 = 0; z_0 <= 9; z_0++) {
            digits[z_0] = zero + z_0;
        }
        return $toRadical(number, digits, pictureLength, numGroupFormatter);
    }
    else {
        if (eq(number, {l:0, m:0, h:0})) {
            return '0';
        }
        return $toRadical(number, westernDigits, pictureLength, numGroupFormatter);
    }

    }
    return $condense(sb) , valueOf_3(sb.array, 0, sb.used);
}

function $halfDayName(minutes, maxWidth){
    var s;
    if (minutes == 0 && maxWidth >= 8) {
        s = 'Midnight';
    }
    else if (minutes < 720) {
        switch (maxWidth) {
            case 1:
                s = 'A';
                break;
            case 2:
        case 3:
            s = 'Am';
            break;
        default:s = 'A.M.';
        }
    }
    else if (minutes == 720 && maxWidth >= 8) {
        s = 'Noon';
    }
    else {
        switch (maxWidth) {
            case 1:
                s = 'P';
                break;
            case 2:
        case 3:
            s = 'Pm';
            break;
        default:s = 'P.M.';
        }
    }
    return s;
}

function $toAlphaSequence(this$static, number, alphabet){
    var last, range;
    if (lte(number, {l:0, m:0, h:0})) {
        return '' + toString_77(number);
    }
    range = alphabet.length;
    last = $charAt_1(alphabet, toInt(mod(sub_1(number, {l:1, m:0, h:0}), fromInt(range))));
    return gt(number, fromInt(range))?$toAlphaSequence(this$static, div_0(sub_1(number, {l:1, m:0, h:0}), fromInt(range)), alphabet) + charToString(last):'' + charToString(last);
}

function $toRadical(number, digits, pictureLength, numGroupFormatter){
    var base, count, digit, i_0, n, s, temp, len;
    temp = new FastStringBuffer(16);
    base = digits.length;
    s = new FastStringBuffer(16);
    n = number;
    count = 0;
    while (gt(n, {l:0, m:0, h:0})) {
        digit = digits[toInt(mod(n, fromInt(base)))];
        $prependWideChar(s, digit);
        ++count;
        n = div_0(n, fromInt(base));
    }
    for (i_0 = 0; i_0 < pictureLength - count; i_0++) {
        $appendWideChar(temp, digits[0]);
    }
    len = s.used;
    $ensureCapacity_0(temp, len);
    $getChars(s, len, temp.array, temp.used);
    temp.used += len;
    if (!numGroupFormatter) {
        return $condense(temp) , valueOf_3(temp.array, 0, temp.used);
    }
    return $format_1(numGroupFormatter, temp);
}

function toRoman(n){
    if (lte(n, {l:0, m:0, h:0}) || gt(n, {l:9999, m:0, h:0})) {
        return '' + toString_77(n);
    }
    return romanThousands[~~(toInt(n) / $intern_51)] + romanHundreds[~~(toInt(n) / 100) % 10] + romanTens[~~(toInt(n) / 10) % 10] + romanUnits[toInt(n) % 10];
}

defineClass(888, 1, {});
var romanHundreds, romanTens, romanThousands, romanUnits, westernDigits;
var Lclient_net_sf_saxon_ce_expr_number_AbstractNumberer_2_classLit = createForClass('client.net.sf.saxon.ce.expr.number', 'AbstractNumberer', 888, Ljava_lang_Object_2_classLit);
function $clinit_Alphanumeric(){
    $clinit_Alphanumeric = emptyMethod;
    zeroDigits = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [48, 1632, 1776, 2406, 2534, 2662, 2790, 2918, 3046, 3174, 3302, 3430, 3664, 3792, 3872, 4160, 6112, 6160, 6470, 6608, 65296, 66720, 67534, 67544, 67554, 67564, 67574]);
    startAstralAlphaNumeric = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [$intern_34, 65549, 65576, 65596, 65599, 65616, 65664, 65799, 65856, 65930, 66304, 66336, 66352, 66432, 66464, 66504, 66513, 66560, 66720, 67584, 67592, 67594, 67639, 67644, 67647, 68096, 68112, 68117, 68121, 68160, 119808, 119894, 119966, 119970, 119973, 119977, 119982, 119995, 119997, 120005, 120071, 120077, 120086, 120094, 120123, 120128, 120134, 120138, 120146, 120488, 120514, 120540, 120572, 120598, 120630, 120656, 120688, 120714, 120746, 120772, 120782, $intern_25, 194560]);
    endAstralAlphaNumeric = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [65547, 65574, 65594, 65597, 65613, 65629, 65786, 65843, 65912, 65930, 66334, 66339, 66378, 66461, 66499, 66511, 66517, 66717, 66729, 67589, 67592, 67637, 67640, 67644, 67647, 68096, 68115, 68119, 68147, 68167, 119892, 119964, 119967, 119970, 119974, 119980, 119993, 119995, 120003, 120069, 120074, 120084, 120092, 120121, 120126, 120132, 120134, 120144, 120485, 120512, 120538, 120570, 120596, 120628, 120654, 120686, 120712, 120744, 120770, 120777, 120831, 173782, 195101]);
}

function getDigitValue(in_$){
    $clinit_Alphanumeric();
    var z_0;
    for (z_0 = 0; z_0 < zeroDigits.length; z_0++) {
        if (in_$ <= zeroDigits[z_0] + 9) {
            return in_$ >= zeroDigits[z_0]?in_$ - zeroDigits[z_0]:-1;
        }
    }
    return -1;
}

function isAlphanumeric(c){
    $clinit_Alphanumeric();
    var i_0;
    if (c <= 127) {
        return c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122;
    }
    else if (c <= $intern_2) {
        return isLetterOrDigit(c & $intern_2);
    }
    else {
        for (i_0 = 0; i_0 < startAstralAlphaNumeric.length; i_0++) {
            if (c <= endAstralAlphaNumeric[i_0]) {
                return c >= startAstralAlphaNumeric[i_0];
            }
        }
        return false;
    }
}

var endAstralAlphaNumeric, startAstralAlphaNumeric, zeroDigits;
function $format_0(this$static, numbers, groupSize, groupSeparator, letterValue, ordinal, numberer){
    var nr, num, o, rgf, s, sb, tok;
    sb = new FastStringBuffer(16);
    num = 0;
    tok = 0;
    this$static.startsWithPunctuation && $append_3(sb, dynamicCastToString($get_1(this$static.punctuationTokens, 0)));
    while (num < numbers.size_1()) {
        num > 0 && (tok == 0 && this$static.startsWithPunctuation?$append_3(sb, '.'):$append_3(sb, dynamicCastToString($get_1(this$static.punctuationTokens, tok))));
        o = numbers.get_1(num++);
        if (instanceOf(o, 187)) {
            nr = dynamicCast(o, 187).value_0;
            rgf = new RegularGroupFormatter(groupSize, groupSeparator);
            s = $format(numberer, nr, dynamicCastToString($get_1(this$static.formatTokens, tok)), rgf, letterValue, ordinal);
        }
        else 
            instanceOf(o, 34)?(s = $toString_0(decimalToString((new IntegerValue_0(dynamicCast(o, 34))).value_0, new FastStringBuffer(16)))):(s = toString__Ljava_lang_String___devirtual$(o));
        $append_3(sb, s);
        ++tok;
        tok == this$static.formatTokens.array.length && --tok;
    }
    this$static.punctuationTokens.array.length > this$static.formatTokens.array.length && $append_3(sb, dynamicCastToString($get_1(this$static.punctuationTokens, this$static.punctuationTokens.array.length - 1)));
    return $condense(sb);
}

function $prepare_0(this$static, format){
    var c, first, i_0, len, sep, t, tok;
    format.length == 0 && (format = '1');
    this$static.formatTokens = new ArrayList_0(10);
    this$static.punctuationTokens = new ArrayList_0(10);
    len = format.length;
    i_0 = 0;
    first = true;
    this$static.startsWithPunctuation = true;
    while (i_0 < len) {
        c = format.charCodeAt(i_0);
        t = i_0;
        $intern_48 <= c && c <= $intern_49 && (c = ((c & $intern_2) - $intern_48) * $intern_40 + ($charAt_1(format, ++i_0) - $intern_50) + $intern_34);
        while (c <= 127?c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122:isAlphanumeric(c)) {
            ++i_0;
            if (i_0 == len)
                break;
            c = format.charCodeAt(i_0);
            $intern_48 <= c && c <= $intern_49 && (c = ((c & $intern_2) - $intern_48) * $intern_40 + ($charAt_1(format, ++i_0) - $intern_50) + $intern_34);
        }
        if (i_0 > t) {
            tok = format.substr(t, i_0 - t);
            $add_16(this$static.formatTokens, tok);
            if (first) {
                $add_16(this$static.punctuationTokens, '.');
                this$static.startsWithPunctuation = false;
                first = false;
            }
        }
        if (i_0 == len)
            break;
        t = i_0;
        c = format.charCodeAt(i_0);
        $intern_48 <= c && c <= $intern_49 && (c = ((c & $intern_2) - $intern_48) * $intern_40 + ($charAt_1(format, ++i_0) - $intern_50) + $intern_34);
        while (!(c <= 127?c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122:isAlphanumeric(c))) {
            first = false;
            ++i_0;
            if (i_0 == len)
                break;
            c = format.charCodeAt(i_0);
            $intern_48 <= c && c <= $intern_49 && (c = ((c & $intern_2) - $intern_48) * $intern_40 + ($charAt_1(format, ++i_0) - $intern_50) + $intern_34);
        }
        if (i_0 > t) {
            sep = format.substr(t, i_0 - t);
            $add_16(this$static.punctuationTokens, sep);
        }
    }
    if (this$static.formatTokens.array.length == 0) {
        $add_16(this$static.formatTokens, '1');
        this$static.punctuationTokens.array.length == 1 && $add_16(this$static.punctuationTokens, $get_1(this$static.punctuationTokens, 0));
    }
}

function NumberFormatter(){
}

defineClass(407, 1, {}, NumberFormatter);
_.startsWithPunctuation = false;
var Lclient_net_sf_saxon_ce_expr_number_NumberFormatter_2_classLit = createForClass('client.net.sf.saxon.ce.expr.number', 'NumberFormatter', 407, Ljava_lang_Object_2_classLit);
function $clinit_Numberer_en(){
    $clinit_Numberer_en = emptyMethod;
    $clinit_AbstractNumberer();
    englishUnits = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thir', 'Four', 'Fif', 'Six', 'Seven', 'Eigh', 'Nine']);
    englishTens = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['', '', 'Twen', 'Thir', 'For', 'Fif', 'Six', 'Seven', 'Eigh', 'Nine']);
    englishOrdinalUnits = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['', 'First', 'Second', 'Third', 'Fourth', 'Fifth', 'Sixth', 'Seventh', 'Eighth', 'Ninth', 'Tenth', 'Eleventh', 'Twelfth']);
    englishMonths = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);
    englishDays = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']);
}

function $toOrdinalWords(this$static, ordinalParam, number, wordCase){
    var rem, s;
    if (gte_0(number, {l:1755648, m:238, h:0})) {
        rem = mod(number, {l:1755648, m:238, h:0});
        s = $toWords(this$static, div_0(number, {l:1755648, m:238, h:0})) + ' Billion' + (eq(rem, {l:0, m:0, h:0})?'th':(lt(rem, {l:100, m:0, h:0})?' and ':' ') + $toOrdinalWords(this$static, ordinalParam, rem, wordCase));
    }
    else if (gte_0(number, {l:$intern_52, m:0, h:0})) {
        rem = mod(number, {l:$intern_52, m:0, h:0});
        s = $toWords(this$static, div_0(number, {l:$intern_52, m:0, h:0})) + ' Million' + (eq(rem, {l:0, m:0, h:0})?'th':(lt(rem, {l:100, m:0, h:0})?' and ':' ') + $toOrdinalWords(this$static, ordinalParam, rem, wordCase));
    }
    else if (gte_0(number, {l:$intern_51, m:0, h:0})) {
        rem = mod(number, {l:$intern_51, m:0, h:0});
        s = $toWords(this$static, div_0(number, {l:$intern_51, m:0, h:0})) + ' Thousand' + (eq(rem, {l:0, m:0, h:0})?'th':(lt(rem, {l:100, m:0, h:0})?' and ':' ') + $toOrdinalWords(this$static, ordinalParam, rem, wordCase));
    }
    else if (gte_0(number, {l:100, m:0, h:0})) {
        rem = mod(number, {l:100, m:0, h:0});
        s = $toWords(this$static, div_0(number, {l:100, m:0, h:0})) + ' Hundred' + (eq(rem, {l:0, m:0, h:0})?'th':' and ' + $toOrdinalWords(this$static, ordinalParam, rem, wordCase));
    }
    else {
        if (lt(number, {l:13, m:0, h:0})) {
            s = englishOrdinalUnits[toInt(number)];
        }
        else if (lt(number, {l:20, m:0, h:0})) {
            s = englishUnits[toInt(number)] + 'teenth';
        }
        else {
            rem = toInt(mod(number, {l:10, m:0, h:0}));
            rem == 0?(s = englishTens[~~(toInt(number) / 10)] + 'tieth'):(s = englishTens[~~(toInt(number) / 10)] + 'ty' + this$static.tensUnitsSeparatorOrdinal + englishOrdinalUnits[rem]);
        }
    }
    return wordCase == 0?s.toUpperCase():wordCase == 1?s.toLowerCase():s;
}

function $toWords(this$static, number){
    var rem;
    if (gte_0(number, {l:1755648, m:238, h:0})) {
        rem = mod(number, {l:1755648, m:238, h:0});
        return $toWords(this$static, div_0(number, {l:1755648, m:238, h:0})) + ' Billion' + (eq(rem, {l:0, m:0, h:0})?'':(lt(rem, {l:100, m:0, h:0})?' and ':' ') + $toWords(this$static, rem));
    }
    else if (gte_0(number, {l:$intern_52, m:0, h:0})) {
        rem = mod(number, {l:$intern_52, m:0, h:0});
        return $toWords(this$static, div_0(number, {l:$intern_52, m:0, h:0})) + ' Million' + (eq(rem, {l:0, m:0, h:0})?'':(lt(rem, {l:100, m:0, h:0})?' and ':' ') + $toWords(this$static, rem));
    }
    else if (gte_0(number, {l:$intern_51, m:0, h:0})) {
        rem = mod(number, {l:$intern_51, m:0, h:0});
        return $toWords(this$static, div_0(number, {l:$intern_51, m:0, h:0})) + ' Thousand' + (eq(rem, {l:0, m:0, h:0})?'':(lt(rem, {l:100, m:0, h:0})?' and ':' ') + $toWords(this$static, rem));
    }
    else if (gte_0(number, {l:100, m:0, h:0})) {
        rem = mod(number, {l:100, m:0, h:0});
        return $toWords(this$static, div_0(number, {l:100, m:0, h:0})) + ' Hundred' + (eq(rem, {l:0, m:0, h:0})?'':' and ' + $toWords(this$static, rem));
    }
    else {
        if (lt(number, {l:13, m:0, h:0})) {
            return englishUnits[toInt(number)];
        }
        else if (lt(number, {l:20, m:0, h:0})) {
            return englishUnits[toInt(number)] + 'teen';
        }
        rem = toInt(mod(number, {l:10, m:0, h:0}));
        return englishTens[~~(toInt(number) / 10)] + 'ty' + (rem == 0?'':this$static.tensUnitsSeparatorCardinal + englishUnits[rem]);
    }
}

function Numberer_en(){
    $clinit_Numberer_en();
}

function abbreviate(name_0, max_0){
    $clinit_Numberer_en();
    return name_0.length > max_0?name_0.substr(0, 3):name_0;
}

defineClass(342, 888, {}, Numberer_en);
_.tensUnitsSeparatorCardinal = ' ';
_.tensUnitsSeparatorOrdinal = '-';
var englishDays, englishMonths, englishOrdinalUnits, englishTens, englishUnits;
var Lclient_net_sf_saxon_ce_expr_number_Numberer_1en_2_classLit = createForClass('client.net.sf.saxon.ce.expr.number', 'Numberer_en', 342, Lclient_net_sf_saxon_ce_expr_number_AbstractNumberer_2_classLit);
defineClass(889, 1, {});
var Lclient_net_sf_saxon_ce_expr_number_NumericGroupFormatter_2_classLit = createForClass('client.net.sf.saxon.ce.expr.number', 'NumericGroupFormatter', 889, Ljava_lang_Object_2_classLit);
function $format_1(this$static, value_0){
    var groupSeparatorVal, i_0, j, temp, valueEx;
    valueEx = expand_0(value_0);
    groupSeparatorVal = expand_0(this$static.groupSeparator);
    temp = new FastStringBuffer(16);
    if (this$static.groupSize > 0) {
        for (i_0 = valueEx.length - 1 , j = 0; i_0 >= 0; --i_0 , j++) {
            j != 0 && j % this$static.groupSize == 0 && $prependWideChar(temp, groupSeparatorVal[0]);
            $prependWideChar(temp, valueEx[i_0]);
        }
        return $condense(temp) , valueOf_3(temp.array, 0, temp.used);
    }
    return $condense(value_0) , valueOf_3(value_0.array, 0, value_0.used);
}

function RegularGroupFormatter(grpSize, grpSep){
    this.groupSize = grpSize;
    this.groupSeparator = grpSep;
}

defineClass(831, 889, {}, RegularGroupFormatter);
_.groupSize = 0;
var Lclient_net_sf_saxon_ce_expr_number_RegularGroupFormatter_2_classLit = createForClass('client.net.sf.saxon.ce.expr.number', 'RegularGroupFormatter', 831, Lclient_net_sf_saxon_ce_expr_number_NumericGroupFormatter_2_classLit);
var Lclient_net_sf_saxon_ce_expr_sort_AtomicComparer_2_classLit = createForInterface('client.net.sf.saxon.ce.expr.sort', 'AtomicComparer');
function $clinit_AtomicSortComparer(){
    $clinit_AtomicSortComparer = emptyMethod;
    new StructuredQName('saxon', 'http://saxon.sf.net/collation-key', 'NaN');
}

function $compareAtomicValues(this$static, a, b){
    var ac, bc;
    if (!a) {
        return !b?0:-1;
    }
    else if (!b) {
        return 1;
    }
    if (instanceOf(a, 56)) {
        return $compareTo_8(dynamicCast(a, 56), b, this$static.collator);
    }
    else if (instanceOf(b, 56)) {
        return -$compareTo_8(dynamicCast(b, 56), a, this$static.collator);
    }
    else if (a.isNaN_0()) {
        return b.isNaN_0()?0:-1;
    }
    else if (b.isNaN_0()) {
        return 1;
    }
    else if (instanceOf(a, 12) && instanceOf(b, 12)) {
        return instanceOf(this$static.collator, 161)?$compareCS((dynamicCast(this$static.collator, 161) , toString__Ljava_lang_String___devirtual$_0(a.getPrimitiveStringValue())), toString__Ljava_lang_String___devirtual$_0(b.getPrimitiveStringValue())):this$static.collator.compareStrings(toString__Ljava_lang_String___devirtual$_0(a.getPrimitiveStringValue()), toString__Ljava_lang_String___devirtual$_0(b.getPrimitiveStringValue()));
    }
    else {
        ac = dynamicCast(a.getXPathComparable(true, this$static.collator, this$static.implicitTimezone), 24);
        bc = dynamicCast(b.getXPathComparable(true, this$static.collator, this$static.implicitTimezone), 24);
        if (ac == null || bc == null) {
            throw new ClassCastException_0('Values are not comparable (' + displayTypeName(a) + ', ' + displayTypeName(b) + ')');
        }
        else {
            return compareTo_Ljava_lang_Object__I__devirtual$(ac, bc);
        }
    }
}

function AtomicSortComparer(collator, implicitTimezone){
    this.collator = collator;
    !collator && (this.collator = ($clinit_CodepointCollator() , $clinit_CodepointCollator() , theInstance_0));
    this.implicitTimezone = implicitTimezone;
}

function makeSortComparer(collator, itemType, implicitTimezone){
    $clinit_AtomicSortComparer();
    return itemType == ($clinit_AtomicType() , STRING) || itemType == UNTYPED_ATOMIC || itemType == ANY_URI?instanceOf(collator, 161)?($clinit_CodepointCollatingComparer() , $clinit_CodepointCollatingComparer() , THE_INSTANCE):new CollatingAtomicComparer(collator):itemType == INTEGER || itemType == DECIMAL || itemType == DOUBLE || itemType == FLOAT || itemType == NUMERIC?($clinit_ComparableAtomicValueComparer() , $clinit_ComparableAtomicValueComparer() , THE_INSTANCE_0):itemType == DATE_TIME || itemType == DATE || itemType == TIME?new CalendarValueComparer(implicitTimezone):new AtomicSortComparer(collator, implicitTimezone);
}

defineClass(827, 1, $intern_53, AtomicSortComparer);
_.compareAtomicValues = function compareAtomicValues(a, b){
    return $compareAtomicValues(this, a, b);
}
;
_.comparesEqual = function comparesEqual(a, b){
    return $compareAtomicValues(this, a, b) == 0;
}
;
_.implicitTimezone = 0;
var Lclient_net_sf_saxon_ce_expr_sort_AtomicSortComparer_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'AtomicSortComparer', 827, Ljava_lang_Object_2_classLit);
function $compareAtomicValues_0(this$static, a, b){
    if (!a) {
        return !b?0:-1;
    }
    else if (!b) {
        return 1;
    }
    return dynamicCast(a, 73).compareTo_0(dynamicCast(b, 73), this$static.implicitTimezone);
}

function CalendarValueComparer(implicitTimezone){
    this.implicitTimezone = implicitTimezone;
}

defineClass(516, 1, $intern_53, CalendarValueComparer);
_.compareAtomicValues = function compareAtomicValues_0(a, b){
    return $compareAtomicValues_0(this, a, b);
}
;
_.comparesEqual = function comparesEqual_0(a, b){
    return $compareAtomicValues_0(this, a, b) == 0;
}
;
_.implicitTimezone = 0;
var Lclient_net_sf_saxon_ce_expr_sort_CalendarValueComparer_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'CalendarValueComparer', 516, Ljava_lang_Object_2_classLit);
function $clinit_CaseInsensitiveCollator(){
    $clinit_CaseInsensitiveCollator = emptyMethod;
    theInstance = new CaseInsensitiveCollator;
}

function CaseInsensitiveCollator(){
}

defineClass(735, 1, {}, CaseInsensitiveCollator);
_.compareStrings = function compareStrings(a, b){
    return compareTo_20(a.toLowerCase(), b.toLowerCase());
}
;
_.comparesEqual_0 = function comparesEqual_1(s1, s2){
    return $equalsIgnoreCase(s1, s2);
}
;
_.getCollationKey = function getCollationKey(s){
    return s.toLowerCase();
}
;
var theInstance;
var Lclient_net_sf_saxon_ce_expr_sort_CaseInsensitiveCollator_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'CaseInsensitiveCollator', 735, Ljava_lang_Object_2_classLit);
function $clinit_CodepointCollatingComparer(){
    $clinit_CodepointCollatingComparer = emptyMethod;
    $clinit_CodepointCollator();
    THE_INSTANCE = new CodepointCollatingComparer;
}

function CodepointCollatingComparer(){
}

defineClass(836, 1, $intern_53, CodepointCollatingComparer);
_.compareAtomicValues = function compareAtomicValues_1(a, b){
    var as, bs;
    if (!a) {
        return !b?0:-1;
    }
    else if (!b) {
        return 1;
    }
    as = dynamicCast(a, 12);
    bs = dynamicCast(b, 12);
    return !as.noSurrogates && $getStringLength(as) != length__I__devirtual$(as.value_0) || !bs.noSurrogates && $getStringLength(bs) != length__I__devirtual$(bs.value_0)?$compareCS(dynamicCastToString(as.value_0 = toString__Ljava_lang_String___devirtual$_0(as.value_0)), dynamicCastToString(bs.value_0 = toString__Ljava_lang_String___devirtual$_0(bs.value_0))):compareTo_20(dynamicCastToString(as.value_0 = toString__Ljava_lang_String___devirtual$_0(as.value_0)), dynamicCastToString(bs.value_0 = toString__Ljava_lang_String___devirtual$_0(bs.value_0)));
}
;
_.comparesEqual = function comparesEqual_2(a, b){
    var as, bs;
    as = dynamicCast(a, 12);
    bs = dynamicCast(b, 12);
    return length__I__devirtual$(as.value_0) == length__I__devirtual$(bs.value_0) && $equals_5(toString__Ljava_lang_String___devirtual$_0(as.value_0), toString__Ljava_lang_String___devirtual$_0(bs.value_0));
}
;
var THE_INSTANCE;
var Lclient_net_sf_saxon_ce_expr_sort_CodepointCollatingComparer_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'CodepointCollatingComparer', 836, Ljava_lang_Object_2_classLit);
function $clinit_CodepointCollator(){
    $clinit_CodepointCollator = emptyMethod;
    theInstance_0 = new CodepointCollator;
}

function $compareCS(a, b){
    var alen, blen, c, i_0, j, nexta, nextb;
    alen = a.length;
    blen = b.length;
    i_0 = 0;
    j = 0;
    while (true) {
        if (i_0 == alen) {
            return j == blen?0:-1;
        }
        if (j == blen) {
            return 1;
        }
        nexta = $charAt_1(a, i_0++);
        nexta >= $intern_48 && nexta <= $intern_49 && (nexta = (nexta - $intern_48) * $intern_40 + ($charAt_1(a, i_0++) - $intern_50) + $intern_34);
        nextb = $charAt_1(b, j++);
        nextb >= $intern_48 && nextb <= $intern_49 && (nextb = (nextb - $intern_48) * $intern_40 + ($charAt_1(b, j++) - $intern_50) + $intern_34);
        c = nexta - nextb;
        if (c != 0) {
            return c;
        }
    }
}

function CodepointCollator(){
}

defineClass(161, 1, {161:1}, CodepointCollator);
_.compareStrings = function compareStrings_0(a, b){
    return $compareCS(a, b);
}
;
_.comparesEqual_0 = function comparesEqual_3(s1, s2){
    return $equals_5(s1, s2);
}
;
_.getCollationKey = function getCollationKey_0(s){
    return s;
}
;
var theInstance_0;
var Lclient_net_sf_saxon_ce_expr_sort_CodepointCollator_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'CodepointCollator', 161, Ljava_lang_Object_2_classLit);
function $compareAtomicValues_1(this$static, a, b){
    if (!a) {
        return !b?0:-1;
    }
    else if (!b) {
        return 1;
    }
    return this$static.collator.compareStrings(toString__Ljava_lang_String___devirtual$_0(a.getPrimitiveStringValue()), toString__Ljava_lang_String___devirtual$_0(b.getPrimitiveStringValue()));
}

function CollatingAtomicComparer(collator){
    !collator?(this.collator = ($clinit_CodepointCollator() , $clinit_CodepointCollator() , theInstance_0)):(this.collator = collator);
}

defineClass(517, 1, $intern_53, CollatingAtomicComparer);
_.compareAtomicValues = function compareAtomicValues_2(a, b){
    return $compareAtomicValues_1(this, a, b);
}
;
_.comparesEqual = function comparesEqual_4(a, b){
    return $compareAtomicValues_1(this, a, b) == 0;
}
;
var Lclient_net_sf_saxon_ce_expr_sort_CollatingAtomicComparer_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'CollatingAtomicComparer', 517, Ljava_lang_Object_2_classLit);
function $clinit_ComparableAtomicValueComparer(){
    $clinit_ComparableAtomicValueComparer = emptyMethod;
    THE_INSTANCE_0 = new ComparableAtomicValueComparer;
}

function ComparableAtomicValueComparer(){
}

defineClass(835, 1, $intern_53, ComparableAtomicValueComparer);
_.compareAtomicValues = function compareAtomicValues_3(a, b){
    if (!a) {
        return !b?0:-1;
    }
    else if (!b) {
        return 1;
    }
    return compareTo_Ljava_lang_Object__I__devirtual$(dynamicCast(a, 24), b);
}
;
_.comparesEqual = function comparesEqual_5(a, b){
    return a.equals$(b);
}
;
var THE_INSTANCE_0;
var Lclient_net_sf_saxon_ce_expr_sort_ComparableAtomicValueComparer_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'ComparableAtomicValueComparer', 835, Ljava_lang_Object_2_classLit);
function DescendingComparer(base){
    this.baseComparer = base;
}

defineClass(508, 1, $intern_53, DescendingComparer);
_.compareAtomicValues = function compareAtomicValues_4(a, b){
    return -this.baseComparer.compareAtomicValues(a, b);
}
;
_.comparesEqual = function comparesEqual_6(a, b){
    return this.baseComparer.comparesEqual(a, b);
}
;
var Lclient_net_sf_saxon_ce_expr_sort_DescendingComparer_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'DescendingComparer', 508, Ljava_lang_Object_2_classLit);
function $$init_3(this$static){
}

function DocumentOrderIterator(){
    $$init_3(this);
}

function DocumentOrderIterator_0(base, comparer){
    $$init_3(this);
    this.comparer = comparer;
    this.sequence = new SequenceExtent(base);
    this.sequence.value_0.length > 1 && quickSort1(0, this.sequence.value_0.length, this);
    this.iterator = new ArrayIterator(this.sequence.value_0);
}

defineClass(209, 1, $intern_18, DocumentOrderIterator, DocumentOrderIterator_0);
_.compare = function compare_0(a, b){
    return this.comparer.compare_0(dynamicCast($itemAt(this.sequence, a), 7), dynamicCast($itemAt(this.sequence, b), 7));
}
;
_.getAnother = function getAnother_12(){
    var another;
    another = new DocumentOrderIterator;
    another.iterator = this.iterator.getAnother();
    return another;
}
;
_.next_0 = function next_9(){
    var next;
    while (true) {
        next = dynamicCast(this.iterator.next_0(), 7);
        if (!next) {
            this.current = null;
            return null;
        }
        if (!!this.current && next.isSameNodeInfo(this.current)) {
            continue;
        }
        else {
            this.current = next;
            return this.current;
        }
    }
}
;
_.swap = function swap(a, b){
    $swap(this.sequence, a, b);
}
;
_.current = null;
var Lclient_net_sf_saxon_ce_expr_sort_DocumentOrderIterator_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'DocumentOrderIterator', 209, Ljava_lang_Object_2_classLit);
function DocumentSorter(base){
    var props;
    UnaryExpression.call(this, base);
    props = (base.staticProperties == -1 && (base.staticProperties = base.start_0.getDependencies() | base.step.getDependencies() & 481 | $computeCardinality(base) | $computeSpecialProperties_1(base)) , base.staticProperties & $intern_11);
    (props & $intern_34) != 0 || (props & $intern_39) != 0?(this.comparer = ($clinit_LocalOrderComparer() , $clinit_LocalOrderComparer() , instance_1)):(this.comparer = ($clinit_GlobalOrderComparer() , $clinit_GlobalOrderComparer() , instance_0));
}

defineClass(268, 54, {6:1, 54:1, 268:1}, DocumentSorter);
_.computeSpecialProperties = function computeSpecialProperties_25(){
    return $getSpecialProperties(this.operand) | $intern_25;
}
;
_.effectiveBooleanValue = function effectiveBooleanValue_9(context){
    return this.operand.effectiveBooleanValue(context);
}
;
_.iterate_0 = function iterate_34(context){
    return new DocumentOrderIterator_0(this.operand.iterate_0(context), this.comparer);
}
;
_.optimize = function optimize_52(visitor, contextItemType){
    this.operand = $optimize_1(visitor, this.operand, contextItemType);
    if (($getSpecialProperties(this.operand) & $intern_25) != 0) {
        return this.operand;
    }
    return this;
}
;
_.promote = function promote_16(offer, parent_0){
    var exp_0;
    exp_0 = $accept(offer, this);
    if (exp_0) {
        return exp_0;
    }
    else {
        this.operand = $doPromotion(this, this.operand, offer);
        return this;
    }
}
;
_.simplify = function simplify_44(visitor){
    this.operand = $simplify(visitor, this.operand);
    if (($getSpecialProperties(this.operand) & $intern_25) != 0) {
        return this.operand;
    }
    return this;
}
;
var Lclient_net_sf_saxon_ce_expr_sort_DocumentSorter_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'DocumentSorter', 268, Lclient_net_sf_saxon_ce_expr_UnaryExpression_2_classLit);
function $compareAtomicValues_2(this$static, a, b){
    var ac, bc;
    if (!a) {
        return !b?0:-1;
    }
    else if (!b) {
        return 1;
    }
    if (instanceOf(a, 12) && instanceOf(b, 12)) {
        return instanceOf(this$static.collator, 161)?$compareCS((dynamicCast(this$static.collator, 161) , toString__Ljava_lang_String___devirtual$_0(a.getPrimitiveStringValue())), toString__Ljava_lang_String___devirtual$_0(b.getPrimitiveStringValue())):this$static.collator.compareStrings(toString__Ljava_lang_String___devirtual$_0(a.getPrimitiveStringValue()), toString__Ljava_lang_String___devirtual$_0(b.getPrimitiveStringValue()));
    }
    else {
        ac = dynamicCast(a.getXPathComparable(true, this$static.collator, this$static.implicitTimezone), 24);
        bc = dynamicCast(b.getXPathComparable(true, this$static.collator, this$static.implicitTimezone), 24);
        if (ac == null || bc == null) {
            throw new ClassCastException_0('Objects are not comparable (' + displayTypeName(a) + ', ' + displayTypeName(b) + ')');
        }
        else {
            return compareTo_Ljava_lang_Object__I__devirtual$(ac, bc);
        }
    }
}

function $comparesEqual(this$static, a, b){
    var ac, bc;
    if (instanceOf(a, 12) && instanceOf(b, 12)) {
        return this$static.collator.comparesEqual_0(toString__Ljava_lang_String___devirtual$_0(a.getPrimitiveStringValue()), toString__Ljava_lang_String___devirtual$_0(b.getPrimitiveStringValue()));
    }
    else if (instanceOf(a, 73) && instanceOf(b, 73)) {
        return dynamicCast(a, 73).compareTo_0(dynamicCast(b, 73), this$static.implicitTimezone) == 0;
    }
    else {
        ac = a.getXPathComparable(false, this$static.collator, this$static.implicitTimezone);
        bc = b.getXPathComparable(false, this$static.collator, this$static.implicitTimezone);
        return equals_Ljava_lang_Object__Z__devirtual$(ac, bc);
    }
}

function GenericAtomicComparer(collator, implicitTimezone){
    this.collator = collator;
    !collator && (this.collator = ($clinit_CodepointCollator() , $clinit_CodepointCollator() , theInstance_0));
    this.implicitTimezone = implicitTimezone;
}

function makeAtomicComparer(type0, type1, collator, implicitTimezone){
    if (type0 == type1) {
        if (type0 == ($clinit_AtomicType() , DATE_TIME) || type0 == DATE || type0 == TIME || type0 == G_DAY || type0 == G_MONTH || type0 == G_MONTH_DAY || type0 == G_YEAR || type0 == G_YEAR_MONTH) {
            return new CalendarValueComparer(implicitTimezone);
        }
        else if (type0 == BOOLEAN || type0 == DAY_TIME_DURATION || type0 == YEAR_MONTH_DURATION || type0 == BASE64_BINARY || type0 == HEX_BINARY || type0 == QNAME) {
            return $clinit_ComparableAtomicValueComparer() , $clinit_ComparableAtomicValueComparer() , THE_INSTANCE_0;
        }
    }
    if ((type0 == ($clinit_AtomicType() , NUMERIC) || type0 == INTEGER || type0.baseType == NUMERIC) && (type1 == NUMERIC || type1 == INTEGER || type1.baseType == NUMERIC)) {
        return $clinit_ComparableAtomicValueComparer() , $clinit_ComparableAtomicValueComparer() , THE_INSTANCE_0;
    }
    if ((type0 == STRING || type0 == UNTYPED_ATOMIC || type0 == ANY_URI) && (type1 == STRING || type1 == UNTYPED_ATOMIC || type1 == ANY_URI)) {
        return instanceOf(collator, 161)?($clinit_CodepointCollatingComparer() , $clinit_CodepointCollatingComparer() , THE_INSTANCE):new CollatingAtomicComparer(collator);
    }
    return new GenericAtomicComparer(collator, implicitTimezone);
}

defineClass(308, 1, $intern_53, GenericAtomicComparer);
_.compareAtomicValues = function compareAtomicValues_5(a, b){
    return $compareAtomicValues_2(this, a, b);
}
;
_.comparesEqual = function comparesEqual_7(a, b){
    return $comparesEqual(this, a, b);
}
;
_.implicitTimezone = 0;
var Lclient_net_sf_saxon_ce_expr_sort_GenericAtomicComparer_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'GenericAtomicComparer', 308, Ljava_lang_Object_2_classLit);
function med3(a, b, c, comp){
    var bc;
    bc = comp.compare(b, c);
    return comp.compare(a, b) < 0?bc < 0?b:comp.compare(a, c) < 0?c:a:bc > 0?b:comp.compare(a, c) > 0?c:a;
}

function quickSort1(off, len, comp){
    var a, aa, b, bb, c, c0, comparison, d, i_0, j, l, m, n, n0, s, s0;
    if (len < 7) {
        for (i_0 = off; i_0 < len + off; i_0++)
            for (j = i_0; j > off && comp.compare(j - 1, j) > 0; j--) {
                comp.swap(j, j - 1);
            }
            return;
    }
    m = off + (len >>> 1);
    if (len > 7) {
        l = off;
        n0 = off + len - 1;
        if (len > 40) {
            s0 = len >>> 3;
            l = med3(off, off + s0, off + 2 * s0, comp);
            m = med3(m - s0, m, m + s0, comp);
            n0 = med3(n0 - 2 * s0, n0 - s0, n0, comp);
        }
        c0 = comp.compare(m, n0);
        m = comp.compare(l, m) < 0?c0 < 0?m:comp.compare(l, n0) < 0?n0:l:c0 > 0?m:comp.compare(l, n0) > 0?n0:l;
    }
    a = off;
    b = off;
    c = off + len - 1;
    d = c;
    while (true) {
        while (b <= c && (comparison = comp.compare(b, m)) <= 0) {
            if (comparison == 0) {
                a == m?(m = b):b == m && (m = a);
                comp.swap(a++, b);
            }
            ++b;
        }
        while (c >= b && (comparison = comp.compare(c, m)) >= 0) {
            if (comparison == 0) {
                c == m?(m = d):d == m && (m = c);
                comp.swap(c, d--);
            }
            --c;
        }
        if (b > c)
            break;
        b == m?(m = d):c == m && (m = c);
        comp.swap(b++, c--);
    }
    s = a - off < b - a?a - off:b - a;
    aa = off;
    bb = b - s;
    while (--s >= 0)
        comp.swap(aa++, bb++);
    n = off + len;
    s = d - c < n - d - 1?d - c:n - d - 1;
    aa = b;
    bb = n - s;
    while (--s >= 0)
        comp.swap(aa++, bb++);
    (s = b - a) > 1 && quickSort1(off, s, comp);
    (s = d - c) > 1 && quickSort1(n - s, s, comp);
}

function $clinit_GlobalOrderComparer(){
    $clinit_GlobalOrderComparer = emptyMethod;
    instance_0 = new GlobalOrderComparer;
}

function $compare_0(a, b){
    var d1, d2;
    if (a == b) {
        return 0;
    }
    d1 = fromInt(a.getDocumentNumber());
    d2 = fromInt(b.getDocumentNumber());
    if (eq(d1, d2)) {
        return a.compareOrder(b);
    }
    return eq(sub_1(d1, d2), {l:0, m:0, h:0})?0:lt(sub_1(d1, d2), {l:0, m:0, h:0})?-1:1;
}

function GlobalOrderComparer(){
}

defineClass(790, 1, {}, GlobalOrderComparer);
_.compare_0 = function compare_1(a, b){
    return $compare_0(a, b);
}
;
var instance_0;
var Lclient_net_sf_saxon_ce_expr_sort_GlobalOrderComparer_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'GlobalOrderComparer', 790, Ljava_lang_Object_2_classLit);
function $advance(this$static){
    var candidateKey, compKey, err, nextCandidate;
    this$static.currentMembers = new ArrayList_0(20);
    $add_16(this$static.currentMembers, this$static.current);
    while (true) {
        nextCandidate = $next_3(this$static.population);
        if (!nextCandidate) {
            break;
        }
        candidateKey = dynamicCast(this$static.keyExpression.evaluateItem(this$static.runningContext), 13);
        try {
            compKey = candidateKey.isNaN_0()?Lclient_net_sf_saxon_ce_functions_DistinctValues_2_classLit:candidateKey.getXPathComparable(false, this$static.collator, this$static.baseContext.getImplicitTimezone());
            if (equals_Ljava_lang_Object__Z__devirtual$(this$static.currentComparisonKey, compKey)) {
                $add_16(this$static.currentMembers, nextCandidate);
            }
            else {
                this$static.next = nextCandidate;
                this$static.nextKey = candidateKey;
                return;
            }
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 72)) {
                err = new XPathException_0('Grouping key values are of non-comparable types (' + displayTypeName(this$static.currentKey) + ' and ' + displayTypeName(candidateKey) + ')');
                err.isTypeError = true;
                throw err;
            }
            else 
                throw unwrap($e0);
        }
    }
    this$static.next = null;
    this$static.nextKey = null;
}

function $comparisonKey(this$static, candidateKey){
    return candidateKey.isNaN_0()?Lclient_net_sf_saxon_ce_functions_DistinctValues_2_classLit:candidateKey.getXPathComparable(false, this$static.collator, this$static.baseContext.getImplicitTimezone());
}

function GroupAdjacentIterator(population, keyExpression, baseContext, collator){
    this.keyExpression = keyExpression;
    this.baseContext = baseContext;
    this.runningContext = baseContext.newMinorContext();
    this.population = this.runningContext.setCurrentIterator(population);
    this.collator = collator;
    this.next = $next_3(this.population);
    !!this.next && (this.nextKey = dynamicCast(keyExpression.evaluateItem(this.runningContext), 13));
}

defineClass(512, 1, $intern_54, GroupAdjacentIterator);
_.getAnother = function getAnother_13(){
    return new GroupAdjacentIterator(new FocusIterator(this.population.base.getAnother()), this.keyExpression, this.baseContext, this.collator);
}
;
_.getCurrentGroupingKey = function getCurrentGroupingKey(){
    return this.currentKey;
}
;
_.iterateCurrentGroup = function iterateCurrentGroup(){
    return new ListIterator(this.currentMembers);
}
;
_.next_0 = function next_10(){
    if (!this.next) {
        this.current = null;
        this.position_0 = -1;
        return null;
    }
    this.current = this.next;
    this.currentKey = this.nextKey;
    this.currentComparisonKey = $comparisonKey(this, this.currentKey);
    ++this.position_0;
    $advance(this);
    return this.current;
}
;
_.current = null;
_.currentKey = null;
_.nextKey = null;
_.position_0 = 0;
var Lclient_net_sf_saxon_ce_expr_sort_GroupAdjacentIterator_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'GroupAdjacentIterator', 512, Ljava_lang_Object_2_classLit);
function $current0(this$static){
    if (this$static.position_0 < 1) {
        return null;
    }
    return dynamicCast($get_1(dynamicCast($get_1(this$static.groups, this$static.position_0 - 1), 16), 0), 15);
}

function $processItem(this$static, index_0, item_0, c2){
    var comparisonKey, firstKey, g, key, keys_0, newGroup;
    keys_0 = this$static.keyExpression.iterate_0(c2);
    firstKey = true;
    while (true) {
        key = dynamicCast(keys_0.next_0(), 13);
        if (!key) {
            break;
        }
        key.isNaN_0()?(comparisonKey = Lclient_net_sf_saxon_ce_functions_DistinctValues_2_classLit):(comparisonKey = key.getXPathComparable(false, this$static.collator, c2.getImplicitTimezone()));
        g = dynamicCast(isJavaString(comparisonKey)?$getStringValue_1(index_0, comparisonKey):getEntryValueOrNull($getEntry(index_0.hashCodeMap, comparisonKey)), 88);
        if (!g) {
            newGroup = new ArrayList_0(20);
            setCheck(newGroup.array, newGroup.array.length, item_0);
            $add_16(this$static.groups, newGroup);
            $add_16(this$static.groupKeys, key);
            isJavaString(comparisonKey)?$putStringValue(index_0, comparisonKey, newGroup):$put_1(index_0.hashCodeMap, comparisonKey, newGroup);
        }
        else {
            firstKey?g.add_3(item_0):maskUndefined(g.get_1(g.size_1() - 1)) !== maskUndefined(item_0) && g.add_3(item_0);
        }
        firstKey = false;
    }
}

function GroupByIterator(population, keyExpression, keyContext, collator){
    var c2, index_0, item_0, type_0;
    this.groups = new ArrayList_0(40);
    this.groupKeys = new ArrayList_0(40);
    this.keyExpression = keyExpression;
    this.keyContext = keyContext;
    this.collator = collator;
    type_0 = dynamicCast(keyExpression.getItemType(), 43);
    makeSortComparer(collator, type_0, keyContext.getImplicitTimezone());
    index_0 = new HashMap_0(40);
    c2 = this.keyContext.newMinorContext();
    this.population = c2.setCurrentIterator(population);
    while (true) {
        item_0 = $next_3(this.population);
        if (!item_0) {
            break;
        }
        $processItem(this, index_0, item_0, c2);
    }
}

defineClass(511, 1, $intern_55, GroupByIterator);
_.getAnother = function getAnother_14(){
    var c2;
    c2 = this.keyContext.newMinorContext();
    return new GroupByIterator(new FocusIterator(this.population.base.getAnother()), this.keyExpression, c2, this.collator);
}
;
_.getCurrentGroupingKey = function getCurrentGroupingKey_0(){
    return dynamicCast($get_1(this.groupKeys, this.position_0 - 1), 13);
}
;
_.getLastPosition = function getLastPosition_0(){
    return this.groups.array.length;
}
;
_.iterateCurrentGroup = function iterateCurrentGroup_0(){
    return new ListIterator(dynamicCast($get_1(this.groups, this.position_0 - 1), 88));
}
;
_.next_0 = function next_11(){
    if (this.position_0 >= 0 && this.position_0 < this.groups.array.length) {
        ++this.position_0;
        return $current0(this);
    }
    else {
        this.position_0 = -1;
        return null;
    }
}
;
_.position_0 = 0;
var Lclient_net_sf_saxon_ce_expr_sort_GroupByIterator_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'GroupByIterator', 511, Ljava_lang_Object_2_classLit);
function GroupMatchingIterator(){
}

defineClass(513, 1, $intern_54);
_.getCurrentGroupingKey = function getCurrentGroupingKey_1(){
    return null;
}
;
_.iterateCurrentGroup = function iterateCurrentGroup_1(){
    return new ListIterator(this.currentMembers);
}
;
_.next_0 = function next_12(){
    if (this.next) {
        this.current = this.next;
        ++this.position_0;
        this.advance();
        return this.current;
    }
    else {
        this.current = null;
        this.position_0 = -1;
        return null;
    }
}
;
_.current = null;
_.position_0 = 0;
var Lclient_net_sf_saxon_ce_expr_sort_GroupMatchingIterator_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'GroupMatchingIterator', 513, Ljava_lang_Object_2_classLit);
function GroupEndingIterator(population, endPattern, context){
    GroupMatchingIterator.call(this);
    this.pattern = endPattern;
    this.baseContext = context;
    this.runningContext = context.newMinorContext();
    this.population = this.runningContext.setCurrentIterator(population);
    this.next = population.next_0();
}

defineClass(515, 513, $intern_54, GroupEndingIterator);
_.advance = function advance(){
    this.currentMembers = new ArrayList_0(20);
    $add_16(this.currentMembers, this.current);
    this.next = this.current;
    while (this.next) {
        if (this.pattern.matches_2(dynamicCast(this.next, 7), this.runningContext)) {
            this.next = $next_3(this.population);
            if (this.next) {
                break;
            }
        }
        else {
            this.next = $next_3(this.population);
            !!this.next && $add_16(this.currentMembers, this.next);
        }
    }
}
;
_.getAnother = function getAnother_15(){
    return new GroupEndingIterator(new FocusIterator(this.population.base.getAnother()), this.pattern, this.baseContext);
}
;
var Lclient_net_sf_saxon_ce_expr_sort_GroupEndingIterator_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'GroupEndingIterator', 515, Lclient_net_sf_saxon_ce_expr_sort_GroupMatchingIterator_2_classLit);
function GroupStartingIterator(population, startPattern, context){
    GroupMatchingIterator.call(this);
    this.pattern = startPattern;
    this.baseContext = context;
    this.runningContext = context.newMinorContext();
    this.population = this.runningContext.setCurrentIterator(population);
    this.next = population.next_0();
}

defineClass(514, 513, $intern_54, GroupStartingIterator);
_.advance = function advance_0(){
    var nextCandidate;
    this.currentMembers = new ArrayList_0(10);
    $add_16(this.currentMembers, this.current);
    while (true) {
        nextCandidate = dynamicCast($next_3(this.population), 7);
        if (!nextCandidate) {
            break;
        }
        if (this.pattern.matches_2(nextCandidate, this.runningContext)) {
            this.next = nextCandidate;
            return;
        }
        else {
            $add_16(this.currentMembers, nextCandidate);
        }
    }
    this.next = null;
}
;
_.getAnother = function getAnother_16(){
    return new GroupStartingIterator(new FocusIterator(this.population.base.getAnother()), this.pattern, this.baseContext);
}
;
var Lclient_net_sf_saxon_ce_expr_sort_GroupStartingIterator_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'GroupStartingIterator', 514, Lclient_net_sf_saxon_ce_expr_sort_GroupMatchingIterator_2_classLit);
function $clinit_LocalOrderComparer(){
    $clinit_LocalOrderComparer = emptyMethod;
    instance_1 = new LocalOrderComparer;
}

function $compare_1(a, b){
    return a.compareOrder(b);
}

function LocalOrderComparer(){
}

defineClass(791, 1, {}, LocalOrderComparer);
_.compare_0 = function compare_2(a, b){
    return $compare_1(a, b);
}
;
var instance_1;
var Lclient_net_sf_saxon_ce_expr_sort_LocalOrderComparer_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'LocalOrderComparer', 791, Ljava_lang_Object_2_classLit);
function $clinit_NumericComparer(){
    $clinit_NumericComparer = emptyMethod;
    THE_INSTANCE_1 = new NumericComparer;
}

function $compareAtomicValues_3(a, b){
    var d1, d2;
    d1 = $makeDouble(a);
    d2 = $makeDouble(b);
    if (isNaN(d1)) {
        return isNaN(d2)?0:-1;
    }
    if (isNaN(d2)) {
        return 1;
    }
    if (d1 < d2)
        return -1;
    if (d1 > d2)
        return 1;
    return 0;
}

function $makeDouble(a){
    var d1;
    if (instanceOf(a, 25)) {
        d1 = dynamicCast(a, 25).getDoubleValue();
    }
    else if (!a) {
        d1 = NaN;
    }
    else {
        try {
            d1 = stringToNumber(toString__Ljava_lang_String___devirtual$_0(a.getPrimitiveStringValue()));
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 57)) {
                d1 = NaN;
            }
            else 
                throw unwrap($e0);
        }
    }
    return d1;
}

function NumericComparer(){
}

defineClass(829, 1, $intern_53, NumericComparer);
_.compareAtomicValues = function compareAtomicValues_6(a, b){
    return $compareAtomicValues_3(a, b);
}
;
_.comparesEqual = function comparesEqual_8(a, b){
    return $compareAtomicValues_3(a, b) == 0;
}
;
var THE_INSTANCE_1;
var Lclient_net_sf_saxon_ce_expr_sort_NumericComparer_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'NumericComparer', 829, Ljava_lang_Object_2_classLit);
function $isSortKey(this$static, child){
    var exp_0, skd, skd$array, skd$index, skd$max;
    for (skd$array = this$static.sortKeyDefinitions , skd$index = 0 , skd$max = skd$array.length; skd$index < skd$max; ++skd$index) {
        skd = skd$array[skd$index];
        exp_0 = skd.sortKey;
        if (exp_0 == child) {
            return true;
        }
    }
    return false;
}

function $iterateSubExpressions_0(this$static){
    var e, i_0, list, skd, skd$array, skd$index, skd$max;
    list = new ArrayList_0(8);
    $add_16(list, this$static.select);
    for (skd$array = this$static.sortKeyDefinitions , skd$index = 0 , skd$max = skd$array.length; skd$index < skd$max; ++skd$index) {
        skd = skd$array[skd$index];
        $add_16(list, skd.sortKey);
        for (i_0 = 0; i_0 < 6; i_0++) {
            e = skd.sortProperties[i_0];
            !!e && (setCheck(list.array, list.array.length, e) , true);
        }
    }
    return new AbstractList$IteratorImpl(list);
}

function SortExpression(select, sortKeys){
    var children, exp_0;
    this.select = select;
    this.sortKeyDefinitions = sortKeys;
    children = $iterateSubExpressions_0(this);
    while (children.i < children.this$01_0.size_1()) {
        exp_0 = (checkCriticalElement(children.i < children.this$01_0.size_1()) , dynamicCast(children.this$01_0.get_1(children.last = children.i++), 6));
        $adoptChildExpression(this, exp_0);
    }
}

defineClass(355, 6, {6:1}, SortExpression);
_.computeCardinality = function computeCardinality_36(){
    return this.select.getCardinality();
}
;
_.computeSpecialProperties = function computeSpecialProperties_26(){
    var props;
    props = 0;
    ($getSpecialProperties(this.select) & $intern_34) != 0 && (props |= $intern_34);
    ($getSpecialProperties(this.select) & $intern_39) != 0 && (props |= $intern_39);
    ($getSpecialProperties(this.select) & $intern_22) != 0 && (props |= $intern_22);
    return props;
}
;
_.evaluateSortKey = function evaluateSortKey_0(n, c){
    return this.sortKeyDefinitions[n].sortKey.evaluateItem(c);
}
;
_.getItemType = function getItemType_62(){
    return this.select.getItemType();
}
;
_.hasLoopingSubexpression = function hasLoopingSubexpression_8(child){
    return $isSortKey(this, child);
}
;
_.iterate_0 = function iterate_35(context){
    var comp, comps, iter, s, xpc;
    iter = this.select.iterate_0(context);
    if (instanceOf(iter, 316)) {
        return iter;
    }
    xpc = context.newMinorContext();
    comps = this.comparators;
    if (this.comparators == null) {
        comps = initDim(Lclient_net_sf_saxon_ce_expr_sort_AtomicComparer_2_classLit, $intern_1, 167, this.sortKeyDefinitions.length, 0, 1);
        for (s = 0; s < this.sortKeyDefinitions.length; s++) {
            comp = this.sortKeyDefinitions[s].finalComparator;
            !comp && (comp = $makeComparator(this.sortKeyDefinitions[s], xpc));
            setCheck(comps, s, comp);
        }
    }
    return new SortedIterator_0(xpc, iter, this, comps);
}
;
_.iterateSubExpressions = function iterateSubExpressions_31(){
    return $iterateSubExpressions_0(this);
}
;
_.optimize = function optimize_53(visitor, contextItemType){
    var select2, sortKey, sortKeyDefinition, sortKeyDefinition$array, sortKeyDefinition$index, sortKeyDefinition$max, sortedItemType;
    select2 = $optimize_1(visitor, this.select, contextItemType);
    if (select2 != this.select) {
        $adoptChildExpression(this, select2);
        this.select = select2;
    }
    sortedItemType = this.select.getItemType();
    for (sortKeyDefinition$array = this.sortKeyDefinitions , sortKeyDefinition$index = 0 , sortKeyDefinition$max = sortKeyDefinition$array.length; sortKeyDefinition$index < sortKeyDefinition$max; ++sortKeyDefinition$index) {
        sortKeyDefinition = sortKeyDefinition$array[sortKeyDefinition$index];
        sortKey = sortKeyDefinition.sortKey;
        sortKey = $optimize_1(visitor, sortKey, sortedItemType);
        sortKeyDefinition.sortKey = sortKey;
    }
    return (this.select.getCardinality() & $intern_14) != 0?this:this.select;
}
;
_.promote = function promote_17(offer, parent_0){
    var e, exp_0, i_0, sk2, skd, skd$array, skd$index, skd$max;
    exp_0 = $accept(offer, this);
    if (exp_0) {
        return exp_0;
    }
    else {
        this.select = $doPromotion(this, this.select, offer);
        for (skd$array = this.sortKeyDefinitions , skd$index = 0 , skd$max = skd$array.length; skd$index < skd$max; ++skd$index) {
            skd = skd$array[skd$index];
            sk2 = skd.sortKey.promote(offer, parent_0);
            skd.sortKey = sk2;
            for (i_0 = 0; i_0 < 6; i_0++) {
                e = skd.sortProperties[i_0];
                !!e && $setSortProperty(skd, i_0, e.promote(offer, parent_0));
            }
        }
        return this;
    }
}
;
_.simplify = function simplify_45(visitor){
    this.select = $simplify(visitor, this.select);
    return this;
}
;
_.typeCheck = function typeCheck_59(visitor, contextItemType){
    var allKeysFixed, comp, i_0, role, select2, sortKey, sortKeyDefinition, sortKeyDefinition$array, sortKeyDefinition$index, sortKeyDefinition$max, sortedItemType;
    select2 = $typeCheck_1(visitor, this.select, contextItemType);
    if (select2 != this.select) {
        $adoptChildExpression(this, select2);
        this.select = select2;
    }
    sortedItemType = this.select.getItemType();
    allKeysFixed = true;
    for (sortKeyDefinition$array = this.sortKeyDefinitions , sortKeyDefinition$index = 0 , sortKeyDefinition$max = sortKeyDefinition$array.length; sortKeyDefinition$index < sortKeyDefinition$max; ++sortKeyDefinition$index) {
        sortKeyDefinition = sortKeyDefinition$array[sortKeyDefinition$index];
        if (!$isFixed(sortKeyDefinition)) {
            allKeysFixed = false;
            break;
        }
    }
    allKeysFixed && (this.comparators = initDim(Lclient_net_sf_saxon_ce_expr_sort_AtomicComparer_2_classLit, $intern_1, 167, this.sortKeyDefinitions.length, 0, 1));
    for (i_0 = 0; i_0 < this.sortKeyDefinitions.length; i_0++) {
        sortKey = this.sortKeyDefinitions[i_0].sortKey;
        sortKey = $typeCheck_1(visitor, sortKey, sortedItemType);
        if (visitor.staticContext.isInBackwardsCompatibleMode()) {
            sortKey = new FirstItemExpression(sortKey);
        }
        else {
            role = new RoleLocator(4, 'xsl:sort/select', 0);
            role.errorCode = 'XTTE1020';
            sortKey = makeCardinalityChecker(sortKey, $intern_20, role);
        }
        $setSortKey(this.sortKeyDefinitions[i_0], sortKey);
        $typeCheck_5(this.sortKeyDefinitions[i_0], visitor, contextItemType);
        if ($isFixed(this.sortKeyDefinitions[i_0])) {
            comp = $makeComparator(this.sortKeyDefinitions[i_0], new EarlyEvaluationContext(visitor.configuration));
            $setFinalComparator(this.sortKeyDefinitions[i_0], comp);
            allKeysFixed && setCheck(this.comparators, i_0, comp);
        }
    }
    return this;
}
;
_.comparators = null;
_.select = null;
_.sortKeyDefinitions = null;
var Lclient_net_sf_saxon_ce_expr_sort_SortExpression_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'SortExpression', 355, Lclient_net_sf_saxon_ce_expr_Expression_2_classLit);
function $clinit_SortKeyDefinition(){
    $clinit_SortKeyDefinition = emptyMethod;
    defaultOrder = new StringLiteral_0('ascending');
    defaultCaseOrder = new StringLiteral_0('#default');
    defaultLanguage = new StringLiteral(($clinit_StringValue() , EMPTY_STRING));
}

function $isFixed(this$static){
    var i_0;
    for (i_0 = 0; i_0 < 6; i_0++) {
        if (!!this$static.sortProperties[i_0] && !instanceOf(this$static.sortProperties[i_0], 9)) {
            return false;
        }
    }
    return true;
}

function $makeComparator(this$static, context){
    var atomicComparer, base, caseOrderX, cname, collationURI, dataType, err, err1, languageX, orderX, props, s, stableVal, stringCollator;
    orderX = toString__Ljava_lang_String___devirtual$_0(this$static.sortProperties[0].evaluateAsString(context));
    context.getConfiguration();
    $clinit_TypeHierarchy();
    if (this$static.collation) {
        stringCollator = this$static.collation;
    }
    else if (this$static.sortProperties[4]) {
        cname = toString__Ljava_lang_String___devirtual$_0(this$static.sortProperties[4].evaluateAsString(context));
        try {
            collationURI = new URI_2(cname);
            if (collationURI.m_scheme == null) {
                if (this$static.baseURI == null) {
                    throw new XPathException_0('Collation URI is relative, and base URI is unknown');
                }
                else {
                    base = new URI_1(this$static.baseURI);
                    collationURI = new URI_0(base, $toString_1(collationURI));
                }
            }
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 51)) {
                err = $e0;
                throw new XPathException_0('Collation name ' + cname + ' is not a valid URI: ' + err);
            }
            else 
                throw unwrap($e0);
        }
        stringCollator = $getNamedCollation((context.getConfiguration() , $toString_1(collationURI)));
        if (!stringCollator) {
            throw new XPathException_2('Unknown collation ' + $toString_1(collationURI), 'XTDE1035');
        }
    }
    else {
        caseOrderX = toString__Ljava_lang_String___devirtual$_0(this$static.sortProperties[2].evaluateAsString(context));
        languageX = toString__Ljava_lang_String___devirtual$_0(this$static.sortProperties[3].evaluateAsString(context));
        props = new HashMap;
        if (languageX.length != 0 && !instanceOf(this$static.sortProperties[3], 21)) {
            $clinit_StringValue();
            if (!$matches_1($getPrimitiveStringValue(dynamicCast(dynamicCast(this$static.sortProperties[3], 21).value_0, 12)), '[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*')) {
                throw new XPathException_2('The lang attribute of xsl:sort must be a valid language code', 'XTDE0030');
            }
            props.stringMap.put_0('lang', languageX);
        }
        $equals_5(caseOrderX, '#default') || props.stringMap.put_0('case-order', caseOrderX);
        stringCollator = null;
    }
    if (!this$static.sortProperties[1]) {
        atomicComparer = makeSortComparer(stringCollator, this$static.sortKey.getItemType().getAtomizedItemType(), context.getImplicitTimezone());
    }
    else {
        dataType = toString__Ljava_lang_String___devirtual$_0(this$static.sortProperties[1].evaluateAsString(context));
        if ($equals_5(dataType, 'text')) {
            atomicComparer = makeSortComparer(stringCollator, ($clinit_AtomicType() , STRING), context.getImplicitTimezone());
            atomicComparer = new TextComparer(atomicComparer);
        }
        else if ($equals_5(dataType, 'number')) {
            atomicComparer = ($clinit_NumericComparer() , $clinit_NumericComparer() , THE_INSTANCE_1);
        }
        else {
            err = new XPathException_0("data-type on xsl:sort must be 'text' or 'number'");
            err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTDE0030');
                throw err;
        }
    }
    if (this$static.sortProperties[5]) {
        stableVal = dynamicCast(this$static.sortProperties[5].evaluateItem(context), 12);
        s = trim_0(dynamicCastToString(stableVal.value_0 = toString__Ljava_lang_String___devirtual$_0(stableVal.value_0)));
        if ($equals_5(s, 'yes') || $equals_5(s, 'no'))
            ;
        else {
            err = new XPathException_0("Value of 'stable' on xsl:sort must be 'yes' or 'no'");
            err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTDE0030');
                throw err;
        }
    }
    if ($equals_5(orderX, 'ascending')) {
        return atomicComparer;
    }
    else if ($equals_5(orderX, 'descending')) {
        return new DescendingComparer(atomicComparer);
    }
    else {
        err1 = new XPathException_0("order must be 'ascending' or 'descending'");
        err1.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTDE0030');
            throw err1;
    }
}

function $setBaseURI_2(this$static, baseURI){
    this$static.baseURI = baseURI;
}

function $setCollation(this$static, collation){
    this$static.collation = collation;
}

function $setFinalComparator(this$static, comp){
    this$static.finalComparator = comp;
}

function $setSortKey(this$static, exp_0){
    this$static.sortKey = exp_0;
}

function $setSortProperty(this$static, property, value_0){
    setCheck(this$static.sortProperties, property, value_0);
}

function $simplify_1(this$static, visitor){
    var i_0;
    this$static.sortKey = $simplify(visitor, this$static.sortKey);
    for (i_0 = 0; i_0 < 6; i_0++) {
        setCheck(this$static.sortProperties, i_0, $simplify(visitor, this$static.sortProperties[i_0]));
    }
    return this$static;
}

function $typeCheck_5(this$static, visitor, contextItemType){
    var i_0, language;
    for (i_0 = 0; i_0 < 6; i_0++) {
        setCheck(this$static.sortProperties, i_0, $typeCheck_1(visitor, this$static.sortProperties[i_0], contextItemType));
    }
    language = this$static.sortProperties[3];
    if (instanceOf(language, 21) && $getPrimitiveStringValue(dynamicCast(dynamicCast(language, 21).value_0, 12)).length != 0) {
        $clinit_StringValue();
        if (!$matches_1($getPrimitiveStringValue(dynamicCast(dynamicCast(language, 21).value_0, 12)), '[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*')) {
            throw new XPathException_2('The lang attribute of xsl:sort must be a valid language code', 'XTDE0030');
        }
    }
}

function SortKeyDefinition(){
    $clinit_SortKeyDefinition();
    this.sortProperties = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, 6, 0, 1);
    setCheck(this.sortProperties, 0, defaultOrder);
    setCheck(this.sortProperties, 2, defaultCaseOrder);
    setCheck(this.sortProperties, 3, defaultLanguage);
}

defineClass(369, 1, {369:1}, SortKeyDefinition);
_.finalComparator = null;
var defaultCaseOrder, defaultLanguage, defaultOrder;
var Lclient_net_sf_saxon_ce_expr_sort_SortKeyDefinition_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'SortKeyDefinition', 369, Ljava_lang_Object_2_classLit);
function $$init_4(this$static){
}

function $buildArray(this$static){
    var allocated, nk2;
    allocated = -1;
    instanceOf(this$static.base.base, 105) && (allocated = $last(this$static.base));
    allocated == -1 && (allocated = 100);
    this$static.nodeKeys = initDim(Ljava_lang_Object_2_classLit, $intern_1, 1, allocated * this$static.recordSize, 3, 1);
    this$static.count = 0;
    allocated = this$static.populateArray(allocated);
    if (allocated * 2 < this$static.count || allocated - this$static.count > 2000) {
        nk2 = initDim(Ljava_lang_Object_2_classLit, $intern_1, 1, this$static.count * this$static.recordSize, 3, 1);
        arraycopy(this$static.nodeKeys, 0, nk2, 0, this$static.count * this$static.recordSize);
        this$static.nodeKeys = nk2;
    }
}

function $doSort(this$static){
    var e, err;
    $buildArray(this$static);
    if (this$static.count < 2)
        return;
    try {
        quickSort1(0, this$static.count, this$static);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 72)) {
            e = $e0;
            err = new XPathException_0('Non-comparable types found while sorting: ' + e.detailMessage);
            err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTDE1030');
                throw err;
        }
        else 
            throw unwrap($e0);
    }
}

function SortedIterator(){
    $$init_4(this);
}

function SortedIterator_0(context, base, sortKeyEvaluator, comparators){
    $$init_4(this);
    this.context = context.newMinorContext();
    this.base = this.context.setCurrentIterator(base);
    this.sortKeyEvaluator = sortKeyEvaluator;
    this.comparators = comparators;
    this.recordSize = comparators.length + 2;
}

defineClass(411, 1, $intern_37, SortedIterator, SortedIterator_0);
_.compare = function compare_3(a, b){
    var a1, b1, comp, i_0;
    a1 = a * this.recordSize + 1;
    b1 = b * this.recordSize + 1;
    for (i_0 = 0; i_0 < this.comparators.length; i_0++) {
        comp = this.comparators[i_0].compareAtomicValues(dynamicCast(this.nodeKeys[a1 + i_0], 13), dynamicCast(this.nodeKeys[b1 + i_0], 13));
        if (comp != 0) {
            return comp;
        }
    }
    return dynamicCast(this.nodeKeys[a1 + this.comparators.length], 83).value_0 - dynamicCast(this.nodeKeys[b1 + this.comparators.length], 83).value_0;
}
;
_.getAnother = function getAnother_17(){
    var s;
    this.count < 0 && $doSort(this);
    s = new SortedIterator;
    s.base = new FocusIterator(this.base.base.getAnother());
    s.sortKeyEvaluator = this.sortKeyEvaluator;
    s.comparators = this.comparators;
    s.recordSize = this.recordSize;
    s.nodeKeys = this.nodeKeys;
    s.count = this.count;
    s.context = this.context;
    s.position_0 = 0;
    return s;
}
;
_.getLastPosition = function getLastPosition_1(){
    this.count < 0 && $doSort(this);
    return this.count;
}
;
_.next_0 = function next_13(){
    if (this.position_0 < 0) {
        return null;
    }
    this.count < 0 && $doSort(this);
    if (this.position_0 < this.count) {
        return dynamicCast(this.nodeKeys[this.position_0++ * this.recordSize], 15);
    }
    else {
        this.position_0 = -1;
        return null;
    }
}
;
_.populateArray = function populateArray(allocated){
    var item_0, k_0, n, nk2;
    while (true) {
        item_0 = $next_3(this.base);
        if (!item_0) {
            break;
        }
        if (this.count == allocated) {
            allocated *= 2;
            nk2 = initDim(Ljava_lang_Object_2_classLit, $intern_1, 1, allocated * this.recordSize, 3, 1);
            arraycopy(this.nodeKeys, 0, nk2, 0, this.count * this.recordSize);
            this.nodeKeys = nk2;
        }
        k_0 = this.count * this.recordSize;
        setCheck(this.nodeKeys, k_0, item_0);
        for (n = 0; n < this.comparators.length; n++) {
            setCheck(this.nodeKeys, k_0 + n + 1, this.sortKeyEvaluator.evaluateSortKey(n, this.context));
        }
        setCheck(this.nodeKeys, k_0 + this.comparators.length + 1, valueOf(this.count));
        ++this.count;
    }
    return allocated;
}
;
_.swap = function swap_0(a, b){
    var a1, b1, i_0, temp;
    a1 = a * this.recordSize;
    b1 = b * this.recordSize;
    for (i_0 = 0; i_0 < this.recordSize; i_0++) {
        temp = this.nodeKeys[a1 + i_0];
        setCheck(this.nodeKeys, a1 + i_0, this.nodeKeys[b1 + i_0]);
        setCheck(this.nodeKeys, b1 + i_0, temp);
    }
}
;
_.count = -1;
_.position_0 = 0;
_.recordSize = 0;
var Lclient_net_sf_saxon_ce_expr_sort_SortedIterator_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'SortedIterator', 411, Ljava_lang_Object_2_classLit);
function SortedGroupIterator(context, base, sortKeyEvaluator, comparators){
    SortedIterator_0.call(this, context, base, sortKeyEvaluator, comparators);
    this.recordSize += 2;
}

defineClass(830, 411, $intern_55, SortedGroupIterator);
_.getCurrentGroupingKey = function getCurrentGroupingKey_2(){
    return dynamicCast(this.nodeKeys[(this.position_0 - 1) * this.recordSize + this.comparators.length + 2], 13);
}
;
_.iterateCurrentGroup = function iterateCurrentGroup_2(){
    var iter;
    iter = dynamicCast(this.nodeKeys[(this.position_0 - 1) * this.recordSize + this.comparators.length + 3], 64);
    return iter.getAnother();
}
;
_.populateArray = function populateArray_0(allocated){
    var c2, gi, item_0, k_0, n, nk2;
    c2 = this.context.newContext();
    $setCurrentGroupIterator(c2, dynamicCast(this.base.base, 271));
    while (true) {
        item_0 = $next_3(this.base);
        if (!item_0) {
            break;
        }
        if (this.count == allocated) {
            allocated *= 2;
            nk2 = initDim(Ljava_lang_Object_2_classLit, $intern_1, 1, allocated * this.recordSize, 3, 1);
            arraycopy(this.nodeKeys, 0, nk2, 0, this.count * this.recordSize);
            this.nodeKeys = nk2;
        }
        k_0 = this.count * this.recordSize;
        setCheck(this.nodeKeys, k_0, item_0);
        for (n = 0; n < this.comparators.length; n++) {
            setCheck(this.nodeKeys, k_0 + n + 1, this.sortKeyEvaluator.evaluateSortKey(n, c2));
        }
        setCheck(this.nodeKeys, k_0 + this.comparators.length + 1, valueOf(this.count));
        gi = dynamicCast(this.base.base, 271);
        setCheck(this.nodeKeys, k_0 + this.comparators.length + 2, gi.getCurrentGroupingKey());
        setCheck(this.nodeKeys, k_0 + this.comparators.length + 3, gi.iterateCurrentGroup());
        ++this.count;
    }
    return allocated;
}
;
var Lclient_net_sf_saxon_ce_expr_sort_SortedGroupIterator_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'SortedGroupIterator', 830, Lclient_net_sf_saxon_ce_expr_sort_SortedIterator_2_classLit);
function TextComparer(baseComparer){
    this.baseComparer = baseComparer;
}

defineClass(828, 1, $intern_53, TextComparer);
_.compareAtomicValues = function compareAtomicValues_7(a, b){
    return this.baseComparer.compareAtomicValues(instanceOf(a, 12)?dynamicCast(a, 12):new StringValue_0(!a?'':toString__Ljava_lang_String___devirtual$_0(a.getPrimitiveStringValue())), instanceOf(b, 12)?dynamicCast(b, 12):new StringValue_0(!b?'':toString__Ljava_lang_String___devirtual$_0(b.getPrimitiveStringValue())));
}
;
_.comparesEqual = function comparesEqual_9(a, b){
    return this.baseComparer.compareAtomicValues(instanceOf(a, 12)?dynamicCast(a, 12):new StringValue_0(!a?'':toString__Ljava_lang_String___devirtual$_0(a.getPrimitiveStringValue())), instanceOf(b, 12)?dynamicCast(b, 12):new StringValue_0(!b?'':toString__Ljava_lang_String___devirtual$_0(b.getPrimitiveStringValue()))) == 0;
}
;
var Lclient_net_sf_saxon_ce_expr_sort_TextComparer_2_classLit = createForClass('client.net.sf.saxon.ce.expr.sort', 'TextComparer', 828, Ljava_lang_Object_2_classLit);
function $containsAll(this$static, other){
    var it;
    if (other == ($clinit_IntUniversalSet() , $clinit_IntUniversalSet() , THE_INSTANCE_2)) {
        return false;
    }
    it = other.iterator_0();
    while (it.hasNext()) {
        if (!this$static.contains_0(it.next_1())) {
            return false;
        }
    }
    return true;
}

defineClass(883, 1, {195:1});
_.intersect = function intersect(other){
    var it, n, v;
    if (this.isEmpty() || other.isEmpty()) {
        return new IntHashSet;
    }
    n = new IntHashSet_0(this.size_1());
    it = this.iterator_0();
    while (it.hasNext()) {
        v = it.next_1();
        other.contains_0(v) && $add(n, v);
    }
    return n;
}
;
var Lclient_net_sf_saxon_ce_expr_z_AbstractIntSet_2_classLit = createForClass('client.net.sf.saxon.ce.expr.z', 'AbstractIntSet', 883, Ljava_lang_Object_2_classLit);
function IntComplementPredicate(p1){
    this.p1 = p1;
}

defineClass(164, 1, {164:1, 110:1}, IntComplementPredicate);
_.matches = function matches_0(value_0){
    return !this.p1.matches(value_0);
}
;
var Lclient_net_sf_saxon_ce_expr_z_IntComplementPredicate_2_classLit = createForClass('client.net.sf.saxon.ce.expr.z', 'IntComplementPredicate', 164, Ljava_lang_Object_2_classLit);
function IntExceptPredicate(p1, p2){
    this.p1 = p1;
    this.p2 = p2;
}

defineClass(820, 1, $intern_56, IntExceptPredicate);
_.matches = function matches_1(value_0){
    return this.p1.matches(value_0) && !this.p2.matches(value_0);
}
;
var Lclient_net_sf_saxon_ce_expr_z_IntExceptPredicate_2_classLit = createForClass('client.net.sf.saxon.ce.expr.z', 'IntExceptPredicate', 820, Ljava_lang_Object_2_classLit);
function $add(this$static, value_0){
    var i_0;
    if (value_0 == this$static.ndv) {
        throw new IllegalArgumentException_0("Can't add the 'no data' value");
    }
    i_0 = $indexOf(this$static, value_0);
    if (this$static._values[i_0] == this$static.ndv) {
        ++this$static._size;
        this$static._values[i_0] = value_0;
        if (this$static._size > $intern_57) {
            throw new RuntimeException_0('Too many elements (> 1073741824)');
        }
        this$static._nlo < this$static._size && this$static._size <= this$static._nhi && $setCapacity(this$static, this$static._size);
        return true;
    }
    else {
        return false;
    }
}

function $contains(this$static, value_0){
    return this$static._values[$indexOf(this$static, value_0)] != this$static.ndv;
}

function $indexOf(this$static, value_0){
    var i_0;
    i_0 = 1327217885 * value_0 >> this$static._shift & this$static._mask;
    while (this$static._values[i_0] != this$static.ndv) {
        if (this$static._values[i_0] == value_0) {
            return i_0;
        }
        i_0 = i_0 - 1 & this$static._mask;
    }
    return i_0;
}

function $setCapacity(this$static, capacity){
    var i_0, nbit, nmax, nold, value_0, values;
    capacity < this$static._size && (capacity = this$static._size);
    for (nbit = 1 , nmax = 2; nmax < capacity * 4 && nmax < $intern_57; ++nbit , nmax *= 2)
        ;
    nold = this$static._nmax;
    if (nmax == nold) {
        return;
    }
    this$static._nmax = nmax;
    this$static._nlo = ~~(nmax / 4);
    this$static._nhi = 268435456;
    this$static._shift = 31 - nbit;
    this$static._mask = nmax - 1;
    this$static._size = 0;
    values = this$static._values;
    this$static._values = initDim(I_classLit, $intern_4, 0, nmax, 7, 1);
    fill_0(this$static._values, this$static.ndv);
    if (values != null) {
        for (i_0 = 0; i_0 < nold; ++i_0) {
            value_0 = values[i_0];
            if (value_0 != this$static.ndv) {
                ++this$static._size;
                this$static._values[$indexOf(this$static, value_0)] = value_0;
            }
        }
    }
}

function IntHashSet(){
    IntHashSet_1.call(this, 8, $intern_58);
}

function IntHashSet_0(capacity){
    IntHashSet_1.call(this, capacity, $intern_58);
}

function IntHashSet_1(capacity, noDataValue){
    this.ndv = noDataValue;
    $setCapacity(this, capacity);
}

function fromArray(members){
    var ihs, m, m$index, m$max;
    ihs = new IntHashSet_0(members.length);
    for (m$index = 0 , m$max = members.length; m$index < m$max; ++m$index) {
        m = members[m$index];
        $add(ihs, m);
    }
    return ihs;
}

defineClass(142, 883, {142:1, 195:1, 3:1}, IntHashSet, IntHashSet_0, IntHashSet_1);
_.add_0 = function add_0(value_0){
    return $add(this, value_0);
}
;
_.contains_0 = function contains(value_0){
    return $contains(this, value_0);
}
;
_.copy_0 = function copy_1(){
    var s;
    if (this._size == 0) {
        return new IntHashSet;
    }
    else {
        s = new IntHashSet_1(this._size, this.ndv);
        s._nmax = this._nmax;
        s._size = this._size;
        s._nlo = this._nlo;
        s._nhi = this._nhi;
        s._shift = this._shift;
        s._size = this._size;
        s._values = initDim(I_classLit, $intern_4, 0, this._values.length, 7, 1);
        arraycopy(this._values, 0, s._values, 0, this._values.length);
        return s;
    }
}
;
_.equals$ = function equals_20(other){
    var s;
    if (instanceOf(other, 195)) {
        s = dynamicCast(other, 142);
        return this._size == s._size && $containsAll(this, s);
    }
    else {
        return false;
    }
}
;
_.hashCode$ = function hashCode_21(){
    var h, it;
    h = 936247625;
    it = new IntHashSet$IntHashSetIterator(this);
    while ($hasNext(it)) {
        h += it.this$01._values[it.i++];
    }
    return h;
}
;
_.isEmpty = function isEmpty(){
    return this._size == 0;
}
;
_.iterator_0 = function iterator_0(){
    return new IntHashSet$IntHashSetIterator(this);
}
;
_.size_1 = function size_1(){
    return this._size;
}
;
_._mask = 0;
_._nhi = 0;
_._nlo = 0;
_._nmax = 0;
_._shift = 0;
_._size = 0;
_.ndv = 0;
var Lclient_net_sf_saxon_ce_expr_z_IntHashSet_2_classLit = createForClass('client.net.sf.saxon.ce.expr.z', 'IntHashSet', 142, Lclient_net_sf_saxon_ce_expr_z_AbstractIntSet_2_classLit);
function $hasNext(this$static){
    while (this$static.i < this$static.this$01._values.length) {
        if (this$static.this$01._values[this$static.i] != this$static.this$01.ndv) {
            return true;
        }
        else {
            ++this$static.i;
        }
    }
    return false;
}

function IntHashSet$IntHashSetIterator(this$0){
    this.this$01 = this$0;
    this.i = 0;
}

defineClass(450, 1, $intern_9, IntHashSet$IntHashSetIterator);
_.hasNext = function hasNext(){
    return $hasNext(this);
}
;
_.next_1 = function next_14(){
    return this.this$01._values[this.i++];
}
;
_.i = 0;
var Lclient_net_sf_saxon_ce_expr_z_IntHashSet$IntHashSetIterator_2_classLit = createForClass('client.net.sf.saxon.ce.expr.z', 'IntHashSet/IntHashSetIterator', 450, Ljava_lang_Object_2_classLit);
function $$init_5(this$static){
}

function $add_0(this$static, value_0){
    var err, i_0, j, mid;
    this$static.hashCode = -1;
    if (this$static.used == 0) {
        $ensureCapacity(this$static, 1);
        this$static.startPoints[this$static.used - 1] = value_0;
        this$static.endPoints[this$static.used - 1] = value_0;
        ++this$static.size_0;
        return true;
    }
    if (value_0 > this$static.endPoints[this$static.used - 1]) {
        if (value_0 == this$static.endPoints[this$static.used - 1] + 1) {
            ++this$static.endPoints[this$static.used - 1];
        }
        else {
            $ensureCapacity(this$static, this$static.used + 1);
            this$static.startPoints[this$static.used - 1] = value_0;
            this$static.endPoints[this$static.used - 1] = value_0;
        }
        ++this$static.size_0;
        return true;
    }
    if (value_0 < this$static.startPoints[0]) {
        if (value_0 == this$static.startPoints[0] - 1) {
            --this$static.startPoints[0];
        }
        else {
            $ensureCapacity(this$static, this$static.used + 1);
            arraycopy(this$static.startPoints, 0, this$static.startPoints, 1, this$static.used - 1);
            arraycopy(this$static.endPoints, 0, this$static.endPoints, 1, this$static.used - 1);
            this$static.startPoints[0] = value_0;
            this$static.endPoints[0] = value_0;
        }
        ++this$static.size_0;
        return true;
    }
    i_0 = 0;
    j = this$static.used;
    do {
        mid = i_0 + ~~((j - i_0) / 2);
        if (this$static.endPoints[mid] < value_0) {
            i_0 = mid > i_0 + 1?mid:i_0 + 1;
        }
        else if (this$static.startPoints[mid] > value_0) {
            j = mid < j - 1?mid:j - 1;
        }
        else {
            return false;
        }
    }
    while (i_0 != j);
    i_0 > 0 && this$static.endPoints[i_0 - 1] + 1 == value_0?--i_0:i_0 < this$static.used - 1 && this$static.startPoints[i_0 + 1] - 1 == value_0 && ++i_0;
    if (this$static.endPoints[i_0] + 1 == value_0) {
        if (value_0 == this$static.startPoints[i_0 + 1] - 1) {
            this$static.endPoints[i_0] = this$static.endPoints[i_0 + 1];
            arraycopy(this$static.startPoints, i_0 + 2, this$static.startPoints, i_0 + 1, this$static.used - i_0 - 2);
            arraycopy(this$static.endPoints, i_0 + 2, this$static.endPoints, i_0 + 1, this$static.used - i_0 - 2);
            --this$static.used;
        }
        else {
            ++this$static.endPoints[i_0];
        }
        ++this$static.size_0;
        return true;
    }
    else if (this$static.startPoints[i_0] - 1 == value_0) {
        if (value_0 == this$static.endPoints[i_0 - 1] + 1) {
            this$static.endPoints[i_0 - 1] = this$static.endPoints[i_0];
            arraycopy(this$static.startPoints, i_0 + 1, this$static.startPoints, i_0, this$static.used - i_0 - 1);
            arraycopy(this$static.endPoints, i_0 + 1, this$static.endPoints, i_0, this$static.used - i_0 - 1);
            --this$static.used;
        }
        else {
            --this$static.startPoints[i_0];
        }
        ++this$static.size_0;
        return true;
    }
    else {
        value_0 > this$static.endPoints[i_0] && ++i_0;
        $ensureCapacity(this$static, this$static.used + 1);
        try {
            arraycopy(this$static.startPoints, i_0, this$static.startPoints, i_0 + 1, this$static.used - i_0 - 1);
            arraycopy(this$static.endPoints, i_0, this$static.endPoints, i_0 + 1, this$static.used - i_0 - 1);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 19)) {
                err = $e0;
                $printStackTrace(err, ($clinit_System() , err_0));
            }
            else 
                throw unwrap($e0);
        }
        this$static.startPoints[i_0] = value_0;
        this$static.endPoints[i_0] = value_0;
        ++this$static.size_0;
        return true;
    }
}

function $addRange(this$static, low, high){
    var i_0, i0;
    if (low == high) {
        $add_0(this$static, low);
        return;
    }
    this$static.hashCode = -1;
    if (this$static.used == 0) {
        $ensureCapacity(this$static, 1);
        this$static.startPoints[this$static.used - 1] = low;
        this$static.endPoints[this$static.used - 1] = high;
        this$static.size_0 += high - low + 1;
    }
    else if (low > this$static.endPoints[this$static.used - 1]) {
        if (low == this$static.endPoints[this$static.used - 1] + 1) {
            this$static.endPoints[this$static.used - 1] = high;
        }
        else {
            $ensureCapacity(this$static, this$static.used + 1);
            this$static.startPoints[this$static.used - 1] = low;
            this$static.endPoints[this$static.used - 1] = high;
        }
        this$static.size_0 += high - low + 1;
    }
    else if (high < this$static.startPoints[0]) {
        $ensureCapacity(this$static, this$static.used + 1);
        arraycopy(this$static.startPoints, 0, this$static.startPoints, 1, this$static.used - 1);
        arraycopy(this$static.endPoints, 0, this$static.endPoints, 1, this$static.used - 1);
        this$static.startPoints[0] = low;
        this$static.endPoints[0] = high;
    }
    else {
        for (i0 = 1; i0 < this$static.used; i0++) {
            if (this$static.startPoints[i0] > high && this$static.endPoints[i0 - 1] < low) {
                $ensureCapacity(this$static, this$static.used + 1);
                arraycopy(this$static.startPoints, i0, this$static.startPoints, i0 + 1, this$static.used - i0 - 1);
                arraycopy(this$static.endPoints, i0, this$static.endPoints, i0 + 1, this$static.used - i0 - 1);
                this$static.startPoints[i0] = low;
                this$static.endPoints[i0] = high;
                return;
            }
        }
        for (i_0 = low; i_0 <= high; i_0++) {
            $add_0(this$static, i_0);
        }
    }
}

function $contains_0(this$static, value_0){
    var i_0, j, mid;
    if (this$static.used == 0) {
        return false;
    }
    if (value_0 > this$static.endPoints[this$static.used - 1]) {
        return false;
    }
    if (value_0 < this$static.startPoints[0]) {
        return false;
    }
    i_0 = 0;
    j = this$static.used;
    do {
        mid = i_0 + ~~((j - i_0) / 2);
        if (this$static.endPoints[mid] < value_0) {
            i_0 = mid > i_0 + 1?mid:i_0 + 1;
        }
        else if (this$static.startPoints[mid] > value_0) {
            j = mid < j - 1?mid:j - 1;
        }
        else {
            return true;
        }
    }
    while (i_0 != j);
    return false;
}

function $ensureCapacity(this$static, n){
    var e, s;
    if (this$static.startPoints.length < n) {
        s = initDim(I_classLit, $intern_4, 0, this$static.startPoints.length * 2, 7, 1);
        e = initDim(I_classLit, $intern_4, 0, this$static.startPoints.length * 2, 7, 1);
        arraycopy(this$static.startPoints, 0, s, 0, this$static.used);
        arraycopy(this$static.endPoints, 0, e, 0, this$static.used);
        this$static.startPoints = s;
        this$static.endPoints = e;
    }
    this$static.used = n;
}

function IntRangeSet(){
    $$init_5(this);
    this.startPoints = initDim(I_classLit, $intern_4, 0, 4, 7, 1);
    this.endPoints = initDim(I_classLit, $intern_4, 0, 4, 7, 1);
    this.used = 0;
    this.size_0 = 0;
    this.hashCode = -1;
}

function IntRangeSet_0(startPoints, endPoints){
    var i_0;
    $$init_5(this);
    if (startPoints.length != endPoints.length) {
        throw new IllegalArgumentException_0('Array lengths differ');
    }
    this.startPoints = startPoints;
    this.endPoints = endPoints;
    this.used = startPoints.length;
    for (i_0 = 0; i_0 < this.used; i_0++) {
        this.size_0 += endPoints[i_0] - startPoints[i_0] + 1;
    }
}

defineClass(163, 883, {163:1, 195:1, 3:1}, IntRangeSet, IntRangeSet_0);
_.add_0 = function add_1(value_0){
    return $add_0(this, value_0);
}
;
_.contains_0 = function contains_0(value_0){
    return $contains_0(this, value_0);
}
;
_.copy_0 = function copy_2(){
    var s;
    s = new IntRangeSet;
    s.startPoints = initDim(I_classLit, $intern_4, 0, this.startPoints.length, 7, 1);
    arraycopy(this.startPoints, 0, s.startPoints, 0, this.startPoints.length);
    s.endPoints = initDim(I_classLit, $intern_4, 0, this.endPoints.length, 7, 1);
    arraycopy(this.endPoints, 0, s.endPoints, 0, this.endPoints.length);
    s.used = this.used;
    s.size_0 = this.size_0;
    return s;
}
;
_.equals$ = function equals_21(other){
    return instanceOf(other, 195) && (instanceOf(other, 163)?this.used == dynamicCast(other, 163).used && equals_68(this.startPoints, dynamicCast(other, 163).startPoints) && equals_68(this.endPoints, dynamicCast(other, 163).endPoints):$containsAll(this, dynamicCast(other, 195)));
}
;
_.hashCode$ = function hashCode_22(){
    var h, i_0;
    if (this.hashCode == -1) {
        h = -2090169871;
        for (i_0 = 0; i_0 < this.used; i_0++) {
            h ^= this.startPoints[i_0] + (this.endPoints[i_0] << 3);
        }
        this.hashCode = h;
    }
    return this.hashCode;
}
;
_.isEmpty = function isEmpty_0(){
    return this.size_0 == 0;
}
;
_.iterator_0 = function iterator_1(){
    return new IntRangeSet$IntRangeSetIterator(this);
}
;
_.size_1 = function size_2(){
    return this.size_0;
}
;
_.toString$ = function toString_23(){
    var i_0, sb;
    sb = new FastStringBuffer(this.used * 8);
    for (i_0 = 0; i_0 < this.used; i_0++) {
        $append_3(sb, this.startPoints[i_0] + '-' + this.endPoints[i_0] + ',');
    }
    return $condense(sb) , valueOf_3(sb.array, 0, sb.used);
}
;
_.hashCode = -1;
_.size_0 = 0;
_.used = 0;
var Lclient_net_sf_saxon_ce_expr_z_IntRangeSet_2_classLit = createForClass('client.net.sf.saxon.ce.expr.z', 'IntRangeSet', 163, Lclient_net_sf_saxon_ce_expr_z_AbstractIntSet_2_classLit);
function IntRangeSet$IntRangeSetIterator(this$0){
    this.this$01 = this$0;
    this.i = -1;
    this.current = $intern_58;
}

defineClass(787, 1, $intern_9, IntRangeSet$IntRangeSetIterator);
_.hasNext = function hasNext_0(){
    return this.i < 0?this.this$01.size_0 > 0:this.current < this.this$01.endPoints[this.this$01.used - 1];
}
;
_.next_1 = function next_15(){
    if (this.i < 0) {
        this.i = 0;
        this.current = this.this$01.startPoints[0];
        return this.current;
    }
    if (this.current == this.this$01.endPoints[this.i]) {
        this.current = this.this$01.startPoints[++this.i];
        return this.current;
    }
    else {
        return ++this.current;
    }
}
;
_.current = 0;
_.i = 0;
var Lclient_net_sf_saxon_ce_expr_z_IntRangeSet$IntRangeSetIterator_2_classLit = createForClass('client.net.sf.saxon.ce.expr.z', 'IntRangeSet/IntRangeSetIterator', 787, Ljava_lang_Object_2_classLit);
function IntSetPredicate(set_0){
    if (!set_0) {
        throw new NullPointerException;
    }
    this.set_0 = set_0;
}

defineClass(134, 1, {110:1, 134:1}, IntSetPredicate);
_.matches = function matches_2(value_0){
    return this.set_0.contains_0(value_0);
}
;
var Lclient_net_sf_saxon_ce_expr_z_IntSetPredicate_2_classLit = createForClass('client.net.sf.saxon.ce.expr.z', 'IntSetPredicate', 134, Ljava_lang_Object_2_classLit);
function IntSingletonSet(value_0){
    this.value_0 = value_0;
}

defineClass(406, 1, {195:1}, IntSingletonSet);
_.add_0 = function add_2(value_0){
    throw new UnsupportedOperationException_0('IntSingletonSet is immutable');
}
;
_.contains_0 = function contains_1(value_0){
    return this.value_0 == value_0;
}
;
_.copy_0 = function copy_3(){
    return this;
}
;
_.intersect = function intersect_0(other){
    return other.contains_0(this.value_0)?this:new IntHashSet;
}
;
_.isEmpty = function isEmpty_1(){
    return false;
}
;
_.iterator_0 = function iterator_2(){
    return new IntSingletonSet$1(this);
}
;
_.size_1 = function size_3(){
    return 1;
}
;
_.value_0 = 0;
var Lclient_net_sf_saxon_ce_expr_z_IntSingletonSet_2_classLit = createForClass('client.net.sf.saxon.ce.expr.z', 'IntSingletonSet', 406, Ljava_lang_Object_2_classLit);
function IntSingletonSet$1(this$0){
    this.this$01 = this$0;
}

defineClass(751, 1, {}, IntSingletonSet$1);
_.hasNext = function hasNext_1(){
    return !this.gone;
}
;
_.next_1 = function next_16(){
    this.gone = true;
    return this.this$01.value_0;
}
;
_.gone = false;
var Lclient_net_sf_saxon_ce_expr_z_IntSingletonSet$1_2_classLit = createForClass('client.net.sf.saxon.ce.expr.z', 'IntSingletonSet/1', 751, Ljava_lang_Object_2_classLit);
function IntUnionPredicate(p1, p2){
    this.p1 = p1;
    this.p2 = p2;
}

defineClass(510, 1, $intern_56, IntUnionPredicate);
_.matches = function matches_3(value_0){
    return this.p1.matches(value_0) || this.p2.matches(value_0);
}
;
var Lclient_net_sf_saxon_ce_expr_z_IntUnionPredicate_2_classLit = createForClass('client.net.sf.saxon.ce.expr.z', 'IntUnionPredicate', 510, Ljava_lang_Object_2_classLit);
function $clinit_IntUniversalSet(){
    $clinit_IntUniversalSet = emptyMethod;
    THE_INSTANCE_2 = new IntUniversalSet;
}

function IntUniversalSet(){
}

defineClass(785, 1, {195:1}, IntUniversalSet);
_.add_0 = function add_3(value_0){
    throw new UnsupportedOperationException_0('IntUniversalSet is immutable');
}
;
_.contains_0 = function contains_2(value_0){
    return true;
}
;
_.copy_0 = function copy_4(){
    return this;
}
;
_.intersect = function intersect_1(other){
    return other.copy_0();
}
;
_.isEmpty = function isEmpty_2(){
    return false;
}
;
_.iterator_0 = function iterator_3(){
    throw new UnsupportedOperationException_0('Cannot enumerate an infinite set');
}
;
_.size_1 = function size_4(){
    return $intern_0;
}
;
var THE_INSTANCE_2;
var Lclient_net_sf_saxon_ce_expr_z_IntUniversalSet_2_classLit = createForClass('client.net.sf.saxon.ce.expr.z', 'IntUniversalSet', 785, Ljava_lang_Object_2_classLit);
function IntValuePredicate(target){
    this.target_0 = target;
}

defineClass(118, 1, {110:1, 118:1}, IntValuePredicate);
_.matches = function matches_4(value_0){
    return value_0 == this.target_0;
}
;
_.target_0 = 0;
var Lclient_net_sf_saxon_ce_expr_z_IntValuePredicate_2_classLit = createForClass('client.net.sf.saxon.ce.expr.z', 'IntValuePredicate', 118, Ljava_lang_Object_2_classLit);
function $addContextDocumentArgument(this$static, pos, augmentedName){
    var newArgs, rootExpression;
    if (this$static.argument.length > pos) {
        return;
    }
    if (this$static.argument.length != pos) {
        throw new XPathException_0('Too few arguments in call to ' + augmentedName + '() function');
    }
    newArgs = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, pos + 1, 0, 1);
    arraycopy(this$static.argument, 0, newArgs, 0, this$static.argument.length);
    rootExpression = new RootExpression;
    copyLocationInfo(this$static, rootExpression);
    setCheck(newArgs, pos, rootExpression);
    this$static.argument = newArgs;
    $setDetails(this$static, getFunction(augmentedName, newArgs.length));
}

function $checkArguments(this$static, visitor){
    var i_0, role;
    $checkArgumentCount(this$static, this$static.details.minArguments, this$static.details.maxArguments);
    for (i_0 = 0; i_0 < this$static.argument.length; i_0++) {
        role = new RoleLocator(0, this$static.name_0, i_0);
        role.errorCode = 'XPTY0004';
        setCheck(this$static.argument, i_0, staticTypeCheck_1(this$static.argument[i_0], this$static.getRequiredType_0(i_0), visitor.staticContext.isInBackwardsCompatibleMode(), role));
    }
}

function $computeSpecialProperties_3(this$static){
    var arg, arg$array, arg$index, arg$max;
    if (!this$static.details) {
        return 0;
    }
    if (instanceOf(this$static.details.resultType.primaryType, 43)) {
        return $intern_22;
    }
    for (arg$array = this$static.argument , arg$index = 0 , arg$max = arg$array.length; arg$index < arg$max; ++arg$index) {
        arg = arg$array[arg$index];
        arg.staticProperties == -1 && (arg.staticProperties = arg.computeDependencies() | arg.computeCardinality() | arg.computeSpecialProperties());
        if ((arg.staticProperties & $intern_11 & $intern_22) == 0) {
            return 0;
        }
    }
    return $intern_22;
}

function $getItemType_0(this$static){
    var type_0;
    type_0 = this$static.details.resultType.primaryType;
    return this$static.details.sameItemTypeAsFirstArgument?this$static.argument.length > 0?this$static.argument[0].getItemType():($clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2):type_0;
}

function $setDetails(this$static, entry){
    this$static.details = entry;
}

function SystemFunction(){
    FunctionCall.call(this);
}

function makeSystemFunction(name_0, arguments_0){
    var entry, f;
    entry = getFunction(name_0, arguments_0.length);
    if (!entry) {
        return null;
    }
    f = entry.skeleton.newInstance();
    f.details = entry;
    $setFunctionName(f, new StructuredQName('', 'http://www.w3.org/2005/xpath-functions', name_0));
        $setArguments(f, arguments_0);
        return f;
}

defineClass(41, 20, $intern_36);
_.checkArguments = function checkArguments_0(visitor){
    $checkArguments(this, visitor);
}
;
_.computeCardinality = function computeCardinality_37(){
    return this.details.resultType.cardinality;
}
;
_.computeSpecialProperties = function computeSpecialProperties_27(){
    return $computeSpecialProperties_3(this);
}
;
_.getItemType = function getItemType_63(){
    return $getItemType_0(this);
}
;
_.getRequiredType_0 = function getRequiredType_2(arg){
    if (!this.details) {
        return $clinit_SequenceType() , ANY_SEQUENCE;
    }
    return this.details.argumentTypes[arg];
}
;
_.operation = 0;
var Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'SystemFunction', 41, Lclient_net_sf_saxon_ce_expr_FunctionCall_2_classLit);
function Adjust(){
    SystemFunction.call(this);
}

defineClass(343, 41, $intern_36, Adjust);
_.evaluateItem = function evaluateItem_39(context){
    var av1, av2, in_$, microseconds, nargs, tz, tzminutes, c;
    av1 = dynamicCast(this.argument[0].evaluateItem(context), 13);
    if (!av1) {
        return null;
    }
    in_$ = dynamicCast(av1, 73);
    nargs = this.argument.length;
    if (nargs == 1) {
        return in_$.adjustTimezone(context.getImplicitTimezone());
    }
    else {
        av2 = dynamicCast(this.argument[1].evaluateItem(context), 13);
        if (!av2) {
            return c = in_$.copy_1() , c.tzMinutes = $intern_58 , c;
        }
        tz = dynamicCast(av2, 102);
        microseconds = $getLengthInMicroseconds(tz);
        neq(mod(microseconds, {l:1279744, m:14, h:0}), {l:0, m:0, h:0}) && $dynamicError(this, 'Timezone is not an integral number of minutes', 'FODT0003');
        tzminutes = toInt(div_0(microseconds, {l:1279744, m:14, h:0}));
        (tzminutes < 0?-tzminutes:tzminutes) > 840 && $dynamicError(this, 'Timezone out of range (-14:00 to +14:00)', 'FODT0003');
        return in_$.adjustTimezone(tzminutes);
    }
}
;
_.newInstance = function newInstance(){
    return new Adjust;
}
;
var Lclient_net_sf_saxon_ce_functions_Adjust_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Adjust', 343, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function Aggregate(){
    SystemFunction.call(this);
}

defineClass(344, 41, $intern_36);
_.checkArguments = function checkArguments_1(visitor){
    $checkArguments(this, visitor);
    setCheck(this.argument, 0, unsorted(this.argument[0], true));
}
;
var Lclient_net_sf_saxon_ce_functions_Aggregate_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Aggregate', 344, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $effectiveBooleanValue_4(this$static, context){
    var arity_0, e, e2, lexicalQName, qName;
    lexicalQName = toString__Ljava_lang_String___devirtual$_0(this$static.argument[0].evaluateAsString(context));
    switch (this$static.operation) {
        case 0:
            {
                qName = fromLexicalQName(lexicalQName, this$static.env.getDefaultElementNamespace(), this$static.env.getNamespaceResolver());
                return $isElementAvailable((context.getConfiguration() , $getNamespaceURI(qName)), valueOf_3(qName.content_0, qName.localNameStart, qName.prefixStart - qName.localNameStart));
            }

        case 1:
            {
                arity_0 = {l:$intern_46, m:$intern_46, h:$intern_47};
                this$static.argument.length == 2 && (arity_0 = fromInt(dynamicCast(this$static.argument[1].evaluateItem(context), 25).intValue()));
                try {
                    qName = fromLexicalQName(lexicalQName, this$static.env.getDefaultFunctionNamespace(), this$static.env.getNamespaceResolver());
                    return $hasFunctionSignature(this$static.env.getFunctionLibrary(), qName, toInt(arity_0));
                }
                catch ($e0) {
                    $e0 = wrap_0($e0);
                    if (instanceOf($e0, 4)) {
                        e2 = $e0;
                        e2.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTDE1400');
                            throw e2;
                    }
                    else 
                        throw unwrap($e0);
                }
            }

        case 2:
            {
                try {
                    qName = fromLexicalQName(lexicalQName, this$static.env.getDefaultElementNamespace(), this$static.env.getNamespaceResolver());
                    return $equals_5($getNamespaceURI(qName), 'http://www.w3.org/2001/XMLSchema') && isRecognizedName(valueOf_3(qName.content_0, qName.localNameStart, qName.prefixStart - qName.localNameStart));
                }
                catch ($e1) {
                    $e1 = wrap_0($e1);
                    if (instanceOf($e1, 4)) {
                        e = $e1;
                        e.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTDE1425');
                            throw e;
                    }
                    else 
                        throw unwrap($e1);
                }
            }

        default:return false;
    }
}

function Available(operation){
    SystemFunction.call(this);
    this.operation = operation;
}

defineClass(350, 41, $intern_36, Available);
_.checkArguments = function checkArguments_2(visitor){
    !this.env && (this.env = visitor.staticContext);
}
;
_.effectiveBooleanValue = function effectiveBooleanValue_10(context){
    return $effectiveBooleanValue_4(this, context);
}
;
_.evaluateItem = function evaluateItem_40(context){
    return $clinit_BooleanValue() , $effectiveBooleanValue_4(this, context)?TRUE_0:FALSE_0;
}
;
_.newInstance = function newInstance_0(){
    return new Available(this.operation);
}
;
var Lclient_net_sf_saxon_ce_functions_Available_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Available', 350, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function Average(){
    Aggregate.call(this);
}

defineClass(459, 344, $intern_36, Average);
_.evaluateItem = function evaluateItem_41(context){
    var count, e, item_0, iter, next;
    iter = this.argument[0].iterate_0(context);
    count = 0;
    item_0 = dynamicCast(iter.next_0(), 13);
    if (!item_0) {
        return null;
    }
    ++count;
    if (instanceOf(item_0, 56)) {
        try {
            item_0 = item_0.convert(($clinit_AtomicType() , DOUBLE)).asAtomic();
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                e = $e0;
                $maybeSetLocation(e, $getSourceLocator(this));
                throw e;
            }
            else 
                throw unwrap($e0);
        }
    }
    if (instanceOf(item_0, 25)) {
        while (true) {
            next = dynamicCast(iter.next_0(), 13);
            if (!next) {
                return compute(item_0, 18, new IntegerValue(count), context);
            }
            ++count;
            instanceOf(next, 56)?(next = next.convert(($clinit_AtomicType() , DOUBLE)).asAtomic()):instanceOf(next, 25) || $dynamicError(this, 'Input to avg() contains invalid or mixed data types', 'FORG0006');
            item_0 = compute(item_0, 15, next, context);
        }
    }
    else if (instanceOf(item_0, 74)) {
        while (true) {
            next = dynamicCast(iter.next_0(), 13);
            if (!next) {
                return dynamicCast(item_0, 74).multiply(1 / count);
            }
            ++count;
            instanceOf(next, 74) || $dynamicError(this, 'Input to avg() contains invalid or mixed data types', 'FORG0006');
            item_0 = dynamicCast(item_0, 74).add_2(dynamicCast(next, 74));
        }
    }
    else {
        $dynamicError(this, 'Input to avg() contains invalid or mixed data types', 'FORG0006');
        return null;
    }
}
;
_.getItemType = function getItemType_64(){
    var base;
    base = getAtomizedItemType(this.argument[0], false);
    return base == ($clinit_AtomicType() , UNTYPED_ATOMIC)?DOUBLE:base == INTEGER?DECIMAL:base;
}
;
_.newInstance = function newInstance_1(){
    return new Average;
}
;
var Lclient_net_sf_saxon_ce_functions_Average_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Average', 459, Lclient_net_sf_saxon_ce_functions_Aggregate_2_classLit);
function BaseURI(){
    SystemFunction.call(this);
}

defineClass(460, 41, $intern_36, BaseURI);
_.evaluateItem = function evaluateItem_42(c){
    var node, s;
    node = dynamicCast(this.argument[0].evaluateItem(c), 7);
    if (!node) {
        return null;
    }
    s = node.getBaseURI();
    if (s == null) {
        return null;
    }
    return new AnyURIValue(s);
}
;
_.newInstance = function newInstance_2(){
    return new BaseURI;
}
;
var Lclient_net_sf_saxon_ce_functions_BaseURI_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'BaseURI', 460, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $effectiveBooleanValue_5(this$static, c){
    var b;
    b = this$static.argument[0].effectiveBooleanValue(c);
    return this$static.operation == 0?b:!b;
}

function BooleanFn(operation){
    SystemFunction.call(this);
    this.operation = operation;
}

function rewriteEffectiveBooleanValue(exp_0, visitor, contextItemType){
    var exists, th;
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    if (instanceOf(exp_0, 224) && dynamicCast(exp_0, 224).operation == 0) {
        return dynamicCast(exp_0, 224).argument[0];
    }
    else if ($isSubType(th, exp_0.getItemType(), ($clinit_AtomicType() , BOOLEAN)) && exp_0.getCardinality() == $intern_21) {
        return exp_0;
    }
    else if (instanceOf(exp_0, 226)) {
        exists = makeSystemFunction('exists', dynamicCast(exp_0, 226).argument);
        $setSourceLocator(exists, $getSourceLocator(exp_0));
        return exists.optimize(visitor, contextItemType);
    }
    else if (instanceOf(exp_0.getItemType(), 67)) {
        exists = makeSystemFunction('exists', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [exp_0]));
        $setSourceLocator(exists, $getSourceLocator(exp_0));
        return exists.optimize(visitor, contextItemType);
    }
    else {
        return null;
    }
}

defineClass(224, 41, {6:1, 20:1, 224:1}, BooleanFn);
_.checkArguments = function checkArguments_3(visitor){
    var err;
    $checkArguments(this, visitor);
    err = ebvError_0(this.argument[0]);
    if (err) {
        $setLocator(err, $getSourceLocator(this));
        throw err;
    }
}
;
_.effectiveBooleanValue = function effectiveBooleanValue_11(c){
    return $effectiveBooleanValue_5(this, c);
}
;
_.evaluateItem = function evaluateItem_43(context){
    return $clinit_BooleanValue() , $effectiveBooleanValue_5(this, context)?TRUE_0:FALSE_0;
}
;
_.newInstance = function newInstance_3(){
    return new BooleanFn(this.operation);
}
;
_.optimize = function optimize_54(visitor, contextItemType){
    var e, ebv;
    e = $optimize_4(this, visitor, contextItemType);
    if (e == this) {
        if (this.operation == 0) {
            ebv = rewriteEffectiveBooleanValue(this.argument[0], visitor, contextItemType);
            return !ebv?this:ebv.optimize(visitor, contextItemType);
        }
        else {
            ebv = rewriteEffectiveBooleanValue(this.argument[0], visitor, contextItemType);
            !!ebv && setCheck(this.argument, 0, ebv);
            return this;
        }
    }
    return e;
}
;
var Lclient_net_sf_saxon_ce_functions_BooleanFn_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'BooleanFn', 224, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function CodepointEqual(){
    SystemFunction.call(this);
}

defineClass(461, 41, $intern_36, CodepointEqual);
_.evaluateItem = function evaluateItem_44(context){
    var op1, op2;
    op1 = dynamicCast(this.argument[0].evaluateItem(context), 13);
    if (!op1) {
        return null;
    }
    op2 = dynamicCast(this.argument[1].evaluateItem(context), 13);
    if (!op2) {
        return null;
    }
    return $clinit_BooleanValue() , $equals_5(toString__Ljava_lang_String___devirtual$_0(op1.getPrimitiveStringValue()), toString__Ljava_lang_String___devirtual$_0(op2.getPrimitiveStringValue()))?TRUE_0:FALSE_0;
}
;
_.newInstance = function newInstance_4(){
    return new CodepointEqual;
}
;
var Lclient_net_sf_saxon_ce_functions_CodepointEqual_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'CodepointEqual', 461, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function CodepointsToString(){
    SystemFunction.call(this);
}

defineClass(462, 41, $intern_36, CodepointsToString);
_.evaluateItem = function evaluateItem_45(c){
    var next, nextInt, sb, si;
    sb = new FastStringBuffer(64);
    si = this.argument[0].iterate_0(c);
    while (true) {
        nextInt = dynamicCast(si.next_0(), 25);
        if (!nextInt) {
            break;
        }
        next = fromInt(nextInt.intValue());
        if (lt(next, {l:0, m:0, h:0}) || gt(next, {l:$intern_46, m:511, h:0}) || !isValidChar(toInt(next))) {
            throw new XPathException_2('Invalid XML character [x ' + toUnsignedRadixString(toInt(next), 16) + ']', 'FOCH0001');
        }
        if (lt(next, {l:$intern_34, m:0, h:0})) {
            $append_1(sb, toInt(next) & $intern_2);
        }
        else {
            $append_1(sb, (toInt(next) - $intern_34 >> 10) + $intern_48 & $intern_2);
            $append_1(sb, (toInt(next) - $intern_34 & $intern_59) + $intern_50 & $intern_2);
        }
    }
    return makeStringValue($condense(sb));
}
;
_.newInstance = function newInstance_5(){
    return new CodepointsToString;
}
;
var Lclient_net_sf_saxon_ce_functions_CodepointsToString_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'CodepointsToString', 462, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $checkArguments_0(this$static, visitor){
    !this$static.staticContext && (this$static.staticContext = visitor.staticContext);
    !this$static.stringCollator && $preEvaluateCollation(this$static, this$static.staticContext);
    $checkArguments(this$static, visitor);
}

function $getCollator_0(this$static, arg, context){
    var av, collationName, collationValue, numargs;
    if (this$static.stringCollator) {
        return this$static.stringCollator;
    }
    else {
        numargs = this$static.argument.length;
        if (numargs > arg) {
            av = dynamicCast(this$static.argument[arg].evaluateItem(context), 13);
            collationValue = dynamicCast(av, 12);
            collationName = dynamicCastToString(collationValue.value_0 = toString__Ljava_lang_String___devirtual$_0(collationValue.value_0));
            collationName = $resolveCollationURI(this$static, collationName);
            return $getNamedCollation((context.getConfiguration() , collationName));
        }
        else {
            return $clinit_CodepointCollator() , $clinit_CodepointCollator() , theInstance_0;
        }
    }
}

function $preEvaluateCollation(this$static, env){
    var collationExp, collationName, collationVal, uri_0;
    if (this$static.argument.length == this$static.details.maxArguments) {
        collationExp = this$static.argument[this$static.argument.length - 1];
        collationVal = instanceOf(collationExp, 9)?dynamicCast(collationExp, 9).value_0:null;
        if (instanceOf(collationVal, 13)) {
            collationName = toString__Ljava_lang_String___devirtual$_0(dynamicCast(collationVal, 13).getPrimitiveStringValue());
            collationName = $resolveCollationURI(this$static, collationName);
            this$static.stringCollator = $getNamedCollation((env.getConfiguration() , collationName));
        }
    }
    else {
        uri_0 = env.getDefaultCollationName();
        this$static.stringCollator = $getNamedCollation((env.getConfiguration() , uri_0));
    }
}

function $resolveCollationURI(this$static, collationName){
    var collationURI, err, expressionBaseURI;
    try {
        collationURI = new URI_2(collationName);
        if (collationURI.m_scheme != null) {
            return collationName;
        }
        else {
            expressionBaseURI = this$static.staticContext.getBaseURI();
            if (expressionBaseURI == null) {
                err = new XPathException_0("Cannot resolve relative collation URI '" + collationName + "': unknown or invalid base URI");
                err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FOCH0002');
                    $setLocator(err, $getSourceLocator(this$static));
                    throw err;
            }
            collationURI = new URI_0(new URI_1(expressionBaseURI), $toString_1(collationURI));
            return $toString_1(collationURI);
        }
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 51)) {
            err = new XPathException_0("Collation name '" + collationName + "' is not a valid URI");
            err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FOCH0002');
                $setLocator(err, $getSourceLocator(this$static));
                throw err;
        }
        else 
            throw unwrap($e0);
    }
}

function CollatingFunction(){
    SystemFunction.call(this);
}

defineClass(225, 41, $intern_36);
_.checkArguments = function checkArguments_4(visitor){
    $checkArguments_0(this, visitor);
}
;
_.staticContext = null;
_.stringCollator = null;
var Lclient_net_sf_saxon_ce_functions_CollatingFunction_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'CollatingFunction', 225, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function Compare(){
    CollatingFunction.call(this);
}

defineClass(463, 225, $intern_36, Compare);
_.evaluateItem = function evaluateItem_46(context){
    var arg0, arg1, collator, result;
    arg0 = dynamicCast(this.argument[0].evaluateItem(context), 13);
    if (!arg0) {
        return null;
    }
    arg1 = dynamicCast(this.argument[1].evaluateItem(context), 13);
    if (!arg1) {
        return null;
    }
    collator = new GenericAtomicComparer($getCollator_0(this, 2, context), context.getImplicitTimezone());
    result = $compareAtomicValues_2(collator, arg0, arg1);
    return result < 0?($clinit_IntegerValue() , MINUS_ONE):result > 0?($clinit_IntegerValue() , PLUS_ONE):($clinit_IntegerValue() , ZERO_2);
}
;
_.newInstance = function newInstance_6(){
    return new Compare;
}
;
var Lclient_net_sf_saxon_ce_functions_Compare_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Compare', 463, Lclient_net_sf_saxon_ce_functions_CollatingFunction_2_classLit);
function Component(operation){
    SystemFunction.call(this);
    this.operation = operation;
}

defineClass(78, 41, $intern_36, Component);
_.evaluateItem = function evaluateItem_47(context){
    var arg;
    arg = dynamicCast(this.argument[0].evaluateItem(context), 13);
    if (!arg) {
        return null;
    }
    return arg.getComponent(this.operation);
}
;
_.newInstance = function newInstance_7(){
    return new Component(this.operation);
}
;
var Lclient_net_sf_saxon_ce_functions_Component_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Component', 78, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $evaluateItem_4(this$static, c){
    var i_0, numArgs, sb, val;
    numArgs = this$static.argument.length;
    sb = new FastStringBuffer(64);
    for (i_0 = 0; i_0 < numArgs; i_0++) {
        val = dynamicCast(this$static.argument[i_0].evaluateItem(c), 13);
        !!val && $append_3(sb, toString__Ljava_lang_String___devirtual$_0(val.getPrimitiveStringValue()));
    }
    return makeStringValue($condense(sb));
}

function Concat(){
    SystemFunction.call(this);
}

defineClass(345, 41, {6:1, 20:1, 345:1}, Concat);
_.evaluateAsString = function evaluateAsString_1(c){
    return $getPrimitiveStringValue($evaluateItem_4(this, c));
}
;
_.evaluateItem = function evaluateItem_48(c){
    return $evaluateItem_4(this, c);
}
;
_.getRequiredType_0 = function getRequiredType_3(arg){
    return this.details.argumentTypes[0];
}
;
_.newInstance = function newInstance_8(){
    return new Concat;
}
;
var Lclient_net_sf_saxon_ce_functions_Concat_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Concat', 345, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $clinit_ConstructorFunctionLibrary(){
    $clinit_ConstructorFunctionLibrary = emptyMethod;
    THE_INSTANCE_3 = new ConstructorFunctionLibrary;
}

function ConstructorFunctionLibrary(){
}

defineClass(650, 1, $intern_60, ConstructorFunctionLibrary);
_.bind_0 = function bind_0(functionName, arguments_0, env, container){
    var cast, err, localName, type_0, uri_0;
    uri_0 = $getNamespaceURI(functionName);
    localName = valueOf_3(functionName.content_0, functionName.localNameStart, functionName.prefixStart - functionName.localNameStart);
    if ($equals_5(uri_0, 'http://www.w3.org/2001/XMLSchema')) {
        if (arguments_0.length != 1) {
            throw new XPathException_0('A constructor function must have exactly one argument');
        }
        type_0 = getSchemaType(localName);
        if (!type_0 || type_0 == ($clinit_AtomicType() , ANY_ATOMIC)) {
            err = new XPathException_2('Unknown constructor function: {' + uri_0 + '}' + localName, 'XPST0017');
            err.isStaticError = true;
            throw err;
        }
        cast = new CastExpression(arguments_0[0], type_0, true);
        $setContainer(cast, container);
        return cast;
    }
    return null;
}
;
_.hasFunctionSignature = function hasFunctionSignature(functionName, arity_0){
    var local, uri_0;
    if (arity_0 != 1 && arity_0 != -1) {
        return false;
    }
    uri_0 = $getNamespaceURI(functionName);
    local = valueOf_3(functionName.content_0, functionName.localNameStart, functionName.prefixStart - functionName.localNameStart);
    return $equals_5(uri_0, 'http://www.w3.org/2001/XMLSchema') && !!getSchemaType(local);
}
;
var THE_INSTANCE_3;
var Lclient_net_sf_saxon_ce_functions_ConstructorFunctionLibrary_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'ConstructorFunctionLibrary', 650, Ljava_lang_Object_2_classLit);
function Contains(op){
    CollatingFunction.call(this);
    this.operation = op;
}

defineClass(346, 225, $intern_36, Contains);
_.evaluateItem = function evaluateItem_49(context){
    var arg0, arg1, collator, result, s0, s1;
    arg1 = dynamicCast(this.argument[1].evaluateItem(context), 12);
    if (!arg1 || length__I__devirtual$(arg1.value_0) == 0) {
        result = true;
    }
    else {
        arg0 = dynamicCast(this.argument[0].evaluateItem(context), 12);
        if (!arg0 || length__I__devirtual$(arg0.value_0) == 0) {
            result = false;
        }
        else {
            s0 = dynamicCastToString(arg0.value_0 = toString__Ljava_lang_String___devirtual$_0(arg0.value_0));
            s1 = dynamicCastToString(arg1.value_0 = toString__Ljava_lang_String___devirtual$_0(arg1.value_0));
            collator = $getCollator_0(this, 2, context);
            if (instanceOf(collator, 161)) {
                switch (this.operation) {
                    case 0:
                        result = s0.indexOf(s1, 0) >= 0;
                        break;
                    case 1:
                        result = $equals_5(__substr(s0, 0, s1.length), s1);
                        break;
                    case 2:
                default:result = $endsWith(s0, s1);
                }
            }
            else {
                $dynamicError(this, 'The collation requested for ' + $getDisplayName(this) + ' does not support substring matching', 'FOCH0004');
                result = false;
            }
        }
    }
    return $clinit_BooleanValue() , result?TRUE_0:FALSE_0;
}
;
_.newInstance = function newInstance_9(){
    return new Contains(this.operation);
}
;
var Lclient_net_sf_saxon_ce_functions_Contains_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Contains', 346, Lclient_net_sf_saxon_ce_functions_CollatingFunction_2_classLit);
function Count(){
    Aggregate.call(this);
}

function count_0(iter){
    var count;
    count = -1;
    instanceOf(iter, 105) && (count = dynamicCast(iter, 105).getLastPosition());
    if (count == -1) {
        count = 0;
        while (iter.next_0()) {
            ++count;
        }
    }
    return count;
}

defineClass(226, 344, {6:1, 20:1, 226:1}, Count);
_.evaluateItem = function evaluateItem_50(context){
    var iter;
    iter = this.argument[0].iterate_0(context);
    return new IntegerValue(count_0(iter));
}
;
_.newInstance = function newInstance_10(){
    return new Count;
}
;
var Lclient_net_sf_saxon_ce_functions_Count_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Count', 226, Lclient_net_sf_saxon_ce_functions_Aggregate_2_classLit);
function $clinit_Current(){
    $clinit_Current = emptyMethod;
    FN_CURRENT = new StructuredQName('', 'http://www.w3.org/2005/xpath-functions', 'current');
}

function Current(){
    $clinit_Current();
    SystemFunction.call(this);
}

defineClass(347, 41, {6:1, 20:1, 347:1}, Current);
_.computeSpecialProperties = function computeSpecialProperties_28(){
    return 12779520;
}
;
_.evaluateItem = function evaluateItem_51(c){
    throw new AssertionError('current() function should have been rewritten at compile time');
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_17(){
    return 129;
}
;
_.newInstance = function newInstance_11(){
    return new Current;
}
;
var FN_CURRENT;
var Lclient_net_sf_saxon_ce_functions_Current_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Current', 347, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function CurrentDateTime(){
    SystemFunction.call(this);
}

defineClass(298, 41, $intern_36, CurrentDateTime);
_.evaluateItem = function evaluateItem_52(context){
    var dt, targetType;
    dt = getCurrentDateTime(context);
    $clinit_TypeHierarchy();
    targetType = dynamicCast($getItemType_0(this), 43);
    if (targetType == ($clinit_AtomicType() , DATE_TIME)) {
        return dt;
    }
    else if (targetType == DATE) {
        return $convert_0(dt, DATE).asAtomic();
    }
    else if (targetType == TIME) {
        return $convert_0(dt, TIME).asAtomic();
    }
    else if (targetType == DAY_TIME_DURATION || targetType == DAY_TIME_DURATION) {
        return $getComponent(dt, 7);
    }
    else {
        throw new IllegalArgumentException_0('Wrong target type for current date/time');
    }
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_18(){
    return $intern_40;
}
;
_.newInstance = function newInstance_12(){
    return new CurrentDateTime;
}
;
_.preEvaluate = function preEvaluate_1(visitor){
    return this;
}
;
var Lclient_net_sf_saxon_ce_functions_CurrentDateTime_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'CurrentDateTime', 298, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function CurrentGroup(){
    SystemFunction.call(this);
}

defineClass(348, 41, {6:1, 20:1, 348:1}, CurrentGroup);
_.getIntrinsicDependencies = function getIntrinsicDependencies_19(){
    return 32;
}
;
_.iterate_0 = function iterate_36(c){
    var gi;
    gi = c.getCurrentGroupIterator();
    if (!gi) {
        return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
    }
    return gi.iterateCurrentGroup();
}
;
_.newInstance = function newInstance_13(){
    return new CurrentGroup;
}
;
var Lclient_net_sf_saxon_ce_functions_CurrentGroup_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'CurrentGroup', 348, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function CurrentGroupingKey(){
    SystemFunction.call(this);
}

defineClass(349, 41, {6:1, 20:1, 349:1}, CurrentGroupingKey);
_.evaluateItem = function evaluateItem_53(c){
    var gi;
    gi = c.getCurrentGroupIterator();
    if (!gi) {
        return null;
    }
    return gi.getCurrentGroupingKey();
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_20(){
    return 32;
}
;
_.newInstance = function newInstance_14(){
    return new CurrentGroupingKey;
}
;
var Lclient_net_sf_saxon_ce_functions_CurrentGroupingKey_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'CurrentGroupingKey', 349, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function DateTimeConstructor(){
    SystemFunction.call(this);
}

defineClass(464, 41, $intern_36, DateTimeConstructor);
_.evaluateItem = function evaluateItem_54(context){
    var arg0, arg1, e;
    arg0 = dynamicCast(this.argument[0].evaluateItem(context), 13);
    arg1 = dynamicCast(this.argument[1].evaluateItem(context), 13);
    try {
        return makeDateTimeValue(dynamicCast(arg0, 150), dynamicCast(arg1, 138));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            $maybeSetLocation(e, $getSourceLocator(this));
            throw e;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.newInstance = function newInstance_15(){
    return new DateTimeConstructor;
}
;
var Lclient_net_sf_saxon_ce_functions_DateTimeConstructor_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'DateTimeConstructor', 464, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function DeepEqual(){
    CollatingFunction.call(this);
}

function deepEquals(n1, n2, comparer){
    var a1, a2, att1, c1, c2, d1, d2, s1, s2, val2;
    if (n1.isSameNodeInfo(n2))
        return true;
    if (n1.getNodeKind() != n2.getNodeKind()) {
        return false;
    }
    switch (n1.getNodeKind()) {
        case 1:
            if (!$equals_0(n1.getNodeName(), n2.getNodeName())) {
                return false;
            }

            a1 = n1.iterateAxis(2, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
            a2 = n2.iterateAxis(2, (null , THE_INSTANCE_7));
            if (count_0(a1.getAnother_0()) != count_0(a2)) {
                return false;
            }

            while (true) {
                att1 = dynamicCast(a1.next_0(), 7);
                if (!att1) {
                    break;
                }
                val2 = getAttributeValue(n2, att1.getURI(), att1.getLocalPart());
                if (val2 == null) {
                    return false;
                }
                if (!comparer.collator.comparesEqual_0(att1.getStringValue(), val2)) {
                    return false;
                }
            }

        case 9:
            c1 = n1.iterateAxis(3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
            c2 = n2.iterateAxis(3, (null , THE_INSTANCE_7));
            while (true) {
                d1 = dynamicCast(c1.next_0(), 7);
                while (!!d1 && isIgnorable(d1)) {
                    d1 = dynamicCast(c1.next_0(), 7);
                }
                d2 = dynamicCast(c2.next_0(), 7);
                while (!!d2 && isIgnorable(d2)) {
                    d2 = dynamicCast(c2.next_0(), 7);
                }
                if (!d1 || !d2) {
                    return d1 == d2;
                }
                if (!deepEquals(d1, d2, comparer)) {
                    return false;
                }
            }

        case 2:
    case 7:
case 13:
    case 3:
case 8:
    s1 = n1.getNodeName();
    s2 = n2.getNodeName();
    return (!s1?!s2:$equals_0(s1, s2)) && $comparesEqual(comparer, n1.getTypedValue(), n2.getTypedValue());
default:throw new IllegalArgumentException_0('Unknown node type');
    }
}

function deepEquals_0(op1, op2, collator){
    var av1, av2, err, item1, item2, result;
    result = true;
    try {
        while (true) {
            item1 = op1.next_0();
            item2 = op2.next_0();
            if (!item1 && !item2) {
                break;
            }
            if (!item1 || !item2) {
                result = false;
                break;
            }
            if (instanceOf(item1, 7)) {
                if (instanceOf(item2, 7)) {
                    if (!deepEquals(dynamicCast(item1, 7), dynamicCast(item2, 7), collator)) {
                        result = false;
                        break;
                    }
                }
                else {
                    result = false;
                    break;
                }
            }
            else {
                if (instanceOf(item2, 7)) {
                    result = false;
                    break;
                }
                else {
                    av1 = dynamicCast(item1, 13);
                    av2 = dynamicCast(item2, 13);
                    if (av1.isNaN_0() && av2.isNaN_0())
                        ;
                    else if (!$comparesEqual(collator, av1, av2)) {
                        result = false;
                        break;
                    }
                }
            }
        }
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 72)) {
            result = false;
        }
        else if (instanceOf($e0, 4)) {
            err = $e0;
            if ($equals_5('FOTY0015', !err.errorCode?null:$getLocalName_1(err.errorCode)) && $equals_5('http://www.w3.org/2005/xqt-errors', !err.errorCode?null:$getNamespaceURI(err.errorCode))) {
                throw err;
            }
            result = false;
        }
        else 
            throw unwrap($e0);
    }
    return result;
}

function isIgnorable(node){
    var kind;
    kind = node.getNodeKind();
    if (kind == 8) {
        return true;
    }
    else if (kind == 7) {
        return true;
    }
    return false;
}

defineClass(465, 225, $intern_36, DeepEqual);
_.evaluateItem = function evaluateItem_55(context){
    var collator, e, op1, op2;
    collator = new GenericAtomicComparer($getCollator_0(this, 2, context), context.getImplicitTimezone());
    op1 = this.argument[0].iterate_0(context);
    op2 = this.argument[1].iterate_0(context);
    try {
        return $clinit_BooleanValue() , deepEquals_0(op1, op2, collator)?TRUE_0:FALSE_0;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            $maybeSetLocation(e, $getSourceLocator(this));
            throw e;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.newInstance = function newInstance_16(){
    return new DeepEqual;
}
;
var Lclient_net_sf_saxon_ce_functions_DeepEqual_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'DeepEqual', 465, Lclient_net_sf_saxon_ce_functions_CollatingFunction_2_classLit);
function DistinctValues(){
    CollatingFunction.call(this);
}

defineClass(466, 225, $intern_36, DistinctValues);
_.iterate_0 = function iterate_37(context){
    var collator, function_$, iter;
    collator = $getCollator_0(this, 1, context);
    iter = this.argument[0].iterate_0(context);
    function_$ = new DistinctValues$DistinctItemsMappingFunction(collator, context.getImplicitTimezone());
    return new ItemMappingIterator(iter, function_$);
}
;
_.newInstance = function newInstance_17(){
    return new DistinctValues;
}
;
var Lclient_net_sf_saxon_ce_functions_DistinctValues_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'DistinctValues', 466, Lclient_net_sf_saxon_ce_functions_CollatingFunction_2_classLit);
function DistinctValues$DistinctItemsMappingFunction(collator, implicitTimezone){
    this.lookup = new HashSet_0(40);
    this.collator = collator;
    this.implicitTimezone = implicitTimezone;
}

defineClass(467, 1, $intern_30, DistinctValues$DistinctItemsMappingFunction);
_.getAnother_1 = function getAnother_18(newBaseIterator){
    return new DistinctValues$DistinctItemsMappingFunction(this.collator, this.implicitTimezone);
}
;
_.mapItem = function mapItem_10(item_0){
    var key, value_0;
    value_0 = dynamicCast(item_0, 13);
    value_0.isNaN_0()?(key = Lclient_net_sf_saxon_ce_functions_DistinctValues_2_classLit):(key = value_0.getXPathComparable(false, this.collator, this.implicitTimezone));
    return $add_17(this.lookup, key)?item_0:null;
}
;
_.implicitTimezone = 0;
var Lclient_net_sf_saxon_ce_functions_DistinctValues$DistinctItemsMappingFunction_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'DistinctValues/DistinctItemsMappingFunction', 467, Ljava_lang_Object_2_classLit);
function $doc_0(this$static, context){
    var href_0, hrefVal, item_0;
    hrefVal = dynamicCast(this$static.argument[0].evaluateItem(context), 13);
    if (!hrefVal) {
        return null;
    }
    href_0 = toString__Ljava_lang_String___devirtual$_0(hrefVal.getPrimitiveStringValue());
    item_0 = makeDoc(href_0, this$static.expressionBaseURI, context, $getSourceLocator(this$static));
    if (!item_0) {
        $dynamicError(this$static, 'Failed to load document ' + href_0, 'FODC0002');
        return null;
    }
    return item_0;
}

function Doc(){
    SystemFunction.call(this);
}

defineClass(468, 41, $intern_36, Doc);
_.checkArguments = function checkArguments_5(visitor){
    if (this.expressionBaseURI == null) {
        $checkArguments(this, visitor);
        this.expressionBaseURI = visitor.staticContext.getBaseURI();
    }
}
;
_.computeCardinality = function computeCardinality_38(){
    return this.argument[0].getCardinality() & $intern_35;
}
;
_.computeSpecialProperties = function computeSpecialProperties_29(){
    return 13238272;
}
;
_.evaluateItem = function evaluateItem_56(context){
    return $doc_0(this, context);
}
;
_.newInstance = function newInstance_18(){
    return new Doc;
}
;
_.preEvaluate = function preEvaluate_2(visitor){
    return this;
}
;
_.expressionBaseURI = null;
var Lclient_net_sf_saxon_ce_functions_Doc_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Doc', 468, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $docAvailable(this$static, href_0, context){
    var doc, documentKey, item_0, pool;
    try {
        documentKey = computeDocumentKey(href_0, this$static.expressionBaseURI);
        pool = context.getController().config.sourceDocumentPool;
        if ($contains_4(pool.unavailableDocuments, documentKey)) {
            return false;
        }
        doc = dynamicCast($get_0(pool.documentNameMap, documentKey), 109);
        if (doc) {
            return true;
        }
        item_0 = makeDoc(href_0, this$static.expressionBaseURI, context, $getSourceLocator(this$static));
        if (item_0) {
            return true;
        }
        else {
            $add_17(pool.unavailableDocuments, documentKey);
            return false;
        }
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            return false;
        }
        else 
            throw unwrap($e0);
    }
}

function DocAvailable(){
    SystemFunction.call(this);
}

defineClass(469, 41, $intern_36, DocAvailable);
_.checkArguments = function checkArguments_6(visitor){
    if (this.expressionBaseURI == null) {
        $checkArguments(this, visitor);
        this.expressionBaseURI = visitor.staticContext.getBaseURI();
    }
}
;
_.evaluateItem = function evaluateItem_57(context){
    var b, controller, href_0, hrefVal, old;
    hrefVal = dynamicCast(this.argument[0].evaluateItem(context), 13);
    if (!hrefVal) {
        return $clinit_BooleanValue() , FALSE_0;
    }
    href_0 = toString__Ljava_lang_String___devirtual$_0(hrefVal.getPrimitiveStringValue());
    controller = context.getController();
    old = controller.errorListener;
    $setErrorListener_0(controller, ($clinit_DocAvailable$ErrorDiscarder() , THE_INSTANCE_4));
    b = $docAvailable(this, href_0, context);
    controller.errorListener = old;
    return $clinit_BooleanValue() , b?TRUE_0:FALSE_0;
}
;
_.newInstance = function newInstance_19(){
    return new DocAvailable;
}
;
_.preEvaluate = function preEvaluate_3(visitor){
    return this;
}
;
_.expressionBaseURI = null;
var Lclient_net_sf_saxon_ce_functions_DocAvailable_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'DocAvailable', 469, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $clinit_DocAvailable$ErrorDiscarder(){
    $clinit_DocAvailable$ErrorDiscarder = emptyMethod;
    THE_INSTANCE_4 = new DocAvailable$ErrorDiscarder;
}

function DocAvailable$ErrorDiscarder(){
}

defineClass(745, 1, {}, DocAvailable$ErrorDiscarder);
_.error_0 = function error_0(exception){
}
;
var THE_INSTANCE_4;
var Lclient_net_sf_saxon_ce_functions_DocAvailable$ErrorDiscarder_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'DocAvailable/ErrorDiscarder', 745, Ljava_lang_Object_2_classLit);
function DocumentFn(){
    SystemFunction.call(this);
}

function computeDocumentKey(href_0, baseURI){
    var documentKey;
    try {
        documentKey = $toString_1(makeAbsolute(href_0, baseURI));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 51)) {
            documentKey = baseURI + '/../' + href_0;
        }
        else 
            throw unwrap($e0);
    }
    return new DocumentURI(documentKey);
}

function getFragment(doc, fragmentId){
    if (fragmentId == null) {
        return doc;
    }
    return doc.selectID(fragmentId);
}

function makeDoc(href_0, baseURI, c){
    var config, controller, doc, documentKey, fragmentId, hash, newdoc, pool;
    config = c.getConfiguration();
    hash = $indexOf_3(href_0, fromCodePoint(35));
    fragmentId = null;
    if (hash >= 0) {
        if (hash == href_0.length - 1) {
            href_0 = href_0.substr(0, hash);
        }
        else {
            fragmentId = __substr(href_0, hash + 1, href_0.length - (hash + 1));
            href_0 = href_0.substr(0, hash);
            isValidNCName(fragmentId) || (fragmentId = null);
        }
    }
    controller = c.getController();
    documentKey = computeDocumentKey(href_0, baseURI);
    doc = $find(config.globalDocumentPool, documentKey);
    if (doc) {
        return doc;
    }
    pool = controller.config.sourceDocumentPool;
    doc = dynamicCast($get_0(pool.documentNameMap, documentKey), 109);
    if (doc) {
        return getFragment(doc, fragmentId);
    }
    !controller.allOutputDestinations && (controller.allOutputDestinations = new HashSet_0(20));
    if ($contains_4(controller.allOutputDestinations, documentKey)) {
        $add_17(pool.unavailableDocuments, documentKey);
        throw new XPathException_2('Cannot read a document that was written during the same transformation: ' + documentKey, 'XTRE1500');
    }
    try {
        if ($contains_4(pool.unavailableDocuments, documentKey)) {
            throw new XPathException_2('Document has been marked not available: ' + documentKey, 'FODC0002');
        }
        newdoc = $buildDocument(config, documentKey.displayValue);
        $getStripperRules(c.getController().executable);
        $registerDocument(controller, newdoc, documentKey);
        !controller.allOutputDestinations && (controller.allOutputDestinations = new HashSet_0(20));
        $add_17(controller.allOutputDestinations, documentKey);
        return getFragment(newdoc, fragmentId);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            $add_17(pool.unavailableDocuments, documentKey);
            return null;
        }
        else 
            throw unwrap($e0);
    }
}

defineClass(440, 41, $intern_36, DocumentFn);
_.checkArguments = function checkArguments_7(visitor){
    if (this.expressionBaseURI == null) {
        $checkArguments(this, visitor);
        this.expressionBaseURI = visitor.staticContext.getBaseURI();
        setCheck(this.argument, 0, unsorted(this.argument[0], false));
    }
}
;
_.computeCardinality = function computeCardinality_39(){
    var expression;
    expression = this.argument[0];
    return (expression.getCardinality() & $intern_14) != 0?$intern_12:$intern_20;
}
;
_.computeSpecialProperties = function computeSpecialProperties_30(){
    return 4849664;
}
;
_.iterate_0 = function iterate_38(context){
    var base, baseURI, expression, hrefSequence, iter, map_0, numArgs;
    numArgs = this.argument.length;
    hrefSequence = this.argument[0].iterate_0(context);
    baseURI = null;
    if (numArgs == 2) {
        base = dynamicCast(this.argument[1].evaluateItem(context), 7);
        baseURI = base.getBaseURI();
    }
    map_0 = new DocumentFn$DocumentMappingFunction(context);
    map_0.baseURI = baseURI;
    map_0.stylesheetURI = this.expressionBaseURI;
    $getSourceLocator(this);
    iter = new ItemMappingIterator(hrefSequence, map_0);
    expression = this.argument[0];
    return (expression.getCardinality() & $intern_14) != 0?new DocumentOrderIterator_0(iter, ($clinit_GlobalOrderComparer() , $clinit_GlobalOrderComparer() , instance_0)):iter;
}
;
_.newInstance = function newInstance_20(){
    return new DocumentFn;
}
;
_.preEvaluate = function preEvaluate_4(visitor){
    return this;
}
;
_.expressionBaseURI = null;
var Lclient_net_sf_saxon_ce_functions_DocumentFn_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'DocumentFn', 440, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function DocumentFn$DocumentMappingFunction(context){
    this.context = context;
}

defineClass(690, 1, {}, DocumentFn$DocumentMappingFunction);
_.mapItem = function mapItem_11(item_0){
    var b;
    b = this.baseURI;
    b == null && (instanceOf(item_0, 7)?(b = dynamicCast(item_0, 7).getBaseURI()):(b = this.stylesheetURI));
    return makeDoc(item_0.getStringValue(), b, this.context);
}
;
var Lclient_net_sf_saxon_ce_functions_DocumentFn$DocumentMappingFunction_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'DocumentFn/DocumentMappingFunction', 690, Ljava_lang_Object_2_classLit);
function Error_0(){
    SystemFunction.call(this);
}

defineClass(471, 41, $intern_36, Error_0);
_.evaluateItem = function evaluateItem_58(context){
    var description, e, qname;
    qname = null;
    this.argument.length > 0 && (qname = dynamicCast(this.argument[0].evaluateItem(context), 184));
    !qname && (qname = new QNameValue_0(this.argument.length == 1?'FOTY0004':'FOER0000'));
    this.argument.length > 1?(description = this.argument[1].evaluateItem(context).getStringValue()):(description = 'Error signalled by application call on error()');
    e = new XPathException_0(description);
    $setErrorCodeQName(e, qname.qName);
    $setLocator(e, $getSourceLocator(this));
    throw e;
}
;
_.newInstance = function newInstance_21(){
    return new Error_0;
}
;
_.preEvaluate = function preEvaluate_5(visitor){
    return this;
}
;
var Lclient_net_sf_saxon_ce_functions_Error_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Error', 471, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $clinit_EscapeURI(){
    $clinit_EscapeURI = emptyMethod;
    var c, c$array, c$index, c$max;
    allowedASCII = initDim(Z_classLit, $intern_9, 0, 128, 8, 1);
    fill_4(allowedASCII, 0, 32, false);
    fill_4(allowedASCII, 33, 127, true);
    for (c$array = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [34, 60, 62, 92, 94, 96, 123, 124, 125]) , c$index = 0 , c$max = c$array.length; c$index < c$max; ++c$index) {
        c = c$array[c$index];
        allowedASCII[c] = false;
    }
}

function EscapeURI(operation){
    $clinit_EscapeURI();
    SystemFunction.call(this);
    this.operation = operation;
}

function allAllowedAscii(s){
    var c, i_0;
    for (i_0 = 0; i_0 < s.length; i_0++) {
        c = s.charCodeAt(i_0);
        if (c >= 127 || !allowedASCII[c]) {
            return false;
        }
    }
    return true;
}

function escape_0(s){
    var c, i_0, sb;
    sb = new FastStringBuffer(s.length);
    for (i_0 = 0; i_0 < s.length; i_0++) {
        c = s.charCodeAt(i_0);
        c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57?($ensureCapacity_0(sb, 1) , sb.array[sb.used++] = c):c <= 32 || c >= 127?escapeChar_0(c, i_0 + 1 < s.length?s.charCodeAt(i_0 + 1):32, sb):$indexOf_3('-_.~', fromCodePoint(c)) >= 0?($ensureCapacity_0(sb, 1) , sb.array[sb.used++] = c):escapeChar_0(c, 32, sb);
    }
    return sb;
}

function escapeChar_0(c, c2, sb){
    var array, b, used, v;
    array = initDim(B_classLit, $intern_9, 0, 4, 7, 1);
    used = getUTF8Encoding(c, c2, array);
    for (b = 0; b < used; b++) {
        v = array[b] & 255;
        $ensureCapacity_0(sb, 1);
        sb.array[sb.used++] = 37;
        $append_1(sb, '0123456789ABCDEF'.charCodeAt(~~(v / 16)));
        $append_1(sb, '0123456789ABCDEF'.charCodeAt(v % 16));
    }
}

function escapeHtmlURL(url_0){
    var c2, ch_0, i_0, sb;
    sb = new FastStringBuffer(url_0.length + 20);
    for (i_0 = 0; i_0 < url_0.length; i_0++) {
        ch_0 = url_0.charCodeAt(i_0);
        if (ch_0 < 32 || ch_0 > 126) {
            c2 = 32;
            $intern_48 <= ch_0 && ch_0 <= $intern_49 && (c2 = $charAt_1(url_0, ++i_0));
            escapeChar_0(ch_0, c2, sb);
        }
        else {
            $ensureCapacity_0(sb, 1);
            sb.array[sb.used++] = ch_0;
        }
    }
    return sb;
}

function iriToUri(s){
    var c, i_0, sb;
    if (allAllowedAscii(s)) {
        return s;
    }
    sb = new FastStringBuffer(s.length + 20);
    for (i_0 = 0; i_0 < s.length; i_0++) {
        c = s.charCodeAt(i_0);
        c >= 127 || !allowedASCII[c]?escapeChar_0(c, i_0 + 1 < s.length?s.charCodeAt(i_0 + 1):32, sb):($ensureCapacity_0(sb, 1) , sb.array[sb.used++] = c);
    }
    return sb;
}

defineClass(351, 41, $intern_36, EscapeURI);
_.evaluateItem = function evaluateItem_59(c){
    var item_0, s;
    item_0 = this.argument[0].evaluateItem(c);
    if (!item_0) {
        return $clinit_StringValue() , EMPTY_STRING;
    }
    s = item_0.getStringValue();
    switch (this.operation) {
        case 1:
            return makeStringValue(escape_0(s));
        case 2:
            return makeStringValue(iriToUri(s));
        case 3:
            return makeStringValue(escapeHtmlURL(s));
        default:throw new UnsupportedOperationException_0('Unknown escape operation');
    }
}
;
_.newInstance = function newInstance_22(){
    return new EscapeURI(this.operation);
}
;
var allowedASCII;
var Lclient_net_sf_saxon_ce_functions_EscapeURI_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'EscapeURI', 351, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $effectiveBooleanValue_6(this$static, c){
    var next;
    next = this$static.argument[0].iterate_0(c).next_0();
    return this$static.operation == 2?!!next:!next;
}

function Exists(operation){
    Aggregate.call(this);
    this.operation = operation;
}

defineClass(299, 344, {6:1, 20:1, 299:1}, Exists);
_.effectiveBooleanValue = function effectiveBooleanValue_12(c){
    return $effectiveBooleanValue_6(this, c);
}
;
_.evaluateItem = function evaluateItem_60(context){
    return $clinit_BooleanValue() , $effectiveBooleanValue_6(this, context)?TRUE_0:FALSE_0;
}
;
_.newInstance = function newInstance_23(){
    return new Exists(this.operation);
}
;
var Lclient_net_sf_saxon_ce_functions_Exists_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Exists', 299, Lclient_net_sf_saxon_ce_functions_Aggregate_2_classLit);
function ForceCase(operation){
    SystemFunction.call(this);
    this.operation = operation;
}

defineClass(400, 41, $intern_36, ForceCase);
_.evaluateItem = function evaluateItem_61(c){
    var s, sv;
    sv = dynamicCast(this.argument[0].evaluateItem(c), 13);
    if (!sv) {
        return $clinit_StringValue() , EMPTY_STRING;
    }
    s = toString__Ljava_lang_String___devirtual$_0(sv.getPrimitiveStringValue());
    this.operation == 0?(s = s.toUpperCase()):(s = s.toLowerCase());
    return $clinit_StringValue() , s == null || s.length == 0?EMPTY_STRING:new StringValue_0(s);
}
;
_.newInstance = function newInstance_24(){
    return new ForceCase(this.operation);
}
;
var Lclient_net_sf_saxon_ce_functions_ForceCase_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'ForceCase', 400, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $clinit_FormatDate(){
    $clinit_FormatDate = emptyMethod;
    componentPattern = new RegExp('([YMDdWwFHhmsfZzPCE])\\s*(.*)');
    formatPattern = new RegExp('([^,]*)(,.*)?');
    widthPattern = new RegExp(',(\\*|[0-9]+)(\\-(\\*|[0-9]+))?');
    alphanumericPattern = new RegExp('([A-Za-z0-9])*');
    digitsPattern = new RegExp('[0-9]+');
}

function FormatDate(){
    $clinit_FormatDate();
    SystemFunction.call(this);
}

function formatComponent(value_0, specifier, numberer){
    var component, componentValue, defaultFormat, dtvalue, format, matcher, sbz, use;
    dtvalue = value_0.toDateTime();
    matcher = $exec(componentPattern, toString__Ljava_lang_String___devirtual$_0(specifier));
    if (!matcher) {
        throw new XPathException_2('Unrecognized date/time component [' + specifier + ']', 'XTDE1340');
    }
    component = matcher[1].charCodeAt(0);
    format = matcher[2];
    format == null && (format = '');
    defaultFormat = false;
    if ($equals_5('', format) || $equals_5(format.substr(0, 1), ',')) {
        defaultFormat = true;
        switch (component) {
            case 70:
                use = 'Nn';
                break;
            case 80:
                use = 'n';
                break;
            case 67:
        case 69:
            use = 'N';
            break;
        case 109:
    case 115:
        use = '01';
        break;
    default:use = '1';
        }
        format = use + format;
    }
    if (instanceOf(value_0, 138) && $indexOf_3('YMDdWwFE', fromCodePoint(component)) >= 0) {
        throw new XPathException_2('In formatTime(): an xs:time value does not contain component ' + charToString(component), 'XTDE1350');
    }
    else if (instanceOf(value_0, 150) && $indexOf_3('hmsfP', fromCodePoint(component)) >= 0) {
        throw new XPathException_2('In formatTime(): an xs:date value does not contain component ' + charToString(component), 'XTDE1350');
    }
    switch (component) {
        case 89:
            componentValue = dtvalue.year;
            componentValue < 0 && (componentValue = 1 - componentValue);
            break;
        case 77:
            componentValue = dtvalue.month;
            break;
        case 68:
            componentValue = dtvalue.day;
            break;
        case 100:
            componentValue = getDayWithinYear(dtvalue.year, dtvalue.month, dtvalue.day);
            break;
        case 87:
            componentValue = getWeekNumber(dtvalue.year, dtvalue.month, dtvalue.day);
            break;
        case 119:
            componentValue = getWeekNumberWithinMonth(dtvalue.year, dtvalue.month, dtvalue.day);
            break;
        case 72:
            componentValue = dtvalue.hour;
            break;
        case 104:
            componentValue = dtvalue.hour;
            componentValue > 12 && (componentValue = componentValue - 12);
            componentValue == 0 && (componentValue = 12);
            break;
        case 109:
            componentValue = dtvalue.minute;
            break;
        case 115:
            componentValue = dtvalue.second;
            break;
        case 102:
            componentValue = dtvalue.microsecond;
            break;
        case 90:
    case 122:
        sbz = new FastStringBuffer(8);
        component == 122 && $append_3(sbz, 'GMT');
        $appendTimezone(dtvalue, sbz);
        return $condense(sbz) , valueOf_3(sbz.array, 0, sbz.used);
    case 70:
        componentValue = getDayOfWeek(dtvalue.year, dtvalue.month, dtvalue.day);
        break;
    case 80:
        componentValue = dtvalue.hour * 60 + dtvalue.minute;
        break;
    case 67:
        return 'Gregorian';
    case 69:
        return dtvalue.year > 0?'AD':'BC';
    default:throw new XPathException_2("Unknown formatDate/time component specifier '" + charToString(format.charCodeAt(0)) + "'", 'XTDE1340');
    }
    return formatNumber(component, componentValue, format, defaultFormat, numberer);
}

function formatDate(value_0, format, language){
    $clinit_FormatDate();
    var c, close_0, componentFormat, i_0, languageDefaulted, numberer, sb;
    languageDefaulted = language == null;
    language == null && (language = 'en');
    numberer = new Numberer_en;
    sb = new FastStringBuffer(64);
    !$equals_5('en', language) && !languageDefaulted && $append_3(sb, '[Language: en]');
    i_0 = 0;
    while (true) {
        while (i_0 < format.length && format.charCodeAt(i_0) != 91) {
            c = format.charCodeAt(i_0);
            $ensureCapacity_0(sb, 1);
            sb.array[sb.used++] = c;
            if (c == 93) {
                ++i_0;
                if (i_0 == format.length || format.charCodeAt(i_0) != 93) {
                    throw new XPathException_2("Closing ']' in date picture must be written as ']]'", 'XTDE1340');
                }
            }
            ++i_0;
        }
        if (i_0 == format.length) {
            break;
        }
        ++i_0;
        if (i_0 < format.length && format.charCodeAt(i_0) == 91) {
            $ensureCapacity_0(sb, 1);
            sb.array[sb.used++] = 91;
            ++i_0;
        }
        else {
            close_0 = i_0 < format.length?format.indexOf(']', i_0):-1;
            if (close_0 == -1) {
                throw new XPathException_2("Date format contains a '[' with no matching ']'", 'XTDE1340');
            }
            componentFormat = format.substr(i_0, close_0 - i_0);
            $append_2(sb, formatComponent(value_0, removeAllWhitespace(componentFormat), numberer));
            i_0 = close_0 + 1;
        }
    }
    return sb;
}

function formatNumber(component, value_0, format, defaultFormat, numberer){
    var dec, i_0, len, len0, letterValue, matcher, max_0, min_0, modifier, ordinal, primary, range, s, s0, sb, widths;
    matcher = $exec(formatPattern, format);
    if (!matcher) {
        throw new XPathException_2('Unrecognized format picture [' + charToString(component) + format + ']', 'XTDE1340');
    }
    primary = matcher[1];
    primary == null && (primary = '');
    modifier = null;
    if ($endsWith(primary, 't')) {
        primary = $substring_1(primary, 0, primary.length - 1);
        modifier = 't';
    }
    else if ($endsWith(primary, 'o')) {
        primary = $substring_1(primary, 0, primary.length - 1);
        modifier = 'o';
    }
    letterValue = $equals_5('t', modifier)?'traditional':null;
    ordinal = $equals_5('o', modifier)?'yes':null;
    widths = matcher[2];
    widths == null && (widths = '');
    if (!$test(alphanumericPattern, primary)) {
        throw new XPathException_2("In format picture at '" + primary + "', primary format must be alphanumeric", 'XTDE1340');
    }
    min_0 = 1;
    max_0 = $intern_0;
    if (widths == null || $equals_5('', widths)) {
        if ($test(digitsPattern, primary)) {
            len0 = getStringLength(primary);
            if (len0 > 1) {
                min_0 = len0;
                max_0 = len0;
            }
        }
    }
    else if ($equals_5(primary, 'I') || $equals_5(primary, 'i')) {
        min_0 = 1;
        max_0 = $intern_0;
    }
    else {
        range = getWidths(widths);
        min_0 = range[0];
        max_0 = range[1];
        if (defaultFormat) {
            if ($endsWith(primary, '1') && min_0 != primary.length) {
                sb = new FastStringBuffer(min_0 + 1);
                for (i_0 = 1; i_0 < min_0; i_0++) {
                    $ensureCapacity_0(sb, 1);
                    sb.array[sb.used++] = 48;
                }
                $ensureCapacity_0(sb, 1);
                sb.array[sb.used++] = 49;
                primary = ($condense(sb) , valueOf_3(sb.array, 0, sb.used));
            }
        }
    }
    if (component == 80) {
        $equals_5('N', primary) || $equals_5('Nn', primary) || (primary = 'n');
        max_0 == $intern_0 && (max_0 = 4);
    }
    else if (component == 102) {
        if (value_0 == 0) {
            s0 = '0';
        }
        else {
            s0 = __substr($intern_52 + value_0 + '', 1, ($intern_52 + value_0 + '').length - 1);
            if (s0.length > max_0) {
                dec = new DecimalValue_1(new BigDecimal_3('0.' + s0));
                dec = $roundHalfToEven(dec, max_0);
                s0 = $toString_0(decimalToString(dec.value_0, new FastStringBuffer(16)));
                s0.length > 2?(s0 = __substr(s0, 2, s0.length - 2)):(s0 = '');
            }
        }
        while (s0.length < min_0) {
            s0 = s0 + '0';
        }
        while (s0.length > min_0 && $charAt_1(s0, s0.length - 1) == 48) {
            s0 = $substring_1(s0, 0, s0.length - 1);
        }
        return s0;
    }
    if ($equals_5('N', primary) || $equals_5('n', primary) || $equals_5('Nn', primary)) {
        s0 = '';
        component == 77?(s0 = abbreviate(($clinit_Numberer_en() , englishMonths)[value_0 - 1], max_0)):component == 70?(s0 = abbreviate(($clinit_Numberer_en() , englishDays)[value_0 - 1], max_0)):component == 80?(s0 = $halfDayName(value_0, max_0)):(primary = '1');
        return $equals_5('N', primary)?s0.toUpperCase():$equals_5('n', primary)?s0.toLowerCase():s0;
    }
    s = $format(numberer, fromInt(value_0), primary, null, letterValue, ordinal);
    len = getStringLength(s);
    while (len < min_0) {
        s = $substring_0('00000000' + s, s.length + 8 - min_0);
        len = getStringLength(s);
    }
    len > max_0 && component == 89 && (len == s.length?(s = $substring_0(s, s.length - max_0)):(s = $substring_0(s, s.length - 2 * max_0)));
    return s;
}

function getWidths(widths){
    var max_0, min_0, result, smax, smin, widthMatcher;
    try {
        min_0 = -1;
        max_0 = -1;
        if (!$equals_5('', widths)) {
            widthMatcher = $exec(widthPattern, widths);
            if (widthMatcher) {
                smin = widthMatcher[1];
                smin == null || $equals_5('', smin) || $equals_5('*', smin)?(min_0 = 1):(min_0 = __parseAndValidateInt(smin, 10));
                smax = widthMatcher[3];
                smax == null || $equals_5('', smax) || $equals_5('*', smax)?(max_0 = $intern_0):(max_0 = __parseAndValidateInt(smax, 10));
            }
            else {
                throw new XPathException_2('Unrecognized width specifier ' + wrap(widths, 4), 'XTDE1340');
            }
        }
        if (min_0 > max_0 && max_0 != -1) {
            throw new XPathException_2('Minimum width in date/time picture exceeds maximum width', 'XTDE1340');
        }
        result = initDim(I_classLit, $intern_4, 0, 2, 7, 1);
        result[0] = min_0;
        result[1] = max_0;
        return result;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 57)) {
            throw new XPathException_2('Invalid integer used as width in date/time picture', 'XTDE1340');
        }
        else 
            throw unwrap($e0);
    }
}

defineClass(334, 41, $intern_36, FormatDate);
_.checkArguments = function checkArguments_8(visitor){
    var numArgs;
    numArgs = this.argument.length;
    if (numArgs != 2 && numArgs != 5) {
        throw new XPathException_1('Function ' + $getDisplayName(this) + ' must have either two or five arguments', $getSourceLocator(this));
    }
    $checkArguments(this, visitor);
}
;
_.evaluateItem = function evaluateItem_62(context){
    var cal, calendarVal, format, language, languageVal, result, value_0;
    value_0 = dynamicCast(this.argument[0].evaluateItem(context), 73);
    if (!value_0) {
        return null;
    }
    format = this.argument[1].evaluateItem(context).getStringValue();
    calendarVal = null;
    languageVal = null;
    if (this.argument.length > 2) {
        languageVal = dynamicCast(this.argument[2].evaluateItem(context), 12);
        calendarVal = dynamicCast(this.argument[3].evaluateItem(context), 12);
    }
    language = !languageVal?null:dynamicCastToString(languageVal.value_0 = toString__Ljava_lang_String___devirtual$_0(languageVal.value_0));
    result = formatDate(value_0, format, language);
    if (calendarVal) {
        cal = dynamicCastToString(calendarVal.value_0 = toString__Ljava_lang_String___devirtual$_0(calendarVal.value_0));
        !$equals_5(cal, 'AD') && !$equals_5(cal, 'ISO') && (result = '[Calendar: AD]' + toString__Ljava_lang_String___devirtual$_0(result));
    }
    return new StringValue_0(result);
}
;
_.newInstance = function newInstance_25(){
    return new FormatDate;
}
;
var alphanumericPattern, componentPattern, digitsPattern, formatPattern, widthPattern;
var Lclient_net_sf_saxon_ce_functions_FormatDate_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'FormatDate', 334, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $evaluateAsString(this$static, context){
    var av0, dfm, dfs, e, format, lexicalName, numArgs, number, pics, qName;
    numArgs = this$static.argument.length;
    av0 = dynamicCast(this$static.argument[0].evaluateItem(context), 13);
    !av0 && (av0 = ($clinit_DoubleValue() , NaN_0));
    number = dynamicCast(av0, 25);
    dfm = $getDecimalFormatManager(context.getController().executable);
    if (numArgs == 2) {
        dfs = dfm.defaultDFS;
    }
    else {
        lexicalName = this$static.argument[2].evaluateItem(context).getStringValue();
        qName = null;
        try {
            qName = fromLexicalQName(lexicalName, '', this$static.staticContext.getNamespaceResolver());
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                e = $e0;
                $dynamicError(this$static, 'Invalid decimal format name. ' + e.message_0, 'XTDE1280');
            }
            else 
                throw unwrap($e0);
        }
        dfs = $getNamedDecimalFormat(dfm, qName);
        !dfs && $dynamicError(this$static, "format-number function: decimal-format '" + lexicalName + "' is not defined", 'XTDE1280');
    }
    format = this$static.argument[1].evaluateItem(context).getStringValue();
    pics = getSubPictures(format, dfs);
    return formatNumber_0(number, pics, dfs);
}

function FormatNumber(){
    SystemFunction.call(this);
}

function adjustToDecimal(value_0){
    var fsb, i_0, initial, n, p_0, s, s2, sb, start_0, trial;
    initial = new BigDecimal(value_0);
    trial = null;
    fsb = new FastStringBuffer(16);
    decimalToString(initial, fsb);
    s = ($condense(fsb) , valueOf_3(fsb.array, 0, fsb.used));
    start_0 = s.charCodeAt(0) == 45?1:0;
    p_0 = s.indexOf('.');
    i_0 = s.lastIndexOf('000000000');
    if (i_0 > 0) {
        if (p_0 < 0 || i_0 < p_0) {
            sb = new FastStringBuffer(s.length);
            $append_3(sb, s.substr(0, i_0));
            for (n = i_0; n < s.length; n++) {
                $append_1(sb, s.charCodeAt(n) == 46?46:48);
            }
            trial = new BigDecimal_3(($condense(sb) , valueOf_3(sb.array, 0, sb.used)));
        }
        else {
            trial = new BigDecimal_3(s.substr(0, i_0));
        }
    }
    else {
        i_0 = s.indexOf('999999999');
        if (i_0 >= 0) {
            if (i_0 == start_0) {
                sb = new FastStringBuffer(s.length + 1);
                start_0 == 1 && ($ensureCapacity_0(sb, 1) , sb.array[sb.used++] = 45);
                $ensureCapacity_0(sb, 1);
                sb.array[sb.used++] = 49;
                for (n = start_0; n < s.length; n++) {
                    $append_1(sb, s.charCodeAt(n) == 46?46:48);
                }
                trial = new BigDecimal_3(($condense(sb) , valueOf_3(sb.array, 0, sb.used)));
            }
            else {
                while (i_0 >= 0 && (s.charCodeAt(i_0) == 57 || s.charCodeAt(i_0) == 46)) {
                    --i_0;
                }
                if (i_0 < 0 || s.charCodeAt(i_0) == 45) {
                    return initial;
                }
                else if (p_0 < 0 || i_0 < p_0) {
                    sb = new FastStringBuffer(s.length);
                    $append_3(sb, s.substr(0, i_0));
                    $append_1(sb, s.charCodeAt(i_0) + 1 & $intern_2);
                    for (n = i_0; n < s.length; n++) {
                        $append_1(sb, s.charCodeAt(n) == 46?46:48);
                    }
                    trial = new BigDecimal_3(($condense(sb) , valueOf_3(sb.array, 0, sb.used)));
                }
                else {
                    s2 = s.substr(0, i_0) + charToString(s.charCodeAt(i_0) + 1 & $intern_2);
                    trial = new BigDecimal_3(s2);
                }
            }
        }
    }
    return !!trial && __parseAndValidateDouble($toString_2(trial)) == value_0?trial:initial;
}

function formatNumber_0(number, subPictures, dfs){
    var absN, minusSign, pic;
    absN = number;
    minusSign = '';
    if (number.signum() < 0) {
        absN = number.negate_0();
        if (!subPictures[1]) {
            pic = subPictures[0];
            minusSign = '' + unicodeChar(dfs.minusSign);
        }
        else {
            pic = subPictures[1];
        }
    }
    else {
        pic = subPictures[0];
    }
    return $format_2(pic, absN, dfs, minusSign);
}

function getSubPictures(picture, dfs){
    var c, err, pic0, pic1, pics, picture4, sep;
    picture4 = expand_0(picture);
    pics = initDim(Lclient_net_sf_saxon_ce_functions_FormatNumber$SubPicture_2_classLit, $intern_1, 300, 2, 0, 1);
    if (picture4.length == 0) {
        err = new XPathException_0('format-number() picture is zero-length');
        err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTDE1310');
            throw err;
    }
    sep = -1;
    for (c = 0; c < picture4.length; c++) {
        if (picture4[c] == dfs.patternSeparator) {
            c == 0?grumble('first subpicture is zero-length'):sep >= 0?grumble('more than one pattern separator'):sep == picture4.length - 1 && grumble('second subpicture is zero-length');
            sep = c;
        }
    }
    if (sep < 0) {
        pics[0] = new FormatNumber$SubPicture(picture4, dfs);
        pics[1] = null;
    }
    else {
        pic0 = initDim(I_classLit, $intern_4, 0, sep, 7, 1);
        arraycopy(picture4, 0, pic0, 0, sep);
        pic1 = initDim(I_classLit, $intern_4, 0, picture4.length - sep - 1, 7, 1);
        arraycopy(picture4, sep + 1, pic1, 0, picture4.length - sep - 1);
        pics[0] = new FormatNumber$SubPicture(pic0, dfs);
        pics[1] = new FormatNumber$SubPicture(pic1, dfs);
    }
    return pics;
}

function grumble(s){
    throw new XPathException_2('format-number picture: ' + s, 'XTDE1310');
}

function insert_0(array, used, value_0, position){
    var a2;
    if (used + 1 > array.length) {
        a2 = initDim(I_classLit, $intern_4, 0, used + 10, 7, 1);
        arraycopy(array, 0, a2, 0, used);
        array = a2;
    }
    arraycopy(array, position, array, position + 1, used - 1 - position);
    array[position] = value_0;
    return array;
}

function unicodeChar(ch_0){
    return ch_0 < $intern_34?'' + String.fromCharCode(ch_0 & $intern_2):$appendWideChar(new FastStringBuffer(2), ch_0);
}

defineClass(472, 41, $intern_36, FormatNumber);
_.checkArguments = function checkArguments_9(visitor){
    !this.staticContext && (this.staticContext = visitor.staticContext);
}
;
_.evaluateAsString = function evaluateAsString_2(context){
    return $evaluateAsString(this, context);
}
;
_.evaluateItem = function evaluateItem_63(c){
    return new StringValue_0($evaluateAsString(this, c));
}
;
_.newInstance = function newInstance_26(){
    return new FormatNumber;
}
;
_.preEvaluate = function preEvaluate_6(visitor){
    return this;
}
;
var Lclient_net_sf_saxon_ce_functions_FormatNumber_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'FormatNumber', 472, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $format_2(this$static, value_0, dfs, minusSign){
    var c, dec, g, i_0, ib, ibused, multiplier, newZero, p_0, point, res, sb, wholePartGroupingPosition, wholePartGroupingPosition$array, wholePartGroupingPosition$index, wholePartGroupingPosition$max;
    if (value_0.isNaN_0()) {
        return dfs.NaN_0;
    }
    if ((instanceOf(value_0, 44) || instanceOf(value_0, 71)) && isInfinite(value_0.getDoubleValue())) {
        return minusSign + this$static.prefix_0 + dfs.infinity + this$static.suffix;
    }
    multiplier = 1;
    this$static.isPercent?(multiplier = 100):this$static.isPerMille && (multiplier = $intern_51);
    if (multiplier != 1) {
        try {
            value_0 = dynamicCast(compute(value_0, 17, new IntegerValue(multiplier), null), 25);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                value_0 = new DoubleValue(value_0.getDoubleValue() * multiplier);
            }
            else 
                throw unwrap($e0);
        }
    }
    sb = new FastStringBuffer(16);
    if (instanceOf(value_0, 44) || instanceOf(value_0, 71)) {
        dec = adjustToDecimal(value_0.getDoubleValue());
        $formatDecimal(this$static, dec, sb);
    }
    else 
        instanceOf(value_0, 32)?$formatInteger(this$static, value_0, sb):instanceOf(value_0, 68) && $formatDecimal(this$static, dynamicCast(value_0, 68).value_0, sb);
    ib = expand_0(sb);
    ibused = ib.length;
    point = $indexOf_0(sb);
    if (point == -1) {
        point = sb.used;
    }
    else {
        ib[point] = dfs.decimalSeparator;
        this$static.maxFractionPartSize == 0 && --ibused;
    }
    if (dfs.zeroDigit != 48) {
        newZero = dfs.zeroDigit;
        for (i_0 = 0; i_0 < ibused; i_0++) {
            c = ib[i_0];
            c >= 48 && c <= 57 && (ib[i_0] = c - 48 + newZero);
        }
    }
    if (this$static.wholePartGroupingPositions != null) {
        if (this$static.wholePartGroupingPositions.length == 1) {
            g = this$static.wholePartGroupingPositions[0];
            p_0 = point - g;
            while (p_0 > 0) {
                ib = insert_0(ib, ibused++, dfs.groupingSeparator, p_0);
                p_0 -= g;
            }
        }
        else {
            for (wholePartGroupingPosition$array = this$static.wholePartGroupingPositions , wholePartGroupingPosition$index = 0 , wholePartGroupingPosition$max = wholePartGroupingPosition$array.length; wholePartGroupingPosition$index < wholePartGroupingPosition$max; ++wholePartGroupingPosition$index) {
                wholePartGroupingPosition = wholePartGroupingPosition$array[wholePartGroupingPosition$index];
                p_0 = point - wholePartGroupingPosition;
                p_0 > 0 && (ib = insert_0(ib, ibused++, dfs.groupingSeparator, p_0));
            }
        }
    }
    if (this$static.fractionalPartGroupingPositions != null) {
        for (i_0 = 0; i_0 < this$static.fractionalPartGroupingPositions.length; i_0++) {
            p_0 = point + 1 + this$static.fractionalPartGroupingPositions[i_0] + i_0;
            if (p_0 < ibused - 1) {
                ib = insert_0(ib, ibused++, dfs.groupingSeparator, p_0);
            }
            else {
                break;
            }
        }
    }
    res = new FastStringBuffer(this$static.prefix_0.length + minusSign.length + this$static.suffix.length + ibused);
    $append_3(res, minusSign);
    $append_3(res, this$static.prefix_0);
    $append_2(res, contract(ib, ibused));
    $append_3(res, this$static.suffix);
    return res;
}

function $formatDecimal(this$static, dval, fsb){
    var i_0, intDigits, point, zz;
    dval = $setScale(dval, this$static.maxFractionPartSize, valueOf_9(6));
    decimalToString(dval, fsb);
    point = $indexOf_0(fsb);
    if (point >= 0) {
        zz = this$static.maxFractionPartSize - this$static.minFractionPartSize;
        while (zz > 0) {
            if ($charAt(fsb, fsb.used - 1) == 48) {
                $setLength(fsb, fsb.used - 1);
                --zz;
            }
            else {
                break;
            }
        }
        intDigits = point;
        $charAt(fsb, fsb.used - 1) == 46 && $setLength(fsb, fsb.used - 1);
    }
    else {
        intDigits = fsb.used;
        if (this$static.minFractionPartSize > 0) {
            $ensureCapacity_0(fsb, 1);
            fsb.array[fsb.used++] = 46;
            for (i_0 = 0; i_0 < this$static.minFractionPartSize; i_0++) {
                $ensureCapacity_0(fsb, 1);
                fsb.array[fsb.used++] = 48;
            }
        }
    }
    this$static.minWholePartSize == 0 && intDigits == 1 && $charAt(fsb, 0) == 48?$removeCharAt(fsb):$prependRepeated(fsb, this$static.minWholePartSize - intDigits);
}

function $formatInteger(this$static, value_0, fsb){
    var i_0, leadingZeroes;
    $append_3(fsb, toString__Ljava_lang_String___devirtual$_0(value_0.getPrimitiveStringValue()));
    leadingZeroes = this$static.minWholePartSize - fsb.used;
    $prependRepeated(fsb, leadingZeroes);
    if (this$static.minFractionPartSize != 0) {
        $ensureCapacity_0(fsb, 1);
        fsb.array[fsb.used++] = 46;
        for (i_0 = 0; i_0 < this$static.minFractionPartSize; i_0++) {
            $ensureCapacity_0(fsb, 1);
            fsb.array[fsb.used++] = 48;
        }
    }
}

function FormatNumber$SubPicture(pic, dfs){
    var c, c$index, c$index0, c$max, c$max0, decimalSeparator, digitSign, first, foundDecimalSeparator, foundDigit, fractionalPartPositions, groupingSeparator, i_0, i0, n, perMilleSign, percentSign, phase, regular, wholePartPositions, zeroDigit;
    percentSign = dfs.percent;
    perMilleSign = dfs.permill;
    decimalSeparator = dfs.decimalSeparator;
    groupingSeparator = dfs.groupingSeparator;
    digitSign = dfs.digit;
    zeroDigit = dfs.zeroDigit;
    wholePartPositions = null;
    fractionalPartPositions = null;
    foundDigit = false;
    foundDecimalSeparator = false;
    for (c$index0 = 0 , c$max0 = pic.length; c$index0 < c$max0; ++c$index0) {
        c = pic[c$index0];
        if (c == digitSign || c == zeroDigit) {
            foundDigit = true;
            break;
        }
    }
    foundDigit || grumble('subpicture contains no digit or zero-digit sign');
    phase = 0;
    for (c$index = 0 , c$max = pic.length; c$index < c$max; ++c$index) {
        c = pic[c$index];
        if (c == percentSign || c == perMilleSign) {
            (this.isPercent || this.isPerMille) && grumble('Cannot have more than one percent or per-mille character in a sub-picture');
            this.isPercent = c == percentSign;
            this.isPerMille = c == perMilleSign;
            switch (phase) {
                case 0:
                    this.prefix_0 += c < $intern_34?'' + String.fromCharCode(c & $intern_2):$appendWideChar(new FastStringBuffer(2), c);
                    break;
                case 1:
            case 2:
        case 3:
    case 4:
case 5:
    phase = 5;
    this.suffix += c < $intern_34?'' + String.fromCharCode(c & $intern_2):$appendWideChar(new FastStringBuffer(2), c);
            }
        }
        else if (c == digitSign) {
            switch (phase) {
                case 0:
            case 1:
                phase = 1;
                ++this.maxWholePartSize;
                break;
            case 2:
                grumble('Digit sign must not appear after a zero-digit sign in the integer part of a sub-picture');
                break;
            case 3:
        case 4:
            phase = 4;
            ++this.maxFractionPartSize;
            break;
        case 5:
            grumble('Passive character must not appear between active characters in a sub-picture');
            }
        }
        else if (c == zeroDigit) {
            switch (phase) {
                case 0:
            case 1:
        case 2:
            phase = 2;
            ++this.minWholePartSize;
            ++this.maxWholePartSize;
            break;
        case 3:
            ++this.minFractionPartSize;
            ++this.maxFractionPartSize;
            break;
        case 4:
            grumble('Zero digit sign must not appear after a digit sign in the fractional part of a sub-picture');
            break;
        case 5:
            grumble('Passive character must not appear between active characters in a sub-picture');
            }
        }
        else if (c == decimalSeparator) {
            switch (phase) {
                case 0:
            case 1:
        case 2:
            phase = 3;
            foundDecimalSeparator = true;
            break;
        case 3:
    case 4:
case 5:
    foundDecimalSeparator?grumble('There must only be one decimal separator in a sub-picture'):grumble('Decimal separator cannot come after a character in the suffix');
            }
        }
        else if (c == groupingSeparator) {
            switch (phase) {
                case 0:
            case 1:
        case 2:
            !wholePartPositions && (wholePartPositions = new ArrayList_0(3));
            $add_16(wholePartPositions, valueOf(this.maxWholePartSize));
            break;
        case 3:
    case 4:
        this.maxFractionPartSize == 0 && grumble('Grouping separator cannot be adjacent to decimal separator');
        !fractionalPartPositions && (fractionalPartPositions = new ArrayList_0(3));
        $add_16(fractionalPartPositions, valueOf(this.maxFractionPartSize));
        break;
    case 5:
        grumble('Grouping separator found in suffix of sub-picture');
            }
        }
        else {
            switch (phase) {
                case 0:
                    this.prefix_0 += c < $intern_34?'' + String.fromCharCode(c & $intern_2):$appendWideChar(new FastStringBuffer(2), c);
                    break;
                case 1:
            case 2:
        case 3:
    case 4:
case 5:
    phase = 5;
    this.suffix += c < $intern_34?'' + String.fromCharCode(c & $intern_2):$appendWideChar(new FastStringBuffer(2), c);
            }
        }
    }
    this.minWholePartSize == 0 && !foundDecimalSeparator && (this.minWholePartSize = 1);
    if (wholePartPositions) {
        n = wholePartPositions.array.length;
        this.wholePartGroupingPositions = initDim(I_classLit, $intern_4, 0, n, 7, 1);
        for (i0 = 0; i0 < n; i0++) {
            this.wholePartGroupingPositions[i0] = this.maxWholePartSize - (checkElementIndex(n - i0 - 1, wholePartPositions.array.length) , dynamicCast(wholePartPositions.array[n - i0 - 1], 83)).value_0;
        }
        if (n > 1) {
            regular = true;
            first = this.wholePartGroupingPositions[0];
            for (i_0 = 1; i_0 < n; i_0++) {
                if (this.wholePartGroupingPositions[i_0] != i_0 * first) {
                    regular = false;
                    break;
                }
            }
            if (regular) {
                this.wholePartGroupingPositions = initDim(I_classLit, $intern_4, 0, 1, 7, 1);
                this.wholePartGroupingPositions[0] = first;
            }
        }
        this.wholePartGroupingPositions[0] == 0 && grumble('Cannot have a grouping separator adjacent to the decimal separator');
    }
    if (fractionalPartPositions) {
        n = fractionalPartPositions.array.length;
        this.fractionalPartGroupingPositions = initDim(I_classLit, $intern_4, 0, n, 7, 1);
        for (i_0 = 0; i_0 < n; i_0++) {
            this.fractionalPartGroupingPositions[i_0] = (checkElementIndex(i_0, fractionalPartPositions.array.length) , dynamicCast(fractionalPartPositions.array[i_0], 83)).value_0;
        }
    }
}

defineClass(300, 1, {300:1}, FormatNumber$SubPicture);
_.fractionalPartGroupingPositions = null;
_.isPerMille = false;
_.isPercent = false;
_.maxFractionPartSize = 0;
_.maxWholePartSize = 0;
_.minFractionPartSize = 0;
_.minWholePartSize = 0;
_.prefix_0 = '';
_.suffix = '';
_.wholePartGroupingPositions = null;
var Lclient_net_sf_saxon_ce_functions_FormatNumber$SubPicture_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'FormatNumber/SubPicture', 300, Ljava_lang_Object_2_classLit);
function $addFunctionLibrary(this$static, lib){
    $add_16(this$static.libraryList, lib);
    return this$static.libraryList.array.length - 1;
}

function $bind(this$static, functionName, staticArgs, env, container){
    var func, lib, lib$iterator;
    for (lib$iterator = new AbstractList$IteratorImpl(this$static.libraryList); lib$iterator.i < lib$iterator.this$01_0.size_1();) {
        lib = (checkCriticalElement(lib$iterator.i < lib$iterator.this$01_0.size_1()) , dynamicCast(lib$iterator.this$01_0.get_1(lib$iterator.last = lib$iterator.i++), 310));
        func = lib.bind_0(functionName, staticArgs, env, container);
        if (func) {
            return func;
        }
    }
    return null;
}

function $hasFunctionSignature(this$static, functionName, arity_0){
    var b, it, lib;
    for (it = new AbstractList$IteratorImpl(this$static.libraryList); it.i < it.this$01_0.size_1();) {
        lib = (checkCriticalElement(it.i < it.this$01_0.size_1()) , dynamicCast(it.this$01_0.get_1(it.last = it.i++), 310));
        b = lib.hasFunctionSignature(functionName, arity_0);
        if (b) {
            return true;
        }
    }
    return false;
}

function FunctionLibraryList(){
    this.libraryList = new ArrayList_0(8);
}

defineClass(372, 1, $intern_60, FunctionLibraryList);
_.bind_0 = function bind_1(functionName, staticArgs, env, container){
    return $bind(this, functionName, staticArgs, env, container);
}
;
_.hasFunctionSignature = function hasFunctionSignature_0(functionName, arity_0){
    return $hasFunctionSignature(this, functionName, arity_0);
}
;
var Lclient_net_sf_saxon_ce_functions_FunctionLibraryList_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'FunctionLibraryList', 372, Ljava_lang_Object_2_classLit);
function Id(){
    SystemFunction.call(this);
}

defineClass(205, 41, {6:1, 20:1, 205:1}, Id);
_.checkArguments = function checkArguments_10(visitor){
    $checkArguments(this, visitor);
    setCheck(this.argument, 0, unsorted(this.argument[0], false));
}
;
_.computeSpecialProperties = function computeSpecialProperties_31(){
    var prop;
    prop = $intern_61;
    (this.argument.length == 1 || ($getSpecialProperties(this.argument[1]) & $intern_34) != 0) && (prop |= $intern_34);
    return prop;
}
;
_.iterate_0 = function iterate_39(context){
    var arg1, doc, e, idrefs, map_0, result;
    try {
        arg1 = dynamicCast(this.argument[1].evaluateItem(context), 7);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            if (instanceOf(context.getContextItem(), 13)) {
                $dynamicError(this, 'For the ' + $getLocalName_1(this.name_0) + '() function, the context item is not a node', 'XPTY0004');
                return null;
            }
            else {
                throw e;
            }
        }
        else 
            throw unwrap($e0);
    }
    arg1 = arg1.getRoot();
    if (arg1.getNodeKind() != 9) {
        $dynamicError(this, 'In the ' + $getLocalName_1(this.name_0) + '() function,' + ' the tree being searched must be one whose root is a document node', 'FODC0001');
        return null;
    }
    doc = dynamicCast(arg1, 109);
    idrefs = this.argument[0].iterate_0(context);
    map_0 = new Id$IdMappingFunction;
    map_0.document_0 = doc;
    result = new MappingIterator(idrefs, map_0);
    return new DocumentOrderIterator_0(result, ($clinit_LocalOrderComparer() , $clinit_LocalOrderComparer() , instance_1));
}
;
_.newInstance = function newInstance_27(){
    return new Id;
}
;
_.preEvaluate = function preEvaluate_7(visitor){
    return this;
}
;
_.simplify = function simplify_46(visitor){
    var id_0;
    id_0 = dynamicCast($simplifyArguments(this, visitor), 205);
    this.argument.length == 1 && $addContextDocumentArgument(id_0, 1, $getLocalName_1(this.name_0));
    return id_0;
}
;
_.typeCheck = function typeCheck_60(visitor, contextItemType){
    instanceOf(this.argument[1], 210) && !!contextItemType && instanceOf(contextItemType, 43) && $typeError(this, null, $getLocalName_1(this.name_0) + '() function called when the context item is not a node', 'XPTY0004');
    return $typeCheck_2(this, visitor, contextItemType);
}
;
var Lclient_net_sf_saxon_ce_functions_Id_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Id', 205, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function Id$IdMappingFunction(){
}

defineClass(470, 1, {}, Id$IdMappingFunction);
_.map_2 = function map_6(item_0){
    var idrefs, refs, s, s$iterator, submap, tokens;
    idrefs = trim_0(item_0.getStringValue());
    if (containsWhitespace_0(idrefs)) {
        tokens = tokenize(idrefs);
        refs = new ArrayList_0(tokens.array.length);
        for (s$iterator = new AbstractList$IteratorImpl(tokens); s$iterator.i < s$iterator.this$01_0.size_1();) {
            s = (checkCriticalElement(s$iterator.i < s$iterator.this$01_0.size_1()) , dynamicCastToString(s$iterator.this$01_0.get_1(s$iterator.last = s$iterator.i++)));
            $add_16(refs, ($clinit_StringValue() , s == null || s.length == 0?EMPTY_STRING:new StringValue_0(s)));
        }
        submap = new Id$IdMappingFunction;
        submap.document_0 = this.document_0;
        return new MappingIterator(new ListIterator(refs), submap);
    }
    else {
        return makeIterator_0(this.document_0.selectID(idrefs));
    }
}
;
var Lclient_net_sf_saxon_ce_functions_Id$IdMappingFunction_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Id/IdMappingFunction', 470, Ljava_lang_Object_2_classLit);
function InScopePrefixes(){
    SystemFunction.call(this);
}

defineClass(473, 41, $intern_36, InScopePrefixes);
_.iterate_0 = function iterate_40(context){
    var element, iter, prefixes;
    element = dynamicCast(this.argument[0].evaluateItem(context), 7);
    iter = element.getNodeKind() == 1?new NamespaceIterator(element):($clinit_Collections() , $clinit_Collections() , $clinit_Collections$EmptyListIterator() , INSTANCE_0);
    prefixes = new ArrayList;
    $add_16(prefixes, new StringValue_0('xml'));
    while (iter.hasNext()) {
        $add_16(prefixes, new StringValue_0(dynamicCast(iter.next_2(), 53).prefix_0));
    }
    return new ListIterator(prefixes);
}
;
_.newInstance = function newInstance_28(){
    return new InScopePrefixes;
}
;
var Lclient_net_sf_saxon_ce_functions_InScopePrefixes_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'InScopePrefixes', 473, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function IndexOf(){
    CollatingFunction.call(this);
}

defineClass(474, 225, $intern_36, IndexOf);
_.iterate_0 = function iterate_41(context){
    var comparer, searchType, seq, val;
    comparer = new GenericAtomicComparer($getCollator_0(this, 2, context), context.getImplicitTimezone());
    seq = this.argument[0].iterate_0(context);
    val = dynamicCast(this.argument[1].evaluateItem(context), 13);
    searchType = val.getItemType_0();
    return new ItemMappingIterator(seq, new IndexOf$IndexOfMappingFunction(searchType, comparer, val));
}
;
_.newInstance = function newInstance_29(){
    return new IndexOf;
}
;
var Lclient_net_sf_saxon_ce_functions_IndexOf_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'IndexOf', 474, Lclient_net_sf_saxon_ce_functions_CollatingFunction_2_classLit);
function IndexOf$IndexOfMappingFunction(searchType, comparer, val){
    this.searchType = searchType;
    this.comparer = comparer;
    this.val_0 = val;
}

defineClass(475, 1, $intern_30, IndexOf$IndexOfMappingFunction);
_.getAnother_1 = function getAnother_19(newBaseIterator){
    return new IndexOf$IndexOfMappingFunction(this.searchType, this.comparer, this.val_0);
}
;
_.mapItem = function mapItem_12(item_0){
    return ++this.index_0 , isComparable(this.searchType, dynamicCast(item_0, 13).getItemType_0(), false) && this.comparer.comparesEqual(dynamicCast(item_0, 13), this.val_0)?new IntegerValue(this.index_0):null;
}
;
_.index_0 = 0;
var Lclient_net_sf_saxon_ce_functions_IndexOf$IndexOfMappingFunction_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'IndexOf/IndexOfMappingFunction', 475, Ljava_lang_Object_2_classLit);
function Insert(){
    SystemFunction.call(this);
}

defineClass(476, 41, $intern_36, Insert);
_.iterate_0 = function iterate_42(context){
    var ins, n, n0, pos, seq;
    seq = this.argument[0].iterate_0(context);
    n0 = dynamicCast(this.argument[1].evaluateItem(context), 13);
    n = dynamicCast(n0, 25);
    pos = n.intValue();
    ins = this.argument[2].iterate_0(context);
    return new Insert$InsertIterator(seq, ins, pos);
}
;
_.newInstance = function newInstance_30(){
    return new Insert;
}
;
var Lclient_net_sf_saxon_ce_functions_Insert_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Insert', 476, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function Insert$InsertIterator(base, insert, insertPosition){
    this.base = base;
    this.insert = insert;
    this.insertPosition = insertPosition < 1?1:insertPosition;
    this.inserting = insertPosition == 1;
}

defineClass(477, 1, $intern_18, Insert$InsertIterator);
_.getAnother = function getAnother_20(){
    return new Insert$InsertIterator(this.base.getAnother(), this.insert.getAnother(), this.insertPosition);
}
;
_.next_0 = function next_17(){
    var nextItem;
    if (this.inserting) {
        nextItem = this.insert.next_0();
        if (!nextItem) {
            this.inserting = false;
            nextItem = this.base.next_0();
        }
    }
    else {
        if (this.position_0 == this.insertPosition - 1) {
            nextItem = this.insert.next_0();
            !nextItem?(nextItem = this.base.next_0()):(this.inserting = true);
        }
        else {
            nextItem = this.base.next_0();
            if (!nextItem && this.position_0 < this.insertPosition - 1) {
                this.inserting = true;
                nextItem = this.insert.next_0();
            }
        }
    }
    if (!nextItem) {
        this.current = null;
        this.position_0 = -1;
        return null;
    }
    else {
        this.current = nextItem;
        ++this.position_0;
        return this.current;
    }
}
;
_.current = null;
_.insertPosition = 0;
_.inserting = false;
_.position_0 = 0;
var Lclient_net_sf_saxon_ce_functions_Insert$InsertIterator_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Insert/InsertIterator', 477, Ljava_lang_Object_2_classLit);
function KeyFn(){
    SystemFunction.call(this);
}

defineClass(206, 41, {6:1, 20:1, 206:1}, KeyFn);
_.checkArguments = function checkArguments_11(visitor){
    var e, err, keyName;
    if (this.checked)
        return;
    this.checked = true;
    $checkArguments(this, visitor);
    setCheck(this.argument, 1, unsorted(this.argument[1], false));
    if (instanceOf(this.argument[0], 21)) {
        try {
            keyName = fromLexicalQName($getPrimitiveStringValue(dynamicCast(dynamicCast(this.argument[0], 21).value_0, 12)), '', this.nsContext);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                e = $e0;
                err = new XPathException_0('Error in key name ' + $getPrimitiveStringValue(dynamicCast(dynamicCast(this.argument[0], 21).value_0, 12)) + ': ' + e.message_0);
                $setLocator(err, $getSourceLocator(this));
                err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTDE1260');
                    throw err;
            }
            else 
                throw unwrap($e0);
        }
        this.staticKeySet = $getKeyDefinitionSet($getKeyManager(visitor.executable), keyName);
        if (!this.staticKeySet) {
            err = new XPathException_0('Key ' + $getPrimitiveStringValue(dynamicCast(dynamicCast(this.argument[0], 21).value_0, 12)) + ' has not been defined');
            $setLocator(err, $getSourceLocator(this));
            err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTDE1260');
                throw err;
        }
    }
    else {
        this.nsContext = visitor.staticContext.getNamespaceResolver();
    }
}
;
_.computeSpecialProperties = function computeSpecialProperties_32(){
    var prop;
    prop = $intern_61;
    (this.argument.length == 2 || ($getSpecialProperties(this.argument[2]) & $intern_34) != 0) && (prop |= $intern_34);
    return prop;
}
;
_.iterate_0 = function iterate_43(context){
    var allResults, allValues, arg2, code_0, controller, doc, e, err, expression, filter, givenkeyname, keyManager, keyValue, keys_0, map_0, origin, qName, root, selectedKeySet;
    controller = context.getController();
    try {
        arg2 = this.argument[2].evaluateItem(context);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            code_0 = !e.errorCode?null:$getLocalName_1(e.errorCode);
            if ($equals_5('XPDY0002', code_0)) {
                $dynamicError(this, 'Cannot call the key() function when there is no context item', 'XTDE1270');
                return null;
            }
            else if ($equals_5('XPDY0050', code_0)) {
                $dynamicError(this, 'In the key() function, the node supplied in the third argument (or the context node if absent) must be in a tree whose root is a document node', 'XTDE1270');
                return null;
            }
            else if ($equals_5('XPTY0020', code_0)) {
                $dynamicError(this, 'Cannot call the key() function when the context item is an atomic value', 'XTDE1270');
                return null;
            }
            throw e;
        }
        else 
            throw unwrap($e0);
    }
    origin = dynamicCast(arg2, 7);
    root = origin.getRoot();
    if (root.getNodeKind() != 9) {
        $dynamicError(this, 'In the key() function, the node supplied in the third argument (or the context node if absent) must be in a tree whose root is a document node', 'XTDE1270');
        return null;
    }
    doc = dynamicCast(root, 109);
    keyManager = $getKeyManager(controller.executable);
    selectedKeySet = this.staticKeySet;
    if (!selectedKeySet) {
        givenkeyname = this.argument[0].evaluateItem(context).getStringValue();
        qName = null;
        try {
            qName = fromLexicalQName(givenkeyname, '', this.nsContext);
        }
        catch ($e1) {
            $e1 = wrap_0($e1);
            if (instanceOf($e1, 4)) {
                err = $e1;
                $dynamicError(this, 'Invalid key name: ' + err.message_0, 'XTDE1260');
            }
            else 
                throw unwrap($e1);
        }
        selectedKeySet = dynamicCast($get_0(keyManager.keyMap, qName), 232);
        if (!selectedKeySet) {
            $dynamicError(this, "Key '" + givenkeyname + "' has not been defined", 'XTDE1260');
            return null;
        }
    }
    expression = this.argument[1];
    if ((expression.getCardinality() & $intern_14) != 0) {
        map_0 = new KeyFn$1(keyManager, selectedKeySet, doc, context);
        keys_0 = this.argument[1].iterate_0(context);
        allValues = new MappingIterator(keys_0, map_0);
        allResults = new DocumentOrderIterator_0(allValues, ($clinit_LocalOrderComparer() , $clinit_LocalOrderComparer() , instance_1));
    }
    else {
        try {
            keyValue = dynamicCast(this.argument[1].evaluateItem(context), 13);
            if (!keyValue) {
                return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
            }
            allResults = $selectByKey(keyManager, selectedKeySet, doc, keyValue, context);
        }
        catch ($e2) {
            $e2 = wrap_0($e2);
            if (instanceOf($e2, 4)) {
                e = $e2;
                $maybeSetLocation(e, $getSourceLocator(this));
                throw e;
            }
            else 
                throw unwrap($e2);
        }
    }
    if (origin == doc) {
        return allResults;
    }
    filter = new KeyFn$SubtreeFilter;
    filter.origin = origin;
    return new ItemMappingIterator(allResults, filter);
}
;
_.newInstance = function newInstance_31(){
    return new KeyFn;
}
;
_.preEvaluate = function preEvaluate_8(visitor){
    return this;
}
;
_.simplify = function simplify_47(visitor){
    var f;
    if (!instanceOf(visitor.staticContext, 58)) {
        throw new XPathException_0('The key() function is available only in XPath expressions within an XSLT stylesheet');
    }
    f = dynamicCast($simplifyArguments(this, visitor), 206);
    this.argument.length == 2 && $addContextDocumentArgument(f, 2, 'key');
    return f;
}
;
_.typeCheck = function typeCheck_61(visitor, contextItemType){
    var err;
    try {
        return $typeCheck_2(this, visitor, contextItemType);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $equals_5('XPDY0002', !err.errorCode?null:$getLocalName_1(err.errorCode)) && $dynamicError(this, 'Cannot call the key() function when there is no context node', 'XTDE1270');
            throw err;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.checked = false;
_.nsContext = null;
_.staticKeySet = null;
var Lclient_net_sf_saxon_ce_functions_KeyFn_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'KeyFn', 206, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function KeyFn$1(val$keyManager, val$keySet, val$document, val$keyContext){
    this.val$keyManager2 = val$keyManager;
    this.val$keySet3 = val$keySet;
    this.val$document4 = val$document;
    this.val$keyContext5 = val$keyContext;
}

defineClass(747, 1, {}, KeyFn$1);
_.map_2 = function map_7(item_0){
    return $selectByKey(this.val$keyManager2, this.val$keySet3, this.val$document4, dynamicCast(item_0, 13), this.val$keyContext5);
}
;
var Lclient_net_sf_saxon_ce_functions_KeyFn$1_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'KeyFn/1', 747, Ljava_lang_Object_2_classLit);
function KeyFn$SubtreeFilter(){
}

defineClass(746, 1, {}, KeyFn$SubtreeFilter);
_.mapItem = function mapItem_13(item_0){
    return isAncestorOrSelf(this.origin, dynamicCast(item_0, 7))?item_0:null;
}
;
var Lclient_net_sf_saxon_ce_functions_KeyFn$SubtreeFilter_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'KeyFn/SubtreeFilter', 746, Ljava_lang_Object_2_classLit);
function Lang(){
    SystemFunction.call(this);
}

function isLang(arglang, target){
    var doclang, hyphen, node;
    doclang = null;
    node = target;
    while (node) {
        doclang = getAttributeValue(node, 'http://www.w3.org/XML/1998/namespace', 'lang');
            if (doclang != null) {
                break;
            }
            node = node.getParent();
            if (!node) {
                return false;
            }
    }
    if (doclang == null) {
        return false;
    }
    while (true) {
        if ($equalsIgnoreCase(arglang, doclang)) {
            return true;
        }
        hyphen = doclang.indexOf('-');
        if (hyphen < 0) {
            return false;
        }
        doclang = doclang.substr(0, hyphen);
    }
}

defineClass(478, 41, $intern_36, Lang);
_.evaluateItem = function evaluateItem_64(c){
    var arg0Val, b, current, target, testLang;
    if (this.argument.length > 1) {
        target = dynamicCast(this.argument[1].evaluateItem(c), 7);
    }
    else {
        current = c.getContextItem();
        !current && $dynamicError(this, 'The context item for lang() is undefined', 'XPDY0002');
        instanceOf(current, 7) || $dynamicError(this, 'The context item for lang() is not a node', 'XPDY0002');
        target = dynamicCast(current, 7);
    }
    arg0Val = this.argument[0].evaluateItem(c);
    testLang = !arg0Val?'':arg0Val.getStringValue();
    b = isLang(testLang, target);
    return $clinit_BooleanValue() , b?TRUE_0:FALSE_0;
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_21(){
    return this.argument.length == 1?2:0;
}
;
_.newInstance = function newInstance_32(){
    return new Lang;
}
;
_.typeCheck = function typeCheck_62(visitor, contextItemType){
    this.argument.length == 1 && (!contextItemType?$typeError(this, null, 'The context item for lang() is undefined', 'XPDY0002'):instanceOf(contextItemType, 43) && $typeError(this, null, 'The context item for lang() is not a node', 'XPDY0002'));
    return $typeCheck_2(this, visitor, contextItemType);
}
;
var Lclient_net_sf_saxon_ce_functions_Lang_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Lang', 478, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function Last(){
    SystemFunction.call(this);
}

defineClass(301, 41, {6:1, 20:1, 301:1}, Last);
_.evaluateItem = function evaluateItem_65(c){
    return new IntegerValue(c.getLast());
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_22(){
    return 8;
}
;
_.newInstance = function newInstance_33(){
    return new Last;
}
;
_.promote = function promote_18(offer, parent_0){
    return this;
}
;
_.typeCheck = function typeCheck_63(visitor, contextItemType){
    !contextItemType && $dynamicError(this, 'The context for last() is undefined', 'XPDY0002');
    return $typeCheck_2(this, visitor, contextItemType);
}
;
var Lclient_net_sf_saxon_ce_functions_Last_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Last', 301, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function Matches(){
    SystemFunction.call(this);
}

defineClass(479, 41, $intern_36, Matches);
_.evaluateItem = function evaluateItem_66(c){
    var de, err, flags, pat, re, sv0, sv2;
    sv0 = dynamicCast(this.argument[0].evaluateItem(c), 13);
    !sv0 && (sv0 = ($clinit_StringValue() , EMPTY_STRING));
    pat = dynamicCast(this.argument[1].evaluateItem(c), 13);
    if (!pat)
        return null;
    if (this.argument.length == 2) {
        flags = '';
    }
    else {
        sv2 = dynamicCast(this.argument[2].evaluateItem(c), 13);
        if (!sv2)
            return null;
        flags = toString__Ljava_lang_String___devirtual$_0(sv2.getPrimitiveStringValue());
    }
    try {
        re = new ARegularExpression(toString__Ljava_lang_String___devirtual$_0(pat.getPrimitiveStringValue()), flags);
        return $clinit_BooleanValue() , $containsMatch(re, toString__Ljava_lang_String___devirtual$_0(sv0.getPrimitiveStringValue()))?TRUE_0:FALSE_0;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            de = new XPathException_5(err);
            !de.errorCode && (de.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FORX0002'));
                throw de;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.newInstance = function newInstance_34(){
    return new Matches;
}
;
var Lclient_net_sf_saxon_ce_functions_Matches_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Matches', 479, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function Minimax(operation){
    CollatingFunction.call(this);
    this.argumentType = ($clinit_AtomicType() , ANY_ATOMIC);
    this.operation = operation;
}

function minimax(iter, operation, atomicComparer){
    var de, foundDouble, foundFloat, foundNaN, lowestCommonSuperType, min_0, prim, test_0, test2;
    $clinit_TypeHierarchy();
    foundDouble = false;
    foundFloat = false;
    foundNaN = false;
    operation == 3 && (atomicComparer = new DescendingComparer(atomicComparer));
    while (true) {
        min_0 = dynamicCast(iter.next_0(), 13);
        if (!min_0) {
            return null;
        }
        if (instanceOf(min_0, 56)) {
            try {
                min_0 = new DoubleValue(stringToNumber(toString__Ljava_lang_String___devirtual$_0(min_0.getPrimitiveStringValue())));
                foundDouble = true;
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 57)) {
                    throw new XPathException_2('Failure converting ' + wrap(toString__Ljava_lang_String___devirtual$_0(min_0.getPrimitiveStringValue()), 6) + ' to a number', 'FORG0001');
                }
                else 
                    throw unwrap($e0);
            }
        }
        else {
            instanceOf(min_0, 44)?(foundDouble = true):instanceOf(min_0, 71) && (foundFloat = true);
        }
        if (min_0.isNaN_0()) {
            if (instanceOf(min_0, 44)) {
                return min_0;
            }
            else {
                foundNaN = true;
                min_0 = ($clinit_FloatValue() , NaN_1);
                break;
            }
        }
        else {
            if (!min_0.getItemType_0().ordered) {
                de = new XPathException_2('Type ' + min_0.getItemType_0() + ' is not an ordered type', 'FORG0006');
                de.isTypeError = true;
                throw de;
            }
            break;
        }
    }
    lowestCommonSuperType = min_0.getItemType_0();
    while (true) {
        test_0 = dynamicCast(iter.next_0(), 13);
        if (!test_0) {
            break;
        }
        test2 = test_0;
        prim = test_0;
        if (instanceOf(test_0, 56)) {
            try {
                test2 = new DoubleValue(stringToNumber(toString__Ljava_lang_String___devirtual$_0(test_0.getPrimitiveStringValue())));
                if (foundNaN) {
                    return $clinit_DoubleValue() , NaN_0;
                }
                prim = test2;
                foundDouble = true;
            }
            catch ($e1) {
                $e1 = wrap_0($e1);
                if (instanceOf($e1, 57)) {
                    throw new XPathException_2('Failure converting ' + wrap(toString__Ljava_lang_String___devirtual$_0(test_0.getPrimitiveStringValue()), 6) + ' to a number', 'FORG0001');
                }
                else 
                    throw unwrap($e1);
            }
        }
        else {
            if (instanceOf(test_0, 44)) {
                if (foundNaN) {
                    return $clinit_DoubleValue() , NaN_0;
                }
                foundDouble = true;
            }
            else 
                instanceOf(test_0, 71) && (foundFloat = true);
        }
        lowestCommonSuperType = dynamicCast(getCommonSuperType(lowestCommonSuperType, prim.getItemType_0()), 43);
        if (prim.isNaN_0()) {
            if (foundDouble) {
                return $clinit_DoubleValue() , NaN_0;
            }
            else {
                foundNaN = true;
            }
        }
        else {
            try {
                atomicComparer.compareAtomicValues(prim, min_0) < 0 && (min_0 = test2);
            }
            catch ($e2) {
                $e2 = wrap_0($e2);
                if (instanceOf($e2, 72)) {
                    de = new XPathException_2('Cannot compare ' + min_0.getItemType_0() + ' with ' + test2.getItemType_0(), 'FORG0006');
                    de.isTypeError = true;
                    throw de;
                }
                else 
                    throw unwrap($e2);
            }
        }
    }
    if (foundNaN) {
        return $clinit_FloatValue() , NaN_1;
    }
    foundDouble?instanceOf(min_0, 44) || (min_0 = min_0.convert(($clinit_AtomicType() , DOUBLE)).asAtomic()):foundFloat && (instanceOf(min_0, 71) || (min_0 = min_0.convert(($clinit_AtomicType() , FLOAT)).asAtomic()));
    return min_0.convert(lowestCommonSuperType).asAtomic();
}

defineClass(401, 225, $intern_36, Minimax);
_.checkArguments = function checkArguments_12(visitor){
    $checkArguments_0(this, visitor);
    setCheck(this.argument, 0, unsorted(this.argument[0], false));
}
;
_.computeCardinality = function computeCardinality_40(){
    var c;
    c = this.details.resultType.cardinality;
    (this.argument[0].getCardinality() & $intern_17) != 0 || (c = $intern_21);
    return c;
}
;
_.evaluateItem = function evaluateItem_67(context){
    var comparer, err, iter, collator, type_0;
    comparer = (collator = $getCollator_0(this, 1, context) , type_0 = this.argumentType , type_0 == ($clinit_AtomicType() , UNTYPED_ATOMIC) && (type_0 = DOUBLE) , makeAtomicComparer(type_0, type_0, collator, context.getImplicitTimezone()));
    iter = this.argument[0].iterate_0(context);
    try {
        return minimax(iter, this.operation, comparer);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $maybeSetLocation(err, $getSourceLocator(this));
            throw err;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.getItemType = function getItemType_65(){
    var t;
    t = getAtomizedItemType(this.argument[0], false);
    return t == ($clinit_AtomicType() , UNTYPED_ATOMIC)?DOUBLE:t;
}
;
_.newInstance = function newInstance_35(){
    return new Minimax(this.operation);
}
;
_.optimize = function optimize_55(visitor, contextItemType){
    var card, e, th;
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    this.argumentType = this.argument[0].getItemType().getAtomizedItemType();
    e = $optimize_4(this, visitor, contextItemType);
    if (e != this) {
        return e;
    }
    if (this.argument.length == 1) {
        card = this.argument[0].getCardinality();
        if ((card & $intern_14) == 0 && $isSubType(th, this.argument[0].getItemType(), ($clinit_AtomicType() , NUMERIC))) {
            return this.argument[0];
        }
    }
    return this;
}
;
var Lclient_net_sf_saxon_ce_functions_Minimax_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Minimax', 401, Lclient_net_sf_saxon_ce_functions_CollatingFunction_2_classLit);
function NamePart(operation){
    SystemFunction.call(this);
    this.operation = operation;
}

function getDocumentURI(node, c){
    var docURI, pool;
    if (node.getNodeKind() == 9) {
        pool = c.getController().config.sourceDocumentPool;
        docURI = $getDocumentURI(pool, node);
        docURI == null && (docURI = node.getSystemId());
        return docURI == null?null:$equals_5('', docURI)?null:new AnyURIValue(docURI);
    }
    else {
        return null;
    }
}

defineClass(227, 41, $intern_36, NamePart);
_.computeDependencies = function computeDependencies_6(){
    return $computeDependencies(this);
}
;
_.computeSpecialProperties = function computeSpecialProperties_33(){
    var p_0;
    p_0 = $computeSpecialProperties_3(this);
    return this.operation == 3?p_0 & $intern_38:p_0;
}
;
_.evaluateItem = function evaluateItem_68(c){
    var buffer, node, nodeName, s, uri_0;
    node = dynamicCast(this.argument[0].evaluateItem(c), 7);
    if (!node) {
        return this.operation == 6 || this.operation == 4?null:this.operation == 2?($clinit_AnyURIValue() , EMPTY_URI):($clinit_StringValue() , EMPTY_STRING);
    }
    switch (this.operation) {
        case 0:
            s = node.getDisplayName();
            break;
        case 1:
            s = node.getLocalPart();
            break;
        case 2:
            uri_0 = node.getURI();
            s = uri_0 == null?'':uri_0;
            return new AnyURIValue(s);
        case 3:
            buffer = new FastStringBuffer(16);
            node.generateId(buffer);
            $condense(buffer);
            return new StringValue_0(buffer);
        case 4:
            return getDocumentURI(node, c);
        case 6:
            nodeName = node.getNodeName();
            return !nodeName?null:new QNameValue(nodeName);
        default:throw new UnsupportedOperationException_0('Unknown name operation');
    }
    return new StringValue_0(s);
}
;
_.newInstance = function newInstance_36(){
    return new NamePart(this.operation);
}
;
var Lclient_net_sf_saxon_ce_functions_NamePart_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'NamePart', 227, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function NamespaceForPrefix(){
    SystemFunction.call(this);
}

defineClass(480, 41, $intern_36, NamespaceForPrefix);
_.evaluateItem = function evaluateItem_69(context){
    var element, p_0, prefix, resolver, uri_0;
    element = dynamicCast(this.argument[1].evaluateItem(context), 7);
    p_0 = dynamicCast(this.argument[0].evaluateItem(context), 12);
    !p_0?(prefix = ''):(prefix = dynamicCastToString(p_0.value_0 = toString__Ljava_lang_String___devirtual$_0(p_0.value_0)));
    resolver = new InscopeNamespaceResolver(element);
    uri_0 = $getURIForPrefix(resolver, prefix, true);
    if (uri_0 == null) {
        return null;
    }
    return new AnyURIValue(uri_0);
}
;
_.newInstance = function newInstance_37(){
    return new NamespaceForPrefix;
}
;
var Lclient_net_sf_saxon_ce_functions_NamespaceForPrefix_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'NamespaceForPrefix', 480, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $evaluateItem_5(this$static, c){
    var item_0, sv;
    if (this$static.argument.length == 0) {
        item_0 = c.getContextItem();
        if (!item_0) {
            $dynamicError(this$static, 'Context item for normalize-space() is undefined', 'FONC0001');
            return null;
        }
        return makeStringValue(collapseWhitespace(item_0.getStringValue()));
    }
    else {
        sv = dynamicCast(this$static.argument[0].evaluateItem(c), 13);
        if (!sv) {
            return $clinit_StringValue() , EMPTY_STRING;
        }
        return makeStringValue(collapseWhitespace(toString__Ljava_lang_String___devirtual$_0(sv.getPrimitiveStringValue())));
    }
}

function NormalizeSpace(){
    SystemFunction.call(this);
}

defineClass(352, 41, $intern_36, NormalizeSpace);
_.effectiveBooleanValue = function effectiveBooleanValue_13(c){
    var cs, item_0, sv;
    if (this.argument.length == 0) {
        item_0 = c.getContextItem();
        if (!item_0) {
            $dynamicError(this, 'Context item for normalize-space() is undefined', 'FONC0001');
            return false;
        }
        cs = item_0.getStringValue();
    }
    else {
        sv = dynamicCast(this.argument[0].evaluateItem(c), 13);
        if (!sv) {
            return false;
        }
        cs = toString__Ljava_lang_String___devirtual$_0(sv.getPrimitiveStringValue());
    }
    return !isWhite(cs);
}
;
_.evaluateItem = function evaluateItem_70(c){
    return $evaluateItem_5(this, c);
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_23(){
    var d;
    d = 0;
    this.argument.length == 0 && (d |= 2);
    return d;
}
;
_.newInstance = function newInstance_38(){
    return new NormalizeSpace;
}
;
_.preEvaluate = function preEvaluate_9(visitor){
    return this.argument.length == 0?this:makeLiteral($evaluateItem_5(this, new EarlyEvaluationContext(visitor.configuration)));
}
;
_.typeCheck = function typeCheck_64(visitor, contextItemType){
    this.argument.length == 0 && !contextItemType && $typeError(this, null, 'The context item for normalize-space() is undefined', 'XPDY0002');
    return $typeCheck_2(this, visitor, contextItemType);
}
;
var Lclient_net_sf_saxon_ce_functions_NormalizeSpace_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'NormalizeSpace', 352, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function NormalizeUnicode(){
    SystemFunction.call(this);
}

defineClass(481, 41, $intern_36, NormalizeUnicode);
_.evaluateItem = function evaluateItem_71(c){
    var allASCII, chars, fb, form_0, i_0, norm, result, sv;
    sv = dynamicCast(this.argument[0].evaluateItem(c), 12);
    if (!sv) {
        return $clinit_StringValue() , EMPTY_STRING;
    }
    fb = 2;
    if (this.argument.length == 2) {
        form_0 = trim_0(this.argument[1].evaluateAsString(c));
        if ($equalsIgnoreCase(form_0, 'NFC')) {
            fb = 2;
        }
        else if ($equalsIgnoreCase(form_0, 'NFD')) {
            fb = 0;
        }
        else if ($equalsIgnoreCase(form_0, 'NFKC')) {
            fb = 3;
        }
        else if ($equalsIgnoreCase(form_0, 'NFKD')) {
            fb = 1;
        }
        else if (form_0.length == 0) {
            return sv;
        }
        else {
            $dynamicError(this, 'Normalization form ' + form_0 + ' is not supported', 'FOCH0003');
        }
    }
    allASCII = true;
    chars = dynamicCastToString(sv.value_0 = toString__Ljava_lang_String___devirtual$_0(sv.value_0));
    for (i_0 = chars.length - 1; i_0 >= 0; i_0--) {
        if (chars.charCodeAt(i_0) > 127) {
            allASCII = false;
            break;
        }
    }
    if (allASCII) {
        return sv;
    }
    norm = new Normalizer(fb, c.getConfiguration());
    result = $normalize(norm, dynamicCastToString(sv.value_0 = toString__Ljava_lang_String___devirtual$_0(sv.value_0)));
    return $clinit_StringValue() , result.length_1() == 0?EMPTY_STRING:new StringValue_0(result);
}
;
_.newInstance = function newInstance_39(){
    return new NormalizeUnicode;
}
;
var Lclient_net_sf_saxon_ce_functions_NormalizeUnicode_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'NormalizeUnicode', 481, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function NumberFn(){
    SystemFunction.call(this);
}

function convert(value_0){
    var d, result;
    try {
        if (!value_0) {
            return $clinit_DoubleValue() , NaN_0;
        }
        if (instanceOf(value_0, 90) || instanceOf(value_0, 25)) {
            result = value_0.convert(($clinit_AtomicType() , DOUBLE));
            return instanceOf(result, 29)?($clinit_DoubleValue() , NaN_0):dynamicCast(result, 44);
        }
        if (instanceOf(value_0, 12) && !instanceOf(value_0, 132)) {
            d = stringToNumber(toString__Ljava_lang_String___devirtual$_0(value_0.getPrimitiveStringValue()));
            return new DoubleValue(d);
        }
        return $clinit_DoubleValue() , NaN_0;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 57)) {
            return $clinit_DoubleValue() , NaN_0;
        }
        else 
            throw unwrap($e0);
    }
}

defineClass(302, 41, {6:1, 20:1, 302:1}, NumberFn);
_.evaluateItem = function evaluateItem_72(context){
    var arg0, result, s;
    arg0 = this.argument[0].evaluateItem(context);
    if (!arg0) {
        return $clinit_DoubleValue() , NaN_0;
    }
    if (instanceOf(arg0, 90) || instanceOf(arg0, 25)) {
        result = dynamicCast(arg0, 13).convert(($clinit_AtomicType() , DOUBLE));
        return instanceOf(result, 29)?($clinit_DoubleValue() , NaN_0):dynamicCast(result, 13);
    }
    if (instanceOf(arg0, 12) && !instanceOf(arg0, 132)) {
        s = arg0.getStringValue();
        try {
            return new DoubleValue(stringToNumber(s));
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 57)) {
                return $clinit_DoubleValue() , NaN_0;
            }
            else 
                throw unwrap($e0);
        }
    }
    return $clinit_DoubleValue() , NaN_0;
}
;
_.newInstance = function newInstance_40(){
    return new NumberFn;
}
;
_.simplify = function simplify_48(visitor){
    this.argument[0].setFlattened(true);
    return $simplifyArguments(this, visitor);
}
;
_.typeCheck = function typeCheck_65(visitor, contextItemType){
    var e2;
    e2 = $typeCheck_2(this, visitor, contextItemType);
    if (e2 != this) {
        return e2;
    }
    instanceOf(this.argument[0], 302) && setCheck(this.argument, 0, dynamicCast(this.argument[0], 302).argument[0]);
    return this;
}
;
var Lclient_net_sf_saxon_ce_functions_NumberFn_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'NumberFn', 302, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function Position_0(){
    SystemFunction.call(this);
}

defineClass(228, 41, {6:1, 20:1, 228:1}, Position_0);
_.evaluateItem = function evaluateItem_73(c){
    return new IntegerValue(c.getContextPosition());
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_24(){
    return 4;
}
;
_.newInstance = function newInstance_41(){
    return new Position_0;
}
;
_.promote = function promote_19(offer, parent_0){
    return this;
}
;
_.typeCheck = function typeCheck_66(visitor, contextItemType){
    !contextItemType && $typeError(this, null, 'The context for position() is undefined', 'XPDY0002');
    return $typeCheck_2(this, visitor, contextItemType);
}
;
var Lclient_net_sf_saxon_ce_functions_Position_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Position', 228, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function QNameFn(){
    SystemFunction.call(this);
}

defineClass(482, 41, $intern_36, QNameFn);
_.evaluateItem = function evaluateItem_74(context){
    var arg0, e, err, lex, parts, uri_0;
    arg0 = dynamicCast(this.argument[0].evaluateItem(context), 13);
    !arg0?(uri_0 = null):(uri_0 = toString__Ljava_lang_String___devirtual$_0(arg0.getPrimitiveStringValue()));
    try {
        lex = this.argument[1].evaluateItem(context).getStringValue();
        parts = getQNameParts(lex);
        if (parts[0].length != 0 && !isValidNCName(parts[0])) {
            err = new XPathException_0("Malformed prefix in QName: '" + parts[0] + "'");
            err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FORG0001');
                throw err;
        }
        return new QNameValue_1(parts[0], uri_0, parts[1]);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 145)) {
            e = $e0;
            $dynamicError(this, e.message_0, 'FOCA0002');
            return null;
        }
        else if (instanceOf($e0, 4)) {
            err = $e0;
            $maybeSetLocation(err, $getSourceLocator(this));
            throw err;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.newInstance = function newInstance_42(){
    return new QNameFn;
}
;
_.preEvaluate = function preEvaluate_10(visitor){
    var e, early, err, item0, item1, lex, parts, uri_0;
    try {
        early = new EarlyEvaluationContext(visitor.configuration);
        item1 = this.argument[1].evaluateItem(early);
        lex = item1.getStringValue();
        item0 = this.argument[0].evaluateItem(early);
        !item0?(uri_0 = ''):(uri_0 = item0.getStringValue());
        parts = getQNameParts(lex);
        if (parts[0].length != 0 && !isValidNCName(parts[0])) {
            err = new XPathException_0("Malformed prefix in QName: '" + parts[0] + "'");
            err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FOCA0002');
                throw err;
        }
        return makeLiteral(new QNameValue_1(parts[0], uri_0, parts[1]));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 145)) {
            e = $e0;
            $dynamicError(this, e.message_0, 'FOCA0002');
            return null;
        }
        else if (instanceOf($e0, 4)) {
            err = $e0;
            $maybeSetLocation(err, $getSourceLocator(this));
            throw err;
        }
        else 
            throw unwrap($e0);
    }
}
;
var Lclient_net_sf_saxon_ce_functions_QNameFn_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'QNameFn', 482, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function RegexGroup(){
    SystemFunction.call(this);
}

defineClass(353, 41, {6:1, 20:1, 353:1}, RegexGroup);
_.evaluateItem = function evaluateItem_75(c){
    var gp, gp0, iter, s;
    gp0 = dynamicCast(this.argument[0].evaluateItem(c), 13);
    gp = dynamicCast(gp0, 25);
    iter = c.getCurrentRegexIterator();
    if (!iter) {
        return $clinit_StringValue() , EMPTY_STRING;
    }
    s = $getRegexGroup(iter, gp.intValue());
    if (s == null) {
        return $clinit_StringValue() , EMPTY_STRING;
    }
    return $clinit_StringValue() , s == null || s.length == 0?EMPTY_STRING:new StringValue_0(s);
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_25(){
    return 64;
}
;
_.newInstance = function newInstance_43(){
    return new RegexGroup;
}
;
var Lclient_net_sf_saxon_ce_functions_RegexGroup_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'RegexGroup', 353, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $simplifyAsTailExpression(this$static){
    var t, value_0;
    if (isAtomic_0(this$static.argument[1])) {
        try {
            value_0 = fromInt($intValue(dynamicCast(dynamicCast(this$static.argument[1], 9).value_0, 32)));
            if (lte(value_0, {l:0, m:0, h:0})) {
                return this$static.argument[0];
            }
            else if (eq(value_0, {l:1, m:0, h:0})) {
                t = makeSystemFunction('subsequence', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this$static.argument[0], new Literal(($clinit_DecimalValue() , TWO))]));
                copyLocationInfo(this$static, t);
                return t;
            }
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                return this$static;
            }
            else 
                throw unwrap($e0);
        }
    }
    return this$static;
}

function Remove(){
    SystemFunction.call(this);
}

defineClass(303, 41, {6:1, 20:1, 303:1}, Remove);
_.getItemType = function getItemType_66(){
    return this.argument[0].getItemType();
}
;
_.iterate_0 = function iterate_44(context){
    var function_$, n, n0, pos, seq;
    seq = this.argument[0].iterate_0(context);
    n0 = dynamicCast(this.argument[1].evaluateItem(context), 13);
    n = dynamicCast(n0, 25);
    pos = n.intValue();
    if (pos < 1) {
        return seq;
    }
    function_$ = new Remove$RemoveMappingFunction(pos);
    return new ItemMappingIterator(seq, function_$);
}
;
_.newInstance = function newInstance_44(){
    return new Remove;
}
;
_.optimize = function optimize_56(visitor, contextItemType){
    var e;
    e = $optimize_4(this, visitor, contextItemType);
    if (e == this) {
        return $simplifyAsTailExpression(this);
    }
    return e;
}
;
_.simplify = function simplify_49(visitor){
    var exp_0;
    exp_0 = $simplifyArguments(this, visitor);
    return instanceOf(exp_0, 303)?$simplifyAsTailExpression(dynamicCast(exp_0, 303)):exp_0;
}
;
var Lclient_net_sf_saxon_ce_functions_Remove_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Remove', 303, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function Remove$RemoveMappingFunction(removeIndex){
    this.removeIndex = removeIndex;
}

defineClass(483, 1, $intern_30, Remove$RemoveMappingFunction);
_.getAnother_1 = function getAnother_21(newBaseIterator){
    return new Remove$RemoveMappingFunction(this.removeIndex);
}
;
_.mapItem = function mapItem_14(item_0){
    return this.position_0++ == this.removeIndex?null:item_0;
}
;
_.position_0 = 1;
_.removeIndex = 0;
var Lclient_net_sf_saxon_ce_functions_Remove$RemoveMappingFunction_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Remove/RemoveMappingFunction', 483, Ljava_lang_Object_2_classLit);
function Replace(){
    SystemFunction.call(this);
}

function checkReplacement(rep){
    var c, i_0, next;
    for (i_0 = 0; i_0 < rep.length; i_0++) {
        c = rep.charCodeAt(i_0);
        if (c == 36) {
            if (i_0 + 1 < rep.length) {
                next = $charAt_1(rep, ++i_0);
                if (next < 48 || next > 57) {
                    return 'Invalid replacement string in replace(): $ sign must be followed by digit 0-9';
                }
            }
            else {
                return 'Invalid replacement string in replace(): $ sign at end of string';
            }
        }
        else if (c == 92) {
            if (i_0 + 1 < rep.length) {
                next = $charAt_1(rep, ++i_0);
                if (next != 92 && next != 36) {
                    return 'Invalid replacement string in replace(): \\ character must be followed by \\ or $';
                }
            }
            else {
                return 'Invalid replacement string in replace(): \\ character at end of string';
            }
        }
    }
    return null;
}

defineClass(484, 41, $intern_36, Replace);
_.evaluateItem = function evaluateItem_76(c){
    var arg0, arg1, arg2, arg3, de, err, flags, input_0, msg, re, replacement, res;
    arg0 = dynamicCast(this.argument[0].evaluateItem(c), 13);
    !arg0 && (arg0 = ($clinit_StringValue() , EMPTY_STRING));
    arg2 = dynamicCast(this.argument[2].evaluateItem(c), 13);
    replacement = toString__Ljava_lang_String___devirtual$_0(arg2.getPrimitiveStringValue());
    msg = checkReplacement(replacement);
    msg != null && $dynamicError(this, msg, 'FORX0004');
    arg1 = dynamicCast(this.argument[1].evaluateItem(c), 13);
    if (this.argument.length == 3) {
        flags = '';
    }
    else {
        arg3 = dynamicCast(this.argument[3].evaluateItem(c), 13);
        flags = toString__Ljava_lang_String___devirtual$_0(arg3.getPrimitiveStringValue());
    }
    try {
        re = new ARegularExpression(toString__Ljava_lang_String___devirtual$_0(arg1.getPrimitiveStringValue()), flags);
        $matches_0(re, '') && $dynamicError(this, 'The regular expression in replace() must not be one that matches a zero-length string', 'FORX0003');
        input_0 = toString__Ljava_lang_String___devirtual$_0(arg0.getPrimitiveStringValue());
        res = $replace(re, input_0, replacement);
        return $clinit_StringValue() , res.used == 0?EMPTY_STRING:new StringValue_0(res);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            de = new XPathException_5(err);
            de.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FORX0002');
                $maybeSetLocation(de, $getSourceLocator(this));
                throw de;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.newInstance = function newInstance_45(){
    return new Replace;
}
;
var Lclient_net_sf_saxon_ce_functions_Replace_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Replace', 484, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function ResolveQName(){
    SystemFunction.call(this);
}

defineClass(485, 41, $intern_36, ResolveQName);
_.evaluateItem = function evaluateItem_77(context){
    var arg0, e, element, lexicalQName, qName, resolver;
    arg0 = dynamicCast(this.argument[0].evaluateItem(context), 13);
    if (!arg0) {
        return null;
    }
    lexicalQName = toString__Ljava_lang_String___devirtual$_0(arg0.getPrimitiveStringValue());
    element = dynamicCast(this.argument[1].evaluateItem(context), 7);
    resolver = new InscopeNamespaceResolver(element);
    try {
        qName = fromLexicalQName(lexicalQName, $getURIForPrefix(resolver, '', true), resolver);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            $maybeSetLocation(e, $getSourceLocator(this));
            throw e;
        }
        else 
            throw unwrap($e0);
    }
    return new QNameValue(qName);
}
;
_.newInstance = function newInstance_46(){
    return new ResolveQName;
}
;
var Lclient_net_sf_saxon_ce_functions_ResolveQName_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'ResolveQName', 485, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function ResolveURI(){
    SystemFunction.call(this);
}

function escapeSpaces(s){
    var i_0;
    if (s == null)
        return null;
    i_0 = $indexOf_3(s, fromCodePoint(32));
    if (i_0 < 0) {
        return s;
    }
    return (i_0 == 0?'':s.substr(0, i_0)) + '%20' + (i_0 == s.length - 1?'':escapeSpaces(__substr(s, i_0 + 1, s.length - (i_0 + 1))));
}

function makeAbsolute(relativeURI, base){
    var absoluteURI, baseURI, e, hash;
    if (relativeURI == null) {
        absoluteURI = new URI_2(escapeSpaces(base));
        if (absoluteURI.m_scheme != null) {
            return absoluteURI;
        }
        else {
            throw new URI$URISyntaxException(base + ': Relative URI not supplied, so base URI must be absolute');
        }
    }
    relativeURI = escapeSpaces(relativeURI);
    base = escapeSpaces(base);
    try {
        if (base == null || base.length == 0) {
            absoluteURI = new URI_2(relativeURI);
            if (absoluteURI.m_scheme == null) {
                if (!$equals_5(base, base)) {
                    return makeAbsolute(relativeURI, base);
                }
            }
        }
        else {
            try {
                baseURI = new URI_1(base);
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 51)) {
                    e = $e0;
                    throw new URI$URISyntaxException(base + ': Invalid base URI: ' + e.detailMessage);
                }
                else 
                    throw unwrap($e0);
            }
            if (baseURI.m_fragment != null) {
                hash = $indexOf_3(base, fromCodePoint(35));
                hash >= 0 && (base = base.substr(0, hash));
                try {
                    baseURI = new URI_1(base);
                }
                catch ($e1) {
                    $e1 = wrap_0($e1);
                    if (instanceOf($e1, 51)) {
                        e = $e1;
                        throw new URI$URISyntaxException(base + ': Invalid base URI: ' + e.detailMessage);
                    }
                    else 
                        throw unwrap($e1);
                }
            }
            try {
                new URI_2(relativeURI);
            }
            catch ($e2) {
                $e2 = wrap_0($e2);
                if (instanceOf($e2, 51)) {
                    e = $e2;
                    throw new URI$URISyntaxException(base + ': Invalid relative URI: ' + e.detailMessage);
                }
                else 
                    throw unwrap($e2);
            }
            absoluteURI = relativeURI.length == 0?baseURI:new URI_0(baseURI, relativeURI);
        }
    }
    catch ($e3) {
        $e3 = wrap_0($e3);
        if (instanceOf($e3, 30)) {
            throw new URI$URISyntaxException(relativeURI + ': Cannot resolve URI against base ' + wrap(base, 6));
        }
        else 
            throw unwrap($e3);
    }
    return absoluteURI;
}

defineClass(454, 41, $intern_36, ResolveURI);
_.checkArguments = function checkArguments_13(visitor){
    var de;
    if (this.expressionBaseURI == null) {
        $checkArguments(this, visitor);
        this.expressionBaseURI = visitor.staticContext.getBaseURI();
        if (this.expressionBaseURI == null && this.argument.length == 1) {
            de = new XPathException_0('Base URI in static context of resolve-uri() is unknown');
            de.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FONS0005');
                throw de;
        }
    }
}
;
_.evaluateItem = function evaluateItem_78(context){
    var absoluteURI, arg0, base, err, relative, relativeURI, resolved;
    arg0 = dynamicCast(this.argument[0].evaluateItem(context), 13);
    if (!arg0) {
        return null;
    }
    relative = toString__Ljava_lang_String___devirtual$_0(arg0.getPrimitiveStringValue());
    if (this.argument.length == 2) {
        base = toString__Ljava_lang_String___devirtual$_0(this.argument[1].evaluateAsString(context));
    }
    else {
        base = this.expressionBaseURI;
        if (this.expressionBaseURI == null) {
            $dynamicError(this, 'in resolve-uri(), Base URI in static context of resolve-uri() is unknown', 'FONS0005');
            return null;
        }
    }
    try {
        absoluteURI = new URI_2(base);
        if (absoluteURI.m_scheme == null) {
            relativeURI = new URI_2(relative);
            if (relativeURI.m_scheme != null) {
                return new AnyURIValue(relative);
            }
            $dynamicError(this, 'in resolve-uri(), Base URI ' + wrap(base, 6) + ' is not an absolute URI', 'FORG0002');
            return null;
        }
        resolved = makeAbsolute(relative, base);
        return new AnyURIValue($toString_1(resolved));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 51)) {
            err = $e0;
            $dynamicError(this, 'in resolve-uri(), Base URI ' + wrap(base, 6) + ' is invalid: ' + err.detailMessage, 'FORG0002');
            return null;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.newInstance = function newInstance_47(){
    return new ResolveURI;
}
;
_.expressionBaseURI = null;
var Lclient_net_sf_saxon_ce_functions_ResolveURI_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'ResolveURI', 454, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function Reverse(){
    SystemFunction.call(this);
}

defineClass(304, 41, {6:1, 20:1, 304:1}, Reverse);
_.computeSpecialProperties = function computeSpecialProperties_34(){
    var baseProps;
    baseProps = $getSpecialProperties(this.argument[0]);
    return (baseProps & $intern_26) != 0?baseProps & -262145 | $intern_25:(baseProps & $intern_25) != 0?baseProps & -131073 | $intern_26:baseProps;
}
;
_.getItemType = function getItemType_67(){
    return this.argument[0].getItemType();
}
;
_.iterate_0 = function iterate_45(context){
    var extent, forwards;
    forwards = this.argument[0].iterate_0(context);
    extent = makeReversed(forwards);
    return new ArrayIterator(extent.value_0);
}
;
_.newInstance = function newInstance_48(){
    return new Reverse;
}
;
var Lclient_net_sf_saxon_ce_functions_Reverse_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Reverse', 304, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function Root(){
    SystemFunction.call(this);
}

defineClass(486, 41, $intern_36, Root);
_.computeSpecialProperties = function computeSpecialProperties_35(){
    var prop;
    prop = $intern_61;
    (this.argument.length == 0 || ($getSpecialProperties(this.argument[0]) & $intern_34) != 0) && (prop |= $intern_34);
    return prop;
}
;
_.evaluateItem = function evaluateItem_79(c){
    var start_0;
    start_0 = dynamicCast(this.argument[0].evaluateItem(c), 7);
    if (!start_0) {
        return null;
    }
    return start_0.getRoot();
}
;
_.newInstance = function newInstance_49(){
    return new Root;
}
;
var Lclient_net_sf_saxon_ce_functions_Root_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Root', 486, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function Rounding(operation){
    SystemFunction.call(this);
    this.operation = operation;
}

defineClass(256, 41, $intern_36, Rounding);
_.computeCardinality = function computeCardinality_41(){
    return this.argument[0].getCardinality();
}
;
_.evaluateItem = function evaluateItem_80(context){
    var scale, scaleVal, scaleVal0, val, val0;
    val0 = dynamicCast(this.argument[0].evaluateItem(context), 13);
    if (!val0) {
        return null;
    }
    val = dynamicCast(val0, 25);
    switch (this.operation) {
        case 0:
            return val.floor_0();
        case 1:
            return val.ceiling();
        case 2:
            return val.round_0();
        case 3:
            scale = 0;
            if (this.argument.length == 2) {
                scaleVal0 = dynamicCast(this.argument[1].evaluateItem(context), 13);
                scaleVal = dynamicCast(scaleVal0, 25);
                scale = scaleVal.intValue();
            }

            return val.roundHalfToEven(scale);
        case 4:
            return val.abs_0();
        default:throw new UnsupportedOperationException_0('Unknown rounding function');
    }
}
;
_.newInstance = function newInstance_50(){
    return new Rounding(this.operation);
}
;
var Lclient_net_sf_saxon_ce_functions_Rounding_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Rounding', 256, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $clinit_StandardFunction(){
    $clinit_StandardFunction = emptyMethod;
    $clinit_EmptySequence();
    functionTable = new HashMap_0(200);
    register_0('abs', new Rounding(4), 'n? n? $s');
    register_0('adjust-date-to-timezone', new Adjust, 'dat? dat? ?dtd?');
    register_0('adjust-dateTime-to-timezone', new Adjust, 'dt? dt? ?dtd?');
    register_0('adjust-time-to-timezone', new Adjust, 'tim? tim? ?dtd?');
    register_0('avg', new Average, 'a? a*');
    register_0('base-uri', new BaseURI, 'u? N? $f');
    register_0('boolean', new BooleanFn(0), 'b *');
    register_0('ceiling', new Rounding(1), 'n? n? $s');
    register_0('codepoint-equal', new CodepointEqual, 'b? s? s?');
    register_0('codepoints-to-string', new CodepointsToString, 's i*');
    register_0('compare', new Compare, 'i? s? s? ?s');
    register_0('concat', new Concat, 's a? $x');
    register_0('contains', new Contains(0), 'b s? s? ?s');
    register_0('count', new Count, 'i *');
    register_0('current', new Current, 'I $t');
    register_0('current-date', new CurrentDateTime, 'dat');
    register_0('current-dateTime', new CurrentDateTime, 'dt');
    register_0('current-time', new CurrentDateTime, 'tim');
    register_0('current-group', new CurrentGroup, '* $t');
    register_0('current-grouping-key', new CurrentGroupingKey, 'a? $t');
    register_0('dateTime', new DateTimeConstructor, 'dt? dat? tim?');
    register_0('day-from-date', new Component(3), 'i? dat?');
    register_0('day-from-dateTime', new Component(3), 'i? dt?');
    register_0('days-from-duration', new Component(3), 'i? dur?');
    register_0('deep-equal', new DeepEqual, 'b * * ?s');
    register_0('distinct-values', new DistinctValues, 'a* a* ?s');
    register_0('doc', new Doc, 'D? s?');
    register_0('doc-available', new DocAvailable, 'b s?');
    register_0('document', new DocumentFn, 'N* * ?N $t');
    register_0('document-uri', new NamePart(4), 'u? N*');
    register_0('empty', new Exists(3), 'b *');
    register_0('ends-with', new Contains(2), 'b s? s? ?s');
    register_0('element-available', new Available(0), 'b s $u');
    register_0('element-with-id', new Id, 'E* s* ?N');
    register_0('encode-for-uri', new EscapeURI(1), 's s?');
    register_0('escape-html-uri', new EscapeURI(3), 's s?');
    register_0('error', new Error_0, 'I? ?q? ?s ?I');
    register_0('exists', new Exists(2), 'b *');
    register_0('floor', new Rounding(0), 'n? n? $s');
    register_0('format-date', new FormatDate, 's dat? s ?s? ?s? ?s? $t');
    register_0('format-dateTime', new FormatDate, 's dt? s ?s? ?s? ?s? $t');
    register_0('format-number', new FormatNumber, 's n? s ?s $t');
    register_0('format-time', new FormatDate, 's tim? s ?s? ?s? ?s? $t');
    register_0('function-available', new Available(1), 'b s ?i $u');
    register_0('generate-id', new NamePart(3), 's N? $tf');
    register_0('hours-from-dateTime', new Component(4), 'i? dt?');
    register_0('hours-from-duration', new Component(4), 'i? dur?');
    register_0('hours-from-time', new Component(4), 'i? tim?');
    register_0('id', new Id, 'E* s* ?N');
    register_0('implicit-timezone', new CurrentDateTime, 'dtd');
    register_0('in-scope-prefixes', new InScopePrefixes, 's* E');
    register_0('index-of', new IndexOf, 'i* a* a ?s');
    register_0('insert-before', new Insert, '* * i *');
    register_0('iri-to-uri', new EscapeURI(2), 's s?');
    register_0('key', new KeyFn, 'N* s a* ?N $t');
    register_0('lang', new Lang, 'b s? ?N');
    register_0('last', new Last, 'i');
    register_0('local-name', new NamePart(1), 's N? $f');
    register_0('local-name-from-QName', new Component(8), 's? q?');
    register_0('lower-case', new ForceCase(1), 's s?');
    register_0('matches', new Matches, 'b s? s ?s');
    register_0('max', new Minimax(3), 'a? a* ?s');
    register_0('min', new Minimax(2), 'a? a* ?s');
    register_0('minutes-from-dateTime', new Component(5), 'i? dt?');
    register_0('minutes-from-duration', new Component(5), 'i? dur?');
    register_0('minutes-from-time', new Component(5), 'i? tim?');
    register_0('month-from-date', new Component(2), 'i? dat?');
    register_0('month-from-dateTime', new Component(2), 'i? dt?');
    register_0('months-from-duration', new Component(2), 'i? dur?');
    register_0('name', new NamePart(0), 's N? $f');
    register_0('namespace-uri', new NamePart(2), 'u N? $f');
    register_0('namespace-uri-for-prefix', new NamespaceForPrefix, 'u? s? E');
    register_0('namespace-uri-from-QName', new Component(9), 'u? q?');
    register_0('node-name', new NamePart(6), 'q? N?');
    register_0('not', new BooleanFn(1), 'b *');
    register_0('normalize-space', new NormalizeSpace, 's ?s?');
    register_0('normalize-space#0', new NormalizeSpace, 's');
    register_0('normalize-space#1', new NormalizeSpace, 's s?');
    register_0('normalize-unicode', new NormalizeUnicode, 's s? ?s');
    register_0('number', new NumberFn, 'd a? $f');
    register_0('position', new Position_0, 'i');
    register_0('prefix-from-QName', new Component(10), 's? q?');
    register_0('QName', new QNameFn, 'q s? s');
    register_0('regex-group', new RegexGroup, 's i $t');
    register_0('remove', new Remove, '* * i $s');
    register_0('replace', new Replace, 's s? s s ?s');
    register_0('resolve-QName', new ResolveQName, 'q? s? E');
    register_0('resolve-uri', new ResolveURI, 'u? s? ?s');
    register_0('reverse', new Reverse, '* *');
    register_0('root', new Root, 'N? ?N? $f');
    register_0('round', new Rounding(2), 'n? n? $s');
    register_0('round-half-to-even', new Rounding(3), 'n? n? i $s');
    register_0('seconds-from-dateTime', new Component(6), 'dec? dt?');
    register_0('seconds-from-duration', new Component(6), 'dec? dur?');
    register_0('seconds-from-time', new Component(6), 'dec? tim?');
    register_0('starts-with', new Contains(1), 'b s? s? ?s');
    register_0('string', new StringFn, 's I? $f');
    register_0('string-length', new StringLength, 'i');
    register_0('string-length#0', new StringLength, 'i');
    register_0('string-length#1', new StringLength, 'i s?');
    register_0('string-join', new StringJoin, 's s* s');
    register_0('string-to-codepoints', new StringToCodepoints, 'i* s?');
    register_0('subsequence', new Subsequence, '* * d ?d $s');
    register_0('substring', new Substring, 's s? d ?d');
    register_0('substring-after', new SubstringAfterBefore(1), 's s? s? ?s');
    register_0('substring-before', new SubstringAfterBefore(2), 's s? s? ?s');
    register_0('sum', new Sum, 'a? a* ?a');
    register_0('system-property', new SystemProperty, 's s $u');
    register_0('timezone-from-date', new Component(7), 'dtd? dat?');
    register_0('timezone-from-dateTime', new Component(7), 'dtd? dt?');
    register_0('timezone-from-time', new Component(7), 'dtd? tim?');
    register_0('translate', new Translate, 's s? s s');
    register_0('tokenize', new Tokenize, 's* s? s ?s');
    register_0('trace', new Trace, '* * s');
    register_0('type-available', new Available(2), 'b s $u');
    register_0('upper-case', new ForceCase(0), 's s?');
    register_0('unparsed-text', new UnparsedText(0), 's? s? ?s $t');
    register_0('unparsed-text-available', new UnparsedText(1), 'b s s $t');
    register_0('year-from-date', new Component(1), 'i? dat?');
    register_0('year-from-dateTime', new Component(1), 'i? dt?');
    register_0('years-from-duration', new Component(1), 'i? dur?');
}

function getFunction(name_0, arity_0){
    $clinit_StandardFunction();
    var e;
    e = dynamicCast($getStringValue_1(functionTable, name_0 + '#' + arity_0), 340);
    if (e) {
        return e;
    }
    return dynamicCast($getStringValue_1(functionTable, name_0), 340);
}

function makeEntry(name_0, skeleton){
    var e, hash;
    e = new StandardFunction$Entry;
    hash = $indexOf_3(name_0, fromCodePoint(35));
    if (hash < 0)
        ;
    else {
        name_0.substr(0, hash);
    }
    e.skeleton = skeleton;
    e.minArguments = 0;
    e.maxArguments = 0;
    e.applicability = 1;
    e.argumentTypes = initDim(Lclient_net_sf_saxon_ce_value_SequenceType_2_classLit, $intern_1, 55, 0, 0, 1);
    e.sameItemTypeAsFirstArgument = false;
    return e;
}

function register_0(name_0, skeleton, signature){
    var arg, arg$index, arg$max, args, c, card, e, first, i_0, it, optional, st, t, argNr, st2;
    e = makeEntry(name_0, skeleton);
    $putStringValue(functionTable, name_0, e);
    if (!$equals_5(signature, '')) {
        args = $split(signature, '\\s', 0);
        first = true;
        for (arg$index = 0 , arg$max = args.length; arg$index < arg$max; ++arg$index) {
            arg = args[arg$index];
            if ($equals_5(arg.substr(0, 1), '$')) {
                for (i_0 = 1; i_0 < arg.length; i_0++) {
                    c = arg.charCodeAt(i_0);
                    switch (c) {
                        case 102:
                            e.contextItemAsFirstArgument = true;
                            break;
                        case 115:
                            e.sameItemTypeAsFirstArgument = true;
                            break;
                        case 116:
                            e.applicability = 2;
                            break;
                        case 117:
                            e.applicability = 6;
                            break;
                        case 120:
                            e.maxArguments = $intern_0;
                    }
                }
            }
            else if ($equals_5(arg, '*')) {
                first?(e.resultType = ($clinit_SequenceType() , ANY_SEQUENCE)):$mandatoryArg(e, ($clinit_SequenceType() , ANY_SEQUENCE));
            }
            else {
                optional = false;
                if ($equals_5(arg.substr(0, 1), '?')) {
                    optional = true;
                    arg = __substr(arg, 1, arg.length - 1);
                }
                card = $intern_21;
                if ($endsWith(arg, '*')) {
                    card = $intern_12;
                    it = $substring_1(arg, 0, arg.length - 1);
                }
                else if ($endsWith(arg, '?')) {
                    card = $intern_20;
                    it = $substring_1(arg, 0, arg.length - 1);
                }
                else if ($endsWith(arg, '+')) {
                    card = $intern_33;
                    it = $substring_1(arg, 0, arg.length - 1);
                }
                else {
                    it = arg;
                }
                if ($equals_5(it, 'I')) {
                    t = ($clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2);
                }
                else if ($equals_5(it, 'N')) {
                    t = ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7);
                }
                else if ($equals_5(it, 'D')) {
                    t = ($clinit_NodeKindTest() , DOCUMENT);
                }
                else if ($equals_5(it, 'E')) {
                    t = ($clinit_NodeKindTest() , ELEMENT);
                }
                else if ($equals_5(it, 'a')) {
                    t = ($clinit_AtomicType() , ANY_ATOMIC);
                }
                else if ($equals_5(it, 'i')) {
                    t = ($clinit_AtomicType() , INTEGER);
                }
                else if ($equals_5(it, 'd')) {
                    t = ($clinit_AtomicType() , DOUBLE);
                }
                else if ($equals_5(it, 'dec')) {
                    t = ($clinit_AtomicType() , DECIMAL);
                }
                else if ($equals_5(it, 'n')) {
                    t = ($clinit_AtomicType() , NUMERIC);
                }
                else if ($equals_5(it, 's')) {
                    t = ($clinit_AtomicType() , STRING);
                }
                else if ($equals_5(it, 'b')) {
                    t = ($clinit_AtomicType() , BOOLEAN);
                }
                else if ($equals_5(it, 'dt')) {
                    t = ($clinit_AtomicType() , DATE_TIME);
                }
                else if ($equals_5(it, 'dat')) {
                    t = ($clinit_AtomicType() , DATE);
                }
                else if ($equals_5(it, 'tim')) {
                    t = ($clinit_AtomicType() , TIME);
                }
                else if ($equals_5(it, 'dur')) {
                    t = ($clinit_AtomicType() , DURATION);
                }
                else if ($equals_5(it, 'dtd')) {
                    t = ($clinit_AtomicType() , DAY_TIME_DURATION);
                }
                else if ($equals_5(it, 'q')) {
                    t = ($clinit_AtomicType() , QNAME);
                }
                else if ($equals_5(it, 'u')) {
                    t = ($clinit_AtomicType() , ANY_URI);
                }
                else {
                    throw new IllegalArgumentException_0(it);
                }
                st = ($clinit_SequenceType() , new SequenceType(t, card));
                first?(e.resultType = st):optional?(++e.maxArguments , argNr = e.argumentTypes.length , st2 = initDim(Lclient_net_sf_saxon_ce_value_SequenceType_2_classLit, $intern_1, 55, e.argumentTypes.length + 1, 0, 1) , arraycopy(e.argumentTypes, 0, st2, 0, e.argumentTypes.length) , e.argumentTypes = st2 , e.argumentTypes[argNr] = st , undefined):$mandatoryArg(e, st);
            }
            first = false;
        }
    }
    return e;
}

var functionTable;
function $mandatoryArg(this$static, type_0){
    var argNr, st2;
    ++this$static.minArguments;
    ++this$static.maxArguments;
    argNr = this$static.argumentTypes.length;
    st2 = initDim(Lclient_net_sf_saxon_ce_value_SequenceType_2_classLit, $intern_1, 55, this$static.argumentTypes.length + 1, 0, 1);
    arraycopy(this$static.argumentTypes, 0, st2, 0, this$static.argumentTypes.length);
    this$static.argumentTypes = st2;
    this$static.argumentTypes[argNr] = type_0;
}

function StandardFunction$Entry(){
}

defineClass(340, 1, {340:1}, StandardFunction$Entry);
_.applicability = 0;
_.contextItemAsFirstArgument = false;
_.maxArguments = 0;
_.minArguments = 0;
_.sameItemTypeAsFirstArgument = false;
var Lclient_net_sf_saxon_ce_functions_StandardFunction$Entry_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'StandardFunction/Entry', 340, Ljava_lang_Object_2_classLit);
function StringFn(){
    SystemFunction.call(this);
}

defineClass(192, 41, {6:1, 20:1, 192:1}, StringFn);
_.evaluateItem = function evaluateItem_81(c){
    var arg, e;
    try {
        arg = this.argument[0].evaluateItem(c);
        return !arg?($clinit_StringValue() , EMPTY_STRING):instanceOf(arg, 12) && dynamicCast(arg, 12).getItemType_0() == ($clinit_AtomicType() , STRING)?arg:makeStringValue(arg.getStringValue());
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 50)) {
            e = $e0;
            $typeError(this, null, e.detailMessage, 'FOTY0014');
            return null;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.newInstance = function newInstance_51(){
    return new StringFn;
}
;
_.optimize = function optimize_57(visitor, contextItemType){
    var e, th;
    e = $optimize_4(this, visitor, contextItemType);
    if (e != this) {
        return e;
    }
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    if ($isSubType(th, this.argument[0].getItemType(), ($clinit_AtomicType() , STRING)) && this.argument[0].getCardinality() == $intern_21) {
        return this.argument[0];
    }
    if (instanceOf(this.argument[0], 124)) {
        return dynamicCast(this.argument[0], 124).select;
    }
    return this;
}
;
_.simplify = function simplify_50(visitor){
    this.argument[0].setFlattened(true);
    return $simplifyArguments(this, visitor);
}
;
var Lclient_net_sf_saxon_ce_functions_StringFn_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'StringFn', 192, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $simplifySingleton(this$static){
    var card;
    card = this$static.argument[0].getCardinality();
    if ((card & $intern_14) == 0) {
        return (card & $intern_17) != 0?makeSystemFunction('string', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this$static.argument[0]])):this$static.argument[0];
    }
    return this$static;
}

function StringJoin(){
    SystemFunction.call(this);
}

defineClass(257, 41, {6:1, 20:1, 257:1}, StringJoin);
_.evaluateItem = function evaluateItem_82(c){
    var first, it, iter, sb, sep;
    iter = this.argument[0].iterate_0(c);
    it = iter.next_0();
    if (!it) {
        return $clinit_StringValue() , EMPTY_STRING;
    }
    first = it.getStringValue();
    it = iter.next_0();
    if (!it) {
        return $clinit_StringValue() , first == null || first.length == 0?EMPTY_STRING:new StringValue_0(first);
    }
    sb = new FastStringBuffer(64);
    $append_2(sb, first);
    sep = this.argument[1].evaluateItem(c).getStringValue();
    $append_2(sb, sep);
    $append_3(sb, it.getStringValue());
    while (true) {
        it = iter.next_0();
        if (!it) {
            return makeStringValue($condense(sb));
        }
        $append_2(sb, sep);
        $append_3(sb, it.getStringValue());
    }
}
;
_.newInstance = function newInstance_52(){
    return new StringJoin;
}
;
_.optimize = function optimize_58(visitor, contextItemType){
    var exp_0;
    exp_0 = $optimize_4(this, visitor, contextItemType);
    return instanceOf(exp_0, 257)?$simplifySingleton(dynamicCast(exp_0, 257)):exp_0;
}
;
var Lclient_net_sf_saxon_ce_functions_StringJoin_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'StringJoin', 257, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $evaluateItem_6(this$static, c){
    var contextItem, s, sv;
    if (this$static.argument.length == 0) {
        contextItem = c.getContextItem();
        if (!contextItem) {
            $dynamicError(this$static, 'The context item for string-length() is not set', 'XPDY0002');
            return null;
        }
        sv = makeStringValue(contextItem.getStringValue());
    }
    else {
        sv = dynamicCast(this$static.argument[0].evaluateItem(c), 13);
    }
    if (!sv) {
        return $clinit_IntegerValue() , ZERO_2;
    }
    if (instanceOf(sv, 12)) {
        return new IntegerValue($getStringLength(dynamicCast(sv, 12)));
    }
    else {
        s = toString__Ljava_lang_String___devirtual$_0(sv.getPrimitiveStringValue());
        return new IntegerValue(getStringLength(s));
    }
}

function StringLength(){
    SystemFunction.call(this);
}

defineClass(354, 41, $intern_36, StringLength);
_.evaluateItem = function evaluateItem_83(c){
    return $evaluateItem_6(this, c);
}
;
_.getIntrinsicDependencies = function getIntrinsicDependencies_26(){
    var d;
    d = 0;
    this.argument.length == 0 && (d |= 2);
    return d;
}
;
_.newInstance = function newInstance_53(){
    return new StringLength;
}
;
_.preEvaluate = function preEvaluate_11(visitor){
    return this.argument.length == 0?this:makeLiteral($evaluateItem_6(this, new EarlyEvaluationContext(visitor.configuration)));
}
;
_.typeCheck = function typeCheck_67(visitor, contextItemType){
    this.argument.length == 0 && !contextItemType && $typeError(this, null, 'The context item for string-length() is undefined', 'XPDY0002');
    return $typeCheck_2(this, visitor, contextItemType);
}
;
var Lclient_net_sf_saxon_ce_functions_StringLength_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'StringLength', 354, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function StringToCodepoints(){
    SystemFunction.call(this);
}

defineClass(487, 41, $intern_36, StringToCodepoints);
_.iterate_0 = function iterate_46(c){
    var chars, codes, i_0, item_0;
    item_0 = this.argument[0].evaluateItem(c);
    if (!item_0) {
        return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
    }
    chars = expand_0(dynamicCast(item_0, 12).value_0);
    codes = initDim(Lclient_net_sf_saxon_ce_value_IntegerValue_2_classLit, $intern_3, 32, chars.length, 0, 1);
    for (i_0 = 0; i_0 < chars.length; i_0++) {
        codes[i_0] = new IntegerValue(chars[i_0]);
    }
    return new ArrayIterator(codes);
}
;
_.newInstance = function newInstance_54(){
    return new StringToCodepoints;
}
;
var Lclient_net_sf_saxon_ce_functions_StringToCodepoints_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'StringToCodepoints', 487, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function Subsequence(){
    SystemFunction.call(this);
}

defineClass(488, 41, $intern_36, Subsequence);
_.computeCardinality = function computeCardinality_42(){
    if (this.argument.length == 3 && isConstantOne(this.argument[2])) {
        return $intern_20;
    }
    return this.argument[0].getCardinality() | $intern_17;
}
;
_.computeSpecialProperties = function computeSpecialProperties_36(){
    return $getSpecialProperties(this.argument[0]);
}
;
_.getItemType = function getItemType_68(){
    return this.argument[0].getItemType();
}
;
_.iterate_0 = function iterate_47(context){
    var lend, lengthVal, lstart, rend, seq, startVal;
    seq = this.argument[0].iterate_0(context);
    startVal = dynamicCast(this.argument[1].evaluateItem(context), 44);
    if (isNaN_3(startVal.value_0)) {
        return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
    }
    if ($compareTo_4(startVal, ($clinit_IntegerValue() , MAX_LONG)) > 0) {
        return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
    }
    startVal = $round(startVal);
    $compareTo_4(startVal, PLUS_ONE) <= 0?(lstart = 1):(lstart = $intValue(dynamicCast($convert_3(startVal, ($clinit_AtomicType() , INTEGER)).asAtomic(), 32)));
    if (this.argument.length == 2) {
        lend = $intern_0;
    }
    else {
        lengthVal = dynamicCast(this.argument[2].evaluateItem(context), 44);
        if (isNaN_3(lengthVal.value_0)) {
            return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
        }
        lengthVal = $round(lengthVal);
        if ($compareTo_4(lengthVal, ZERO_2) <= 0) {
            return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
        }
        rend = dynamicCast(compute(startVal, 15, lengthVal, context), 25);
        if (rend.isNaN_0()) {
            return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
        }
        rend = dynamicCast(compute(rend, 16, PLUS_ONE, context), 25);
        if (rend.compareTo(ZERO_2) <= 0) {
            return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
        }
        lend = rend.intValue();
    }
    return new ItemMappingIterator(seq, new Subsequence$SubsequenceMappingFunction(lstart, lend));
}
;
_.newInstance = function newInstance_55(){
    return new Subsequence;
}
;
_.optimize = function optimize_59(visitor, contextItemType){
    var e;
    e = $optimize_4(this, visitor, contextItemType);
    if (e != this) {
        return e;
    }
    return this;
}
;
var Lclient_net_sf_saxon_ce_functions_Subsequence_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Subsequence', 488, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function Subsequence$SubsequenceMappingFunction(min_0, max_0){
    this.min_0 = min_0;
    this.max_0 = max_0;
    this.pos = 0;
}

defineClass(489, 1, $intern_30, Subsequence$SubsequenceMappingFunction);
_.getAnother_1 = function getAnother_22(newBaseIterator){
    return new Subsequence$SubsequenceMappingFunction(this.min_0, this.max_0);
}
;
_.mapItem = function mapItem_15(item_0){
    var position;
    position = ++this.pos;
    if (position > this.max_0) {
        throw new ItemMappingIterator$EarlyExitException;
    }
    return position >= this.min_0?item_0:null;
}
;
_.max_0 = 0;
_.min_0 = 0;
_.pos = 0;
var Lclient_net_sf_saxon_ce_functions_Subsequence$SubsequenceMappingFunction_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Subsequence/SubsequenceMappingFunction', 489, Ljava_lang_Object_2_classLit);
function Substring(){
    SystemFunction.call(this);
}

defineClass(490, 41, $intern_36, Substring);
_.evaluateItem = function evaluateItem_84(context){
    var c, i_0, j, length_0, pos, result, sb, start_0, str, sv;
    sv = dynamicCast(this.argument[0].evaluateItem(context), 12);
    if (!sv) {
        return $clinit_StringValue() , EMPTY_STRING;
    }
    str = dynamicCastToString(sv.value_0 = toString__Ljava_lang_String___devirtual$_0(sv.value_0));
    start_0 = $round(dynamicCast(this.argument[1].evaluateItem(context), 44)).value_0;
    if (this.argument.length == 2) {
        length_0 = str.length;
    }
    else {
        length_0 = $round(dynamicCast(this.argument[2].evaluateItem(context), 44)).value_0;
        length_0 < 0 && (length_0 = 0);
    }
    sb = new FastStringBuffer(round_int(length_0));
    i_0 = 0;
    pos = 0;
    while (i_0 < start_0 - 1 && pos < str.length) {
        c = $charAt_1(str, pos++);
        (c < $intern_48 || c > $intern_49) && ++i_0;
    }
    j = 0;
    while (j < length_0 && pos < str.length) {
        c = $charAt_1(str, pos++);
        $ensureCapacity_0(sb, 1);
        sb.array[sb.used++] = c;
        (c < $intern_48 || c > $intern_49) && ++j;
    }
    result = new StringValue_0(sb);
    sv.noSurrogates && (result.noSurrogates = true);
    return result;
}
;
_.newInstance = function newInstance_56(){
    return new Substring;
}
;
var Lclient_net_sf_saxon_ce_functions_Substring_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Substring', 490, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function SubstringAfterBefore(operation){
    CollatingFunction.call(this);
    this.operation = operation;
}

defineClass(402, 225, $intern_36, SubstringAfterBefore);
_.evaluateItem = function evaluateItem_85(context){
    var arg1, arg2, index_0, result, s, s1, s2;
    instanceOf(this.stringCollator, 161) || $dynamicError(this, 'The collation requested for ' + $getDisplayName(this) + ' does not support substring matching', 'FOCH0004');
    arg1 = dynamicCast(this.argument[0].evaluateItem(context), 12);
    arg2 = dynamicCast(this.argument[1].evaluateItem(context), 12);
    !arg1 && (arg1 = ($clinit_StringValue() , EMPTY_STRING));
    !arg2 && (arg2 = ($clinit_StringValue() , EMPTY_STRING));
    s1 = dynamicCastToString(arg1.value_0 = toString__Ljava_lang_String___devirtual$_0(arg1.value_0));
    s2 = dynamicCastToString(arg2.value_0 = toString__Ljava_lang_String___devirtual$_0(arg2.value_0));
    index_0 = s1.indexOf(s2);
    if (index_0 < 0) {
        return $clinit_StringValue() , EMPTY_STRING;
    }
    else {
        if (this.operation == 1) {
            if (!s2.length) {
                return arg1;
            }
            if (!s1.length) {
                return $clinit_StringValue() , EMPTY_STRING;
            }
            result = $substring_0(s1, index_0 + s2.length);
        }
        else {
            if (!s1.length || !s2.length) {
                return $clinit_StringValue() , EMPTY_STRING;
            }
            result = s1.substr(0, index_0);
        }
    }
    s = ($clinit_StringValue() , result == null || result.length == 0?EMPTY_STRING:new StringValue_0(result));
    arg1.noSurrogates && (s.noSurrogates = true);
    return s;
}
;
_.newInstance = function newInstance_57(){
    return new SubstringAfterBefore(this.operation);
}
;
var Lclient_net_sf_saxon_ce_functions_SubstringAfterBefore_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'SubstringAfterBefore', 402, Lclient_net_sf_saxon_ce_functions_CollatingFunction_2_classLit);
function Sum(){
    Aggregate.call(this);
}

function total(iter, context, location_0){
    var e, next, sum;
    sum = dynamicCast(iter.next_0(), 13);
    if (!sum) {
        return null;
    }
    if (instanceOf(sum, 56)) {
        try {
            sum = sum.convert(($clinit_AtomicType() , DOUBLE)).asAtomic();
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                e = $e0;
                !e.locator && (e.locator = location_0);
                throw e;
            }
            else 
                throw unwrap($e0);
        }
    }
    if (instanceOf(sum, 25)) {
        while (true) {
            next = dynamicCast(iter.next_0(), 13);
            if (!next) {
                return sum;
            }
            if (instanceOf(next, 56)) {
                next = next.convert(($clinit_AtomicType() , DOUBLE)).asAtomic();
            }
            else if (!instanceOf(next, 25)) {
                throw new XPathException_3('Input to sum() contains a mix of numeric and non-numeric values', 'FORG0006', location_0);
            }
            sum = compute(sum, 15, next, context);
            if (sum.isNaN_0() && instanceOf(sum, 44)) {
                return sum;
            }
        }
    }
    else if (instanceOf(sum, 74)) {
        if (!(instanceOf(sum, 102) || instanceOf(sum, 137))) {
            throw new XPathException_3('Input to sum() contains a duration that is neither a dayTimeDuration nor a yearMonthDuration', 'FORG0006', location_0);
        }
        while (true) {
            next = dynamicCast(iter.next_0(), 13);
            if (!next) {
                return sum;
            }
            if (!instanceOf(next, 74)) {
                throw new XPathException_3('Input to sum() contains a mix of duration and non-duration values', 'FORG0006', location_0);
            }
            sum = dynamicCast(sum, 74).add_2(dynamicCast(next, 74));
        }
    }
    else {
        throw new XPathException_3('Input to sum() contains a value of type ' + ('xs:' + sum.getItemType_0().localName_0) + ' which is neither numeric, nor a duration', 'FORG0006', location_0);
    }
}

defineClass(491, 344, $intern_36, Sum);
_.evaluateItem = function evaluateItem_86(context){
    var sum;
    sum = total(this.argument[0].iterate_0(context), context, $getSourceLocator(this));
    return sum?sum:this.argument.length == 2?this.argument[1].evaluateItem(context):($clinit_IntegerValue() , ZERO_2);
}
;
_.getItemType = function getItemType_69(){
    var base;
    base = getAtomizedItemType(this.argument[0], false);
    base.equals$(($clinit_AtomicType() , UNTYPED_ATOMIC)) && (base = DOUBLE);
    return (this.argument[0].getCardinality() & $intern_17) != 0?this.argument.length == 1?getCommonSuperType(base, INTEGER):getCommonSuperType(base, this.argument[1].getItemType()):base;
}
;
_.newInstance = function newInstance_58(){
    return new Sum;
}
;
var Lclient_net_sf_saxon_ce_functions_Sum_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Sum', 491, Lclient_net_sf_saxon_ce_functions_Aggregate_2_classLit);
function $clinit_SystemFunctionLibrary(){
    $clinit_SystemFunctionLibrary = emptyMethod;
    THE_INSTANCES = new HashMap_0(3);
}

function $bind_0(this$static, functionName, staticArgs, env, container){
    var baseURI, entry, err, f, local, newArgs, role, uri_0;
    uri_0 = $getNamespaceURI(functionName);
    if ($equals_5(uri_0, 'http://www.w3.org/2005/xpath-functions')) {
        local = valueOf_3(functionName.content_0, functionName.localNameStart, functionName.prefixStart - functionName.localNameStart);
        entry = getFunction(local, staticArgs.length);
        if (!!entry && entry.contextItemAsFirstArgument && staticArgs.length == 0) {
            newArgs = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [new ContextItemExpression]);
            return $bind_0(this$static, functionName, newArgs, env, container);
        }
        if (!entry) {
            if ($equals_5('true', local) && staticArgs.length == 0) {
                return new Literal(($clinit_BooleanValue() , TRUE_0));
            }
            else if ($equals_5('false', local) && staticArgs.length == 0) {
                return new Literal(($clinit_BooleanValue() , FALSE_0));
            }
            else if ($equals_5('collection', local) && staticArgs.length <= 1) {
                return staticArgs.length == 0?new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10)):new ErrorExpression(new XPathException_2('No collection URIs are recognized by Saxon-CE', 'FODC0002'));
            }
            else if ($equals_5('data', local) && staticArgs.length == 1) {
                return new Atomizer(staticArgs[0]);
            }
            else if ($equals_5('default-collation', local) && staticArgs.length == 0) {
                return new StringLiteral_0(env.getDefaultCollationName());
            }
            else if ($equals_5('exactly-one', local) && staticArgs.length == 1) {
                role = new RoleLocator(0, 'one-or-more', 1);
                role.errorCode = 'FORG0005';
                return makeCardinalityChecker(staticArgs[0], $intern_21, role);
            }
            else if ($equals_5('idref', local) && (staticArgs.length == 1 || staticArgs.length == 2)) {
                return new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
            }
            else if ($equals_5('nilled', local) && staticArgs.length == 1) {
                return new Literal(($clinit_BooleanValue() , FALSE_0));
            }
            else if ($equals_5('one-or-more', local) && staticArgs.length == 1) {
                role = new RoleLocator(0, 'one-or-more', 1);
                role.errorCode = 'FORG0004';
                return makeCardinalityChecker(staticArgs[0], $intern_33, role);
            }
            else if ($equals_5('static-base-uri', local) && staticArgs.length == 0) {
                baseURI = env.getBaseURI();
                return baseURI == null?new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10)):new Literal(new AnyURIValue(baseURI));
            }
            else if ($equals_5('trace', local) && staticArgs.length == 2) {
                return staticArgs[0];
            }
            else if ($equals_5('unordered', local) && staticArgs.length == 1) {
                return staticArgs[0];
            }
            else if ($equals_5('unparsed-entity-uri', local) && staticArgs.length == 1) {
                return new StringLiteral_0('');
            }
            else if ($equals_5('unparsed-entity-public-id', local) && staticArgs.length == 1) {
                return new StringLiteral_0('');
            }
            else if ($equals_5('zero-or-one', local) && staticArgs.length == 1) {
                role = new RoleLocator(0, 'zero-or-one', 1);
                role.errorCode = 'FORG0003';
                return makeCardinalityChecker(staticArgs[0], $intern_20, role);
            }
            else if (!getFunction(local, -1)) {
                err = new XPathException_0('Unknown system function ' + local + '()');
                err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XPST0017');
                    err.isStaticError = true;
                    throw err;
            }
            else {
                err = new XPathException_0('System function ' + local + '#' + staticArgs.length + ' cannot be called with ' + pluralArguments_0(staticArgs.length));
                err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XPST0017');
                    err.isStaticError = true;
                    throw err;
            }
        }
        if ((this$static.functionSet & entry.applicability) == 0) {
            err = new XPathException_0('System function ' + local + '#' + staticArgs.length + ' is not available with this host language');
            err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XPST0017');
                err.isStaticError = true;
                throw err;
        }
        f = entry.skeleton.newInstance();
        f.details = entry;
        f.name_0 = functionName;
        $setArguments(f, staticArgs);
        $setContainer(f, container);
        $checkArgumentCount_0(staticArgs.length, entry.minArguments, entry.maxArguments, local);
        return f;
    }
    else {
        return null;
    }
}

function $checkArgumentCount_0(numArgs, min_0, max_0, local){
    if (min_0 == max_0 && numArgs != min_0) {
        throw new XPathException_0('Function ' + wrap(local, 3) + ' must have ' + min_0 + pluralArguments_0(min_0));
    }
    if (numArgs < min_0) {
        throw new XPathException_0('Function ' + wrap(local, 3) + ' must have at least ' + min_0 + pluralArguments_0(min_0));
    }
    if (numArgs > max_0) {
        throw new XPathException_0('Function ' + wrap(local, 3) + ' must have no more than ' + max_0 + pluralArguments_0(max_0));
    }
    return numArgs;
}

function SystemFunctionLibrary(functionSet){
    $clinit_SystemFunctionLibrary();
    this.functionSet = functionSet;
}

function pluralArguments_0(num){
    if (num == 1)
        return ' argument';
    return ' arguments';
}

defineClass(284, 1, {310:1, 284:1}, SystemFunctionLibrary);
_.bind_0 = function bind_2(functionName, staticArgs, env, container){
    return $bind_0(this, functionName, staticArgs, env, container);
}
;
_.hasFunctionSignature = function hasFunctionSignature_1(functionName, arity_0){
    var entry, local, uri_0;
    uri_0 = $getNamespaceURI(functionName);
    local = valueOf_3(functionName.content_0, functionName.localNameStart, functionName.prefixStart - functionName.localNameStart);
    if ($equals_5(uri_0, 'http://www.w3.org/2005/xpath-functions')) {
        entry = getFunction(local, arity_0);
        return !!entry && (this.functionSet & entry.applicability) != 0 && (arity_0 == -1 || arity_0 >= entry.minArguments && arity_0 <= entry.maxArguments);
    }
    else {
        return false;
    }
}
;
_.functionSet = 0;
var THE_INSTANCES;
var Lclient_net_sf_saxon_ce_functions_SystemFunctionLibrary_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'SystemFunctionLibrary', 284, Ljava_lang_Object_2_classLit);
function SystemProperty(){
    SystemFunction.call(this);
}

function getProperty(uri_0, local){
    if ($equals_5(uri_0, 'http://www.w3.org/1999/XSL/Transform')) {
        if ($equals_5(local, 'version')) {
            return '2.0';
        }
        else if ($equals_5(local, 'vendor')) {
            return 'Saxon-CE 1.1 from Saxonica';
        }
        else if ($equals_5(local, 'vendor-url')) {
            return 'http://www.saxonica.com/ce';
        }
        else if ($equals_5(local, 'product-name')) {
            return 'Saxon-CE';
        }
        else if ($equals_5(local, 'product-version')) {
            return 'CE 1.1';
        }
        else if ($equals_5(local, 'supports-serialization')) {
            return 'no';
        }
        else if ($equals_5(local, 'supports-backwards-compatibility')) {
            return 'yes';
        }
        else if ($equals_5(local, 'supports-namespace-axis')) {
            return 'yes';
        }
        else if ($equals_5(local, 'is-schema-aware')) {
            return 'no';
        }
        return '';
    }
    else {
        return '';
    }
}

defineClass(492, 41, $intern_36, SystemProperty);
_.checkArguments = function checkArguments_14(visitor){
    !this.staticContext && (this.staticContext = visitor.staticContext);
}
;
_.evaluateItem = function evaluateItem_87(context){
    var err, name_0, qName;
    name_0 = this.argument[0].evaluateItem(context).getStringValue();
    try {
        qName = fromLexicalQName(name_0, '', this.staticContext.getNamespaceResolver());
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $dynamicError(this, 'Invalid system property name. ' + err.message_0, 'XTDE1390');
            return null;
        }
        else 
            throw unwrap($e0);
    }
    return new StringValue_0(getProperty($getNamespaceURI(qName), valueOf_3(qName.content_0, qName.localNameStart, qName.prefixStart - qName.localNameStart)));
}
;
_.newInstance = function newInstance_59(){
    return new SystemProperty;
}
;
var Lclient_net_sf_saxon_ce_functions_SystemProperty_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'SystemProperty', 492, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function Tokenize(){
    SystemFunction.call(this);
}

defineClass(494, 41, $intern_36, Tokenize);
_.iterate_0 = function iterate_48(c){
    var err, flags, input_0, pattern, re, sv;
    sv = dynamicCast(this.argument[0].evaluateItem(c), 13);
    if (!sv) {
        return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
    }
    input_0 = toString__Ljava_lang_String___devirtual$_0(sv.getPrimitiveStringValue());
    if (input_0.length == 0) {
        return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
    }
    sv = dynamicCast(this.argument[1].evaluateItem(c), 13);
    pattern = toString__Ljava_lang_String___devirtual$_0(sv.getPrimitiveStringValue());
    if (this.argument.length == 2) {
        flags = '';
    }
    else {
        sv = dynamicCast(this.argument[2].evaluateItem(c), 13);
        flags = toString__Ljava_lang_String___devirtual$_0(sv.getPrimitiveStringValue());
    }
    try {
        re = new ARegularExpression(pattern, flags);
        $matches_0(re, '') && $dynamicError(this, 'The regular expression in tokenize() must not be one that matches a zero-length string', 'FORX0003');
        return new ATokenIterator(containsSurrogatePairs(input_0)?new GeneralUnicodeString(input_0):new BMPString(input_0), new REMatcher(re.regex));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FORX0002');
                $maybeSetLocation(err, $getSourceLocator(this));
                throw err;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.newInstance = function newInstance_60(){
    return new Tokenize;
}
;
var Lclient_net_sf_saxon_ce_functions_Tokenize_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Tokenize', 494, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $clinit_Trace(){
    $clinit_Trace = emptyMethod;
    logger_4 = (new LoggerImplRegular , $ensureLogger(getLogManager(), 'Trace'));
}

function $notifyListener(this$static, label_0, val){
    var info, listener;
    info = new TraceExpression(this$static);
    $setConstructType(info, ($clinit_Location() , TRACE_CALL));
    $setSourceLocator(info, $getSourceLocator(this$static));
    $putStringValue(info.properties, 'label', label_0);
    $putStringValue(info.properties, 'value', val);
    listener = traceListener;
    $enter(listener, info);
    $leave(listener, info);
}

function Trace(){
    $clinit_Trace();
    SystemFunction.call(this);
}

function traceItem(val, label_0){
    $clinit_Trace();
    !val?$info_0(logger_4, label_0 + ': empty sequence'):instanceOf(val, 7)?$info_0(logger_4, label_0 + ': ' + displayTypeName(val) + ': ' + getPath(dynamicCast(val, 7))):$info_0(logger_4, label_0 + ': ' + displayTypeName(val) + ': ' + val.getStringValue());
}

defineClass(495, 41, $intern_36, Trace);
_.computeCardinality = function computeCardinality_43(){
    return this.argument[0].getCardinality();
}
;
_.computeSpecialProperties = function computeSpecialProperties_37(){
    return $getSpecialProperties(this.argument[0]);
}
;
_.evaluateItem = function evaluateItem_88(context){
    var label_0, val;
    val = this.argument[0].evaluateItem(context);
    if (loggingIsEnabled()) {
        label_0 = toString__Ljava_lang_String___devirtual$_0(this.argument[1].evaluateAsString(context));
        isTraceEnabled?$notifyListener(this, label_0, val):!val?$info_0(logger_4, label_0 + ': empty sequence'):instanceOf(val, 7)?$info_0(logger_4, label_0 + ': ' + displayTypeName(val) + ': ' + getPath(dynamicCast(val, 7))):$info_0(logger_4, label_0 + ': ' + displayTypeName(val) + ': ' + val.getStringValue());
    }
    return val;
}
;
_.iterate_0 = function iterate_49(context){
    var evalMode, label_0, value_0;
    if (loggingIsEnabled() && isTraceEnabled) {
        label_0 = toString__Ljava_lang_String___devirtual$_0(this.argument[1].evaluateAsString(context));
        evalMode = eagerEvaluationMode(this.argument[0]);
        value_0 = evaluate(this.argument[0], evalMode, context);
        $notifyListener(this, label_0, value_0);
        return value_0.iterate();
    }
    else {
        return loggingIsEnabled()?new Trace$TracingIterator(this, this.argument[0].iterate_0(context), toString__Ljava_lang_String___devirtual$_0(this.argument[1].evaluateAsString(context))):this.argument[0].iterate_0(context);
    }
}
;
_.newInstance = function newInstance_61(){
    return new Trace;
}
;
_.preEvaluate = function preEvaluate_12(visitor){
    return this;
}
;
var logger_4;
var Lclient_net_sf_saxon_ce_functions_Trace_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Trace', 495, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function Trace$TracingIterator(this$0, base, label_0){
    this.this$01 = this$0;
    this.base = base;
    this.label_0 = label_0;
}

defineClass(496, 1, $intern_18, Trace$TracingIterator);
_.getAnother = function getAnother_23(){
    return new Trace$TracingIterator(this.this$01, this.base.getAnother(), this.label_0);
}
;
_.next_0 = function next_18(){
    var n;
    n = this.base.next_0();
    if (!n) {
        this.empty && traceItem(null, this.label_0);
    }
    else {
        traceItem(n, this.label_0 + ' [' + ++this.pos + ']');
        this.empty = false;
    }
    return n;
}
;
_.empty = true;
_.pos = 0;
var Lclient_net_sf_saxon_ce_functions_Trace$TracingIterator_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Trace/TracingIterator', 496, Ljava_lang_Object_2_classLit);
function Translate(){
    SystemFunction.call(this);
}

defineClass(493, 41, $intern_36, Translate);
_.evaluateItem = function evaluateItem_89(context){
    var a1, a2, a3, ch_0, i_0, j, length1, length2, sb, sv1, sv2, sv3;
    sv1 = dynamicCast(this.argument[0].evaluateItem(context), 12);
    if (!sv1) {
        return $clinit_StringValue() , EMPTY_STRING;
    }
    sv2 = dynamicCast(this.argument[1].evaluateItem(context), 12);
    sv3 = dynamicCast(this.argument[2].evaluateItem(context), 12);
    a1 = expand_0(sv1.value_0);
    a2 = expand_0(sv2.value_0);
    a3 = expand_0(sv3.value_0);
    length1 = a1.length;
    length2 = a2.length;
    sb = new FastStringBuffer(length1);
    inputLoop: for (i_0 = 0; i_0 < length1; i_0++) {
        ch_0 = a1[i_0];
        for (j = 0; j < length2; j++) {
            if (a2[j] == ch_0) {
                j < a3.length && $appendWideChar(sb, a3[j]);
                continue inputLoop;
            }
        }
        $appendWideChar(sb, ch_0);
    }
    return $clinit_StringValue() , sb.used == 0?EMPTY_STRING:new StringValue_0(sb);
}
;
_.newInstance = function newInstance_62(){
    return new Translate;
}
;
var Lclient_net_sf_saxon_ce_functions_Translate_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'Translate', 493, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $getAbsoluteURI(href_0, baseURI){
    var absoluteURI, err;
    try {
        absoluteURI = makeAbsolute(href_0, baseURI);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 51)) {
            err = $e0;
            throw new XPathException_2(err.detailMessage, 'XTDE1170');
        }
        else 
            throw unwrap($e0);
    }
    if (absoluteURI.m_fragment != null) {
        throw new XPathException_2('URI for unparsed-text() must not contain a fragment identifier', 'XTDE1170');
    }
    return absoluteURI;
}

function $readFile(href_0, baseURI){
    var absoluteURI, e;
    absoluteURI = $getAbsoluteURI(href_0, baseURI);
    try {
        return makeHTTPRequest($toString_1(absoluteURI));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            e = $e0;
            throw new XPathException_5(e);
        }
        else 
            throw unwrap($e0);
    }
}

function UnparsedText(operation){
    SystemFunction.call(this);
    this.operation = operation;
}

defineClass(403, 41, $intern_36, UnparsedText);
_.checkArguments = function checkArguments_15(visitor){
    if (this.expressionBaseURI == null) {
        $checkArguments(this, visitor);
        this.expressionBaseURI = visitor.staticContext.getBaseURI();
    }
}
;
_.computeSpecialProperties = function computeSpecialProperties_38(){
    return $computeSpecialProperties_3(this) & $intern_38;
}
;
_.evaluateItem = function evaluateItem_90(context){
    var content_0, err, href_0, hrefVal, result;
    try {
        hrefVal = dynamicCast(this.argument[0].evaluateItem(context), 12);
        if (!hrefVal) {
            return null;
        }
        href_0 = dynamicCastToString(hrefVal.value_0 = toString__Ljava_lang_String___devirtual$_0(hrefVal.value_0));
        this.argument.length == 2 && this.argument[1].evaluateItem(context).getStringValue();
        content_0 = $readFile(href_0, this.expressionBaseURI);
        result = new StringValue_0(content_0);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            if (this.operation == 1) {
                return $clinit_BooleanValue() , FALSE_0;
            }
            else {
                !err.errorCode && (err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTDE1170'));
                    throw err;
            }
        }
        else 
            throw unwrap($e0);
    }
    switch (this.operation) {
        case 1:
            return $clinit_BooleanValue() , TRUE_0;
        case 0:
            return result;
        default:throw new UnsupportedOperationException_0(this.operation + '');
    }
}
;
_.newInstance = function newInstance_63(){
    return new UnparsedText(this.operation);
}
;
_.preEvaluate = function preEvaluate_13(visitor){
    return this;
}
;
_.expressionBaseURI = null;
var Lclient_net_sf_saxon_ce_functions_UnparsedText_2_classLit = createForClass('client.net.sf.saxon.ce.functions', 'UnparsedText', 403, Lclient_net_sf_saxon_ce_functions_SystemFunction_2_classLit);
function $get(this$static, bit){
    var n;
    n = bit >> 5;
    if (n < 0 || n >= this$static.words.length) {
        return false;
    }
    return (this$static.words[n] & 1 << (bit & 31)) != 0;
}

function $set(this$static, bit){
    var n;
    n = bit >> 5;
    this$static.words[n] |= 1 << (bit & 31);
}

function BitSet(){
    this.words = initDim(I_classLit, $intern_4, 0, 4001, 7, 1);
}

defineClass(518, 1, {}, BitSet);
var Lclient_net_sf_saxon_ce_functions_codenorm_BitSet_2_classLit = createForClass('client.net.sf.saxon.ce.functions.codenorm', 'BitSet', 518, Ljava_lang_Object_2_classLit);
function $internalCompose(target){
    var ch_0, chClass, compPos, composite, decompPos, lastClass, oldLen, starterCh, starterPos;
    starterPos = 0;
    starterCh = target.string.charCodeAt(0);
    compPos = 1;
    if ($intern_48 <= starterCh && starterCh <= $intern_49) {
        starterCh = ((starterCh & $intern_2) - $intern_48) * $intern_40 + (target.string.charCodeAt(1) - $intern_50) + $intern_34;
        ++compPos;
    }
    lastClass = $getCanonicalClass(data_1, starterCh);
    lastClass != 0 && (lastClass = 256);
    oldLen = target.string.length;
    for (decompPos = compPos; decompPos < target.string.length;) {
        ch_0 = $charAt_0(target, decompPos++);
        $intern_48 <= ch_0 && ch_0 <= $intern_49 && (ch_0 = ((ch_0 & $intern_2) - $intern_48) * $intern_40 + ($charAt_0(target, decompPos++) - $intern_50) + $intern_34);
        chClass = $getCanonicalClass(data_1, ch_0);
        composite = $getPairwiseComposition(data_1, starterCh, ch_0);
        if (composite != $intern_2 && (lastClass < chClass || lastClass == 0)) {
            setCharAt(target, starterPos, composite);
            starterCh = composite;
        }
        else {
            if (chClass == 0) {
                starterPos = compPos;
                starterCh = ch_0;
            }
            lastClass = chClass;
            setCharAt(target, compPos, ch_0);
            if (target.string.length != oldLen) {
                decompPos += target.string.length - oldLen;
                oldLen = target.string.length;
            }
            compPos += ch_0 < $intern_34?1:2;
        }
    }
    $setLength_0(target, compPos);
}

function $internalDecompose(this$static, source, target){
    var buffer, canonical, ch_0, ch2, ch32, chClass, chars, high, i_0, j, k_0, low, step;
    buffer = new StringBuffer_0;
    canonical = (this$static.form_0 & 1) == 0;
    for (i_0 = 0; i_0 < source.length;) {
        $setLength_0(buffer, 0);
        ch32 = $charAt_1(source, i_0++);
        if ($intern_48 <= ch32 && ch32 <= $intern_49) {
            low = $charAt_1(source, i_0++);
            ch32 = ((ch32 & $intern_2) - $intern_48) * $intern_40 + (low - $intern_50) + $intern_34;
        }
        $getRecursiveDecomposition(data_1, canonical, ch32, buffer);
        for (j = 0; j < buffer.string.length;) {
            ch_0 = $charAt_0(buffer, j++);
            if ($intern_48 <= ch_0 && ch_0 <= $intern_49) {
                low = $charAt_0(buffer, j++);
                ch_0 = ((ch_0 & $intern_2) - $intern_48) * $intern_40 + (low - $intern_50) + $intern_34;
            }
            chClass = $getCanonicalClass(data_1, ch_0);
            k_0 = target.string.length;
            if (chClass != 0) {
                while (k_0 > 0) {
                    step = 1;
                    ch2 = $charAt_1(target.string, k_0 - 1);
                    if ((ch2 & 63488) == $intern_48) {
                        step = 2;
                        high = $charAt_1(target.string, k_0 - 2);
                        ch2 = (high - $intern_48) * $intern_40 + ((ch2 & $intern_2) - $intern_50) + $intern_34;
                    }
                    if ($getCanonicalClass(data_1, ch2) <= chClass)
                        break;
                    k_0 -= step;
                }
            }
            if (ch_0 < $intern_34) {
                $insert_0(target, k_0, String.fromCharCode(ch_0 & $intern_2));
            }
            else {
                chars = initValues(getClassLiteralForArray(C_classLit, 1), $intern_9, 0, 7, [(ch_0 - $intern_34 >> 10) + $intern_48 & $intern_2, (ch_0 - $intern_34 & $intern_59) + $intern_50 & $intern_2]);
                $insert_0(target, k_0, __valueOf(chars, 0, chars.length));
            }
        }
    }
}

function $normalize(this$static, source){
    return $normalize_0(this$static, source, new StringBuffer_0(source.length + 8));
}

function $normalize_0(this$static, source, target){
    if (this$static.form_0 == 8 || source.length == 0) {
        return new StringBuffer_1(source);
    }
    $internalDecompose(this$static, source, target);
    (this$static.form_0 & 2) != 0 && $internalCompose(target);
    return target;
}

function Normalizer(form_0, config){
    this.form_0 = form_0;
    !data_1 && (data_1 = build(config));
}

function setCharAt(target, offset, ch32){
    if (ch32 < $intern_34) {
        if (isHighSurrogate($charAt_1(target.string, offset))) {
            $setCharAt(target, offset, ch32 & $intern_2);
            target.string = $substring_1(target.string, 0, offset + 1) + '' + $substring_0(target.string, offset + 1 + 1);
        }
        else {
            $setCharAt(target, offset, ch32 & $intern_2);
        }
    }
    else {
        if (isHighSurrogate($charAt_1(target.string, offset))) {
            $setCharAt(target, offset, (ch32 - $intern_34 >> 10) + $intern_48 & $intern_2);
            $setCharAt(target, offset + 1, (ch32 - $intern_34 & $intern_59) + $intern_50 & $intern_2);
        }
        else {
            $setCharAt(target, offset, (ch32 - $intern_34 >> 10) + $intern_48 & $intern_2);
            $insert_0(target, offset + 1, String.fromCharCode((ch32 - $intern_34 & $intern_59) + $intern_50 & $intern_2));
        }
    }
}

defineClass(792, 1, {}, Normalizer);
_.form_0 = 0;
var data_1 = null;
var Lclient_net_sf_saxon_ce_functions_codenorm_Normalizer_2_classLit = createForClass('client.net.sf.saxon.ce.functions.codenorm', 'Normalizer', 792, Ljava_lang_Object_2_classLit);
function $getCanonicalClass(this$static, ch_0){
    var i_0;
    i_0 = dynamicCast($get_0(this$static.canonicalClass, valueOf(ch_0)), 83);
    return !i_0?0:i_0.value_0;
}

function $getPairwiseComposition(this$static, first, second){
    var i_0;
    if (first < 0 || first > 1114111 || second < 0 || second > 1114111)
        return $intern_2;
    i_0 = dynamicCast($get_0(this$static.compose, valueOf(first << 16 | second)), 83);
    return !i_0?$intern_2:i_0.value_0 & $intern_2;
}

function $getRecursiveDecomposition(this$static, canonical, ch_0, buffer){
    var decomp, i_0;
    decomp = dynamicCastToString($get_0(this$static.decompose, valueOf(ch_0)));
    if (decomp != null && !(canonical && $get(this$static.isCompatibility, ch_0))) {
        for (i_0 = 0; i_0 < decomp.length; ++i_0) {
            $getRecursiveDecomposition(this$static, canonical, decomp.charCodeAt(i_0), buffer);
        }
    }
    else {
        if (ch_0 < $intern_34) {
            $append_5(buffer, ch_0 & $intern_2);
        }
        else {
            $append_5(buffer, (ch_0 - $intern_34 >> 10) + $intern_48 & $intern_2);
            $append_5(buffer, (ch_0 - $intern_34 & $intern_59) + $intern_50 & $intern_2);
        }
    }
}

function NormalizerData(canonicalClass, decompose, compose, isCompatibility){
    this.canonicalClass = canonicalClass;
    this.decompose = decompose;
    this.compose = compose;
    this.isCompatibility = isCompatibility;
}

defineClass(812, 1, {}, NormalizerData);
var Lclient_net_sf_saxon_ce_functions_codenorm_NormalizerData_2_classLit = createForClass('client.net.sf.saxon.ce.functions.codenorm', 'NormalizerData', 812, Ljava_lang_Object_2_classLit);
function build(config){
    var canonicalClass, canonicalClassKeys, canonicalClassValues, compose, decompose, decompositionKeys, decompositionValues, doc, isCompatibility, isExcluded, item_0, iter;
    doc = $buildDocument(config, 'normalizationData.xml');
    isExcluded = new BitSet;
    isCompatibility = new BitSet;
    canonicalClassKeys = null;
    canonicalClassValues = null;
    decompositionKeys = null;
    decompositionValues = null;
    iter = $iterateAxis_0(doc, 4, ($clinit_NodeKindTest() , ELEMENT));
    while (true) {
        item_0 = dynamicCast(iter.next_0(), 7);
        if (!item_0) {
            break;
        }
        $equals_5(item_0.getLocalPart(), 'CanonicalClassKeys')?(canonicalClassKeys = item_0):$equals_5(item_0.getLocalPart(), 'CanonicalClassValues')?(canonicalClassValues = item_0):$equals_5(item_0.getLocalPart(), 'DecompositionKeys')?(decompositionKeys = item_0):$equals_5(item_0.getLocalPart(), 'DecompositionValues')?(decompositionValues = item_0):$equals_5(item_0.getLocalPart(), 'ExclusionList')?readExclusionList(item_0.getStringValue(), isExcluded):$equals_5(item_0.getLocalPart(), 'CompatibilityList') && readCompatibilityList(item_0.getStringValue(), isCompatibility);
    }
    canonicalClass = new HashMap_0(400);
    readCanonicalClassTable(canonicalClassKeys.getStringValue(), canonicalClassValues.getStringValue(), canonicalClass);
    decompose = new HashMap_0(18000);
    compose = new HashMap_0(15000);
    readDecompositionTable(decompositionKeys.getStringValue(), decompositionValues.getStringValue(), decompose, compose, isExcluded, isCompatibility);
    return new NormalizerData(canonicalClass, decompose, compose, isCompatibility);
}

function readCanonicalClassTable(keyString, valueString, canonicalClasses){
    var clss, i_0, k_0, keys_0, repeat, star, tok, tok$iterator, tok$iterator0, value_0;
    keys_0 = new ArrayList_0(5000);
    for (tok$iterator0 = new AbstractList$IteratorImpl(tokenize(keyString)); tok$iterator0.i < tok$iterator0.this$01_0.size_1();) {
        tok = (checkCriticalElement(tok$iterator0.i < tok$iterator0.this$01_0.size_1()) , dynamicCastToString(tok$iterator0.this$01_0.get_1(tok$iterator0.last = tok$iterator0.i++)));
        value_0 = __parseAndValidateInt(tok, 32);
        $add_16(keys_0, valueOf(value_0));
    }
    k_0 = 0;
    for (tok$iterator = new AbstractList$IteratorImpl(tokenize(valueString)); tok$iterator.i < tok$iterator.this$01_0.size_1();) {
        tok = (checkCriticalElement(tok$iterator.i < tok$iterator.this$01_0.size_1()) , dynamicCastToString(tok$iterator.this$01_0.get_1(tok$iterator.last = tok$iterator.i++)));
        repeat = 1;
        star = $indexOf_3(tok, fromCodePoint(42));
        if (star < 0) {
            clss = __parseAndValidateInt(tok, 32);
        }
        else {
            repeat = __parseAndValidateInt(tok.substr(0, star), 10);
            clss = __parseAndValidateInt(__substr(tok, star + 1, tok.length - (star + 1)), 32);
        }
        for (i_0 = 0; i_0 < repeat; i_0++) {
            $put_0(canonicalClasses, valueOf(dynamicCast($get_1(keys_0, k_0++), 83).value_0), valueOf(clss));
        }
    }
}

function readCompatibilityList(s, isCompatible){
    var tok, tok$iterator, value_0;
    for (tok$iterator = new AbstractList$IteratorImpl(tokenize(s)); tok$iterator.i < tok$iterator.this$01_0.size_1();) {
        tok = (checkCriticalElement(tok$iterator.i < tok$iterator.this$01_0.size_1()) , dynamicCastToString(tok$iterator.this$01_0.get_1(tok$iterator.last = tok$iterator.i++)));
        value_0 = __parseAndValidateInt(tok, 32);
        $set(isCompatible, value_0);
    }
}

function readDecompositionTable(decompositionKeyString, decompositionValuesString, decompose, compose, isExcluded, isCompatibility){
    var SIndex, TIndex, c, code_0, first, h0, h1, h2, h3, k_0, key, pair, second, tok, tok$iterator, tok$iterator0, value_0, values;
    k_0 = 0;
    values = new ArrayList_0($intern_51);
    for (tok$iterator0 = new AbstractList$IteratorImpl(tokenize(decompositionValuesString)); tok$iterator0.i < tok$iterator0.this$01_0.size_1();) {
        tok = (checkCriticalElement(tok$iterator0.i < tok$iterator0.this$01_0.size_1()) , dynamicCastToString(tok$iterator0.this$01_0.get_1(tok$iterator0.last = tok$iterator0.i++)));
        value_0 = '';
        for (c = 0; c < tok.length;) {
            h0 = $charAt_1(tok, c++);
            h1 = $charAt_1(tok, c++);
            h2 = $charAt_1(tok, c++);
            h3 = $charAt_1(tok, c++);
            code_0 = ($indexOf_3('0123456789abcdef', fromCodePoint(h0)) << 12) + ($indexOf_3('0123456789abcdef', fromCodePoint(h1)) << 8) + ($indexOf_3('0123456789abcdef', fromCodePoint(h2)) << 4) + $indexOf_3('0123456789abcdef', fromCodePoint(h3));
            value_0 += String.fromCharCode(code_0 & $intern_2);
        }
        setCheck(values.array, values.array.length, value_0);
    }
    for (tok$iterator = new AbstractList$IteratorImpl(tokenize(decompositionKeyString)); tok$iterator.i < tok$iterator.this$01_0.size_1();) {
        tok = (checkCriticalElement(tok$iterator.i < tok$iterator.this$01_0.size_1()) , dynamicCastToString(tok$iterator.this$01_0.get_1(tok$iterator.last = tok$iterator.i++)));
        key = __parseAndValidateInt(tok, 32);
        value_0 = dynamicCastToString($get_1(values, k_0++));
        $put_0(decompose, valueOf(key), value_0);
        if (!$get(isCompatibility, key) && !$get(isExcluded, key)) {
            first = 0;
            second = value_0.charCodeAt(0);
            if (value_0.length > 1) {
                first = second;
                second = value_0.charCodeAt(1);
            }
            pair = first << 16 | second;
            $put_0(compose, valueOf(pair), valueOf(key));
        }
    }
    for (SIndex = 0; SIndex < 11172; ++SIndex) {
        TIndex = SIndex % 28;
        if (TIndex != 0) {
            first = 44032 + SIndex - TIndex & $intern_2;
            second = 4519 + TIndex & $intern_2;
        }
        else {
            first = 4352 + ~~(SIndex / 588) & $intern_2;
            second = 4449 + ~~(SIndex % 588 / 28) & $intern_2;
        }
        pair = first << 16 | second;
        key = SIndex + 44032;
        $put_0(decompose, valueOf(key), valueOf_1(first) + charToString(second));
        $put_0(compose, valueOf(pair), valueOf(key));
    }
}

function readExclusionList(s, isExcluded){
    var tok, tok$iterator, value_0;
    for (tok$iterator = new AbstractList$IteratorImpl(tokenize(s)); tok$iterator.i < tok$iterator.this$01_0.size_1();) {
        tok = (checkCriticalElement(tok$iterator.i < tok$iterator.this$01_0.size_1()) , dynamicCastToString(tok$iterator.this$01_0.get_1(tok$iterator.last = tok$iterator.i++)));
        value_0 = __parseAndValidateInt(tok, 32);
        $set(isExcluded, value_0);
    }
}

function $evaluateJsFunction(script, context){
    var fnName, fnScript, fs, item_0, jexc, jsArgs, result, target, wnd, doc, scriptElement;
    ++injectCount;
    fnName = 'fnName' + injectCount;
    script = $trim(script);
    fnScript = 'function ' + fnName + '() { return ' + script + '; }';
    item_0 = new JSObjectValue($wnd);
    target = dynamicCastJso(convertToJavaScript(item_0));
    fs = new ScriptInjector$FromString(fnScript);
    fs.window_0 = target;
    wnd = !fs.window_0?($clinit_ScriptInjector() , window):fs.window_0;
    doc = ($clinit_ScriptInjector() , wnd.document);
    scriptElement = doc.createElement('script');
    nativeSetText(scriptElement, fs.scriptBody);
    (doc.head || doc.getElementsByTagName('head')[0]).appendChild(scriptElement);
    fs.removeTag && (scriptElement.parentNode.removeChild(scriptElement) , undefined);
    jsArgs = new Array(0);
    try {
        result = $getValueFromTypeValuePair(jsCall(target, fnName, jsArgs));
        return convertFromJavaScript(result, context.getConfiguration());
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 119)) {
            jexc = $e0;
            throw new XPathException_0('JavaScriptException: ' + jexc.getDescription() + '\noccurred on evaluating:\n' + script);
        }
        else 
            throw unwrap($e0);
    }
}

function $getValueFromTypeValuePair(pair){
    var type_0;
    type_0 = dynamicCastToString(pair['type']);
    return $equals_5('number', type_0)?new Double(pair['value']):$equals_5('boolean', type_0)?($clinit_Boolean() , pair['value']?TRUE_1:FALSE_1):pair['value'];
}

function IXSLFunction(localName, arguments_0){
    FunctionCall.call(this);
    this.logger = (new LoggerImplRegular , $ensureLogger(getLogManager(), 'IXSLFunction'));
    this.localName_0 = localName;
    $setArguments(this, arguments_0);
}

function convertFromJavaScript(jsValue, config){
    var doc, docWrapper, htmlDoc, htmlNode, jsDocType, jsObj, nodeType, page, out;
    if (jsValue == null) {
        return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
    }
    else if (isJavaString(jsValue)) {
        return makeIterator_0(new StringValue_0(dynamicCastToString(jsValue)));
    }
    else if (instanceOf(jsValue, 128)) {
        return makeIterator_0(new DoubleValue(dynamicCast(jsValue, 128).value_0));
    }
    else if (instanceOf(jsValue, 116)) {
        return makeIterator_0(($clinit_BooleanValue() , dynamicCast(jsValue, 116).value_0?TRUE_0:FALSE_0));
    }
    else if (!instanceOfJso(jsValue)) {
        return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
    }
    jsObj = dynamicCastJso(jsValue);
    nodeType = (out = jsObj.nodeType , out == null?-1:out);
    if (nodeType == -1) {
        return jsObj.length != undefined && jsObj.length > 1?new JsArrayIterator(jsObj, config):makeIterator_0(new JSObjectValue(jsObj));
    }
    page = dynamicCastJso(jsValue).ownerDocument;
    if (!page) {
        doc = dynamicCastJso(jsValue);
        jsDocType = doc == $doc?2:3;
        docWrapper = new HTMLDocumentWrapper(doc, doc.URL, config, jsDocType);
        return new SingletonIterator(docWrapper);
    }
    else {
        jsDocType = page == $doc?2:3;
        htmlDoc = new HTMLDocumentWrapper(page, page.URL, config, jsDocType);
        htmlNode = $wrap(htmlDoc, dynamicCastJso(jsValue));
        return !htmlNode?($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1):new SingletonIterator(htmlNode);
    }
}

function convertSequenceToArray(val, seqLength){
    var i_0, item_0, iterator, jsItems, jsObject;
    jsItems = new Array(seqLength);
    iterator = val.iterate();
    i_0 = 0;
    while (true) {
        item_0 = iterator.next_0();
        if (!item_0) {
            break;
        }
        jsObject = convertToJavaScript(item_0);
        jsSetArrayItem(jsItems, i_0, jsObject);
        ++i_0;
    }
    return jsItems;
}

function convertToJavaScript(val){
    var seqLength;
    if (!val || instanceOf(val, 141)) {
        return null;
    }
    if (instanceOf(val, 15)) {
        if (instanceOf(val, 12)) {
            return $getPrimitiveStringValue(dynamicCast(val, 12));
        }
        else if (instanceOf(val, 90)) {
            return $clinit_Boolean() , dynamicCast(val, 90).value_0?TRUE_1:FALSE_1;
        }
        else if (instanceOf(val, 25)) {
            return new Double(dynamicCast(val, 25).getDoubleValue());
        }
        else if (instanceOf(val, 94)) {
            return dynamicCast(val, 94).node;
        }
        else if (instanceOf(val, 160)) {
            return dynamicCast(val, 160).jsObject;
        }
        else {
            throw new XPathException_0('Cannot convert ' + val.___clazz$ + ' to Javascript object');
        }
    }
    else {
        seqLength = val.getLength();
        return seqLength == 0?null:seqLength == 1?convertToJavaScript(val.itemAt(0)):convertSequenceToArray(val, seqLength);
    }
}

function jsArray(length_0){
    return new Array(length_0);
}

function jsCall(target, member, arguments_0){
    var v = target[member].apply(target, arguments_0);
    return {type:typeof v, value:v};
}

function jsSetArrayItem(array, index_0, value_0){
    array[index_0] = value_0;
}

function jsSplitPropertyTypeAndValue(target, member){
    var props = member.split('.');
    var v = target;
    for (var count = 0; count < props.length; count++) {
        v = v[props[count]];
    }
    return {type:typeof v, value:v};
}

function setProperty(target, member, value_0){
    var props = member.split('.');
    var newTarget = target;
    for (var count = 0; count < props.length - 1; count++) {
        newTarget = newTarget[props[count]];
    }
    newTarget[props[props.length - 1]] = value_0;
}

defineClass(217, 20, {6:1, 20:1, 217:1}, IXSLFunction);
_.checkArguments = function checkArguments_16(visitor){
}
;
_.computeCardinality = function computeCardinality_44(){
    return $intern_12;
}
;
_.computeSpecialProperties = function computeSpecialProperties_39(){
    return $intern_41;
}
;
_.getFunctionName = function getFunctionName_1(){
    return new StructuredQName('http://saxonica.com/ns/interactiveXSLT', '', this.localName_0);
}
;
_.getItemType = function getItemType_70(){
    return $clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2;
}
;
_.iterate_0 = function iterate_50(context){
    var arg, data_0, doRetry, e, event_0, i_0, i0, item_0, itemVal, jsArgs, jsObj, lastDot, method, node, pipe, property, reducer, result, script, target, val, writer, xe;
    try {
        if ($equals_5(this.localName_0, 'window')) {
            item_0 = new JSObjectValue($wnd);
            return new SingletonIterator(item_0);
        }
        else if ($equals_5(this.localName_0, 'eval')) {
            script = toString__Ljava_lang_String___devirtual$_0(this.argument[0].evaluateAsString(context));
            return $evaluateJsFunction(script, context);
        }
        else if ($equals_5(this.localName_0, 'call')) {
            itemVal = this.argument[0].evaluateItem(context);
            target = dynamicCastJso(convertToJavaScript(itemVal));
            if (target) {
                method = toString__Ljava_lang_String___devirtual$_0(this.argument[1].evaluateAsString(context));
                lastDot = $lastIndexOf(method, fromCodePoint(46));
                if (lastDot > 0 && lastDot + 1 < method.length) {
                    target = dynamicCastJso($getValueFromTypeValuePair(jsSplitPropertyTypeAndValue(target, method.substr(0, lastDot))));
                    method = __substr(method, lastDot + 1, method.length - (lastDot + 1));
                }
                jsArgs = jsArray(this.argument.length - 2);
                for (i0 = 2; i0 < this.argument.length; i0++) {
                    val = makeSequenceExtent(this.argument[i0].iterate_0(context));
                    jsSetArrayItem(jsArgs, i0 - 2, convertToJavaScript(val));
                }
                try {
                    jsObj = jsCall(target, method, jsArgs);
                    result = $getValueFromTypeValuePair(jsObj);
                    return convertFromJavaScript(result, context.getConfiguration());
                }
                catch ($e1) {
                    $e1 = wrap_0($e1);
                    if (instanceOf($e1, 19)) {
                        doRetry = false;
                        for (i_0 = 0; i_0 < this.argument.length - 2; i_0++) {
                            if (jsArgs[i_0] == null) {
                                jsSetArrayItem(jsArgs, i_0, new Array(0));
                                doRetry = true;
                            }
                        }
                        if (doRetry) {
                            try {
                                result = $getValueFromTypeValuePair(jsCall(target, method, jsArgs));
                                return convertFromJavaScript(result, context.getConfiguration());
                            }
                            catch ($e0) {
                                $e0 = wrap_0($e0);
                                if (!instanceOf($e0, 19))
                                    throw unwrap($e0);
                            }
                        }
                        throw new XPathException_0("JavaScriptException in ixsl:call(): Object does not support property or method '" + method + "' with " + (this.argument.length - 2) + ' argument(s).');
                    }
                    else 
                        throw unwrap($e1);
                }
            }
            else {
                throw new XPathException_0('JavaScriptException in ixsl:call(): Call target object is null or undefined');
            }
        }
        else if ($equals_5(this.localName_0, 'get')) {
            itemVal = this.argument[0].evaluateItem(context);
            target = dynamicCastJso(convertToJavaScript(itemVal));
            if (target) {
                property = toString__Ljava_lang_String___devirtual$_0(this.argument[1].evaluateAsString(context));
                try {
                    result = $getValueFromTypeValuePair(jsSplitPropertyTypeAndValue(target, property));
                }
                catch ($e2) {
                    $e2 = wrap_0($e2);
                    if (instanceOf($e2, 19)) {
                        throw new XPathException_0('JavaScriptException in ixsl:get() for property: ' + property);
                    }
                    else 
                        throw unwrap($e2);
                }
                return convertFromJavaScript(result, context.getConfiguration());
            }
            else {
                throw new XPathException_0('JavaScriptException in ixsl:get(): Get target object is null or undefined');
            }
        }
        else if ($equals_5(this.localName_0, 'page')) {
            return makeIterator_0($getHostPage(context.getConfiguration()));
        }
        else if ($equals_5(this.localName_0, 'source')) {
            return makeIterator_0(context.getController().sourceNode);
        }
        else if ($equals_5(this.localName_0, 'event')) {
            event_0 = dynamicCastJso($getUserData(context.getController(), 'Saxon-CE', 'current-event'));
            return makeIterator_0(new JSObjectValue(event_0));
        }
        else if ($equals_5(this.localName_0, 'parse-xml')) {
            data_0 = toString__Ljava_lang_String___devirtual$_0(this.argument[0].evaluateAsString(context));
            return convertFromJavaScript(parseXML(data_0), context.getConfiguration());
        }
        else if ($equals_5(this.localName_0, 'serialize-xml')) {
            arg = this.argument[0].evaluateItem(context);
            if (instanceOf(arg, 7)) {
                if (instanceOf(arg, 94)) {
                    node = dynamicCast(arg, 94).node;
                }
                else {
                    writer = new HTMLWriter;
                    pipe = $makePipelineConfiguration_0(context.getController());
                    writer.pipe = pipe;
                    reducer = new NamespaceReducer;
                    $setUnderlyingReceiver(reducer, writer);
                    $setPipelineConfiguration_0(reducer, pipe);
                    node = createDocument(dynamicCast(arg, 7).getBaseURI());
                    $setNode(writer, node);
                    copy_12(dynamicCast(arg, 7), reducer, 0);
                }
                return makeIterator_0(new StringValue_0(serializeXML(node)));
            }
            else {
                return makeIterator_0(new StringValue_0(arg.getStringValue()));
            }
        }
        else {
            $warning_0(this.logger, "No such IXSL function: '" + this.localName_0 + "' - empty sequence returned");
            return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
        }
    }
    catch ($e3) {
        $e3 = wrap_0($e3);
        if (instanceOf($e3, 4)) {
            e = $e3;
            $maybeSetLocation(e, $getSourceLocator(this));
            throw e;
        }
        else if (instanceOf($e3, 19)) {
            e = $e3;
            xe = new XPathException_0('Exception in ixsl:' + this.localName_0 + '() ' + e.getMessage());
            $maybeSetLocation(xe, $getSourceLocator(this));
            throw xe;
        }
        else 
            throw unwrap($e3);
    }
}
;
_.preEvaluate = function preEvaluate_14(visitor){
    return this;
}
;
var injectCount = 0;
var Lclient_net_sf_saxon_ce_js_IXSLFunction_2_classLit = createForClass('client.net.sf.saxon.ce.js', 'IXSLFunction', 217, Lclient_net_sf_saxon_ce_expr_FunctionCall_2_classLit);
function $hasFunctionSignature_0(functionName){
    var uri_0;
    uri_0 = $getNamespaceURI(functionName);
    if ($equals_5('http://saxonica.com/ns/interactiveXSLT', uri_0)) {
        return true;
    }
    else if ($equals_5('http://saxonica.com/ns/globalJS', uri_0)) {
        return exists_0(valueOf_3(functionName.content_0, functionName.localNameStart, functionName.prefixStart - functionName.localNameStart));
    }
    return false;
}

function IXSLFunctionLibrary(){
}

function exists_0(member){
    return !!$wnd[member];
}

defineClass(651, 1, $intern_60, IXSLFunctionLibrary);
_.bind_0 = function bind_3(functionName, staticArgs, env, container){
    var args, local, uri_0;
    uri_0 = $getNamespaceURI(functionName);
    if ($equals_5('http://saxonica.com/ns/interactiveXSLT', uri_0)) {
        if (!$hasFunctionSignature_0(functionName)) {
            return null;
        }
        local = valueOf_3(functionName.content_0, functionName.localNameStart, functionName.prefixStart - functionName.localNameStart);
        return new IXSLFunction(local, staticArgs);
    }
    else if ($equals_5('http://saxonica.com/ns/globalJS', uri_0)) {
        local = valueOf_3(functionName.content_0, functionName.localNameStart, functionName.prefixStart - functionName.localNameStart);
        args = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, staticArgs.length + 2, 0, 1);
        arraycopy(staticArgs, 0, args, 2, staticArgs.length);
        setCheck(args, 0, new IXSLFunction('window', initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, 0, 0, 1)));
        setCheck(args, 1, makeLiteral(new StringValue_0(local)));
        return new IXSLFunction('call', args);
    }
    else {
        return null;
    }
}
;
_.hasFunctionSignature = function hasFunctionSignature_2(functionName, arity_0){
    return $hasFunctionSignature_0(functionName);
}
;
var Lclient_net_sf_saxon_ce_js_IXSLFunctionLibrary_2_classLit = createForClass('client.net.sf.saxon.ce.js', 'IXSLFunctionLibrary', 651, Ljava_lang_Object_2_classLit);
function JSObjectType(){
}

defineClass(793, 1, {166:1}, JSObjectType);
_.getAtomizedItemType = function getAtomizedItemType_0(){
    return null;
}
;
_.getSuperType = function getSuperType(){
    return $clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2;
}
;
_.matchesItem = function matchesItem(item_0){
    return instanceOf(item_0, 160);
}
;
var Lclient_net_sf_saxon_ce_js_JSObjectType_2_classLit = createForClass('client.net.sf.saxon.ce.js', 'JSObjectType', 793, Ljava_lang_Object_2_classLit);
function JSObjectValue(jsObject){
    this.jsObject = jsObject;
}

defineClass(160, 1, {160:1, 15:1, 14:1}, JSObjectValue);
_.getLength = function getLength_0(){
    return 1;
}
;
_.getStringValue = function getStringValue_1(){
    return toStringSimple(this.jsObject);
}
;
_.getTypedValue = function getTypedValue_1(){
    return new StringValue_0(toStringSimple(this.jsObject));
}
;
_.itemAt = function itemAt_0(n){
    return n == 0?this:null;
}
;
_.iterate = function iterate_51(){
    return new SingletonIterator(this);
}
;
var Lclient_net_sf_saxon_ce_js_JSObjectValue_2_classLit = createForClass('client.net.sf.saxon.ce.js', 'JSObjectValue', 160, Ljava_lang_Object_2_classLit);
function $getLevel(this$static){
    if (this$static.level_0) {
        return this$static.level_0;
    }
    return $clinit_Level() , ALL;
}

function $setFormatter(this$static, newFormatter){
    this$static.formatter = newFormatter;
}

function $setLevel(this$static, newLevel){
    this$static.level_0 = newLevel;
}

defineClass(199, 1, $intern_62);
var Ljava_util_logging_Handler_2_classLit = createForClass('java.util.logging', 'Handler', 199, Ljava_lang_Object_2_classLit);
function $debug(message){
    window.console.debug(message);
}

function $isSupported(){
    return !!window.console;
}

function $publish(this$static, record){
    var m, msg, msgText, val;
    $getLevel(this$static);
    if ($intern_58 > record.level_0.intValue()) {
        return;
    }
    val = record.level_0.intValue();
    msgText = record.msg;
    if (val == ($clinit_Level() , $intern_51)) {
        if (eq(this$static.previousMillis, record.millis) || neq(this$static.previousMillis, {l:0, m:0, h:0}) && $equals_5(msgText.substr(0, 5), '[js] ')) {
            return;
        }
        this$static.previousMillis = record.millis;
    }
    (val == 800 || val == 500) && $timeMark(msgText);
    if (val == 300) {
        !finestSb && (finestSb = new StringBuilder);
        $append_10(finestSb, msgText + '\n');
    }
    else {
        msg = this$static.formatter.format_0(record);
        if (val <= 500) {
            isFirebug?$debug(msg):log_1(msg);
        }
        else if (val < 900) {
            window.console.info?window.console.info(msg):window.console.log(msg);
        }
        else if (val < $intern_51) {
            window.console.warn?window.console.warn(msg):window.console.log(msg);
        }
        else {
            if (isTraceEnabled && isDirxml && !!finestSb) {
                if (finestSb.string.length > 0) {
                    m = finestSb.string;
                    finestSb = new StringBuilder;
                    isFirebug?$debug(m):log_1(m);
                }
            }
            window.console.error?window.console.error(msg):window.console.log(msg);
        }
    }
}

function $timeMark(message){
    if ($wnd.console) {
        if ($wnd.console.timeStamp) {
            $wnd.console.timeStamp(message);
            return true;
        }
        else if ($wnd.console.markTimeline) {
            $wnd.console.markTimeline(message);
            return true;
        }
    }
    return false;
}

function GenericLogHandler(){
    $setFormatter(this, new SaxonLogFormatter(false));
    $setLevel(this, ($clinit_Level() , ALL));
    isFirebug = !!(window.console && window.console.firebug);
    isDirxml = isDirxml_0();
    $isSupported();
}

function dumpTrace(){
    if (isTraceEnabled) {
        if (finestSb) {
            isDirxml_0()?logDirxml(finestSb.string):log_1(finestSb.string);
            finestSb = new StringBuilder;
        }
    }
}

function isDirxml_0(){
    return !!(window.console && window.console.dirxml);
}

function log_1(message){
    window.console.log(message);
}

function logDirxml(text_0){
    if (window.DOMParser) {
        parser = new DOMParser;
        xmlDoc = parser.parseFromString(text_0, 'text/xml');
    }
    else {
        xmlDoc = new ActiveXObject('Microsoft.XMLDOM');
        xmlDoc.async = false;
        xmlDoc.loadXML(text_0);
    }
    console.dirxml(xmlDoc);
}

defineClass(649, 199, $intern_62, GenericLogHandler);
_.publish = function publish(record){
    $publish(this, record);
}
;
_.previousMillis = {l:0, m:0, h:0};
var finestSb = null, isDirxml = false, isFirebug = false;
var Lclient_net_sf_saxon_ce_lib_GenericLogHandler_2_classLit = createForClass('client.net.sf.saxon.ce.lib', 'GenericLogHandler', 649, Ljava_util_logging_Handler_2_classLit);
function RuntimeException(){
    Exception.call(this);
}

function RuntimeException_0(message){
    Exception_0.call(this, message);
}

function RuntimeException_1(message, cause){
    Throwable_0.call(this, message, cause);
}

defineClass(35, 19, $intern_63, RuntimeException_0, RuntimeException_1);
var Ljava_lang_RuntimeException_2_classLit = createForClass('java.lang', 'RuntimeException', 35, Ljava_lang_Exception_2_classLit);
function JavaScriptAPIException(message){
    RuntimeException_0.call(this, message);
}

defineClass(361, 35, {361:1, 3:1, 19:1, 35:1, 37:1}, JavaScriptAPIException);
var Lclient_net_sf_saxon_ce_lib_JavaScriptAPIException_2_classLit = createForClass('client.net.sf.saxon.ce.lib', 'JavaScriptAPIException', 361, Ljava_lang_RuntimeException_2_classLit);
function $publish_0(this$static, record){
    var msg;
    $getLevel(this$static);
    if ($intern_58 > record.level_0.intValue()) {
        return;
    }
    msg = this$static.formatter.format_0(record);
    makeCallback(msg, record.level_0.getName(), '' + toString_77(record.millis));
}

function JsLogHandler(){
    $setFormatter(this, new SaxonLogFormatter(true));
    $setLevel(this, ($clinit_Level() , ALL));
}

defineClass(568, 199, $intern_62, JsLogHandler);
_.publish = function publish_0(record){
    $publish_0(this, record);
}
;
var Lclient_net_sf_saxon_ce_lib_JsLogHandler_2_classLit = createForClass('client.net.sf.saxon.ce.lib', 'JsLogHandler', 568, Ljava_util_logging_Handler_2_classLit);
function ListenerLogHandler(){
}

defineClass(525, 199, $intern_62, ListenerLogHandler);
_.publish = function publish_1(record){
    var localLogger, logger;
    logger = (new LoggerImplRegular , $ensureLogger(getLogManager(), ''));
    $removeHandler(logger.impl, this);
    $getHandlers(logger.impl).length;
    addRequiredLogHanders(record);
    localLogger = (new LoggerImplRegular , $ensureLogger(getLogManager(), 'ListenerLogHandler'));
    $log_1(localLogger, ($clinit_Level() , FINE), 'Log handlers added (' + (logHandlerExternal?'includes external)':'internal only)'));
}
;
var Lclient_net_sf_saxon_ce_lib_ListenerLogHandler_2_classLit = createForClass('client.net.sf.saxon.ce.lib', 'ListenerLogHandler', 525, Ljava_util_logging_Handler_2_classLit);
function isReserved(uri_0){
    if (uri_0 == null) {
        return false;
    }
    return $equals_5(uri_0, 'http://www.w3.org/1999/XSL/Transform') || $equals_5(uri_0, 'http://www.w3.org/2005/xpath-functions') || $equals_5(uri_0, 'http://www.w3.org/XML/1998/namespace') || $equals_5(uri_0, 'http://www.w3.org/2001/XMLSchema') || $equals_5(uri_0, 'http://www.w3.org/2001/XMLSchema-instance');
}

defineClass(878, 1, {});
var Ljava_util_logging_Formatter_2_classLit = createForClass('java.util.logging', 'Formatter', 878, Ljava_lang_Object_2_classLit);
function $getRecordInfo(event_0, newline){
    var date, s;
    date = new Date_1(event_0.millis);
    s = new StringBuilder;
    $append_10(s, $toString_5(date));
    s.string += ' ';
    $append_10(s, event_0.loggerName);
    s.string += newline;
    $append_10(s, event_0.level_0.getName());
    s.string += ': ';
    return s.string;
}

function $getStackTraceAsString(e){
    var builder, stream;
    if (!e) {
        return '';
    }
    builder = new StringBuilder;
    stream = new FormatterImpl$1(builder, builder);
    $printStackTrace(e, stream);
    return builder.string;
}

defineClass(879, 878, {});
var Lcom_google_gwt_logging_impl_FormatterImpl_2_classLit = createForClass('com.google.gwt.logging.impl', 'FormatterImpl', 879, Ljava_util_logging_Formatter_2_classLit);
function $clinit_SaxonLogFormatter(){
    $clinit_SaxonLogFormatter = emptyMethod;
    dtf_0 = ($clinit_DateTimeFormat_0() , getFormat($getDateTimeFormatInfo(($clinit_LocaleInfo() , $clinit_LocaleInfo() , instance_3))));
}

function SaxonLogFormatter(showStackTraces){
    $clinit_SaxonLogFormatter();
    this.showStackTraces = showStackTraces;
}

defineClass(444, 879, {}, SaxonLogFormatter);
_.format_0 = function format_0(event_0){
    var message, date, timeString, s;
    message = new StringBuilder;
    $append_10(message, (date = new Date_1(event_0.millis) , timeString = $format_3(dtf_0, date, null) , s = new StringBuilder , s.string += 'SaxonCE.' , $append_10(s, event_0.loggerName) , s.string += ' ' , s.string += timeString , s.string += '\n' , $append_10(s, event_0.level_0.getName()) , s.string += ': ' , s.string));
    $append_10(message, event_0.msg);
    this.showStackTraces && $append_10(message, $getStackTraceAsString(event_0.thrown));
    return message.string;
}
;
_.showStackTraces = false;
var dtf_0;
var Lclient_net_sf_saxon_ce_lib_SaxonLogFormatter_2_classLit = createForClass('client.net.sf.saxon.ce.lib', 'SaxonLogFormatter', 444, Lcom_google_gwt_logging_impl_FormatterImpl_2_classLit);
function $clinit_StandardErrorListener(){
    $clinit_StandardErrorListener = emptyMethod;
    logger_5 = (new LoggerImplRegular , $ensureLogger(getLogManager(), 'StandardErrorListener'));
}

function $error(this$static, exception){
    var message;
    if (exception.hasBeenReported) {
        return;
    }
    !this$static.errorOutput && (this$static.errorOutput = ($clinit_System() , err_0));
    message = 'Error ' + $getLocationMessage(exception) + '\n  ' + wordWrap(getExpandedMessage(exception));
    $log_1(logger_5, ($clinit_Level() , SEVERE), message);
    this$static.errorOutput.println_0(message);
    !!exception && (exception.hasBeenReported = true);
}

function $getLocationMessage(err){
    var loc;
    loc = err.locator;
    while (!loc) {
        if (instanceOf(err.cause, 4)) {
            err = dynamicCast(err.cause, 4);
            loc = err.locator;
        }
        else {
            return '';
        }
    }
    return 'at ' + loc.getLocation();
}

function $makeAnother(this$static){
    var sel;
    sel = new StandardErrorListener;
    sel.errorOutput = this$static.errorOutput;
    return sel;
}

function $setErrorOutput(this$static, writer){
    this$static.errorOutput = writer;
}

function StandardErrorListener(){
    $clinit_StandardErrorListener();
    this.errorOutput = ($clinit_System() , err_0);
}

function abbreviatePath(uri_0){
    $clinit_StandardErrorListener();
    var slash;
    if (uri_0 == null) {
        return null;
    }
    slash = $lastIndexOf(uri_0, fromCodePoint(47));
    return slash >= 0 && slash < uri_0.length - 1?__substr(uri_0, slash + 1, uri_0.length - (slash + 1)):uri_0;
}

function getCodeMessage(qCode){
    var code_0, codeText, q;
    codeText = '';
    if (qCode) {
        code_0 = valueOf_3(qCode.content_0, qCode.localNameStart, qCode.prefixStart - qCode.localNameStart);
        if ($equals_5(code_0.substr(0, 4), 'XTTE')) {
            code_0 = __substr(code_0, 4, code_0.length - 4);
            q = __parseAndValidateInt(code_0, 10);
            switch (q) {
                case 570:
                    codeText = ' The value of a variable must match its declared type';
                    break;
                case 600:
                    codeText = ' Default value of a template paremeter must match its declared type';
                    break;
                case 590:
                    codeText = ' Supplied value of a template parameter must match its declared type';
            }
        }
        else if ($equals_5(code_0.substr(0, 4), 'XPTY')) {
            code_0 = __substr(code_0, 4, code_0.length - 4);
            q = __parseAndValidateInt(code_0, 10);
            switch (q) {
                case 4:
                    codeText = ' The expression value is not consistent with the context in which it appears';
                    break;
                case 18:
                    codeText = ' Last step in path expression contains both nodes and atomic values';
                    break;
                case 19:
                    codeText = ' A path expression step contains an atomic value';
                    break;
                case 20:
                    codeText = ' In an axis step, the context item is not a node';
            }
        }
    }
    return codeText;
}

function getExpandedMessage(err){
    var additionalLocationText, e, message, msg, msgLen, next, qCode;
    qCode = err.errorCode;
    additionalLocationText = err.locationText;
    !qCode && instanceOf(err.cause, 4) && (qCode = dynamicCast(err.cause, 4).errorCode);
    message = '';
    !!qCode && ($equals_5($getNamespaceURI(qCode), 'http://www.w3.org/2005/xqt-errors')?(message = valueOf_3(qCode.content_0, qCode.localNameStart, qCode.prefixStart - qCode.localNameStart)):(message = $getDisplayName_0(qCode)));
    additionalLocationText != null && (message += ' ' + additionalLocationText);
    e = err;
    msgLen = message.length;
    while (true) {
        if (!e) {
            break;
        }
        next = e.getMessage();
        next == null && (next = '');
        $equals_5(next.substr(0, 45), 'client.net.sf.saxon.ce.trans.XPathException: ') && (next = $substring_0(next, next.indexOf(': ') + 2));
        if (!$endsWith(message, next)) {
            !$equals_5('', message) && !$endsWith($trim(message), ':') && (message += ': ');
            message += next;
        }
        if (instanceOf(e, 4)) {
            e = e.cause;
        }
        else {
            break;
        }
    }
    if (loggingIsEnabled()) {
        if (msgLen == message.length) {
            msg = getCodeMessage(qCode);
            msg.length != 0 && (message += ': ' + msg);
        }
    }
    return message;
}

function wordWrap(message){
    var i_0, nl;
    nl = $indexOf_3(message, fromCodePoint(10));
    nl < 0 && (nl = message.length);
    if (nl > 100) {
        i_0 = 90;
        while (message.charCodeAt(i_0) != 32 && i_0 > 0) {
            --i_0;
        }
        return i_0 > 10?message.substr(0, i_0) + '\n  ' + wordWrap(__substr(message, i_0 + 1, message.length - (i_0 + 1))):message;
    }
    else 
        return nl < message.length?message.substr(0, nl) + '\n' + wordWrap(__substr(message, nl + 1, message.length - (nl + 1))):message;
}

defineClass(196, 1, {196:1}, StandardErrorListener);
_.error_0 = function error_1(exception){
    $error(this, exception);
}
;
var logger_5;
var Lclient_net_sf_saxon_ce_lib_StandardErrorListener_2_classLit = createForClass('client.net.sf.saxon.ce.lib', 'StandardErrorListener', 196, Ljava_lang_Object_2_classLit);
function $clinit_AttributeCollection(){
    $clinit_AttributeCollection = emptyMethod;
    EMPTY_ATTRIBUTE_COLLECTION = new AttributeCollection;
}

function $addAttribute(this$static, nameCode, value_0){
    var c2, newsize, v2;
    if (this$static.values == null) {
        this$static.values = initDim(Ljava_lang_String_2_classLit, $intern_8, 2, 5, 4, 1);
        this$static.names = initDim(Lclient_net_sf_saxon_ce_om_StructuredQName_2_classLit, $intern_1, 8, 5, 0, 1);
        this$static.used = 0;
    }
    if (this$static.values.length == this$static.used) {
        newsize = this$static.used == 0?5:this$static.used * 2;
        v2 = initDim(Ljava_lang_String_2_classLit, $intern_8, 2, newsize, 4, 1);
        c2 = initDim(Lclient_net_sf_saxon_ce_om_StructuredQName_2_classLit, $intern_1, 8, newsize, 0, 1);
        arraycopy(this$static.values, 0, v2, 0, this$static.used);
        arraycopy(this$static.names, 0, c2, 0, this$static.used);
        this$static.values = v2;
        this$static.names = c2;
    }
    this$static.names[this$static.used] = nameCode;
    this$static.values[this$static.used++] = value_0;
}

function $compact(this$static){
    var c2, v2;
    if (this$static.used == 0) {
        this$static.names = null;
        this$static.values = null;
    }
    else if (this$static.values.length > this$static.used) {
        v2 = initDim(Ljava_lang_String_2_classLit, $intern_8, 2, this$static.used, 4, 1);
        c2 = initDim(Lclient_net_sf_saxon_ce_om_StructuredQName_2_classLit, $intern_1, 8, this$static.used, 0, 1);
        arraycopy(this$static.values, 0, v2, 0, this$static.used);
        arraycopy(this$static.names, 0, c2, 0, this$static.used);
        this$static.values = v2;
        this$static.names = c2;
    }
}

function $findByStructuredQName(this$static, name_0){
    var i_0;
    if (this$static.names == null) {
        return -1;
    }
    for (i_0 = 0; i_0 < this$static.used; i_0++) {
        if ($equals_0(this$static.names[i_0], name_0)) {
            return i_0;
        }
    }
    return -1;
}

function $getLength(this$static){
    return this$static.values == null?0:this$static.used;
}

function $getLocalName_0(this$static, index_0){
    if (this$static.names == null) {
        return null;
    }
    if (index_0 < 0 || index_0 >= this$static.used) {
        return null;
    }
    return $getLocalName_1(this$static.names[index_0]);
}

function $getStructuredQName(this$static, index_0){
    if (this$static.names == null) {
        return null;
    }
    if (index_0 < 0 || index_0 >= this$static.used) {
        return null;
    }
    return this$static.names[index_0];
}

function $getValue(this$static, index_0){
    if (this$static.values == null) {
        return null;
    }
    if (index_0 < 0 || index_0 >= this$static.used) {
        return null;
    }
    return this$static.values[index_0];
}

function $getValue_0(this$static, uri_0, localname){
    var i_0;
    if (this$static.names == null) {
        return null;
    }
    for (i_0 = 0; i_0 < this$static.used; i_0++) {
        if ($equals_5($getNamespaceURI(this$static.names[i_0]), uri_0) && $equals_5($getLocalName_1(this$static.names[i_0]), localname)) {
            return this$static.values[i_0];
        }
    }
    return null;
}

function AttributeCollection(){
    $clinit_AttributeCollection();
    this.used = 0;
}

defineClass(375, 1, {}, AttributeCollection);
_.names = null;
_.used = 0;
_.values = null;
var EMPTY_ATTRIBUTE_COLLECTION;
var Lclient_net_sf_saxon_ce_om_AttributeCollection_2_classLit = createForClass('client.net.sf.saxon.ce.om', 'AttributeCollection', 375, Ljava_lang_Object_2_classLit);
function $clinit_Axis(){
    $clinit_Axis = emptyMethod;
    principalNodeType_0 = initValues(getClassLiteralForArray(S_classLit, 1), $intern_9, 0, 7, [1, 1, 2, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1]);
    isForwards = initValues(getClassLiteralForArray(Z_classLit, 1), $intern_9, 0, 8, [false, false, true, true, true, true, true, true, true, true, false, false, true]);
    isPeerAxis = initValues(getClassLiteralForArray(Z_classLit, 1), $intern_9, 0, 8, [false, false, true, true, false, false, false, true, true, true, false, true, true]);
    isSubtreeAxis = initValues(getClassLiteralForArray(Z_classLit, 1), $intern_9, 0, 8, [false, false, true, true, true, true, false, false, true, false, false, false, true]);
    axisName = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['ancestor', 'ancestor-or-self', 'attribute', 'child', 'descendant', 'descendant-or-self', 'following', 'following-sibling', 'namespace', 'parent', 'preceding', 'preceding-sibling', 'self']);
    nodeKindTable = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [514, 9102, 4, 394, 394, 9102, 394, 394, $intern_17, 514, 906, 394, 9102]);
    inverseAxis = initValues(getClassLiteralForArray(B_classLit, 1), $intern_9, 0, 7, [4, 5, 9, 9, 0, 1, 10, 11, 9, 3, 6, 7, 12]);
}

function getAxisNumber(name_0){
    $clinit_Axis();
    var i_0;
    for (i_0 = 0; i_0 < 13; i_0++) {
        if ($equals_5(axisName[i_0], name_0)) {
            return narrow_byte(i_0);
        }
    }
    throw new XPathException_0('Unknown axis name: ' + name_0);
}

var axisName, inverseAxis, isForwards, isPeerAxis, isSubtreeAxis, nodeKindTable, principalNodeType_0;
function $add_1(this$static, doc, uri_0){
    $put_0(this$static.documentNameMap, uri_0, doc);
}

function $add_2(this$static, doc, uri_0){
    uri_0 != null && $put_0(this$static.documentNameMap, new DocumentURI(uri_0), doc);
}

function $contains_1(this$static, doc){
    return $contains_3(new AbstractMap$2(this$static.documentNameMap), doc);
}

function $find(this$static, uri_0){
    return dynamicCast($get_0(this$static.documentNameMap, uri_0), 109);
}

function $find_0(this$static, uri_0){
    return dynamicCast($get_0(this$static.documentNameMap, new DocumentURI(uri_0)), 109);
}

function $getDocumentURI(this$static, doc){
    var iter, uri_0;
    iter = $iterator(new AbstractMap$1(this$static.documentNameMap));
    while ($hasNext_2(iter.val$outerIter2)) {
        uri_0 = dynamicCast($next_11(iter), 131);
        if (dynamicCast($get_0(this$static.documentNameMap, uri_0), 109).isSameNodeInfo(doc)) {
            return uri_0.displayValue;
        }
    }
    return null;
}

function DocumentPool(){
    this.documentNameMap = new HashMap_0(10);
    this.unavailableDocuments = new HashSet_0(10);
}

defineClass(423, 1, {}, DocumentPool);
var Lclient_net_sf_saxon_ce_om_DocumentPool_2_classLit = createForClass('client.net.sf.saxon.ce.om', 'DocumentPool', 423, Ljava_lang_Object_2_classLit);
function DocumentURI(uri_0){
    if (uri_0 == null) {
        throw new NullPointerException_0('uri');
    }
    this.displayValue = uri_0;
    this.normalizedValue = uri_0;
}

defineClass(131, 1, {131:1}, DocumentURI);
_.equals$ = function equals_22(obj){
    return instanceOf(obj, 131) && $equals_5(this.normalizedValue, dynamicCast(obj, 131).normalizedValue);
}
;
_.hashCode$ = function hashCode_23(){
    return getHashCode_0(this.normalizedValue);
}
;
_.toString$ = function toString_24(){
    return this.displayValue;
}
;
var Lclient_net_sf_saxon_ce_om_DocumentURI_2_classLit = createForClass('client.net.sf.saxon.ce.om', 'DocumentURI', 131, Ljava_lang_Object_2_classLit);
function $getURIForPrefix(this$static, prefix, useDefault){
    var iter, node;
    if ($equals_5('', prefix) && !useDefault) {
        return '';
    }
    iter = this$static.node.iterateAxis(8, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
    while (true) {
        node = dynamicCast(iter.next_0(), 7);
        if (!node) {
            break;
        }
        if ($equals_5(node.getLocalPart(), prefix)) {
            return node.getStringValue();
        }
    }
    return $equals_5('', prefix)?'':null;
}

function InscopeNamespaceResolver(node){
    node.getNodeKind() == 1?(this.node = node):(this.node = node.getParent());
}

defineClass(144, 1, {}, InscopeNamespaceResolver);
_.getURIForPrefix = function getURIForPrefix_0(prefix, useDefault){
    return $getURIForPrefix(this, prefix, useDefault);
}
;
var Lclient_net_sf_saxon_ce_om_InscopeNamespaceResolver_2_classLit = createForClass('client.net.sf.saxon.ce.om', 'InscopeNamespaceResolver', 144, Ljava_lang_Object_2_classLit);
function $hasNext_0(this$static){
    if (this$static.iter.hasNext()) {
        return true;
    }
    else if (this$static.phase == 0) {
        this$static.phase = 1;
        return true;
    }
    else {
        return false;
    }
}

function $next_2(this$static){
    if (this$static.phase == 1) {
        this$static.phase = 2;
        return 'xml';
    }
    else {
        return dynamicCast(this$static.iter.next_2(), 53).prefix_0;
    }
}

function InscopeNamespaceResolver$1(this$0){
    this.this$01 = this$0;
    this.iter = iterateNamespaces(this.this$01.node);
}

defineClass(742, 1, {}, InscopeNamespaceResolver$1);
_.hasNext = function hasNext_2(){
    return $hasNext_0(this);
}
;
_.next_2 = function next_19(){
    return $next_2(this);
}
;
_.remove = function remove_0(){
    throw new UnsupportedOperationException_0('remove');
}
;
_.phase = 0;
var Lclient_net_sf_saxon_ce_om_InscopeNamespaceResolver$1_2_classLit = createForClass('client.net.sf.saxon.ce.om', 'InscopeNamespaceResolver/1', 742, Ljava_lang_Object_2_classLit);
var Lclient_net_sf_saxon_ce_om_Item_2_classLit = createForInterface('client.net.sf.saxon.ce.om', 'Item');
function $clinit_NameChecker(){
    $clinit_NameChecker = emptyMethod;
    nameStartRangeStartPoints = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [65, 95, 97, 192, 216, 248, 880, 895, 8204, 8304, 11264, 12289, 63744, 65008, $intern_34]);
    nameStartRangeEndPoints = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [90, 95, 122, 214, 246, 767, 893, 8191, 8205, 8591, 12271, 55295, 64975, 65533, 983039]);
    ncNameStartChars = new IntRangeSet_0(nameStartRangeStartPoints, nameStartRangeEndPoints);
    nameRangeStartPoints = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [45, 46, 48, 183, 768, 8255]);
    nameRangeEndPoints = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [45, 46, 57, 183, 879, 8256]);
    ncNameChars = new IntRangeSet_0(nameRangeStartPoints, nameRangeEndPoints);
}

function checkQNameParts(qname){
    $clinit_NameChecker();
    var e, err, parts;
    try {
        parts = getQNameParts(qname);
        if (parts[0].length > 0 && !isValidNCName(parts[0])) {
            throw new XPathException_0('Invalid QName prefix ' + wrap(parts[0], 6));
        }
        return parts;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 145)) {
            e = $e0;
            err = new XPathException_0(e.message_0);
            err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FORG0001');
                throw err;
        }
        else 
            throw unwrap($e0);
    }
}

function getQNameParts(qname){
    $clinit_NameChecker();
    var colon, i_0, len, parts;
    parts = initDim(Ljava_lang_String_2_classLit, $intern_8, 2, 2, 4, 1);
    colon = -1;
    len = length__I__devirtual$(qname);
    for (i_0 = 0; i_0 < len; i_0++) {
        if (charAt_I_C__devirtual$(qname, i_0) == 58) {
            colon = i_0;
            break;
        }
    }
    if (colon < 0) {
        parts[0] = '';
        parts[1] = toString__Ljava_lang_String___devirtual$_0(qname);
        if (!isValidNCName(parts[1])) {
            throw new QNameException('Invalid QName ' + wrap(qname, 6));
        }
    }
    else {
        if (colon == 0) {
            throw new QNameException('QName cannot start with colon: ' + wrap(qname, 6));
        }
        if (colon == len - 1) {
            throw new QNameException('QName cannot end with colon: ' + wrap(qname, 6));
        }
        parts[0] = subSequence_II_Ljava_lang_CharSequence___devirtual$(qname, 0, colon);
        parts[1] = subSequence_II_Ljava_lang_CharSequence___devirtual$(qname, colon + 1, len);
        if (!isValidNCName(parts[1])) {
            if (!isValidNCName(parts[0])) {
                throw new QNameException('Both the prefix ' + wrap(parts[0], 6) + ' and the local part ' + wrap(parts[1], 6) + ' are invalid');
            }
            throw new QNameException('Invalid QName local part ' + wrap(parts[1], 6));
        }
    }
    return parts;
}

function isNCNameChar(c){
    return $contains_0(ncNameStartChars, c) || $contains_0(ncNameChars, c);
}

function isNCNameStartChar(c){
    return $contains_0(ncNameStartChars, c);
}

function isValidChar(ch_0){
    $clinit_NameChecker();
    return ch_0 >= 1 && ch_0 <= 55295 || ch_0 >= $intern_12 && ch_0 <= 65533 || ch_0 >= $intern_34 && ch_0 <= 1114111;
}

function isValidNCName(ncName){
    $clinit_NameChecker();
    var i_0, len, us;
    len = ncName.length;
    if (len == 0) {
        return false;
    }
    us = containsSurrogatePairs(ncName)?new GeneralUnicodeString(ncName):new BMPString(ncName);
    if (!isNCNameStartChar(us.charAt(0))) {
        return false;
    }
    for (i_0 = 1; i_0 < len; i_0++) {
        if (!isNCNameChar(us.charAt(i_0))) {
            return false;
        }
    }
    return true;
}

var nameRangeEndPoints, nameRangeStartPoints, nameStartRangeEndPoints, nameStartRangeStartPoints, ncNameChars, ncNameStartChars;
function $clinit_NamespaceBinding(){
    $clinit_NamespaceBinding = emptyMethod;
    XML = new NamespaceBinding('xml', 'http://www.w3.org/XML/1998/namespace');
        DEFAULT_UNDECLARATION = new NamespaceBinding('', '');
        EMPTY_ARRAY = initDim(Lclient_net_sf_saxon_ce_om_NamespaceBinding_2_classLit, $intern_5, 53, 0, 0, 1);
}

function $equals(this$static, obj){
    return instanceOf(obj, 53) && $equals_5(this$static.prefix_0, dynamicCast(obj, 53).prefix_0) && $equals_5(this$static.uri_0, dynamicCast(obj, 53).uri_0);
}

function NamespaceBinding(prefix, uri_0){
    $clinit_NamespaceBinding();
    this.prefix_0 = prefix;
    this.uri_0 = uri_0;
    if (prefix == null || uri_0 == null) {
        throw new NullPointerException;
    }
}

defineClass(53, 1, {53:1}, NamespaceBinding);
_.equals$ = function equals_23(obj){
    return $equals(this, obj);
}
;
_.hashCode$ = function hashCode_24(){
    return getHashCode_0(this.prefix_0) ^ getHashCode_0(this.uri_0);
}
;
var DEFAULT_UNDECLARATION, EMPTY_ARRAY, XML;
var Lclient_net_sf_saxon_ce_om_NamespaceBinding_2_classLit = createForClass('client.net.sf.saxon.ce.om', 'NamespaceBinding', 53, Ljava_lang_Object_2_classLit);
var Lclient_net_sf_saxon_ce_om_NodeInfo_2_classLit = createForInterface('client.net.sf.saxon.ce.om', 'NodeInfo');
function QNameException(message){
    Exception.call(this);
    this.message_0 = message;
}

defineClass(145, 19, {145:1, 3:1, 19:1, 37:1}, QNameException);
_.getMessage = function getMessage_1(){
    return this.message_0;
}
;
var Lclient_net_sf_saxon_ce_om_QNameException_2_classLit = createForClass('client.net.sf.saxon.ce.om', 'QNameException', 145, Ljava_lang_Exception_2_classLit);
var Lclient_net_sf_saxon_ce_om_Sequence_2_classLit = createForInterface('client.net.sf.saxon.ce.om', 'Sequence');
function $clinit_StructuredQName(){
    $clinit_StructuredQName = emptyMethod;
    XML_ID = new StructuredQName('xml', 'http://www.w3.org/XML/1998/namespace', 'id');
}

function $compareTo_0(this$static, other){
    var i_0;
    for (i_0 = 0; i_0 < this$static.prefixStart; i_0++) {
        if (this$static.content_0[i_0] != other.content_0[i_0]) {
            return this$static.content_0[i_0] < other.content_0[i_0]?-1:1;
        }
    }
    return 0;
}

function $equals_0(this$static, other){
    var i_0, sq2;
    if (instanceOf(other, 8)) {
        sq2 = dynamicCast(other, 8);
        if (this$static.localNameStart != sq2.localNameStart || this$static.prefixStart != sq2.prefixStart) {
            return false;
        }
        for (i_0 = this$static.prefixStart - 1; i_0 >= 0; i_0--) {
            if (this$static.content_0[i_0] != sq2.content_0[i_0]) {
                return false;
            }
        }
        return true;
    }
    else {
        return false;
    }
}

function $getClarkName(this$static){
    var buff;
    buff = new FastStringBuffer(this$static.content_0.length - this$static.prefixStart + 2);
    if (this$static.localNameStart > 0) {
        $ensureCapacity_0(buff, 1);
        buff.array[buff.used++] = 123;
        $append_4(buff, this$static.content_0, 0, this$static.localNameStart);
        $ensureCapacity_0(buff, 1);
        buff.array[buff.used++] = 125;
    }
    $append_4(buff, this$static.content_0, this$static.localNameStart, this$static.prefixStart - this$static.localNameStart);
    return $condense(buff) , valueOf_3(buff.array, 0, buff.used);
}

function $getDisplayName_0(this$static){
    var buff;
    if (this$static.prefixStart == this$static.content_0.length) {
        return valueOf_3(this$static.content_0, this$static.localNameStart, this$static.prefixStart - this$static.localNameStart);
    }
    else {
        buff = new FastStringBuffer(this$static.content_0.length - this$static.localNameStart + 1);
        $append_4(buff, this$static.content_0, this$static.prefixStart, this$static.content_0.length - this$static.prefixStart);
        $ensureCapacity_0(buff, 1);
        buff.array[buff.used++] = 58;
        $append_4(buff, this$static.content_0, this$static.localNameStart, this$static.prefixStart - this$static.localNameStart);
        return $condense(buff) , valueOf_3(buff.array, 0, buff.used);
    }
}

function $getLocalName_1(this$static){
    return valueOf_3(this$static.content_0, this$static.localNameStart, this$static.prefixStart - this$static.localNameStart);
}

function $getNamespaceURI(this$static){
    if (this$static.localNameStart == 0) {
        return '';
    }
    return valueOf_3(this$static.content_0, 0, this$static.localNameStart);
}

function $getPrefix(this$static){
    return valueOf_3(this$static.content_0, this$static.prefixStart, this$static.content_0.length - this$static.prefixStart);
}

function $hashCode(this$static){
    var h, i_0;
    h = -2147180533;
    h ^= this$static.prefixStart;
    h ^= this$static.localNameStart;
    for (i_0 = this$static.prefixStart - 1; i_0 >= 0; i_0--) {
        h ^= this$static.content_0[i_0] << (i_0 & 31);
    }
    return h;
}

function StructuredQName(prefix, uri_0, localName){
    $clinit_StructuredQName();
    var llen, plen, ulen;
    uri_0 == null && (uri_0 = '');
    plen = prefix.length;
    ulen = uri_0.length;
    llen = localName.length;
    this.localNameStart = ulen;
    this.prefixStart = ulen + llen;
    this.content_0 = initDim(C_classLit, $intern_9, 0, ulen + llen + plen, 7, 1);
    $getChars_0(uri_0, ulen, this.content_0, 0);
    $getChars_0(localName, llen, this.content_0, ulen);
    $getChars_0(prefix, plen, this.content_0, ulen + llen);
}

function fromClarkName(expandedName){
    $clinit_StructuredQName();
    var closeBrace, localName, namespace;
    if (expandedName.charCodeAt(0) == 123) {
        closeBrace = $indexOf_3(expandedName, fromCodePoint(125));
        if (closeBrace < 0) {
            throw new IllegalArgumentException_0("No closing '}' in Clark name");
        }
        namespace = expandedName.substr(1, closeBrace - 1);
        if (closeBrace == expandedName.length) {
            throw new IllegalArgumentException_0('Missing local part in Clark name');
        }
        localName = __substr(expandedName, closeBrace + 1, expandedName.length - (closeBrace + 1));
    }
    else {
        namespace = '';
        localName = expandedName;
    }
    return new StructuredQName('', namespace, localName);
}

function fromLexicalQName(lexicalName, defaultURI, resolver){
    $clinit_StructuredQName();
    var de, e, parts, prefix, uri_0;
    try {
        parts = getQNameParts(trimWhitespace(lexicalName));
        prefix = parts[0];
        uri_0 = $equals_5(prefix, '')?defaultURI:resolver.getURIForPrefix(prefix, false);
        if (uri_0 == null) {
            de = new XPathException_0("Namespace prefix '" + parts[0] + "' has not been declared");
            de.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FONS0004');
                throw de;
        }
        return new StructuredQName(parts[0], uri_0, parts[1]);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 145)) {
            e = $e0;
            de = new XPathException_0(e.message_0);
            de.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FOCA0002');
                throw de;
        }
        else 
            throw unwrap($e0);
    }
}

defineClass(8, 1, {8:1, 24:1}, StructuredQName);
_.compareTo = function compareTo_0(other){
    return $compareTo_0(this, dynamicCast(other, 8));
}
;
_.equals$ = function equals_24(other){
    return $equals_0(this, other);
}
;
_.hashCode$ = function hashCode_25(){
    return $hashCode(this);
}
;
_.toString$ = function toString_25(){
    return $getDisplayName_0(this);
}
;
_.localNameStart = 0;
_.prefixStart = 0;
var XML_ID;
var Lclient_net_sf_saxon_ce_om_StructuredQName_2_classLit = createForClass('client.net.sf.saxon.ce.om', 'StructuredQName', 8, Ljava_lang_Object_2_classLit);
defineClass(67, 1, $intern_64);
_.getAtomizedItemType = function getAtomizedItemType_1(){
    return $clinit_AtomicType() , ANY_ATOMIC;
}
;
_.getNodeKindMask = function getNodeKindMask(){
    return 9102;
}
;
_.getRequiredNodeKind = function getRequiredNodeKind(){
    return 0;
}
;
_.getSuperType = function getSuperType_0(){
    return $clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7;
}
;
_.matches_1 = function matches_5(node){
    return this.matches_0(node.getNodeKind(), node.getNodeName());
}
;
_.matchesItem = function matchesItem_0(item_0){
    return instanceOf(item_0, 7) && this.matches_1(dynamicCast(item_0, 7));
}
;
var Lclient_net_sf_saxon_ce_pattern_NodeTest_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'NodeTest', 67, Ljava_lang_Object_2_classLit);
function $clinit_AnyChildNodeTest(){
    $clinit_AnyChildNodeTest = emptyMethod;
    THE_INSTANCE_5 = new AnyChildNodeTest;
}

function AnyChildNodeTest(){
}

defineClass(809, 67, $intern_64, AnyChildNodeTest);
_.getDefaultPriority = function getDefaultPriority(){
    return -0.5;
}
;
_.getNodeKindMask = function getNodeKindMask_0(){
    return 394;
}
;
_.hashCode$ = function hashCode_26(){
    return getHashCode_0('AnyChildNodeTest');
}
;
_.matches_0 = function matches_6(nodeKind, qName){
    return nodeKind == 1 || nodeKind == 3 || nodeKind == 8 || nodeKind == 7;
}
;
_.matches_1 = function matches_7(node){
    var nodeKind;
    nodeKind = node.getNodeKind();
    return nodeKind == 1 || nodeKind == 3 || nodeKind == 8 || nodeKind == 7;
}
;
_.toString$ = function toString_26(){
    return 'node()';
}
;
var THE_INSTANCE_5;
var Lclient_net_sf_saxon_ce_pattern_AnyChildNodeTest_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'AnyChildNodeTest', 809, Lclient_net_sf_saxon_ce_pattern_NodeTest_2_classLit);
function $clinit_AnyJSObjectNodeTest(){
    $clinit_AnyJSObjectNodeTest = emptyMethod;
    THE_INSTANCE_6 = new AnyJSObjectNodeTest;
}

function AnyJSObjectNodeTest(){
}

defineClass(840, 67, $intern_64, AnyJSObjectNodeTest);
_.getAtomizedItemType = function getAtomizedItemType_2(){
    return null;
}
;
_.getDefaultPriority = function getDefaultPriority_0(){
    return 0;
}
;
_.getRequiredNodeKind = function getRequiredNodeKind_0(){
    return 88;
}
;
_.getSuperType = function getSuperType_1(){
    return $clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2;
}
;
_.matches_0 = function matches_8(nodeKind, qName){
    return false;
}
;
_.matchesItem = function matchesItem_1(item_0){
    return instanceOf(item_0, 160);
}
;
var THE_INSTANCE_6;
var Lclient_net_sf_saxon_ce_pattern_AnyJSObjectNodeTest_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'AnyJSObjectNodeTest', 840, Lclient_net_sf_saxon_ce_pattern_NodeTest_2_classLit);
function $clinit_AnyNodeTest(){
    $clinit_AnyNodeTest = emptyMethod;
    THE_INSTANCE_7 = new AnyNodeTest;
}

function AnyNodeTest(){
}

defineClass(176, 67, {176:1, 67:1, 166:1}, AnyNodeTest);
_.getDefaultPriority = function getDefaultPriority_1(){
    return -0.5;
}
;
_.getNodeKindMask = function getNodeKindMask_1(){
    return 9102;
}
;
_.getSuperType = function getSuperType_2(){
    return $clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2;
}
;
_.hashCode$ = function hashCode_27(){
    return getHashCode_0('AnyNodeTest');
}
;
_.matches_0 = function matches_9(nodeType, qName){
    return true;
}
;
_.matches_1 = function matches_10(node){
    return true;
}
;
_.toString$ = function toString_27(){
    return 'node()';
}
;
var THE_INSTANCE_7;
var Lclient_net_sf_saxon_ce_pattern_AnyNodeTest_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'AnyNodeTest', 176, Lclient_net_sf_saxon_ce_pattern_NodeTest_2_classLit);
function DocumentNodeTest(elementTest){
    this.elementTest = elementTest;
}

defineClass(309, 67, {309:1, 67:1, 166:1}, DocumentNodeTest);
_.equals$ = function equals_25(other){
    return instanceOf(other, 309) && dynamicCast(other, 309).elementTest.equals$(this.elementTest);
}
;
_.getDefaultPriority = function getDefaultPriority_2(){
    return this.elementTest.getDefaultPriority();
}
;
_.getNodeKindMask = function getNodeKindMask_2(){
    return 512;
}
;
_.getRequiredNodeKind = function getRequiredNodeKind_1(){
    return 9;
}
;
_.hashCode$ = function hashCode_28(){
    return this.elementTest.hashCode$() ^ 12345;
}
;
_.matches_0 = function matches_11(nodeKind, qName){
    throw new UnsupportedOperationException_0("DocumentNodeTest doesn't support this method");
}
;
_.matches_1 = function matches_12(node){
    var found, iter, kind, n;
    if (node.getNodeKind() != 9) {
        return false;
    }
    iter = node.iterateAxis(3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
    found = false;
    while (true) {
        n = dynamicCast(iter.next_0(), 7);
        if (!n) {
            return found;
        }
        kind = n.getNodeKind();
        if (kind == 3) {
            return false;
        }
        else if (kind == 1) {
            if (found) {
                return false;
            }
            if (this.elementTest.matches_1(n)) {
                found = true;
            }
            else {
                return false;
            }
        }
    }
}
;
_.toString$ = function toString_28(){
    return 'document-node(' + this.elementTest.toString$() + ')';
}
;
var Lclient_net_sf_saxon_ce_pattern_DocumentNodeTest_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'DocumentNodeTest', 309, Lclient_net_sf_saxon_ce_pattern_NodeTest_2_classLit);
function $clinit_EmptySequenceTest(){
    $clinit_EmptySequenceTest = emptyMethod;
    THE_INSTANCE_8 = new EmptySequenceTest;
}

function EmptySequenceTest(){
}

defineClass(123, 67, {123:1, 67:1, 166:1}, EmptySequenceTest);
_.getDefaultPriority = function getDefaultPriority_3(){
    return -0.5;
}
;
_.getNodeKindMask = function getNodeKindMask_3(){
    return 0;
}
;
_.getRequiredNodeKind = function getRequiredNodeKind_2(){
    return 15;
}
;
_.hashCode$ = function hashCode_29(){
    return getHashCode_0('NoNodeTest');
}
;
_.matches_0 = function matches_13(nodeType, qName){
    return false;
}
;
_.matches_1 = function matches_14(node){
    return false;
}
;
_.toString$ = function toString_29(){
    return 'empty-sequence()';
}
;
var THE_INSTANCE_8;
var Lclient_net_sf_saxon_ce_pattern_EmptySequenceTest_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'EmptySequenceTest', 123, Lclient_net_sf_saxon_ce_pattern_NodeTest_2_classLit);
function $bindCurrent(this$static, node, context){
    var c2, ci;
    if (this$static.variableBinding) {
        c2 = context;
        ci = context.getContextItem();
        if (!(instanceOf(ci, 7) && dynamicCast(ci, 7).isSameNodeInfo(node))) {
            c2 = context.newContext();
            c2.setSingletonFocus(node);
        }
        try {
            this$static.variableBinding.evaluateItem(c2);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                return;
            }
            else 
                throw unwrap($e0);
        }
    }
}

function $selectNodes(this$static, doc, context){
    var allAttributes, allChildren, allDescendants, allElements, attributesOrSelf, atts, attsOrSelf, kind, test_0;
    kind = this$static.getNodeKind();
    switch (kind) {
        case 9:
            return this$static.matches_2(doc, context)?!doc?($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1):new SingletonIterator(doc):($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1);
        case 2:
            {
                allElements = doc.iterateAxis(4, ($clinit_NodeKindTest() , ELEMENT));
                atts = new Pattern$1;
                allAttributes = new MappingIterator(allElements, atts);
                test_0 = new Pattern$2(this$static, context);
                return new ItemMappingIterator(allAttributes, test_0);
            }

        case 1:
    case 8:
case 3:
    case 7:
        {
            allDescendants = doc.iterateAxis(4, makeNodeKindTest(kind));
            test_0 = new Pattern$3(this$static, context);
            return new ItemMappingIterator(allDescendants, test_0);
        }

    case 0:
        {
            allChildren = doc.iterateAxis(4, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
            attsOrSelf = new Pattern$4;
            attributesOrSelf = new MappingIterator(allChildren, attsOrSelf);
            test_0 = new Pattern$5(this$static, context);
            return new ItemMappingIterator(attributesOrSelf, test_0);
        }

    case 13:
        throw new UnsupportedOperationException_0("Patterns can't match namespace nodes");
    default:throw new UnsupportedOperationException_0('Unknown node kind');
    }
}

function $setSystemId_1(this$static, systemId){
    this$static.systemId = systemId;
}

function Pattern(){
}

function fromExpression(expression){
    var axis_0, base, basePattern, filter, head, headPattern, kind, path, result, tail, tailPattern, test_0, type_0;
    result = null;
    instanceOf(expression, 268) && (expression = dynamicCast(expression, 268).operand);
    if (instanceOf(expression, 235) && dynamicCast(expression, 235).operator == 1) {
        result = new UnionPattern(fromExpression($getOperands(dynamicCast(expression, 235))[0]), fromExpression($getOperands(dynamicCast(expression, 235))[1]));
    }
    else if (instanceOf(expression, 52)) {
        axis_0 = dynamicCast(expression, 52).axis_0;
        test_0 = dynamicCast(expression, 52).test_0;
        !test_0 && (test_0 = ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
        instanceOf(test_0, 176) && (axis_0 == 3 || axis_0 == 4) && (test_0 = ($clinit_AnyChildNodeTest() , $clinit_AnyChildNodeTest() , THE_INSTANCE_5));
        kind = test_0.getRequiredNodeKind();
        if (axis_0 == 12 && kind == 9) {
            result = new NodeTestPattern(test_0);
        }
        else if (axis_0 == 2) {
            kind == 0?(result = new NodeTestPattern(($clinit_NodeKindTest() , ATTRIBUTE))):($clinit_Axis() , (nodeKindTable[2] & 1 << kind) != 0?(result = new NodeTestPattern(test_0)):(result = new NodeTestPattern(($clinit_EmptySequenceTest() , $clinit_EmptySequenceTest() , THE_INSTANCE_8))));
        }
        else if (axis_0 == 3 || axis_0 == 4 || axis_0 == 5) {
            kind != 0 && ($clinit_Axis() , (nodeKindTable[axis_0] & 1 << kind) == 0) && (test_0 = ($clinit_EmptySequenceTest() , $clinit_EmptySequenceTest() , THE_INSTANCE_8));
            result = new NodeTestPattern(test_0);
        }
        else {
            throw new XPathException_2('Only downwards axes are allowed in a pattern', 'XTSE0340');
        }
    }
    else if (instanceOf(expression, 80)) {
        base = dynamicCast(expression, 80).start_0;
        filter = dynamicCast(expression, 80).filter;
        basePattern = fromExpression(base);
        if (instanceOf(basePattern, 92)) {
            path = new LocationPathPattern;
            $setNodeTest(path, basePattern.getNodeTest());
            basePattern = path;
        }
        if (!instanceOf(basePattern, 155)) {
            throw new XPathException_0('The filtered expression in a pattern must be a simple step');
        }
        $addFilter(dynamicCast(basePattern, 155), filter);
        result = basePattern;
    }
    else if (instanceOf(expression, 96)) {
        head = $getLeadingSteps(dynamicCast(expression, 96));
        tail = $getLastStep(dynamicCast(expression, 96));
        tailPattern = fromExpression(tail);
        if (instanceOf(tailPattern, 92)) {
            path = new LocationPathPattern;
            $setNodeTest(path, tailPattern.getNodeTest());
            tailPattern = path;
        }
        if (!instanceOf(tailPattern, 155)) {
            throw new XPathException_0('The path in a pattern must contain simple steps: found ' + tailPattern.toString$());
        }
        if (dynamicCast(tailPattern, 155).upperPattern) {
            throw new XPathException_0('The path in a pattern must contain simple steps');
        }
        axis_0 = getAxisForPathStep(tail);
        headPattern = fromExpression(head);
        $setUpperPattern(dynamicCast(tailPattern, 155), axis_0, headPattern);
        result = tailPattern;
    }
    else if (instanceOf(expression, 210)) {
        result = new NodeTestPattern(($clinit_NodeKindTest() , DOCUMENT));
    }
    else if (instanceOf(expression, 217)) {
        result = new JSObjectPattern(expression);
    }
    else {
        type_0 = expression.getItemType();
        (expression.getDependencies() & 14) == 0 && (instanceOf(type_0, 67) || instanceOf(expression, 62)) && (result = new NodeSetPattern(expression));
    }
    if (!result) {
        throw new XPathException_0('Cannot convert the expression {' + expression.toString$() + '} to a pattern');
    }
    else {
        result.setOriginalText(expression.toString$());
        return result;
    }
}

function getAxisForPathStep(step){
    if (instanceOf(step, 52)) {
        return ($clinit_Axis() , inverseAxis)[dynamicCast(step, 52).axis_0];
    }
    else if (instanceOf(step, 80)) {
        return getAxisForPathStep(dynamicCast(step, 80).start_0);
    }
    else if (instanceOf(step, 87)) {
        return getAxisForPathStep($getFirstStep(dynamicCast(step, 87)));
    }
    else if (instanceOf(step, 115)) {
        return 12;
    }
    else {
        throw new XPathException_0('The path in a pattern must contain simple steps');
    }
}

function make_1(pattern, env, container){
    var parser_0, pat, visitor, exp_0, visitor_0;
    parser_0 = new PatternParser;
    $setLanguage(parser_0, 1);
    parser_0.defaultContainer = container;
    pat = (parser_0.env = env , parser_0.language = 1 , exp_0 = $parse(parser_0, pattern, 0, 0, env) , $setContainer(exp_0, parser_0.defaultContainer) , visitor_0 = make_0(env, exp_0.getExecutable()) , fromExpression(exp_0.simplify(visitor_0), env.element.getPreparedStylesheet()));
    pat.setSystemId($getSystemId(env.element));
    pat.setOriginalText(pattern);
    pat.setExecutable(container.getExecutable());
    visitor = make_0(env, container.getExecutable());
    pat = pat.simplify_0(visitor);
    return pat;
}

defineClass(117, 1, {28:1, 117:1});
_.allocateSlots = function allocateSlots_0(nextFree){
    return nextFree;
}
;
_.analyze = function analyze(visitor, contextItemType){
    return this;
}
;
_.getContainerGranularity = function getContainerGranularity_1(){
    return 1;
}
;
_.getDefaultPriority = function getDefaultPriority_4(){
    return 0.5;
}
;
_.getDependencies = function getDependencies_4(){
    return 0;
}
;
_.getExecutable = function getExecutable_2(){
    return this.executable;
}
;
_.getLocation = function getLocation(){
    return 'pattern ' + this.originalText + ' in ' + this.systemId;
}
;
_.getNodeKind = function getNodeKind_1(){
    return 0;
}
;
_.getSourceLocator = function getSourceLocator_1(){
    return this;
}
;
_.getSystemId = function getSystemId_3(){
    return this.systemId;
}
;
_.internalMatches = function internalMatches(node, anchor, context){
    return this.matches_2(node, context);
}
;
_.iterateSubExpressions = function iterateSubExpressions_32(){
    return $clinit_Collections() , $clinit_Collections() , $clinit_Collections$EmptyListIterator() , INSTANCE_0;
}
;
_.promote_1 = function promote_20(offer, parent_0){
}
;
_.resolveCurrent = function resolveCurrent(let_0, offer, topLevel){
}
;
_.setExecutable = function setExecutable(executable){
    this.executable = executable;
}
;
_.setOriginalText = function setOriginalText(text_0){
    this.originalText = text_0;
}
;
_.setSystemId = function setSystemId_3(systemId){
    $setSystemId_1(this, systemId);
}
;
_.simplify_0 = function simplify_51(visitor){
    return this;
}
;
_.toString$ = function toString_30(){
    return this.originalText != null?this.originalText:'pattern matching ' + this.getNodeTest().toString$();
}
;
_.variableBinding = null;
var Lclient_net_sf_saxon_ce_pattern_Pattern_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'Pattern', 117, Ljava_lang_Object_2_classLit);
function NodeSetPattern(exp_0){
    Pattern.call(this);
    this.expression_0 = exp_0;
}

defineClass(246, 117, {28:1, 246:1, 117:1}, NodeSetPattern);
_.allocateSlots = function allocateSlots_1(nextFree){
    return allocateSlots(this.expression_0, nextFree);
}
;
_.analyze = function analyze_0(visitor, contextItemType){
    var role;
    this.expression_0 = $typeCheck_1(visitor, this.expression_0, contextItemType);
    role = new RoleLocator(3, this.expression_0.toString$(), 0);
    this.expression_0 = staticTypeCheck_1(this.expression_0, ($clinit_SequenceType() , NODE_SEQUENCE), false, role);
    this.itemType = this.expression_0.getItemType();
    return this;
}
;
_.equals$ = function equals_26(other){
    return instanceOf(other, 246) && dynamicCast(other, 246).expression_0.equals$(this.expression_0);
}
;
_.getDependencies = function getDependencies_5(){
    return this.expression_0.getDependencies();
}
;
_.getNodeKind = function getNodeKind_2(){
    return instanceOf(this.itemType, 67)?dynamicCast(this.itemType, 67).getRequiredNodeKind():0;
}
;
_.getNodeTest = function getNodeTest(){
    return instanceOf(this.itemType, 67)?dynamicCast(this.itemType, 67):($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7);
}
;
_.hashCode$ = function hashCode_30(){
    return 1930463016 ^ this.expression_0.hashCode$();
}
;
_.iterateSubExpressions = function iterateSubExpressions_33(){
    return new AbstractList$IteratorImpl(new Arrays$ArrayList(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.expression_0])));
}
;
_.matches_2 = function matches_15(e, context){
    var iter, node;
    try {
        iter = this.expression_0.iterate_0(context);
        while (true) {
            node = dynamicCast(iter.next_0(), 7);
            if (!node) {
                return false;
            }
            if (node.isSameNodeInfo(e)) {
                return true;
            }
        }
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            return false;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.promote_1 = function promote_21(offer, parent_0){
    this.expression_0 = this.expression_0.promote(offer, parent_0);
}
;
var Lclient_net_sf_saxon_ce_pattern_NodeSetPattern_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'NodeSetPattern', 246, Lclient_net_sf_saxon_ce_pattern_Pattern_2_classLit);
function $evaluate(this$static, context){
    var valueRep;
    valueRep = this$static.expression.evaluateItem(context);
    this$static.val_0 = dynamicCastJso(convertToJavaScript(valueRep));
    return this$static.val_0;
}

function JSObjectPattern(exp_0){
    NodeSetPattern.call(this, exp_0);
    this.expression = exp_0;
}

defineClass(273, 246, {28:1, 273:1, 246:1, 117:1}, JSObjectPattern);
_.getNodeKind = function getNodeKind_3(){
    return 15;
}
;
_.getNodeTest = function getNodeTest_0(){
    return $clinit_AnyJSObjectNodeTest() , $clinit_AnyJSObjectNodeTest() , THE_INSTANCE_6;
}
;
_.val_0 = null;
var Lclient_net_sf_saxon_ce_pattern_JSObjectPattern_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'JSObjectPattern', 273, Lclient_net_sf_saxon_ce_pattern_NodeSetPattern_2_classLit);
function LocalNameTest(nodeKind, localName){
    this.nodeKind = nodeKind;
    this.localName_0 = localName;
}

defineClass(265, 67, {265:1, 67:1, 166:1}, LocalNameTest);
_.equals$ = function equals_27(other){
    return instanceOf(other, 265) && dynamicCast(other, 265).nodeKind == this.nodeKind && $equals_5(dynamicCast(other, 265).localName_0, this.localName_0);
}
;
_.getDefaultPriority = function getDefaultPriority_5(){
    return -0.25;
}
;
_.getNodeKindMask = function getNodeKindMask_4(){
    return 1 << this.nodeKind;
}
;
_.getRequiredNodeKind = function getRequiredNodeKind_3(){
    return this.nodeKind;
}
;
_.hashCode$ = function hashCode_31(){
    return this.nodeKind << 20 ^ getHashCode_0(this.localName_0);
}
;
_.matches_0 = function matches_16(nodeType, qName){
    if (!qName)
        return false;
    if (nodeType != this.nodeKind)
        return false;
    return $equals_5(this.localName_0, valueOf_3(qName.content_0, qName.localNameStart, qName.prefixStart - qName.localNameStart));
}
;
_.matches_1 = function matches_17(node){
    return $equals_5(this.localName_0, node.getLocalPart()) && this.nodeKind == node.getNodeKind();
}
;
_.toString$ = function toString_31(){
    return '*:' + this.localName_0;
}
;
_.nodeKind = 0;
var Lclient_net_sf_saxon_ce_pattern_LocalNameTest_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'LocalNameTest', 265, Lclient_net_sf_saxon_ce_pattern_NodeTest_2_classLit);
function $clinit_LocationPathPattern(){
    $clinit_LocationPathPattern = emptyMethod;
    EMPTY_FILTER_ARRAY = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, 0, 0, 1);
}

function $addFilter(this$static, filter){
    var f2, len;
    len = this$static.filters.length;
    f2 = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, len + 1, 0, 1);
    arraycopy(this$static.filters, 0, f2, 0, len);
    this$static.filters = f2;
    setCheck(this$static.filters, len, filter);
    $setContainer(filter, this$static);
}

function $internalMatches(this$static, node, anchor, context){
    var anc, c2, filter, filter$array, filter$index, filter$max, iter, n, nsv;
    if (!this$static.nodeTest.matches_1(node)) {
        return false;
    }
    if (this$static.upperPattern) {
        anc = node;
        (this$static.upwardsAxis == 9 || this$static.upwardsAxis == 0) && (anc = node.getParent());
        while (true) {
            if (!anc) {
                return false;
            }
            if (this$static.upperPattern.internalMatches(anc, anchor, context)) {
                break;
            }
            if (this$static.upwardsAxis == 9) {
                return false;
            }
            anc = anc.getParent();
        }
    }
    if (this$static.specialFilter) {
        if (this$static.firstElementPattern) {
            iter = node.iterateAxis(11, this$static.nodeTest);
            return !iter.next_0();
        }
        if (this$static.lastElementPattern) {
            iter = node.iterateAxis(7, this$static.nodeTest);
            return !iter.next_0();
        }
        if (this$static.equivalentExpr) {
            c2 = context.newMinorContext();
            c2.setSingletonFocus(node);
            try {
                nsv = this$static.equivalentExpr.iterate_0(c2);
                while (true) {
                    n = dynamicCast(nsv.next_0(), 7);
                    if (!n) {
                        return false;
                    }
                    if (n.isSameNodeInfo(node)) {
                        return true;
                    }
                }
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 4)) {
                    return false;
                }
                else 
                    throw unwrap($e0);
            }
        }
    }
    if (this$static.filters.length != 0) {
        c2 = context.newMinorContext();
        c2.setSingletonFocus(node);
        for (filter$array = this$static.filters , filter$index = 0 , filter$max = filter$array.length; filter$index < filter$max; ++filter$index) {
            filter = filter$array[filter$index];
            try {
                if (!filter.effectiveBooleanValue(c2)) {
                    return false;
                }
            }
            catch ($e1) {
                $e1 = wrap_0($e1);
                if (instanceOf($e1, 4)) {
                    return false;
                }
                else 
                    throw unwrap($e1);
            }
        }
    }
    return true;
}

function $isPositional_0(this$static){
    var i_0, type_0;
    for (i_0 = 0; i_0 < this$static.filters.length; i_0++) {
        type_0 = this$static.filters[i_0].getItemType();
        if (type_0 == ($clinit_AtomicType() , DOUBLE) || type_0 == DECIMAL || type_0 == INTEGER || type_0 == FLOAT || type_0 == ANY_ATOMIC) {
            return true;
        }
        if ((this$static.filters[i_0].getDependencies() & 12) != 0) {
            return true;
        }
    }
    return false;
}

function $makeEquivalentExpression(this$static){
    var axis_0, n, path, start_0, step;
    axis_0 = this$static.nodeTest.getRequiredNodeKind() == 2?2:3;
    step = new AxisExpression(axis_0, this$static.nodeTest);
    for (n = 0; n < this$static.filters.length; n++) {
        step = new FilterExpression(step, this$static.filters[n]);
    }
    start_0 = new ParentNodeExpression;
    $setContainer(start_0, this$static);
    path = new PathExpression(start_0, step);
    $setContainer(path, this$static);
    return path;
}

function $setExecutable_1(this$static, executable){
    this$static.executable = executable;
    !!this$static.upperPattern && this$static.upperPattern.setExecutable(executable);
}

function $setNodeTest(this$static, test_0){
    if (!test_0) {
        throw new NullPointerException_0('test');
    }
    this$static.nodeTest = test_0;
}

function $setUpperPattern(this$static, axis_0, upper){
    this$static.upwardsAxis = axis_0;
    this$static.upperPattern = upper;
}

function LocationPathPattern(){
    $clinit_LocationPathPattern();
    this.nodeTest = ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7);
    this.filters = EMPTY_FILTER_ARRAY;
}

defineClass(155, 117, {28:1, 155:1, 117:1}, LocationPathPattern);
_.allocateSlots = function allocateSlots_2(nextFree){
    var i_0;
    !!this.variableBinding && (nextFree = allocateSlots(this.variableBinding, nextFree));
    for (i_0 = 0; i_0 < this.filters.length; i_0++) {
        nextFree = allocateSlots(this.filters[i_0], nextFree);
    }
    !!this.upperPattern && (nextFree = this.upperPattern.allocateSlots(nextFree));
    return nextFree;
}
;
_.analyze = function analyze_1(visitor, contextItemType){
    var comp, exp_0, f2, filter, i_0, i0, j, removeEntries, step;
    $clinit_TypeHierarchy();
    if (this.upperPattern) {
        this.upperPattern = this.upperPattern.analyze(visitor, contextItemType);
        if (this.upwardsAxis == 9) {
            this.nodeTest.getRequiredNodeKind() == 2?(step = new AxisExpression(2, this.nodeTest)):(step = new AxisExpression(3, this.nodeTest));
            $setSourceLocator(step, this);
            $setContainer(step, this);
            exp_0 = $typeCheck_1(visitor, step, this.upperPattern.getNodeTest());
            this.refinedNodeTest = dynamicCast(exp_0.getItemType(), 67);
        }
    }
    removeEntries = 0;
    for (i0 = this.filters.length - 1; i0 >= 0; i0--) {
        filter = $typeCheck_1(visitor, this.filters[i0], this.refinedNodeTest?this.refinedNodeTest:this.nodeTest);
        filter = $optimize_1(visitor, filter, this.refinedNodeTest?this.refinedNodeTest:this.nodeTest);
        setCheck(this.filters, i0, filter);
        if (isConstantBoolean(filter, true)) {
            ++removeEntries;
        }
        else if (isConstantBoolean(filter, false)) {
            return new NodeTestPattern(($clinit_EmptySequenceTest() , $clinit_EmptySequenceTest() , THE_INSTANCE_8));
        }
    }
    if (removeEntries > 0) {
        if (removeEntries == this.filters.length) {
            this.filters = EMPTY_FILTER_ARRAY;
        }
        else {
            f2 = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, this.filters.length - removeEntries, 0, 1);
            j = 0;
            for (i_0 = 0; i_0 < this.filters.length; i_0++) {
                isConstantBoolean(this.filters[i_0], true) || setCheck(f2, j++, this.filters[i_0]);
            }
            this.filters = f2;
        }
    }
    if (this.nodeTest.getRequiredNodeKind() == 1 && this.filters.length == 1) {
        if (isConstantOne(this.filters[0])) {
            this.firstElementPattern = true;
            this.specialFilter = true;
            this.filters = EMPTY_FILTER_ARRAY;
        }
        else if (instanceOf(this.filters[0], 360)) {
            comp = dynamicCast(this.filters[0], 360);
            if (comp.operator == 50 && instanceOf(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [comp.operand0, comp.operand1])[0], 228) && isConstantOne(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [comp.operand0, comp.operand1])[1]) || instanceOf(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [comp.operand0, comp.operand1])[1], 228) && isConstantOne(initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [comp.operand0, comp.operand1])[0])) {
                this.firstElementPattern = true;
                this.specialFilter = true;
                this.filters = EMPTY_FILTER_ARRAY;
            }
        }
    }
    if (this.nodeTest.getRequiredNodeKind() == 1 && this.filters.length == 1 && instanceOf(this.filters[0], 301)) {
        this.lastElementPattern = true;
        this.specialFilter = true;
        this.filters = EMPTY_FILTER_ARRAY;
    }
    if ($isPositional_0(this)) {
        this.equivalentExpr = $makeEquivalentExpression(this);
        this.equivalentExpr = $typeCheck_1(visitor, this.equivalentExpr, contextItemType);
        this.specialFilter = true;
    }
    return this;
}
;
_.equals$ = function equals_28(other){
    var lpp;
    if (instanceOf(other, 155)) {
        lpp = dynamicCast(other, 155);
        if (!equals_69(this.filters, lpp.filters)) {
            return false;
        }
        if (!this.nodeTest.equals$(lpp.nodeTest)) {
            return false;
        }
        if (this.upwardsAxis != lpp.upwardsAxis) {
            return false;
        }
        if (!this.upperPattern) {
            if (lpp.upperPattern) {
                return false;
            }
        }
        else {
            if (!this.upperPattern.equals$(lpp.upperPattern)) {
                return false;
            }
        }
    }
    else {
        return false;
    }
    return true;
}
;
_.getDependencies = function getDependencies_6(){
    var dependencies, i_0;
    dependencies = 0;
    !!this.upperPattern && (dependencies |= this.upperPattern.getDependencies());
    for (i_0 = 0; i_0 < this.filters.length; i_0++) {
        dependencies |= this.filters[i_0].getDependencies();
    }
    dependencies &= 128;
    return dependencies;
}
;
_.getNodeKind = function getNodeKind_4(){
    return this.nodeTest.getRequiredNodeKind();
}
;
_.getNodeTest = function getNodeTest_1(){
    return this.refinedNodeTest?this.refinedNodeTest:this.nodeTest;
}
;
_.hashCode$ = function hashCode_32(){
    var h, i_0;
    h = 88267;
    for (i_0 = 0; i_0 < this.filters.length; i_0++) {
        h ^= this.filters[i_0].hashCode$();
    }
    h ^= this.nodeTest.hashCode$();
    !!this.upperPattern && (h ^= this.upperPattern.hashCode$());
    h ^= this.upwardsAxis << 22;
    return h;
}
;
_.internalMatches = function internalMatches_0(node, anchor, context){
    return $internalMatches(this, node, anchor, context);
}
;
_.iterateSubExpressions = function iterateSubExpressions_34(){
    var list, upper;
    list = new ArrayList;
    !!this.variableBinding && $add_16(list, this.variableBinding);
    $addAll(list, new Arrays$ArrayList(this.filters));
    if (this.upperPattern) {
        for (upper = this.upperPattern.iterateSubExpressions(); upper.hasNext();) {
            $add_16(list, dynamicCast(upper.next_2(), 6));
        }
    }
    return new AbstractList$IteratorImpl(list);
}
;
_.matches_2 = function matches_18(node, context){
    $bindCurrent(this, node, context);
    return $internalMatches(this, node, null, context);
}
;
_.promote_1 = function promote_22(offer, parent_0){
    var i_0, savedBindingList;
    !!this.upperPattern && this.upperPattern.promote_1(offer, parent_0);
    savedBindingList = offer.bindingList;
    instanceOf(this.variableBinding, 99) && (offer.bindingList = $extendBindingList(dynamicCast(this.variableBinding, 99), offer.bindingList));
    for (i_0 = 0; i_0 < this.filters.length; i_0++) {
        setCheck(this.filters, i_0, this.filters[i_0].promote(offer, parent_0));
    }
    offer.bindingList = savedBindingList;
}
;
_.resolveCurrent = function resolveCurrent_0(let_0, offer, topLevel){
    var i_0;
    for (i_0 = 0; i_0 < this.filters.length; i_0++) {
        setCheck(this.filters, i_0, this.filters[i_0].promote(offer, let_0));
    }
    instanceOf(this.upperPattern, 155) && this.upperPattern.resolveCurrent(let_0, offer, false);
    topLevel && (this.variableBinding = let_0);
}
;
_.setExecutable = function setExecutable_0(executable){
    $setExecutable_1(this, executable);
}
;
_.setSystemId = function setSystemId_4(systemId){
    this.systemId = systemId;
    !!this.upperPattern && this.upperPattern.setSystemId(systemId);
}
;
_.simplify_0 = function simplify_52(visitor){
    var i_0, ntp;
    if (!this.upperPattern && this.filters.length == 0 && !this.firstElementPattern && !this.lastElementPattern) {
        ntp = new NodeTestPattern(this.nodeTest);
        $setSystemId_1(ntp, this.systemId);
        return ntp;
    }
    !!this.upperPattern && (this.upperPattern = this.upperPattern.simplify_0(visitor));
    for (i_0 = this.filters.length - 1; i_0 >= 0; i_0--) {
        setCheck(this.filters, i_0, $simplify(visitor, this.filters[i_0]));
    }
    return this;
}
;
_.equivalentExpr = null;
_.firstElementPattern = false;
_.lastElementPattern = false;
_.refinedNodeTest = null;
_.specialFilter = false;
_.upperPattern = null;
_.upwardsAxis = 9;
var EMPTY_FILTER_ARRAY;
var Lclient_net_sf_saxon_ce_pattern_LocationPathPattern_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'LocationPathPattern', 155, Lclient_net_sf_saxon_ce_pattern_Pattern_2_classLit);
function NameTest(nodeKind, qName){
    this.nodeKind = nodeKind;
    this.qName = qName;
}

function NameTest_0(nodeKind, uri_0, localName){
    this.nodeKind = nodeKind;
    this.qName = new StructuredQName('', uri_0, localName);
}

function NameTest_1(node){
    this.nodeKind = node.getNodeKind();
    this.qName = node.getNodeName();
}

defineClass(60, 67, {60:1, 67:1, 166:1}, NameTest, NameTest_0, NameTest_1);
_.equals$ = function equals_29(other){
    return instanceOf(other, 60) && dynamicCast(other, 60).nodeKind == this.nodeKind && $equals_0(dynamicCast(other, 60).qName, this.qName);
}
;
_.getDefaultPriority = function getDefaultPriority_6(){
    return 0;
}
;
_.getNodeKindMask = function getNodeKindMask_5(){
    return 1 << this.nodeKind;
}
;
_.getRequiredNodeKind = function getRequiredNodeKind_4(){
    return this.nodeKind;
}
;
_.getSuperType = function getSuperType_3(){
    return makeNodeKindTest(this.nodeKind);
}
;
_.hashCode$ = function hashCode_33(){
    return this.nodeKind << 20 ^ $hashCode(this.qName);
}
;
_.matches_0 = function matches_19(nodeKind, qName){
    return nodeKind == this.nodeKind && $equals_0(qName, qName);
}
;
_.matches_1 = function matches_20(node){
    var name_0;
    if (node.getNodeKind() != this.nodeKind) {
        return false;
    }
    name_0 = node.getNodeName();
    return !name_0?!this.qName:$equals_0(name_0, this.qName);
}
;
_.toString$ = function toString_32(){
    switch (this.nodeKind) {
        case 1:
            return 'element(' + $getClarkName(this.qName) + ')';
        case 2:
            return 'attribute(' + $getClarkName(this.qName) + ')';
        case 7:
            return 'processing-instruction(' + $getLocalName_1(this.qName) + ')';
        case 13:
            return 'namespace(' + $getLocalName_1(this.qName) + ')';
        default:return $getDisplayName_0(this.qName);
    }
}
;
_.nodeKind = 0;
var Lclient_net_sf_saxon_ce_pattern_NameTest_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'NameTest', 60, Lclient_net_sf_saxon_ce_pattern_NodeTest_2_classLit);
function NamespaceTest(nodeKind, uri_0){
    this.nodeKind = nodeKind;
    this.uri_0 = uri_0;
}

defineClass(264, 67, {264:1, 67:1, 166:1}, NamespaceTest);
_.equals$ = function equals_30(other){
    return instanceOf(other, 264) && dynamicCast(other, 264).nodeKind == this.nodeKind && $equals_5(dynamicCast(other, 264).uri_0, this.uri_0);
}
;
_.getDefaultPriority = function getDefaultPriority_7(){
    return -0.25;
}
;
_.getNodeKindMask = function getNodeKindMask_6(){
    return 1 << this.nodeKind;
}
;
_.getRequiredNodeKind = function getRequiredNodeKind_5(){
    return this.nodeKind;
}
;
_.getSuperType = function getSuperType_4(){
    return makeNodeKindTest(this.nodeKind);
}
;
_.hashCode$ = function hashCode_34(){
    return getHashCode_0(this.uri_0) ^ this.nodeKind;
}
;
_.matches_0 = function matches_21(nodeType, qName){
    return !!qName && nodeType == this.nodeKind && $equals_5(this.uri_0, $getNamespaceURI(qName));
}
;
_.matches_1 = function matches_22(node){
    return node.getNodeKind() == this.nodeKind && $equals_5(node.getURI(), this.uri_0);
}
;
_.toString$ = function toString_33(){
    return '{' + this.uri_0 + '}:*';
}
;
_.nodeKind = 0;
var Lclient_net_sf_saxon_ce_pattern_NamespaceTest_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'NamespaceTest', 264, Lclient_net_sf_saxon_ce_pattern_NodeTest_2_classLit);
function $clinit_NodeKindTest(){
    $clinit_NodeKindTest = emptyMethod;
    DOCUMENT = new NodeKindTest(9);
    ELEMENT = new NodeKindTest(1);
    ATTRIBUTE = new NodeKindTest(2);
    TEXT = new NodeKindTest(3);
    COMMENT = new NodeKindTest(8);
    PROCESSING_INSTRUCTION = new NodeKindTest(7);
    NAMESPACE = new NodeKindTest(13);
}

function NodeKindTest(nodeKind){
    this.kind = nodeKind;
}

function makeNodeKindTest(kind){
    $clinit_NodeKindTest();
    switch (kind) {
        case 9:
            return DOCUMENT;
        case 1:
            return ELEMENT;
        case 2:
            return ATTRIBUTE;
        case 8:
            return COMMENT;
        case 3:
            return TEXT;
        case 7:
            return PROCESSING_INSTRUCTION;
        case 13:
            return NAMESPACE;
        case 0:
            return $clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7;
        default:throw new IllegalArgumentException_0('Unknown node kind in NodeKindTest');
    }
}

function toString_35(kind){
    switch (kind) {
        case 9:
            return 'document-node()';
        case 1:
            return 'element()';
        case 2:
            return 'attribute()';
        case 8:
            return 'comment()';
        case 3:
            return 'text()';
        case 7:
            return 'processing-instruction()';
        case 13:
            return 'namespace()';
        default:return '** error **';
    }
}

defineClass(147, 67, {147:1, 67:1, 166:1}, NodeKindTest);
_.equals$ = function equals_31(other){
    return instanceOf(other, 147) && dynamicCast(other, 147).kind == this.kind;
}
;
_.getAtomizedItemType = function getAtomizedItemType_3(){
    switch (this.kind) {
        case 3:
    case 9:
        return $clinit_AtomicType() , UNTYPED_ATOMIC;
    case 2:
case 1:
    return $clinit_AtomicType() , ANY_ATOMIC;
case 7:
    case 13:
case 8:
    return $clinit_AtomicType() , STRING;
default:throw new AssertionError('Unknown node kind');
    }
}
;
_.getDefaultPriority = function getDefaultPriority_8(){
    return -0.5;
}
;
_.getNodeKindMask = function getNodeKindMask_7(){
    return 1 << this.kind;
}
;
_.getRequiredNodeKind = function getRequiredNodeKind_6(){
    return this.kind;
}
;
_.hashCode$ = function hashCode_35(){
    return this.kind;
}
;
_.matches_0 = function matches_23(nodeKind, qName){
    return this.kind == nodeKind;
}
;
_.matches_1 = function matches_24(node){
    return node.getNodeKind() == this.kind;
}
;
_.toString$ = function toString_34(){
    return toString_35(this.kind);
}
;
_.kind = 0;
var ATTRIBUTE, COMMENT, DOCUMENT, ELEMENT, NAMESPACE, PROCESSING_INSTRUCTION, TEXT;
var Lclient_net_sf_saxon_ce_pattern_NodeKindTest_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'NodeKindTest', 147, Lclient_net_sf_saxon_ce_pattern_NodeTest_2_classLit);
function NodeTestPattern(test_0){
    Pattern.call(this);
    this.nodeTest = test_0;
}

defineClass(92, 117, {28:1, 92:1, 117:1}, NodeTestPattern);
_.equals$ = function equals_32(other){
    return instanceOf(other, 92) && dynamicCast(other, 92).nodeTest.equals$(this.nodeTest);
}
;
_.getDefaultPriority = function getDefaultPriority_9(){
    return this.nodeTest.getDefaultPriority();
}
;
_.getNodeKind = function getNodeKind_5(){
    return this.nodeTest.getRequiredNodeKind();
}
;
_.getNodeTest = function getNodeTest_2(){
    return this.nodeTest;
}
;
_.hashCode$ = function hashCode_36(){
    return 2062548648 ^ this.nodeTest.hashCode$();
}
;
_.matches_2 = function matches_25(node, context){
    return this.nodeTest.matches_1(node);
}
;
_.toString$ = function toString_36(){
    return this.nodeTest.toString$();
}
;
var Lclient_net_sf_saxon_ce_pattern_NodeTestPattern_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'NodeTestPattern', 92, Lclient_net_sf_saxon_ce_pattern_Pattern_2_classLit);
function Pattern$1(){
}

defineClass(654, 1, {}, Pattern$1);
_.map_2 = function map_8(item_0){
    return dynamicCast(item_0, 7).iterateAxis(2, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
}
;
var Lclient_net_sf_saxon_ce_pattern_Pattern$1_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'Pattern/1', 654, Ljava_lang_Object_2_classLit);
function Pattern$2(this$0, val$context){
    this.this$01 = this$0;
    this.val$context2 = val$context;
}

defineClass(655, 1, {}, Pattern$2);
_.mapItem = function mapItem_16(item_0){
    return this.this$01.matches_2(dynamicCast(item_0, 7), this.val$context2)?item_0:null;
}
;
var Lclient_net_sf_saxon_ce_pattern_Pattern$2_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'Pattern/2', 655, Ljava_lang_Object_2_classLit);
function Pattern$3(this$0, val$context){
    this.this$01 = this$0;
    this.val$context2 = val$context;
}

defineClass(656, 1, {}, Pattern$3);
_.mapItem = function mapItem_17(item_0){
    return this.this$01.matches_2(dynamicCast(item_0, 7), this.val$context2)?item_0:null;
}
;
var Lclient_net_sf_saxon_ce_pattern_Pattern$3_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'Pattern/3', 656, Ljava_lang_Object_2_classLit);
function Pattern$4(){
}

defineClass(657, 1, {}, Pattern$4);
_.map_2 = function map_9(item_0){
    return new PrependIterator(dynamicCast(item_0, 7), dynamicCast(item_0, 7).iterateAxis(2, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
}
;
var Lclient_net_sf_saxon_ce_pattern_Pattern$4_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'Pattern/4', 657, Ljava_lang_Object_2_classLit);
function Pattern$5(this$0, val$context){
    this.this$01 = this$0;
    this.val$context2 = val$context;
}

defineClass(658, 1, {}, Pattern$5);
_.mapItem = function mapItem_18(item_0){
    return this.this$01.matches_2(dynamicCast(item_0, 7), this.val$context2)?item_0:null;
}
;
var Lclient_net_sf_saxon_ce_pattern_Pattern$5_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'Pattern/5', 658, Ljava_lang_Object_2_classLit);
function PatternParser(){
    ExpressionParser.call(this);
}

defineClass(775, 335, {}, PatternParser);
_.parseBasicStep = function parseBasicStep_0(firstInPattern){
    if (this.inPredicate > 0) {
        return $parseBasicStep(this, firstInPattern);
    }
    else {
        switch (this.t.currentToken) {
            case 5:
        case 202:
    case 209:
        $grumble(this, 'Token ' + (this.t.currentToken == 201?'name "' + this.t.currentTokenValue + '"':this.t.currentToken == -1?'(unknown token)':'"' + ($clinit_Token() , tokens_0)[this.t.currentToken] + '"') + ' not allowed here in an XSLT pattern');
        return null;
    case 34:
        firstInPattern || $grumble_0(this, 'In an XSLT pattern, a function call is allowed only as the first step in a path', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', this.language == 1?'XTSE0340':'XPST0003'));
            return $parseBasicStep(this, firstInPattern);
        default:return $parseBasicStep(this, firstInPattern);
        }
    }
}
;
_.parseExpression = function parseExpression_0(){
    return this.inPredicate > 0?$parseExpression(this):$parseBinaryExpression(this, $parsePathExpression(this), 10);
}
;
_.parseFunctionArgument = function parseFunctionArgument_0(){
    if (this.inPredicate > 0) {
        return $parseExprSingle(this);
    }
    else {
        switch (this.t.currentToken) {
            case 21:
                return $parseVariableReference(this);
            case 202:
                return $parseStringLiteral(this);
            case 209:
                return $parseNumericLiteral(this);
            default:$grumble_0(this, 'A function argument in an XSLT pattern must be a variable reference or literal', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', this.language == 1?'XTSE0340':'XPST0003'));
                return null;
        }
    }
}
;
_.parseFunctionCall = function parseFunctionCall_0(){
    var arg, arg0, arg1, fn;
    fn = $parseFunctionCall(this);
    if (this.inPredicate > 0) {
        return fn;
    }
    else {
        if (instanceOf(fn, 205)) {
            if (dynamicCast(fn, 205).argument.length != 1) {
                $grumble_0(this, 'id() in an XSLT 2.0 pattern must have only one argument', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', this.language == 1?'XTSE0340':'XPST0003'));
            }
            else {
                arg = dynamicCast(fn, 205).argument[0];
                instanceOf(arg, 62) || instanceOf(arg, 21) || $grumble_0(this, 'Argument to id() in a pattern must be a variable reference or string literal', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', this.language == 1?'XTSE0340':'XPST0003'));
            }
        }
        else if (instanceOf(fn, 206)) {
            if (dynamicCast(fn, 206).argument.length != 2) {
                $grumble_0(this, 'key() in an XSLT 2.0 pattern must have exactly two arguments', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', this.language == 1?'XTSE0340':'XPST0003'));
            }
            else {
                arg0 = dynamicCast(fn, 206).argument[0];
                instanceOf(arg0, 21) || $grumble_0(this, 'First argument to key() in an XSLT 2.0 pattern must be a string literal', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', this.language == 1?'XTSE0340':'XPST0003'));
                    arg1 = dynamicCast(fn, 206).argument[1];
                    instanceOf(arg1, 62) || instanceOf(arg1, 9) || $grumble_0(this, 'Second argument to id() in an XSLT 2.0 pattern must be a variable reference or literal', new StructuredQName('', 'http://www.w3.org/2005/xqt-errors', this.language == 1?'XTSE0340':'XPST0003'));
            }
        }
        else if (instanceOf(fn, 217)) {
            return fn;
        }
        else {
            $grumble(this, 'The ' + fn.toString$() + ' function is not allowed at the head of a pattern');
        }
    }
    return fn;
}
;
_.parsePredicate = function parsePredicate_0(){
    var exp_0;
    ++this.inPredicate;
    exp_0 = this.inPredicate > 0?$parseExpression(this):$parseBinaryExpression(this, $parsePathExpression(this), 10);
    --this.inPredicate;
    return exp_0;
}
;
_.inPredicate = 0;
var Lclient_net_sf_saxon_ce_pattern_PatternParser_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'PatternParser', 775, Lclient_net_sf_saxon_ce_expr_ExpressionParser_2_classLit);
function $effectiveBooleanValue_7(this$static, context){
    var contextItem;
    contextItem = context.getContextItem();
    return instanceOf(contextItem, 7) && this$static.pattern.matches_2(dynamicCast(contextItem, 7), context);
}

function PatternSponsor(pattern){
    Expression.call(this);
    this.pattern = pattern;
}

defineClass(193, 6, {6:1, 193:1}, PatternSponsor);
_.computeCardinality = function computeCardinality_45(){
    return $intern_12;
}
;
_.effectiveBooleanValue = function effectiveBooleanValue_14(context){
    return $effectiveBooleanValue_7(this, context);
}
;
_.evaluateAsString = function evaluateAsString_3(context){
    return $clinit_BooleanValue() , ($effectiveBooleanValue_7(this, context)?TRUE_0:FALSE_0).value_0?'true':'false';
}
;
_.evaluateItem = function evaluateItem_91(context){
    return $clinit_BooleanValue() , $effectiveBooleanValue_7(this, context)?TRUE_0:FALSE_0;
}
;
_.getCardinality = function getCardinality_11(){
    return $intern_21;
}
;
_.getContainer = function getContainer_0(){
    return this.pattern;
}
;
_.getDependencies = function getDependencies_7(){
    return this.pattern.getDependencies();
}
;
_.getImplementationMethod = function getImplementationMethod_17(){
    return 1;
}
;
_.getItemType = function getItemType_71(){
    return $clinit_AtomicType() , BOOLEAN;
}
;
_.hasLoopingSubexpression = function hasLoopingSubexpression_9(child){
    return true;
}
;
_.iterate_0 = function iterate_52(context){
    return makeIterator_0(($clinit_BooleanValue() , $effectiveBooleanValue_7(this, context)?TRUE_0:FALSE_0));
}
;
_.iterateSubExpressions = function iterateSubExpressions_35(){
    return this.pattern.iterateSubExpressions();
}
;
_.optimize = function optimize_60(visitor, contextItemType){
    return this;
}
;
_.process = function process_9(context){
    throw new UnsupportedOperationException_0('Patterns cannot be evaluated in push mode');
}
;
_.promote = function promote_23(offer, parent_0){
    this.pattern.promote_1(offer, this);
    return this;
}
;
_.simplify = function simplify_53(visitor){
    this.pattern = this.pattern.simplify_0(visitor);
    return this;
}
;
_.typeCheck = function typeCheck_68(visitor, contextItemType){
    this.pattern = this.pattern.analyze(visitor, contextItemType);
    return this;
}
;
var Lclient_net_sf_saxon_ce_pattern_PatternSponsor_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'PatternSponsor', 193, Lclient_net_sf_saxon_ce_expr_Expression_2_classLit);
function $gatherComponentPatterns(this$static, set_0){
    instanceOf(this$static.p1, 179)?$gatherComponentPatterns(dynamicCast(this$static.p1, 179), set_0):set_0.add_3(this$static.p1);
    instanceOf(this$static.p2, 179)?$gatherComponentPatterns(dynamicCast(this$static.p2, 179), set_0):set_0.add_3(this$static.p2);
}

function UnionPattern(p1, p2){
    this.p1 = p1;
    this.p2 = p2;
    p1.getNodeKind() == p2.getNodeKind() && (this.nodeType_0 = p1.getNodeKind());
}

defineClass(179, 117, {28:1, 117:1, 179:1}, UnionPattern);
_.allocateSlots = function allocateSlots_3(nextFree){
    !!this.variableBinding && (nextFree = allocateSlots(this.variableBinding, nextFree));
    nextFree = this.p1.allocateSlots(nextFree);
    nextFree = this.p2.allocateSlots(nextFree);
    return nextFree;
}
;
_.analyze = function analyze_2(visitor, contextItemType){
    this.p1 = this.p1.analyze(visitor, contextItemType);
    this.p2 = this.p2.analyze(visitor, contextItemType);
    return this;
}
;
_.equals$ = function equals_33(other){
    var s0, s1;
    if (instanceOf(other, 179)) {
        s0 = new HashSet_0(10);
        $gatherComponentPatterns(this, s0);
        s1 = new HashSet_0(10);
        $gatherComponentPatterns(dynamicCast(other, 179), s1);
        return $equals_7(s0, s1);
    }
    else {
        return false;
    }
}
;
_.getDependencies = function getDependencies_8(){
    return this.p1.getDependencies() | this.p2.getDependencies();
}
;
_.getNodeKind = function getNodeKind_6(){
    return this.nodeType_0;
}
;
_.getNodeTest = function getNodeTest_3(){
    return this.nodeType_0 == 0?($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7):makeNodeKindTest(this.nodeType_0);
}
;
_.hashCode$ = function hashCode_37(){
    return -1680399450 ^ this.p1.hashCode$() ^ this.p2.hashCode$();
}
;
_.iterateSubExpressions = function iterateSubExpressions_36(){
    var i1, i2, list;
    list = new ArrayList;
    !!this.variableBinding && $add_16(list, this.variableBinding);
    for (i1 = this.p1.iterateSubExpressions(); i1.hasNext();) {
        $add_16(list, dynamicCast(i1.next_2(), 6));
    }
    for (i2 = this.p2.iterateSubExpressions(); i2.hasNext();) {
        $add_16(list, dynamicCast(i2.next_2(), 6));
    }
    return new AbstractList$IteratorImpl(list);
}
;
_.matches_2 = function matches_26(e, context){
    $bindCurrent(this, e, context);
    return this.p1.matches_2(e, context) || this.p2.matches_2(e, context);
}
;
_.promote_1 = function promote_24(offer, parent_0){
    this.p1.promote_1(offer, parent_0);
    this.p2.promote_1(offer, parent_0);
}
;
_.resolveCurrent = function resolveCurrent_1(let_0, offer, topLevel){
    this.p1.resolveCurrent(let_0, offer, false);
    this.p2.resolveCurrent(let_0, offer, false);
    topLevel && (this.variableBinding = let_0);
}
;
_.setExecutable = function setExecutable_1(executable){
    this.p1.setExecutable(executable);
    this.p2.setExecutable(executable);
    this.executable = executable;
}
;
_.setOriginalText = function setOriginalText_0(pattern){
    this.originalText = pattern;
    this.p1.setOriginalText(pattern);
    this.p2.setOriginalText(pattern);
}
;
_.setSystemId = function setSystemId_5(systemId){
    this.systemId = systemId;
    this.p1.setSystemId(systemId);
    this.p2.setSystemId(systemId);
}
;
_.simplify_0 = function simplify_54(visitor){
    this.p1 = this.p1.simplify_0(visitor);
    this.p2 = this.p2.simplify_0(visitor);
    return this;
}
;
_.nodeType_0 = 0;
var Lclient_net_sf_saxon_ce_pattern_UnionPattern_2_classLit = createForClass('client.net.sf.saxon.ce.pattern', 'UnionPattern', 179, Lclient_net_sf_saxon_ce_pattern_Pattern_2_classLit);
function $getRegexGroup(this$static, number){
    var us;
    if (!(!this$static.next && this$static.prevEnd >= 0)) {
        return null;
    }
    if (number >= this$static.matcher.parenCount || number < 0)
        return '';
    us = $getParen(this$static.matcher, number);
    return !us?'':us.toString$();
}

function $isMatching(this$static){
    return !this$static.next && this$static.prevEnd >= 0;
}

function ARegexIterator(string, regex, matcher){
    this.theString = string;
    this.regex = regex;
    this.matcher = matcher;
    this.next = null;
}

defineClass(433, 1, $intern_18, ARegexIterator);
_.getAnother = function getAnother_24(){
    return new ARegexIterator(this.theString, this.regex, new REMatcher(this.matcher.program));
}
;
_.next_0 = function next_20(){
    var end, start_0;
    if (!this.next && this.prevEnd >= 0) {
        if ($match(this.matcher, this.theString, this.prevEnd)) {
            start_0 = $getParenStart(this.matcher, 0);
            end = $getParenEnd(this.matcher, 0);
            if (this.prevEnd == start_0) {
                this.next = null;
                this.current = this.theString.substring_0(start_0, end);
                this.prevEnd = end;
            }
            else {
                this.current = this.theString.substring_0(this.prevEnd, start_0);
                this.next = this.theString.substring_0(start_0, end);
            }
        }
        else {
            if (this.prevEnd < this.theString.length_1()) {
                this.current = this.theString.substring_0(this.prevEnd, this.theString.length_1());
                this.next = null;
            }
            else {
                this.current = null;
                this.prevEnd = -1;
                return null;
            }
            this.prevEnd = -1;
        }
    }
    else {
        if (this.prevEnd >= 0) {
            this.current = this.next;
            this.next = null;
            this.prevEnd = $getParenEnd(this.matcher, 0);
        }
        else {
            this.current = null;
            return null;
        }
    }
    return instanceOf(this.current, 114)?makeStringValue(dynamicCast(this.current, 114).src_0):makeStringValue(this.current.toString$());
}
;
_.prevEnd = 0;
var Lclient_net_sf_saxon_ce_regex_ARegexIterator_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'ARegexIterator', 433, Ljava_lang_Object_2_classLit);
function $containsMatch(this$static, input_0){
    var matcher;
    matcher = new REMatcher(this$static.regex);
    return $match(matcher, containsSurrogatePairs(input_0)?new GeneralUnicodeString(input_0):new BMPString(input_0), 0);
}

function $matches_0(this$static, input_0){
    var matcher;
    if (length__I__devirtual$(input_0) == 0) {
        return this$static.regex.nullable;
    }
    matcher = new REMatcher(this$static.regex);
    return $anchoredMatch(matcher, containsSurrogatePairs(input_0)?new GeneralUnicodeString(input_0):new BMPString(input_0));
}

function $replace(this$static, input_0, replacement){
    var err, in_$, matcher, rep;
    matcher = new REMatcher(this$static.regex);
    if ($match(matcher, containsSurrogatePairs('')?new GeneralUnicodeString(''):new BMPString(''), 0)) {
        throw new XPathException_2('The regular expression must not be one that matches a zero-length string', 'FORX0003');
    }
    in_$ = containsSurrogatePairs(input_0)?new GeneralUnicodeString(input_0):new BMPString(input_0);
    rep = containsSurrogatePairs(replacement)?new GeneralUnicodeString(replacement):new BMPString(replacement);
    try {
        return $subst(matcher, in_$, rep);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 158)) {
            err = $e0;
            throw new XPathException_2(err.detailMessage, 'FORX0004');
        }
        else 
            throw unwrap($e0);
    }
}

function ARegularExpression(pattern, flags){
    var comp2, err, reFlags;
    try {
        reFlags = new REFlags(flags);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 158)) {
            err = $e0;
            throw new XPathException_2(err.detailMessage, 'FORX0001');
        }
        else 
            throw unwrap($e0);
    }
    try {
        this.rawPattern = containsSurrogatePairs(pattern)?new GeneralUnicodeString(pattern):new BMPString(pattern);
        comp2 = new RECompiler;
        comp2.reFlags = reFlags;
        comp2.isXPath = reFlags.xpath20;
        comp2.isXPath30 = reFlags.xpath30;
        this.regex = $compile(comp2, this.rawPattern);
    }
    catch ($e1) {
        $e1 = wrap_0($e1);
        if (instanceOf($e1, 158)) {
            err = $e1;
            throw new XPathException_2(err.detailMessage, 'FORX0002');
        }
        else 
            throw unwrap($e1);
    }
}

function make_2(pattern){
    var e;
    try {
        return new ARegularExpression(pattern, '');
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            throw new IllegalArgumentException_1(e);
        }
        else 
            throw unwrap($e0);
    }
}

defineClass(282, 1, {}, ARegularExpression);
var Lclient_net_sf_saxon_ce_regex_ARegularExpression_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'ARegularExpression', 282, Ljava_lang_Object_2_classLit);
function ATokenIterator(input_0, matcher){
    this.input_0 = input_0;
    this.matcher = matcher;
    this.prevEnd = 0;
}

defineClass(509, 1, $intern_18, ATokenIterator);
_.getAnother = function getAnother_25(){
    return new ATokenIterator(this.input_0, new REMatcher(this.matcher.program));
}
;
_.next_0 = function next_21(){
    var start_0;
    if (this.prevEnd < 0) {
        this.current = null;
        return null;
    }
    if ($match(this.matcher, this.input_0, this.prevEnd)) {
        start_0 = $getParenStart(this.matcher, 0);
        this.current = this.input_0.substring_0(this.prevEnd, start_0);
        this.prevEnd = $getParenEnd(this.matcher, 0);
    }
    else {
        this.current = this.input_0.substring_0(this.prevEnd, this.input_0.length_1());
        this.prevEnd = -1;
    }
    return instanceOf(this.current, 114)?makeStringValue(dynamicCast(this.current, 114).src_0):makeStringValue(this.current.toString$());
}
;
_.prevEnd = 0;
var Lclient_net_sf_saxon_ce_regex_ATokenIterator_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'ATokenIterator', 509, Ljava_lang_Object_2_classLit);
function BMPString(src_0){
    this.src_0 = src_0;
}

defineClass(114, 1, {114:1}, BMPString);
_.charAt = function charAt(pos){
    return charAt_I_C__devirtual$(this.src_0, pos);
}
;
_.indexOf_0 = function indexOf(search, pos){
    var i_0;
    if (search > $intern_2) {
        return -1;
    }
    else {
        for (i_0 = pos; i_0 < length__I__devirtual$(this.src_0); i_0++) {
            if (charAt_I_C__devirtual$(this.src_0, i_0) == (search & $intern_2)) {
                return i_0;
            }
        }
        return -1;
    }
}
;
_.isEnd = function isEnd(pos){
    return pos >= length__I__devirtual$(this.src_0);
}
;
_.length_1 = function length_1(){
    return length__I__devirtual$(this.src_0);
}
;
_.substring_0 = function substring(beginIndex, endIndex){
    return new BMPString(subSequence_II_Ljava_lang_CharSequence___devirtual$(this.src_0, beginIndex, endIndex));
}
;
_.toString$ = function toString_37(){
    return toString__Ljava_lang_String___devirtual$_0(this.src_0);
}
;
var Lclient_net_sf_saxon_ce_regex_BMPString_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'BMPString', 114, Ljava_lang_Object_2_classLit);
function $clinit_CaseVariants(){
    $clinit_CaseVariants = emptyMethod;
    EMPTY_INT_ARRAY = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, []);
    ROMAN_VARIANTS = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [304, 305, 8490, 383]);
}

function build_0(){
    var code_0, config, doc, e, i_0, icode, item_0, iter, variants, vhex, vint;
    monoVariants = new HashMap_0(2500);
    polyVariants = new HashMap_0(100);
    config = new Configuration;
    try {
        doc = $buildDocument(config, 'casevariants.xml');
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            throw new RuntimeException_1('Failed to build casevariants.xml', e);
        }
        else 
            throw unwrap($e0);
    }
    iter = $iterateAxis_0(doc, 4, new NameTest_0(1, '', 'c'));
    while (true) {
        item_0 = dynamicCast(iter.next_0(), 7);
        if (!item_0) {
            break;
        }
        code_0 = getAttributeValue(item_0, '', 'n');
        icode = __parseAndValidateInt(code_0, 16);
        variants = getAttributeValue(item_0, '', 'v');
        vhex = $split(variants, ',', 0);
        vint = initDim(I_classLit, $intern_4, 0, vhex.length, 7, 1);
        for (i_0 = 0; i_0 < vhex.length; i_0++) {
            vint[i_0] = __parseAndValidateInt(vhex[i_0], 16);
        }
        vhex.length == 1?$put_0(monoVariants, valueOf(icode), valueOf(vint[0])):$put_0(polyVariants, valueOf(icode), vint);
    }
}

function getCaseVariants(code_0){
    $clinit_CaseVariants();
    var mono, result;
    !monoVariants && build_0();
    mono = dynamicCast($get_0(monoVariants, valueOf(code_0)), 83);
    if (mono) {
        return initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [mono.value_0]);
    }
    else {
        result = dynamicCast($get_0(polyVariants, valueOf(code_0)), 18);
        return result == null?EMPTY_INT_ARRAY:result;
    }
}

var EMPTY_INT_ARRAY, ROMAN_VARIANTS, monoVariants = null, polyVariants = null;
function $clinit_Categories(){
    $clinit_Categories = emptyMethod;
    ESCAPE_s = new IntSetPredicate(fromArray(initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [9, 10, 13, 32])));
    ESCAPE_S = new IntComplementPredicate(ESCAPE_s);
    ESCAPE_i = new Categories$1;
    ESCAPE_I = new Categories$2;
    ESCAPE_c = new Categories$3;
    ESCAPE_C = new Categories$4;
    ESCAPE_d = (!CATEGORIES && build_1() , dynamicCast($getStringValue_1(CATEGORIES, 'Nd'), 110));
    ESCAPE_D = new IntComplementPredicate(ESCAPE_d);
    CATEGORY_P = (!CATEGORIES && build_1() , dynamicCast($getStringValue_1(CATEGORIES, 'P'), 110));
    CATEGORY_Z = (!CATEGORIES && build_1() , dynamicCast($getStringValue_1(CATEGORIES, 'Z'), 110));
    CATEGORY_C = (!CATEGORIES && build_1() , dynamicCast($getStringValue_1(CATEGORIES, 'C'), 110));
    ESCAPE_w = new Categories$5;
    ESCAPE_W = new IntComplementPredicate(ESCAPE_w);
}

function build_1(){
    var cat, ch_0, config, doc, e, entry, entry$iterator, from, i_0, ip, irs, item_0, iter, iter2, r, to;
    CATEGORIES = new HashMap_0(30);
    config = new Configuration;
    try {
        doc = $buildDocument(config, 'categories.xml');
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            throw new RuntimeException_1('Failed to build categories.xml', e);
        }
        else 
            throw unwrap($e0);
    }
    iter = $iterateAxis_0(doc, 4, new NameTest_0(1, '', 'cat'));
    while (true) {
        item_0 = dynamicCast(iter.next_0(), 7);
        if (!item_0) {
            break;
        }
        cat = getAttributeValue(item_0, '', 'name');
        irs = new IntRangeSet;
        iter2 = item_0.iterateAxis(3, ($clinit_NodeKindTest() , ELEMENT));
        while (true) {
            r = dynamicCast(iter2.next_0(), 7);
            if (!r) {
                break;
            }
            from = getAttributeValue(r, '', 'f');
            to = getAttributeValue(r, '', 't');
            $addRange(irs, __parseAndValidateInt(from, 16), __parseAndValidateInt(to, 16));
        }
        $putStringValue(CATEGORIES, cat, new IntSetPredicate(irs));
    }
    for (i_0 = 0; i_0 < 7; i_0++) {
        ch_0 = 'CLMNPSZ'.charCodeAt(i_0);
        ip = null;
        for (entry$iterator = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(CATEGORIES)).this$01); $hasNext_2(entry$iterator);) {
            entry = (checkStructuralChange(entry$iterator.this$01, entry$iterator) , checkCriticalElement($hasNext_2(entry$iterator)) , entry$iterator.last = entry$iterator.current , dynamicCast(entry$iterator.current.next_2(), 97));
            dynamicCastToString(entry.getKey()).charCodeAt(0) == ch_0 && (ip = !ip?dynamicCast(entry.getValue(), 110):new IntUnionPredicate(ip, dynamicCast(entry.getValue(), 110)));
        }
        $putStringValue(CATEGORIES, charToString(ch_0) + '', ip);
    }
}

function getCategory(cat){
    $clinit_Categories();
    !CATEGORIES && build_1();
    return dynamicCast($getStringValue_1(CATEGORIES, cat), 110);
}

var CATEGORIES = null, CATEGORY_C, CATEGORY_P, CATEGORY_Z, ESCAPE_C, ESCAPE_D, ESCAPE_I, ESCAPE_S, ESCAPE_W, ESCAPE_c, ESCAPE_d, ESCAPE_i, ESCAPE_s, ESCAPE_w;
function Categories$1(){
}

defineClass(803, 1, $intern_56, Categories$1);
_.matches = function matches_27(value_0){
    return $clinit_NameChecker() , $contains_0(ncNameStartChars, value_0) || value_0 == 58;
}
;
var Lclient_net_sf_saxon_ce_regex_Categories$1_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Categories/1', 803, Ljava_lang_Object_2_classLit);
function Categories$2(){
}

defineClass(804, 1, $intern_56, Categories$2);
_.matches = function matches_28(value_0){
    return $clinit_NameChecker() , !($contains_0(ncNameStartChars, value_0) || value_0 == 58);
}
;
var Lclient_net_sf_saxon_ce_regex_Categories$2_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Categories/2', 804, Ljava_lang_Object_2_classLit);
function Categories$3(){
}

defineClass(805, 1, $intern_56, Categories$3);
_.matches = function matches_29(value_0){
    return $clinit_NameChecker() , $contains_0(ncNameStartChars, value_0) || $contains_0(ncNameChars, value_0) || value_0 == 58;
}
;
var Lclient_net_sf_saxon_ce_regex_Categories$3_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Categories/3', 805, Ljava_lang_Object_2_classLit);
function Categories$4(){
}

defineClass(806, 1, $intern_56, Categories$4);
_.matches = function matches_30(value_0){
    return $clinit_NameChecker() , !($contains_0(ncNameStartChars, value_0) || $contains_0(ncNameChars, value_0) || value_0 == 58);
}
;
var Lclient_net_sf_saxon_ce_regex_Categories$4_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Categories/4', 806, Ljava_lang_Object_2_classLit);
function Categories$5(){
}

defineClass(807, 1, $intern_56, Categories$5);
_.matches = function matches_31(value_0){
    return !(($clinit_Categories() , CATEGORY_P).matches(value_0) || CATEGORY_Z.matches(value_0) || CATEGORY_C.matches(value_0));
}
;
var Lclient_net_sf_saxon_ce_regex_Categories$5_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Categories/5', 807, Ljava_lang_Object_2_classLit);
function GeneralUnicodeString(in_$){
    this.chars = expand_0(in_$);
    this.start_0 = 0;
    this.end = this.chars.length;
}

function GeneralUnicodeString_0(chars, start_0, end){
    this.chars = chars;
    this.start_0 = start_0;
    this.end = end;
}

function containsSurrogatePairs(value_0){
    var c, i_0;
    for (i_0 = 0; i_0 < length__I__devirtual$(value_0); i_0++) {
        c = charAt_I_C__devirtual$(value_0, i_0);
        if (c >= $intern_48 && c < $intern_49) {
            return true;
        }
    }
    return false;
}

function makeUnicodeString(in_$){
    return containsSurrogatePairs(in_$)?new GeneralUnicodeString(in_$):new BMPString(in_$);
}

defineClass(152, 1, {}, GeneralUnicodeString, GeneralUnicodeString_0);
_.charAt = function charAt_0(pos){
    return this.chars[this.start_0 + pos];
}
;
_.indexOf_0 = function indexOf_0(search, pos){
    var i_0;
    for (i_0 = pos; i_0 < this.end - this.start_0; i_0++) {
        if (this.chars[this.start_0 + i_0] == search) {
            return i_0;
        }
    }
    return -1;
}
;
_.isEnd = function isEnd_0(pos){
    return pos >= this.end - this.start_0;
}
;
_.length_1 = function length_2(){
    return this.end - this.start_0;
}
;
_.substring_0 = function substring_0(beginIndex, endIndex){
    if (endIndex > this.chars.length) {
        throw new IndexOutOfBoundsException_0('endIndex=' + endIndex + '; sequence size=' + this.chars.length);
    }
    if (beginIndex < 0 || beginIndex > endIndex) {
        throw new IndexOutOfBoundsException_0('beginIndex=' + beginIndex + '; endIndex=' + endIndex);
    }
    return new GeneralUnicodeString_0(this.chars, this.start_0 + beginIndex, this.start_0 + endIndex);
}
;
_.toString$ = function toString_38(){
    var c;
    c = this.chars;
    if (this.start_0 != 0) {
        c = initDim(I_classLit, $intern_4, 0, this.end - this.start_0, 7, 1);
        arraycopy(this.chars, this.start_0, c, 0, this.end - this.start_0);
    }
    return $toString_0(contract(c, this.end - this.start_0));
}
;
_.end = 0;
_.start_0 = 0;
var Lclient_net_sf_saxon_ce_regex_GeneralUnicodeString_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'GeneralUnicodeString', 152, Ljava_lang_Object_2_classLit);
defineClass(69, 1, $intern_65);
_.nextAction = function nextAction(idx){
    return idx == -1?2:1;
}
;
_.next = 0;
var Lclient_net_sf_saxon_ce_regex_Operation_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation', 69, Ljava_lang_Object_2_classLit);
function Operation$OpAtom(){
}

defineClass(139, 69, {69:1, 139:1}, Operation$OpAtom);
_.exec_2 = function exec_1(matcher, node, idx){
    var i_0, search;
    search = matcher.search_0;
    if (search.isEnd(idx)) {
        return -1;
    }
    if (search.isEnd(this.atom.length_1() + idx - 1)) {
        return -1;
    }
    if (matcher.program.flags.caseIndependent) {
        for (i_0 = 0; i_0 < this.atom.length_1(); i_0++) {
            if (!$equalCaseBlind(search.charAt(idx++), this.atom.charAt(i_0))) {
                return -1;
            }
        }
    }
    else {
        for (i_0 = 0; i_0 < this.atom.length_1(); i_0++) {
            if (search.charAt(idx++) != this.atom.charAt(i_0)) {
                return -1;
            }
        }
    }
    return idx;
}
;
_.exec_1 = _.exec_2;
_.toString$ = function toString_39(){
    return 'ATOM "' + this.atom.toString$() + '"';
}
;
var Lclient_net_sf_saxon_ce_regex_Operation$OpAtom_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpAtom', 139, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpBOL(){
}

defineClass(290, 69, {69:1, 290:1}, Operation$OpBOL);
_.exec_2 = function exec_2(matcher, node, idx){
    if (idx != 0) {
        if (matcher.program.flags.multiLine) {
            if (matcher.search_0.charAt(idx - 1) == 10) {
                return idx;
            }
        }
        return -1;
    }
    return 0;
}
;
_.exec_1 = _.exec_2;
_.toString$ = function toString_40(){
    return 'BOL';
}
;
var Lclient_net_sf_saxon_ce_regex_Operation$OpBOL_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpBOL', 290, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpBackReference(){
}

defineClass(388, 69, {69:1, 388:1}, Operation$OpBackReference);
_.exec_2 = function exec_3(matcher, node, idx){
    var e, i_0, l, s, search;
    s = matcher.startBackref[this.groupNr];
    e = matcher.endBackref[this.groupNr];
    if (s == -1 || e == -1) {
        return -1;
    }
    if (s == e) {
        return idx;
    }
    l = e - s;
    search = matcher.search_0;
    if (search.isEnd(idx + l - 1)) {
        return -1;
    }
    if (matcher.program.flags.caseIndependent) {
        for (i_0 = 0; i_0 < l; i_0++) {
            if (!$equalCaseBlind(search.charAt(idx++), search.charAt(s + i_0))) {
                return -1;
            }
        }
    }
    else {
        for (i_0 = 0; i_0 < l; i_0++) {
            if (search.charAt(idx++) != search.charAt(s + i_0)) {
                return -1;
            }
        }
    }
    return idx;
}
;
_.exec_1 = _.exec_2;
_.toString$ = function toString_41(){
    return 'BACKREF ' + this.groupNr;
}
;
_.groupNr = 0;
var Lclient_net_sf_saxon_ce_regex_Operation$OpBackReference_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpBackReference', 388, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpBranch(){
}

defineClass(251, 69, {69:1, 251:1}, Operation$OpBranch);
_.exec_2 = function exec_4(matcher, node, idx){
    var idxNew;
    do {
        if ((idxNew = $matchNodes(matcher, node + 1, idx)) != -1) {
            return idxNew;
        }
        node = matcher.instructions[node].next;
    }
    while (node != -1 && instanceOf(matcher.program.instructions[node], 251));
    return -1;
}
;
_.exec_1 = _.exec_2;
_.nextAction = function nextAction_0(idx){
    return 2;
}
;
_.toString$ = function toString_42(){
    return 'BRANCH';
}
;
var Lclient_net_sf_saxon_ce_regex_Operation$OpBranch_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpBranch', 251, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpCharClass(){
}

defineClass(189, 69, {69:1, 189:1}, Operation$OpCharClass);
_.exec_2 = function exec_5(matcher, node, idx){
    var search;
    search = matcher.search_0;
    if (search.isEnd(idx)) {
        return -1;
    }
    if (!this.predicate.matches(search.charAt(idx))) {
        return -1;
    }
    return idx + 1;
}
;
_.exec_1 = _.exec_2;
_.toString$ = function toString_43(){
    return 'CHAR_CLASS (' + this.predicate.___clazz$ + ') ';
}
;
var Lclient_net_sf_saxon_ce_regex_Operation$OpCharClass_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpCharClass', 189, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpClose(groupNr){
    this.groupNr = groupNr;
}

defineClass(386, 69, {69:1, 386:1}, Operation$OpClose);
_.exec_2 = function exec_6(matcher, node, idx){
    var idxNew;
    (matcher.program.optimizationFlags & 1) != 0 && (matcher.endBackref[this.groupNr] = idx);
    idxNew = $matchNodes(matcher, this.next, idx);
    if (idxNew != -1) {
        this.groupNr >= matcher.parenCount && (matcher.parenCount = this.groupNr + 1);
        $getParenEnd(matcher, this.groupNr) == -1 && $setParenEnd(matcher, this.groupNr, idx);
    }
    return idxNew;
}
;
_.exec_1 = _.exec_2;
_.nextAction = function nextAction_1(idx){
    return 2;
}
;
_.toString$ = function toString_44(){
    return 'CLOSE_GROUP ' + this.groupNr;
}
;
_.groupNr = 0;
var Lclient_net_sf_saxon_ce_regex_Operation$OpClose_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpClose', 386, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpCloseCluster(){
}

defineClass(387, 69, {69:1, 387:1}, Operation$OpCloseCluster);
_.exec_2 = function exec_7(matcher, node, idx){
    return idx;
}
;
_.exec_1 = _.exec_2;
_.nextAction = function nextAction_2(idx){
    return 1;
}
;
_.toString$ = function toString_45(){
    return 'CLOSE_CLUSTER';
}
;
var Lclient_net_sf_saxon_ce_regex_Operation$OpCloseCluster_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpCloseCluster', 387, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpConfidentPlus(){
}

defineClass(682, 69, $intern_65, Operation$OpConfidentPlus);
_.exec_2 = function exec_8(matcher, node, idx){
    var newIdx, term;
    if ($beenHereBefore(matcher, idx, node)) {
        return -1;
    }
    term = matcher.instructions[node - 1];
    while (true) {
        newIdx = term.exec_1(matcher, node - 1, idx);
        if (newIdx == -1) {
            return idx;
        }
        else {
            idx = newIdx;
        }
    }
}
;
_.exec_1 = _.exec_2;
_.nextAction = function nextAction_3(idx){
    return 1;
}
;
_.toString$ = function toString_46(){
    return 'CONFIDENT_PLUS';
}
;
var Lclient_net_sf_saxon_ce_regex_Operation$OpConfidentPlus_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpConfidentPlus', 682, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpConfidentStar(){
}

defineClass(681, 69, $intern_65, Operation$OpConfidentStar);
_.exec_2 = function exec_9(matcher, node, idx){
    var newIdx, term;
    if ($beenHereBefore(matcher, idx, node)) {
        return -1;
    }
    term = matcher.instructions[node + 1];
    while (true) {
        newIdx = term.exec_1(matcher, node + 1, idx);
        if (newIdx == -1) {
            return idx;
        }
        else {
            idx = newIdx;
        }
    }
}
;
_.exec_1 = _.exec_2;
_.nextAction = function nextAction_4(idx){
    return 1;
}
;
_.toString$ = function toString_47(){
    return 'CONFIDENT_STAR';
}
;
var Lclient_net_sf_saxon_ce_regex_Operation$OpConfidentStar_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpConfidentStar', 681, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpContinue(){
}

defineClass(438, 69, $intern_65, Operation$OpContinue);
_.exec_2 = function exec_10(matcher, node, idx){
    return idx;
}
;
_.exec_1 = _.exec_2;
_.nextAction = function nextAction_5(idx){
    return 3;
}
;
_.toString$ = function toString_48(){
    return 'CONTINUE';
}
;
var Lclient_net_sf_saxon_ce_regex_Operation$OpContinue_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpContinue', 438, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpEOL(){
}

defineClass(327, 69, {69:1, 327:1}, Operation$OpEOL);
_.exec_2 = function exec_11(matcher, node, idx){
    var search;
    search = matcher.search_0;
    return matcher.program.flags.multiLine?search.isEnd(0) || search.isEnd(idx) || matcher.search_0.charAt(idx) == 10?idx:-1:search.isEnd(0) || search.isEnd(idx) || matcher.search_0.charAt(idx) == 10 && search.isEnd(idx + 1)?idx:-1;
}
;
_.exec_1 = _.exec_2;
_.toString$ = function toString_49(){
    return 'EOL';
}
;
var Lclient_net_sf_saxon_ce_regex_Operation$OpEOL_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpEOL', 327, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpEndProgram(){
}

defineClass(289, 69, {69:1, 289:1}, Operation$OpEndProgram);
_.exec_2 = function exec_12(matcher, node, idx){
    if (matcher.anchoredMatch) {
        return matcher.search_0.isEnd(idx)?idx:-1;
    }
    else {
        $setParenEnd(matcher, 0, idx);
        return idx;
    }
}
;
_.exec_1 = _.exec_2;
_.nextAction = function nextAction_6(idx){
    return 2;
}
;
_.toString$ = function toString_50(){
    return 'END';
}
;
var Lclient_net_sf_saxon_ce_regex_Operation$OpEndProgram_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpEndProgram', 289, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpMaybe(){
}

defineClass(385, 69, $intern_65, Operation$OpMaybe);
_.exec_2 = function exec_13(matcher, node, idx){
    if ($beenHereBefore(matcher, idx, node)) {
        return -1;
    }
    return $matchNodes(matcher, node + 1, idx);
}
;
_.exec_1 = _.exec_2;
_.nextAction = function nextAction_7(idx){
    return idx == -1?1:2;
}
;
_.toString$ = function toString_51(){
    return 'MAYBE';
}
;
var Lclient_net_sf_saxon_ce_regex_Operation$OpMaybe_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpMaybe', 385, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpNothing(){
}

defineClass(204, 69, $intern_65, Operation$OpNothing);
_.exec_2 = function exec_14(matcher, node, idx){
    return idx;
}
;
_.exec_1 = _.exec_2;
_.nextAction = function nextAction_8(idx){
    return 1;
}
;
_.toString$ = function toString_52(){
    return 'NOTHING';
}
;
var Lclient_net_sf_saxon_ce_regex_Operation$OpNothing_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpNothing', 204, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpOpen(group){
    this.groupNr = group;
}

defineClass(683, 69, $intern_65, Operation$OpOpen);
_.exec_2 = function exec_15(matcher, node, idx){
    var idxNew;
    (matcher.program.optimizationFlags & 1) != 0 && (matcher.startBackref[this.groupNr] = idx);
    idxNew = $matchNodes(matcher, this.next, idx);
    if (idxNew != -1) {
        this.groupNr >= matcher.parenCount && (matcher.parenCount = this.groupNr + 1);
        $getParenStart(matcher, this.groupNr) == -1 && $setParenStart(matcher, this.groupNr, idx);
    }
    return idxNew;
}
;
_.exec_1 = _.exec_2;
_.nextAction = function nextAction_9(idx){
    return 2;
}
;
_.toString$ = function toString_53(){
    return 'OPEN_GROUP ' + this.groupNr;
}
;
_.groupNr = 0;
var Lclient_net_sf_saxon_ce_regex_Operation$OpOpen_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpOpen', 683, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpOpenCluster(){
}

defineClass(684, 69, $intern_65, Operation$OpOpenCluster);
_.exec_2 = function exec_16(matcher, node, idx){
    return idx;
}
;
_.exec_1 = _.exec_2;
_.nextAction = function nextAction_10(idx){
    return 1;
}
;
_.toString$ = function toString_54(){
    return 'OPEN_CLUSTER';
}
;
var Lclient_net_sf_saxon_ce_regex_Operation$OpOpenCluster_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpOpenCluster', 684, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpPlus(){
}

defineClass(384, 69, {69:1, 384:1}, Operation$OpPlus);
_.exec_2 = function exec_17(matcher, node, idx){
    return $matchNodes(matcher, this.next, idx);
}
;
_.exec_1 = _.exec_2;
_.nextAction = function nextAction_11(idx){
    return idx == -1?4:2;
}
;
_.toString$ = function toString_55(){
    return 'PLUS';
}
;
var Lclient_net_sf_saxon_ce_regex_Operation$OpPlus_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpPlus', 384, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpReluctantMaybe(){
}

defineClass(389, 69, $intern_65, Operation$OpReluctantMaybe);
_.exec_2 = function exec_18(matcher, node, idx){
    var idxNew;
    if ($beenHereBefore(matcher, idx, node)) {
        return -1;
    }
    idxNew = $matchNodes(matcher, this.next, idx);
    if (idxNew != -1) {
        return idxNew;
    }
    return $matchNodes(matcher, node + 1, idx);
}
;
_.exec_1 = _.exec_2;
_.nextAction = function nextAction_12(idx){
    return 2;
}
;
_.toString$ = function toString_56(){
    return 'RELUCTANT_MAYBE';
}
;
var Lclient_net_sf_saxon_ce_regex_Operation$OpReluctantMaybe_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpReluctantMaybe', 389, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpReluctantPlus(){
}

defineClass(685, 69, $intern_65, Operation$OpReluctantPlus);
_.exec_2 = function exec_19(matcher, node, idx){
    return $matchNodes(matcher, matcher.instructions[this.next].next, idx);
}
;
_.exec_1 = _.exec_2;
_.nextAction = function nextAction_13(idx){
    return idx == -1?1:2;
}
;
_.toString$ = function toString_57(){
    return 'RELUCTANT_PLUS';
}
;
var Lclient_net_sf_saxon_ce_regex_Operation$OpReluctantPlus_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpReluctantPlus', 685, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpReluctantStar(){
}

defineClass(439, 69, $intern_65, Operation$OpReluctantStar);
_.exec_2 = function exec_20(matcher, node, idx){
    var idxNew;
    if ($beenHereBefore(matcher, idx, node)) {
        return -1;
    }
    idxNew = $matchNodes(matcher, this.next, idx);
    if (idxNew != -1) {
        return idxNew;
    }
    return $matchNodes(matcher, node + 1, idx);
}
;
_.exec_1 = _.exec_2;
_.nextAction = function nextAction_14(idx){
    return 2;
}
;
_.toString$ = function toString_58(){
    return 'RELUCTANT_STAR';
}
;
var Lclient_net_sf_saxon_ce_regex_Operation$OpReluctantStar_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpReluctantStar', 439, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function Operation$OpStar(){
}

defineClass(328, 69, {69:1, 328:1}, Operation$OpStar);
_.exec_2 = function exec_21(matcher, node, idx){
    if ($beenHereBefore(matcher, idx, node)) {
        return -1;
    }
    return $matchNodes(matcher, node + 1, idx);
}
;
_.exec_1 = _.exec_2;
_.nextAction = function nextAction_15(idx){
    return idx == -1?1:2;
}
;
_.toString$ = function toString_59(){
    return 'STAR';
}
;
var Lclient_net_sf_saxon_ce_regex_Operation$OpStar_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'Operation/OpStar', 328, Lclient_net_sf_saxon_ce_regex_Operation_2_classLit);
function $appendNode(this$static, node){
    $add_16(this$static.instructions, node);
    return this$static.instructions.array.length - 1;
}

function $atom(this$static){
    var c, charClass, fsb, idxBeforeEscape, idxEscape, lenAtom, node;
    node = new Operation$OpAtom;
    lenAtom = 0;
    fsb = new FastStringBuffer(64);
    atomLoop: while (this$static.idx < this$static.len) {
        if (this$static.idx + 1 < this$static.len) {
            c = this$static.pattern.charAt(this$static.idx + 1);
            if (this$static.pattern.charAt(this$static.idx) == 92) {
                idxEscape = this$static.idx;
                $escape(this$static, false);
                this$static.idx < this$static.len && (c = this$static.pattern.charAt(this$static.idx));
                this$static.idx = idxEscape;
            }
            switch (c) {
                case 123:
            case 63:
        case 42:
    case 43:
        if (lenAtom != 0) {
            break atomLoop;
        }

            }
        }
        switch (this$static.pattern.charAt(this$static.idx)) {
            case 93:
        case 46:
    case 91:
case 40:
      case 41:
  case 124:
      break atomLoop;
  case 123:
      case 63:
  case 42:
      case 43:
          lenAtom == 0 && $syntaxError(this$static, 'No expression before quantifier');
          break atomLoop;
      case 92:
          {
              idxBeforeEscape = this$static.idx;
              charClass = $escape(this$static, false);
              if (instanceOf(charClass, 285) || !instanceOf(charClass, 118)) {
                  this$static.idx = idxBeforeEscape;
                  break atomLoop;
              }
              $appendWideChar(fsb, dynamicCast(charClass, 118).target_0);
              ++lenAtom;
              break;
          }

      case 94:
  case 36:
      if (this$static.isXPath) {
          break atomLoop;
      }

  default:$appendWideChar(fsb, this$static.pattern.charAt(this$static.idx++));
      ++lenAtom;
        }
    }
    fsb.used == 0 && $internalError();
    node.atom = makeUnicodeString($condense(fsb));
    return $add_16(this$static.instructions, node) , this$static.instructions.array.length - 1;
}

function $bracket(this$static){
    var number;
    (this$static.idx >= this$static.len || this$static.pattern.charAt(this$static.idx++) != 123) && $internalError();
    (this$static.idx >= this$static.len || !isAsciiDigit(this$static.pattern.charAt(this$static.idx))) && $syntaxError(this$static, 'Expected digit');
    number = new StringBuffer;
    while (this$static.idx < this$static.len && isAsciiDigit(this$static.pattern.charAt(this$static.idx))) {
        $append_5(number, this$static.pattern.charAt(this$static.idx++) & $intern_2);
    }
    try {
        this$static.bracketMin = __parseAndValidateInt(number.string, 10);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 57)) {
            $syntaxError(this$static, 'Expected valid number');
        }
        else 
            throw unwrap($e0);
    }
    this$static.idx >= this$static.len && $syntaxError(this$static, 'Expected comma or right bracket');
    if (this$static.pattern.charAt(this$static.idx) == 125) {
        ++this$static.idx;
        this$static.bracketOpt = 0;
        return;
    }
    (this$static.idx >= this$static.len || this$static.pattern.charAt(this$static.idx++) != 44) && $syntaxError(this$static, 'Expected comma');
    this$static.idx >= this$static.len && $syntaxError(this$static, 'Expected comma or right bracket');
    if (this$static.pattern.charAt(this$static.idx) == 125) {
        ++this$static.idx;
        this$static.bracketOpt = -1;
        return;
    }
    (this$static.idx >= this$static.len || !isAsciiDigit(this$static.pattern.charAt(this$static.idx))) && $syntaxError(this$static, 'Expected digit');
    $setLength_0(number, 0);
    while (this$static.idx < this$static.len && isAsciiDigit(this$static.pattern.charAt(this$static.idx))) {
        $append_5(number, this$static.pattern.charAt(this$static.idx++) & $intern_2);
    }
    try {
        this$static.bracketOpt = __parseAndValidateInt(number.string, 10) - this$static.bracketMin;
    }
    catch ($e1) {
        $e1 = wrap_0($e1);
        if (instanceOf($e1, 57)) {
            $syntaxError(this$static, 'Expected valid number');
        }
        else 
            throw unwrap($e1);
    }
    this$static.bracketOpt < 0 && $syntaxError(this$static, 'Bad range');
    (this$static.idx >= this$static.len || this$static.pattern.charAt(this$static.idx++) != 125) && $syntaxError(this$static, 'Missing close brace');
}

function $branch(this$static, compilerFlags){
    var chain, node, nothing, nullable, quantifierFlags, ret;
    ret = -1;
    chain = -1;
    quantifierFlags = initDim(I_classLit, $intern_4, 0, 1, 7, 1);
    nullable = true;
    while (this$static.idx < this$static.len && this$static.pattern.charAt(this$static.idx) != 124 && this$static.pattern.charAt(this$static.idx) != 41) {
        quantifierFlags[0] = 0;
        node = $piece(this$static, quantifierFlags);
        quantifierFlags[0] == 0 && (nullable = false);
        chain != -1 && $setNextOfEnd(this$static, chain, node);
        chain = node;
        ret == -1 && (ret = node);
    }
    if (ret == -1) {
        nothing = new Operation$OpNothing;
        ret = ($add_16(this$static.instructions, nothing) , this$static.instructions.array.length - 1);
    }
    nullable && (compilerFlags[0] |= 1);
    return ret;
}

function $compile(this$static, pattern){
    var astral, ch_0, compilerFlags, end, endNode, escaped, i_0, i0, nesting, nullable, op, ops, program, ret, sb, node;
    this$static.pattern = pattern;
    this$static.len = pattern.length_1();
    this$static.idx = 0;
    this$static.parens = 1;
    nullable = false;
    if (this$static.reFlags.literal) {
        ret = (node = new Operation$OpAtom , node.atom = this$static.pattern , $add_16(this$static.instructions, node) , this$static.instructions.array.length - 1);
        endNode = new Operation$OpEndProgram;
        end = ($add_16(this$static.instructions, endNode) , this$static.instructions.array.length - 1);
        $setNextOfEnd(this$static, ret, end);
    }
    else {
        if (this$static.reFlags.allowWhitespace) {
            sb = new FastStringBuffer(pattern.length_1());
            nesting = 0;
            astral = false;
            escaped = false;
            for (i0 = 0; i0 < pattern.length_1(); i0++) {
                ch_0 = pattern.charAt(i0);
                ch_0 > $intern_2 && (astral = true);
                if (ch_0 == 92 && !escaped) {
                    escaped = true;
                    $appendWideChar(sb, 92);
                }
                else if (ch_0 == 91 && !escaped) {
                    ++nesting;
                    escaped = false;
                    $appendWideChar(sb, 91);
                }
                else if (ch_0 == 93 && !escaped) {
                    --nesting;
                    escaped = false;
                    $appendWideChar(sb, 93);
                }
                else if (nesting == 0 && isWhitespace_0(ch_0))
                    ;
                else {
                    escaped = false;
                    $appendWideChar(sb, ch_0);
                }
            }
            astral?(pattern = new GeneralUnicodeString(sb)):(pattern = new BMPString(sb));
            this$static.pattern = pattern;
            this$static.len = pattern.length_1();
        }
        compilerFlags = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [2]);
        $expr(this$static, compilerFlags);
        nullable = (compilerFlags[0] & 1) != 0;
        if (this$static.idx != this$static.len) {
            pattern.charAt(this$static.idx) == 41 && $syntaxError(this$static, 'Unmatched close paren');
            $syntaxError(this$static, 'Unexpected input remains');
        }
    }
    ops = initDim(Lclient_net_sf_saxon_ce_regex_Operation_2_classLit, $intern_1, 69, this$static.instructions.array.length, 0, 1);
    for (i_0 = 0; i_0 < this$static.instructions.array.length; i_0++) {
        op = dynamicCast($get_1(this$static.instructions, i_0), 69);
        op.next == 0?(op.next = -1):(op.next += i_0);
        setCheck(ops, i_0, op);
    }
    program = new REProgram(ops, this$static.parens, this$static.reFlags);
    this$static.reFlags.debug_0 && $display(program, ($clinit_System() , err_0));
    program.nullable = nullable;
    return program;
}

function $escape(this$static, inSquareBrackets){
    var backRef, backRef2, block, blockName, c1, close_0, escapeChar, explanation, primary, uniBlock;
    this$static.pattern.charAt(this$static.idx) != 92 && $internalError();
    this$static.idx + 1 == this$static.len && $syntaxError(this$static, 'Escape terminates string');
    this$static.idx += 2;
    escapeChar = this$static.pattern.charAt(this$static.idx - 1);
    switch (escapeChar) {
        case 110:
            return new IntValuePredicate(10);
        case 114:
            return new IntValuePredicate(13);
        case 116:
            return new IntValuePredicate(9);
        case 92:
    case 124:
case 46:
    case 45:
case 94:
    case 63:
case 42:
    case 43:
case 123:
    case 125:
case 40:
    case 41:
case 91:
    case 93:
        return new IntValuePredicate(escapeChar);
    case 36:
        if (this$static.isXPath) {
            return new IntValuePredicate(36);
        }
        else {
            $syntaxError(this$static, "In XSD, '$' must not be escaped");
        }

    case 115:
        return $clinit_Categories() , ESCAPE_s;
    case 83:
        return $clinit_Categories() , ESCAPE_S;
    case 105:
        return $clinit_Categories() , ESCAPE_i;
    case 73:
        return $clinit_Categories() , ESCAPE_I;
    case 99:
        return $clinit_Categories() , ESCAPE_c;
    case 67:
        return $clinit_Categories() , ESCAPE_C;
    case 100:
        return $clinit_Categories() , ESCAPE_d;
    case 68:
        return $clinit_Categories() , ESCAPE_D;
    case 119:
        return $clinit_Categories() , ESCAPE_w;
    case 87:
        return $clinit_Categories() , ESCAPE_W;
    case 112:
case 80:
    this$static.idx == this$static.len && $syntaxError(this$static, "Expected '{' after \\" + escapeChar);
        this$static.pattern.charAt(this$static.idx) != 123 && $syntaxError(this$static, "Expected '{' after \\" + escapeChar);
            close_0 = this$static.pattern.indexOf_0(125, this$static.idx++);
            close_0 == -1 && $syntaxError(this$static, "No closing '}' after \\" + escapeChar);
            block = this$static.pattern.substring_0(this$static.idx, close_0);
            if (block.length_1() == 1 || block.length_1() == 2) {
                primary = getCategory(block.toString$());
                !primary && $syntaxError(this$static, 'Unknown character category ' + block.toString$());
                this$static.idx = close_0 + 1;
                return escapeChar == 112?primary:instanceOf(primary, 164)?dynamicCast(primary, 164).p1:new IntComplementPredicate(primary);
            }
            else if ($startsWith(block.toString$(), 'Is')) {
                blockName = $substring_0(block.toString$(), 2);
                uniBlock = getBlock(blockName);
                if (!uniBlock) {
                    !this$static.warnings && (this$static.warnings = new ArrayList_0(4));
                    $add_16(this$static.warnings, 'Unknown Unicode block: ' + blockName);
                    this$static.idx = close_0 + 1;
                    return new IntSetPredicate(($clinit_IntUniversalSet() , $clinit_IntUniversalSet() , THE_INSTANCE_2));
                }
                this$static.idx = close_0 + 1;
                primary = new IntSetPredicate(uniBlock);
                return escapeChar == 112?primary:new IntComplementPredicate(primary);
            }
            else {
                $syntaxError(this$static, 'Unknown block: ' + block);
            }

        case 48:
            $syntaxError(this$static, 'Octal escapes not allowed');
        case 49:
    case 50:
case 51:
    case 52:
case 53:
    case 54:
case 55:
    case 56:
case 57:
    if (inSquareBrackets) {
        $syntaxError(this$static, 'Backreference not allowed within character class');
    }
    else if (this$static.isXPath) {
        backRef = escapeChar - 48;
        while (this$static.idx < this$static.len) {
            c1 = $indexOf_3('0123456789', fromCodePoint(this$static.pattern.charAt(this$static.idx)));
            if (c1 < 0) {
                break;
            }
            else {
                backRef2 = backRef * 10 + c1;
                if (backRef2 > this$static.parens) {
                    break;
                }
                else {
                    backRef = backRef2;
                    ++this$static.idx;
                }
            }
        }
        if (!$contains(this$static.captures, backRef)) {
            explanation = backRef > this$static.parens?'(no such group)':'(group not yet closed)';
            $syntaxError(this$static, 'invalid backreference \\' + backRef + ' ' + explanation);
        }
        return new RECompiler$BackReference(backRef);
    }
    else {
        $syntaxError(this$static, 'digit not allowed after \\');
    }

default:$syntaxError(this$static, "Escape character '" + String.fromCharCode(escapeChar & $intern_2) + "' not allowed");
    }
    return null;
}

function $expr(this$static, compilerFlags){
    var branch, closeParens, currentNode, end, nextNodeOffset, op, open_0, paren, ret;
    paren = -1;
    ret = -1;
    closeParens = this$static.parens;
    if ((compilerFlags[0] & 2) == 0 && this$static.pattern.charAt(this$static.idx) == 40) {
        if (this$static.idx + 2 < this$static.len && this$static.pattern.charAt(this$static.idx + 1) == 63 && this$static.pattern.charAt(this$static.idx + 2) == 58) {
            this$static.isXPath30 || $syntaxError(this$static, 'Non-capturing groups allowed only in XPath3.0');
            paren = 2;
            this$static.idx += 3;
            ret = $appendNode(this$static, new Operation$OpOpenCluster);
        }
        else {
            paren = 1;
            ++this$static.idx;
            ret = $appendNode(this$static, new Operation$OpOpen(this$static.parens++));
        }
    }
    compilerFlags[0] &= -3;
    open_0 = false;
    branch = $branch(this$static, compilerFlags);
    ret == -1?(ret = branch):$setNextOfEnd(this$static, ret, branch);
    while (this$static.idx < this$static.len && this$static.pattern.charAt(this$static.idx) == 124) {
        if (!open_0) {
            op = new Operation$OpBranch;
            $add_15(this$static.instructions, branch, op);
            open_0 = true;
        }
        ++this$static.idx;
        $setNextOfEnd(this$static, branch, branch = $appendNode(this$static, new Operation$OpBranch));
        $branch(this$static, compilerFlags);
    }
    if (paren > 0) {
        this$static.idx < this$static.len && this$static.pattern.charAt(this$static.idx) == 41?++this$static.idx:$syntaxError(this$static, 'Missing close paren');
        if (paren == 1) {
            end = $appendNode(this$static, new Operation$OpClose(closeParens));
            $add(this$static.captures, closeParens);
        }
        else {
            end = $appendNode(this$static, new Operation$OpCloseCluster);
        }
    }
    else {
        end = $appendNode(this$static, new Operation$OpEndProgram);
    }
    $setNextOfEnd(this$static, ret, end);
    currentNode = ret;
    nextNodeOffset = dynamicCast($get_1(this$static.instructions, ret), 69).next;
    while (nextNodeOffset != 0 && currentNode < this$static.instructions.array.length) {
        instanceOf($get_1(this$static.instructions, currentNode), 251) && $setNextOfEnd(this$static, currentNode + 1, end);
        nextNodeOffset = dynamicCast($get_1(this$static.instructions, currentNode), 69).next;
        currentNode += nextNodeOffset;
    }
    return ret;
}

function $insertNode(this$static, node, insertAt){
    $add_15(this$static.instructions, insertAt, node);
}

function $internalError(){
    throw new Error_1('Internal error!');
}

function $makeUnion(p1, p2){
    if (instanceOf(p1, 134) && dynamicCast(p1, 134).set_0.isEmpty()) {
        return p2;
    }
    if (instanceOf(p2, 134) && dynamicCast(p2, 134).set_0.isEmpty()) {
        return p1;
    }
    return new IntUnionPredicate(p1, p2);
}

function $parseCharacterClass(this$static){
    var addend, cc, ch_0, definingRange, k_0, positive, range, rangeStart, result, simpleChar, subtrahend, v, variant, variant$index, variant$max, variants;
    this$static.pattern.charAt(this$static.idx) != 91 && $internalError();
  (this$static.idx + 1 >= this$static.len || this$static.pattern.charAt(++this$static.idx) == 93) && $syntaxError(this$static, "Missing ']'");
  positive = true;
  definingRange = false;
  rangeStart = -1;
  range = new IntRangeSet;
  addend = null;
  subtrahend = null;
  if (this$static.idx + 1 <= this$static.len && $equals_5(this$static.pattern.substring_0(this$static.idx, this$static.idx + 1).toString$(), '^')) {
      if (this$static.idx + 3 <= this$static.len && $equals_5(this$static.pattern.substring_0(this$static.idx, this$static.idx + 3).toString$(), '^-[')) {
          $syntaxError(this$static, 'Nothing before subtraction operator');
      }
     else if (this$static.idx + 2 <= this$static.len && $equals_5(this$static.pattern.substring_0(this$static.idx, this$static.idx + 2).toString$(), '^]')) {
         $syntaxError(this$static, 'Empty negative character group');
     }
     else {
         positive = false;
         ++this$static.idx;
     }
  }
  else 
      this$static.idx + 2 <= this$static.len && $equals_5(this$static.pattern.substring_0(this$static.idx, this$static.idx + 2).toString$(), '-[') && $syntaxError(this$static, 'Nothing before subtraction operator');
          while (this$static.idx < this$static.len && this$static.pattern.charAt(this$static.idx) != 93) {
              ch_0 = this$static.pattern.charAt(this$static.idx);
              simpleChar = -1;
              switch (ch_0) {
                  case 91:
                      $syntaxError(this$static, "Unescaped '[' within square brackets");
                          break;
                      case 92:
                          {
                              cc = $escape(this$static, true);
                              if (instanceOf(cc, 118)) {
                                  simpleChar = dynamicCast(cc, 118).target_0;
                                  break;
                              }
                              else {
                                  definingRange?$syntaxError(this$static, "Multi-character escape cannot follow '-'"):!addend?(addend = cc):(addend = $makeUnion(addend, cc));
                                  continue;
                              }
                          }

                      case 45:
                          if (this$static.idx + 2 <= this$static.len && $equals_5(this$static.pattern.substring_0(this$static.idx, this$static.idx + 2).toString$(), '-[')) {
                              ++this$static.idx;
                              subtrahend = $parseCharacterClass(this$static);
          this$static.idx + 1 <= this$static.len && $equals_5(this$static.pattern.substring_0(this$static.idx, this$static.idx + 1).toString$(), ']') || $syntaxError(this$static, "Expected closing ']' after subtraction");
                          }
         else if (this$static.idx + 2 <= this$static.len && $equals_5(this$static.pattern.substring_0(this$static.idx, this$static.idx + 2).toString$(), '-]')) {
             simpleChar = 45;
             ++this$static.idx;
         }
         else if (rangeStart >= 0) {
             definingRange = true;
             ++this$static.idx;
             continue;
         }
         else if (definingRange) {
             $syntaxError(this$static, 'Bad range');
         }
         else if (this$static.idx + 2 <= this$static.len && $equals_5(this$static.pattern.substring_0(this$static.idx, this$static.idx + 2).toString$(), '--') && !(this$static.idx + 3 <= this$static.len && $equals_5(this$static.pattern.substring_0(this$static.idx, this$static.idx + 3).toString$(), '--['))) {
             $syntaxError(this$static, 'Unescaped hyphen as start of range');
         }
         else {
             simpleChar = 45;
             ++this$static.idx;
         }

         break;
     default:simpleChar = ch_0;
         ++this$static.idx;
              }
              if (definingRange) {
                  rangeStart > simpleChar && $syntaxError(this$static, 'Bad character range: start > end');
                  $addRange(range, rangeStart, simpleChar);
                  if (this$static.reFlags.caseIndependent) {
                      if (rangeStart == 97 && simpleChar == 122) {
                          $addRange(range, 65, 90);
                          for (v = 0; v < ($clinit_CaseVariants() , ROMAN_VARIANTS).length; v++) {
                              $add_0(range, ROMAN_VARIANTS[v]);
                          }
                      }
                      else if (rangeStart == 65 && simpleChar == 90) {
                          $addRange(range, 97, 122);
                          for (v = 0; v < ($clinit_CaseVariants() , ROMAN_VARIANTS).length; v++) {
                              $add_0(range, ROMAN_VARIANTS[v]);
                          }
                      }
                      else {
                          for (k_0 = rangeStart; k_0 <= simpleChar; k_0++) {
                              variants = getCaseVariants(k_0);
                              for (variant$index = 0 , variant$max = variants.length; variant$index < variant$max; ++variant$index) {
                                  variant = variants[variant$index];
                                  $add_0(range, variant);
                              }
                          }
                      }
                  }
                  definingRange = false;
                  rangeStart = -1;
              }
              else {
                  if (this$static.idx + 1 <= this$static.len && $equals_5(this$static.pattern.substring_0(this$static.idx, this$static.idx + 1).toString$(), '-')) {
                      this$static.idx + 2 <= this$static.len && $equals_5(this$static.pattern.substring_0(this$static.idx, this$static.idx + 2).toString$(), '-[')?$add_0(range, simpleChar):this$static.idx + 2 <= this$static.len && $equals_5(this$static.pattern.substring_0(this$static.idx, this$static.idx + 2).toString$(), '-]')?$add_0(range, simpleChar):this$static.idx + 3 <= this$static.len && $equals_5(this$static.pattern.substring_0(this$static.idx, this$static.idx + 3).toString$(), '--[')?$add_0(range, simpleChar):this$static.idx + 2 <= this$static.len && $equals_5(this$static.pattern.substring_0(this$static.idx, this$static.idx + 2).toString$(), '--')?$syntaxError(this$static, 'Unescaped hyphen cannot act as end of range'):(rangeStart = simpleChar);
                  }
                  else {
                      $add_0(range, simpleChar);
                      if (this$static.reFlags.caseIndependent) {
                          variants = getCaseVariants(simpleChar);
                          for (variant$index = 0 , variant$max = variants.length; variant$index < variant$max; ++variant$index) {
                              variant = variants[variant$index];
                              $add_0(range, variant);
                          }
                      }
                  }
              }
          }
          this$static.idx == this$static.len && $syntaxError(this$static, 'Unterminated character class');
          ++this$static.idx;
          result = new IntSetPredicate(range);
          !!addend && (result = $makeUnion(result, addend));
          positive || (result = instanceOf(result, 164)?dynamicCast(result, 164).p1:new IntComplementPredicate(result));
          !!subtrahend && (result = new IntExceptPredicate(result, subtrahend));
          return result;
}

function $piece(this$static, flags){
    var bracketEnd, bracketMin, bracketOpt, c, c0, c1, continu, end, greedy, idxBeforeTerminal, maybe, n, nothing, op, opt, plus, pos, quantifierType, reluctantMaybe, reluctantStar, ret, star, terminalFlags;
    idxBeforeTerminal = this$static.idx;
    terminalFlags = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [0]);
    ret = $terminal(this$static, terminalFlags);
    flags[0] |= terminalFlags[0];
    if (this$static.idx >= this$static.len) {
        return ret;
    }
    greedy = true;
    quantifierType = this$static.pattern.charAt(this$static.idx);
    switch (quantifierType) {
        case 63:
    case 42:
        flags[0] |= 1;
    case 43:
        ++this$static.idx;
    case 123:
        quantifierType == 123 && $bracket(this$static);
        op = dynamicCast($get_1(this$static.instructions, ret), 69);
        (instanceOf(op, 290) || instanceOf(op, 327)) && (quantifierType == 63 || quantifierType == 42 || quantifierType == 123 && this$static.bracketMin == 0?$set_0(this$static.instructions, ret, new Operation$OpNothing):(quantifierType = 0));
        (terminalFlags[0] & 1) != 0 && (quantifierType == 63?(quantifierType = 0):quantifierType == 43?(quantifierType = 42):quantifierType == 123 && (quantifierType = 42));
    }
    if (this$static.idx < this$static.len && this$static.pattern.charAt(this$static.idx) == 63) {
        this$static.isXPath || $syntaxError(this$static, 'Reluctant quantifiers are not allowed in XSD');
        ++this$static.idx;
        greedy = false;
    }
    if (greedy) {
        switch (quantifierType) {
            case 123:
                {
                    bracketEnd = this$static.idx;
                    bracketMin = this$static.bracketMin;
                    bracketOpt = this$static.bracketOpt;
                    pos = ret;
                    for (c0 = 0; c0 < bracketMin; c0++) {
                        this$static.idx = idxBeforeTerminal;
                        $setNextOfEnd(this$static, pos, pos = $terminal(this$static, terminalFlags));
                    }
                    if (bracketOpt == -1) {
                        this$static.idx = bracketEnd;
                        op = new Operation$OpStar;
                        $add_15(this$static.instructions, pos, op);
                        $setNextOfEnd(this$static, pos + 1, pos);
                        break;
                    }
                    else if (bracketOpt > 0) {
                        opt = initDim(I_classLit, $intern_4, 0, bracketOpt + 1, 7, 1);
                        op = new Operation$OpMaybe;
                        $add_15(this$static.instructions, pos, op);
                        opt[0] = pos;
                        for (c1 = 1; c1 < bracketOpt; c1++) {
                            op = new Operation$OpMaybe;
                            opt[c1] = ($add_16(this$static.instructions, op) , this$static.instructions.array.length - 1);
                            this$static.idx = idxBeforeTerminal;
                            $terminal(this$static, terminalFlags);
                        }
                        end = opt[bracketOpt] = $appendNode(this$static, new Operation$OpNothing);
                        for (c = 0; c < bracketOpt; c++) {
                            $setNextOfEnd(this$static, opt[c], end);
                            $setNextOfEnd(this$static, opt[c] + 1, opt[c + 1]);
                        }
                    }
                    else {
                        while (this$static.instructions.array.length > pos) {
                            this$static.instructions.remove_3(this$static.instructions.array.length - 1);
                        }
                        nothing = new Operation$OpNothing;
                        $add_16(this$static.instructions, nothing);
                    }
                    this$static.idx = bracketEnd;
                    break;
                }

            case 63:
                {
                    maybe = new Operation$OpMaybe;
                    $add_15(this$static.instructions, ret, maybe);
                    nothing = new Operation$OpNothing;
                    n = ($add_16(this$static.instructions, nothing) , this$static.instructions.array.length - 1);
                    $setNextOfEnd(this$static, ret, n);
                    $setNextOfEnd(this$static, ret + 1, n);
                    break;
                }

            case 42:
                {
                    star = new Operation$OpStar;
                    $add_15(this$static.instructions, ret, star);
                    $setNextOfEnd(this$static, ret + 1, ret);
                    break;
                }

            case 43:
                {
                    continu = new Operation$OpContinue;
                    $add_15(this$static.instructions, ret, continu);
                    plus = new Operation$OpPlus;
                    n = ($add_16(this$static.instructions, plus) , this$static.instructions.array.length - 1);
                    $setNextOfEnd(this$static, ret + 1, n);
                    $setNextOfEnd(this$static, n, ret);
                    break;
                }

        }
    }
    else {
        switch (quantifierType) {
            case 63:
                {
                    reluctantMaybe = new Operation$OpReluctantMaybe;
                    $add_15(this$static.instructions, ret, reluctantMaybe);
                    n = $appendNode(this$static, new Operation$OpNothing);
                    $setNextOfEnd(this$static, ret, n);
                    $setNextOfEnd(this$static, ret + 1, n);
                    break;
                }

            case 42:
                {
                    reluctantStar = new Operation$OpReluctantStar;
                    $add_15(this$static.instructions, ret, reluctantStar);
                    $setNextOfEnd(this$static, ret + 1, ret);
                    break;
                }

            case 43:
                {
                    $insertNode(this$static, new Operation$OpContinue, ret);
                    n = $appendNode(this$static, new Operation$OpReluctantPlus);
                    $setNextOfEnd(this$static, n, ret);
                    $setNextOfEnd(this$static, ret + 1, n);
                    break;
                }

            case 123:
                {
                    bracketEnd = this$static.idx;
                    bracketMin = this$static.bracketMin;
                    bracketOpt = this$static.bracketOpt;
                    pos = ret;
                    for (c0 = 0; c0 < bracketMin; c0++) {
                        this$static.idx = idxBeforeTerminal;
                        $setNextOfEnd(this$static, pos, pos = $terminal(this$static, terminalFlags));
                    }
                    if (bracketOpt == -1) {
                        this$static.idx = bracketEnd;
                        $insertNode(this$static, new Operation$OpReluctantStar, pos);
                        $setNextOfEnd(this$static, pos + 1, pos);
                        break;
                    }
                    else if (bracketOpt > 0) {
                        opt = initDim(I_classLit, $intern_4, 0, bracketOpt + 1, 7, 1);
                        $insertNode(this$static, new Operation$OpReluctantMaybe, pos);
                        opt[0] = pos;
                        for (c1 = 1; c1 < bracketOpt; c1++) {
                            opt[c1] = $appendNode(this$static, new Operation$OpReluctantMaybe);
                            this$static.idx = idxBeforeTerminal;
                            $terminal(this$static, terminalFlags);
                        }
                        end = opt[bracketOpt] = $appendNode(this$static, new Operation$OpNothing);
                        for (c = 0; c < bracketOpt; c++) {
                            $setNextOfEnd(this$static, opt[c], end);
                            $setNextOfEnd(this$static, opt[c] + 1, opt[c + 1]);
                        }
                    }
                    else {
                        while (this$static.instructions.array.length > pos) {
                            this$static.instructions.remove_3(this$static.instructions.array.length - 1);
                        }
                        $appendNode(this$static, new Operation$OpNothing);
                    }
                    this$static.idx = bracketEnd;
                    break;
                }

        }
    }
    return ret;
}

function $setNextOfEnd(this$static, node, pointTo){
    var next, offset;
    next = dynamicCast($get_1(this$static.instructions, node), 69).next;
    while (next != 0 && node < this$static.instructions.array.length) {
        node == pointTo && (pointTo = this$static.instructions.array.length);
        node += next;
        next = dynamicCast($get_1(this$static.instructions, node), 69).next;
    }
    if (node < this$static.instructions.array.length) {
        offset = pointTo - node;
        dynamicCast($get_1(this$static.instructions, node), 69).next = offset;
    }
}

function $syntaxError(this$static, s){
    if (loggingIsEnabled()) {
        throw new RESyntaxException_0(s, this$static.idx);
    }
    else {
        throw new RESyntaxException_0('', this$static.idx);
    }
}

function $terminal(this$static, flags){
    var back_0, backreference, bol, cc, dot, eol, esc, predicate, range, node;
    switch (this$static.pattern.charAt(this$static.idx)) {
        case 36:
            if (this$static.isXPath) {
                ++this$static.idx;
                eol = new Operation$OpEOL;
                return $add_16(this$static.instructions, eol) , this$static.instructions.array.length - 1;
            }

            break;
        case 94:
            if (this$static.isXPath) {
                ++this$static.idx;
                bol = new Operation$OpBOL;
                return $add_16(this$static.instructions, bol) , this$static.instructions.array.length - 1;
            }

            break;
        case 46:
            ++this$static.idx;
            this$static.reFlags.singleLine?(predicate = new RECompiler$1):(predicate = new RECompiler$2);
            dot = new Operation$OpCharClass;
            dot.predicate = predicate;
            return $add_16(this$static.instructions, dot) , this$static.instructions.array.length - 1;
        case 91:
            range = $parseCharacterClass(this$static);
            cc = new Operation$OpCharClass;
            cc.predicate = range;
            return $add_16(this$static.instructions, cc) , this$static.instructions.array.length - 1;
        case 40:
            return $expr(this$static, flags);
        case 41:
            $syntaxError(this$static, 'Unexpected close paren');
        case 124:
            $internalError();
        case 93:
            $syntaxError(this$static, 'Mismatched class');
        case 0:
            $syntaxError(this$static, 'Unexpected end of input');
        case 63:
    case 43:
case 123:
    case 42:
        $syntaxError(this$static, 'No expression before quantifier');
    case 92:
        {
            esc = $escape(this$static, false);
            if (instanceOf(esc, 285)) {
                backreference = dynamicCast(esc, 285).target_0;
                this$static.parens <= backreference && $syntaxError(this$static, 'Bad backreference');
                flags[0] |= 1;
                back_0 = new Operation$OpBackReference;
                back_0.groupNr = backreference;
                return $add_16(this$static.instructions, back_0) , this$static.instructions.array.length - 1;
            }
            else {
                flags[0] &= -2;
                return node = new Operation$OpCharClass , node.predicate = esc , $add_16(this$static.instructions, node) , this$static.instructions.array.length - 1;
            }
        }

    }
    flags[0] &= -2;
    return $atom(this$static);
}

function RECompiler(){
    this.instructions = new ArrayList_0(20);
    this.captures = new IntHashSet;
}

function isAsciiDigit(ch_0){
    return ch_0 >= 48 && ch_0 <= 57;
}

defineClass(660, 1, {}, RECompiler);
_.bracketMin = 0;
_.bracketOpt = 0;
_.idx = 0;
_.isXPath = true;
_.isXPath30 = true;
_.len = 0;
_.parens = 0;
var Lclient_net_sf_saxon_ce_regex_RECompiler_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'RECompiler', 660, Ljava_lang_Object_2_classLit);
function RECompiler$1(){
}

defineClass(661, 1, $intern_56, RECompiler$1);
_.matches = function matches_32(value_0){
    return true;
}
;
var Lclient_net_sf_saxon_ce_regex_RECompiler$1_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'RECompiler/1', 661, Ljava_lang_Object_2_classLit);
function RECompiler$2(){
}

defineClass(662, 1, $intern_56, RECompiler$2);
_.matches = function matches_33(value_0){
    return value_0 != 10 && value_0 != 13;
}
;
var Lclient_net_sf_saxon_ce_regex_RECompiler$2_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'RECompiler/2', 662, Ljava_lang_Object_2_classLit);
function RECompiler$BackReference(number){
    IntValuePredicate.call(this, number);
}

defineClass(285, 118, {110:1, 118:1, 285:1}, RECompiler$BackReference);
var Lclient_net_sf_saxon_ce_regex_RECompiler$BackReference_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'RECompiler/BackReference', 285, Lclient_net_sf_saxon_ce_expr_z_IntValuePredicate_2_classLit);
function REFlags(flags){
    var c, endStd, i_0, i0, semi;
    semi = $indexOf_3(flags, fromCodePoint(59));
    endStd = semi >= 0?semi:flags.length;
    for (i0 = 0; i0 < endStd; i0++) {
        c = flags.charCodeAt(i0);
        switch (c) {
            case 105:
                this.caseIndependent = true;
                break;
            case 109:
                this.multiLine = true;
                break;
            case 115:
                this.singleLine = true;
                break;
            case 113:
                this.literal = true;
                break;
            case 120:
                this.allowWhitespace = true;
                break;
            default:throw new RESyntaxException("unrecognized flag '" + charToString(c) + "'");
        }
    }
    for (i_0 = semi + 1; i_0 < flags.length; i_0++) {
        c = flags.charCodeAt(i_0);
        c == 103 && (this.debug_0 = true);
    }
    this.xpath20 = true;
    if (this.literal) {
        throw new RESyntaxException("'q' flag requires XPath 3.0 to be enabled");
    }
}

defineClass(659, 1, {}, REFlags);
_.allowWhitespace = false;
_.caseIndependent = false;
_.debug_0 = false;
_.literal = false;
_.multiLine = false;
_.singleLine = false;
_.xpath20 = false;
_.xpath30 = false;
var Lclient_net_sf_saxon_ce_regex_REFlags_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'REFlags', 659, Ljava_lang_Object_2_classLit);
function $anchoredMatch(this$static, search){
    this$static.search_0 = search;
    return $matchAt(this$static, 0, true);
}

function $beenHereBefore(this$static, idx, node){
    var previousVisitors;
    previousVisitors = dynamicCast($get_0(this$static.history_0, valueOf(idx)), 195);
    if (!!previousVisitors && previousVisitors.contains_0(node)) {
        return true;
    }
    else {
        if (!previousVisitors) {
            previousVisitors = new IntHashSet_0(4);
            $put_0(this$static.history_0, valueOf(idx), previousVisitors);
        }
        previousVisitors.add_0(node);
        return false;
    }
}

function $equalCaseBlind(c1, c2){
    var v, v$array, v$index, v$max;
    if (c1 == c2) {
        return true;
    }
    for (v$array = getCaseVariants(c2) , v$index = 0 , v$max = v$array.length; v$index < v$max; ++v$index) {
        v = v$array[v$index];
        if (c1 == v) {
            return true;
        }
    }
    return false;
}

function $getParen(this$static, which){
    var start_0;
    if (which < this$static.parenCount && (start_0 = $getParenStart(this$static, which)) >= 0) {
        return this$static.search_0.substring_0(start_0, $getParenEnd(this$static, which));
    }
    return null;
}

function $getParenEnd(this$static, which){
    if (which < this$static.endn.length) {
        return this$static.endn[which];
    }
    return -1;
}

function $getParenStart(this$static, which){
    if (which < this$static.startn.length) {
        return this$static.startn[which];
    }
    return -1;
}

function $internalError_0(s){
    throw new Error_1('RE internal error: ' + s);
}

function $match(this$static, search, i_0){
    var j, k_0, prefix;
    !this$static.program && $internalError_0('No RE program to run!');
    this$static.search_0 = search;
    if ((this$static.program.optimizationFlags & 2) == 2) {
        if (!this$static.program.flags.multiLine) {
            return i_0 == 0 && $matchAt(this$static, 0, false);
        }
        for (; !search.isEnd(i_0); i_0++) {
            if (this$static.search_0.charAt(i_0) == 10) {
                continue;
            }
            if ($matchAt(this$static, i_0, false)) {
                return true;
            }
            for (; !search.isEnd(i_0); i_0++) {
                if (this$static.search_0.charAt(i_0) == 10) {
                    break;
                }
            }
        }
        return false;
    }
    if (!this$static.program.prefix_0) {
        for (; !search.isEnd(i_0 - 1); i_0++) {
            if ($matchAt(this$static, i_0, false)) {
                return true;
            }
        }
        return false;
    }
    else {
        prefix = this$static.program.prefix_0;
        for (; !search.isEnd(i_0 + prefix.length_1() - 1); i_0++) {
            j = i_0;
            k_0 = 0;
            if (this$static.program.flags.caseIndependent) {
                do 
                    ;
                while ($equalCaseBlind(search.charAt(j++), prefix.charAt(k_0++)) && k_0 < prefix.length_1());
            }
            else {
                do 
                    ;
                while (search.charAt(j++) == prefix.charAt(k_0++) && k_0 < prefix.length_1());
            }
            if (k_0 == prefix.length_1()) {
                if ($matchAt(this$static, i_0, false)) {
                    return true;
                }
            }
        }
        return false;
    }
}

function $matchAt(this$static, i_0, anchored){
    var idx;
    this$static.startn = initDim(I_classLit, $intern_4, 0, 3, 7, 1);
    this$static.startn[0] = this$static.startn[1] = this$static.startn[2] = -1;
    this$static.endn = initDim(I_classLit, $intern_4, 0, 3, 7, 1);
    this$static.endn[0] = this$static.endn[1] = this$static.endn[2] = -1;
    this$static.parenCount = 1;
    this$static.history_0 = new HashMap_0(this$static.search_0.length_1());
    this$static.anchoredMatch = anchored;
    $setParenStart(this$static, 0, i_0);
    if ((this$static.program.optimizationFlags & 1) != 0) {
        this$static.startBackref = initDim(I_classLit, $intern_4, 0, this$static.maxParen, 7, 1);
        this$static.endBackref = initDim(I_classLit, $intern_4, 0, this$static.maxParen, 7, 1);
    }
    if ((idx = $matchNodes(this$static, 0, i_0)) != -1) {
        $setParenEnd(this$static, 0, idx);
        return true;
    }
    this$static.parenCount = 0;
    return false;
}

function $matchNodes(this$static, node, idx){
    var idxNew, op;
    while (true) {
        op = this$static.instructions[node];
        idxNew = op.exec_1(this$static, node, idx);
        idxNew != -1 && (idx = idxNew);
        switch (op.nextAction(idxNew)) {
            case 2:
                return idxNew;
            case 1:
                node = op.next;
                continue;
            case 3:
                ++node;
                continue;
            case 4:
                node = this$static.instructions[op.next].next;
                continue;
            default:$internalError_0('Unknown action');
        }
        break;
    }
    $internalError_0('Corrupt program');
    return -1;
}

function $setParenEnd(this$static, which, i_0){
    var e2;
    while (which > this$static.endn.length - 1) {
        e2 = initDim(I_classLit, $intern_4, 0, this$static.endn.length * 2, 7, 1);
        arraycopy(this$static.endn, 0, e2, 0, this$static.endn.length);
        fill_1(e2, this$static.endn.length, e2.length, -1);
        this$static.endn = e2;
    }
    this$static.endn[which] = i_0;
}

function $setParenStart(this$static, which, i_0){
    var s2;
    while (which > this$static.startn.length - 1) {
        s2 = initDim(I_classLit, $intern_4, 0, this$static.startn.length * 2, 7, 1);
        arraycopy(this$static.startn, 0, s2, 0, this$static.startn.length);
        fill_1(s2, this$static.startn.length, s2.length, -1);
        this$static.startn = s2;
    }
    this$static.startn[which] = i_0;
}

function $setProgram(this$static, program){
    this$static.program = program;
    if (!!program && program.maxParens != -1) {
        this$static.instructions = program.instructions;
        this$static.maxParen = program.maxParens;
    }
    else {
        this$static.maxParen = 16;
    }
}

function $subst(this$static, in_$, replacement){
    var captured, ch_0, i_0, i0, i1, j, len, m, maxCapture, n, newpos, pos, sb;
    sb = new FastStringBuffer(in_$.length_1() * 2);
    pos = 0;
    len = in_$.length_1();
    while (pos < len && $match(this$static, in_$, pos)) {
        for (i0 = pos; i0 < $getParenStart(this$static, 0); i0++) {
            $appendWideChar(sb, in_$.charAt(i0));
        }
        if (this$static.program.flags.literal) {
            for (i1 = 0; i1 < replacement.length_1(); i1++) {
                $appendWideChar(sb, replacement.charAt(i1));
            }
        }
        else {
            maxCapture = this$static.parenCount - 1;
            for (i1 = 0; i1 < replacement.length_1(); i1++) {
                ch_0 = replacement.charAt(i1);
                if (ch_0 == 92) {
                    ch_0 = replacement.charAt(++i1);
                    if (ch_0 == 92 || ch_0 == 36) {
                        $append_1(sb, ch_0 & $intern_2);
                    }
                    else {
                        throw new RESyntaxException('Invalid escape in replacement string');
                    }
                }
                else if (ch_0 == 36) {
                    ch_0 = replacement.charAt(++i1);
                    if (!(ch_0 >= 48 && ch_0 <= 57)) {
                        throw new RESyntaxException('$ in replacement must be followed by a digit');
                    }
                    n = ch_0 - 48;
                    if (maxCapture <= 9) {
                        if (maxCapture >= n) {
                            captured = $getParen(this$static, n);
                            if (captured) {
                                for (j = 0; j < captured.length_1(); j++) {
                                    $appendWideChar(sb, captured.charAt(j));
                                }
                            }
                        }
                    }
                    else {
                        while (true) {
                            if (i1 >= replacement.length_1()) {
                                break;
                            }
                            ch_0 = replacement.charAt(++i1);
                            if (ch_0 >= 48 && ch_0 <= 57) {
                                m = n * 10 + (ch_0 - 48);
                                if (m > maxCapture) {
                                    --i1;
                                    break;
                                }
                                else {
                                    n = m;
                                }
                            }
                            else {
                                --i1;
                                break;
                            }
                        }
                        captured = $getParen(this$static, n);
                        for (j = 0; j < captured.length_1(); j++) {
                            $appendWideChar(sb, captured.charAt(j));
                        }
                    }
                }
                else {
                    $appendWideChar(sb, ch_0);
                }
            }
        }
        newpos = $getParenEnd(this$static, 0);
        newpos == pos && ++newpos;
        pos = newpos;
    }
    for (i_0 = pos; i_0 < len; i_0++) {
        $appendWideChar(sb, in_$.charAt(i_0));
    }
    return $condense(sb);
}

function REMatcher(program){
    $setProgram(this, program);
}

defineClass(234, 1, {}, REMatcher);
_.anchoredMatch = false;
_.maxParen = 16;
_.parenCount = 0;
var Lclient_net_sf_saxon_ce_regex_REMatcher_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'REMatcher', 234, Ljava_lang_Object_2_classLit);
function $display(this$static, out){
    var i_0, nextOffset;
    for (i_0 = 0; i_0 < this$static.instructions.length; i_0++) {
        nextOffset = this$static.instructions[i_0].next;
        out.println_0(i_0 + '. ' + this$static.instructions[i_0].toString$() + (nextOffset == -1?'':', next = ' + nextOffset));
    }
}

function $getInitialChars(op, caseBlind){
    var ch_0, set_0, v, v$array, v$index, v$max;
    ch_0 = op.atom.charAt(0);
    set_0 = new IntSingletonSet(ch_0);
    if (caseBlind) {
        set_0 = new IntHashSet_0(10);
        set_0.add_0(ch_0);
        for (v$array = getCaseVariants(ch_0) , v$index = 0 , v$max = v$array.length; v$index < v$max; ++v$index) {
            v = v$array[v$index];
            set_0.add_0(v);
        }
    }
    return set_0;
}

function $isDisjoint(set0, set1){
    var intersection;
    try {
        intersection = set0.intersect(set1);
        return intersection.isEmpty();
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 37)) {
            return false;
        }
        else 
            throw unwrap($e0);
    }
}

function $noAmbiguity(this$static, op0, op1, caseBlind){
    var ip0, ip1, set0, set1;
    (instanceOf(op1, 386) || instanceOf(op1, 387)) && (op1 = this$static.instructions[op1.next]);
    if (instanceOf(op1, 289) || instanceOf(op1, 290) || instanceOf(op1, 327)) {
        return true;
    }
    if (instanceOf(op0, 139)) {
        set0 = $getInitialChars(dynamicCast(op0, 139), caseBlind);
    }
    else {
        ip0 = dynamicCast(op0, 189).predicate;
        if (instanceOf(ip0, 134)) {
            set0 = dynamicCast(ip0, 134).set_0;
        }
        else if (instanceOf(ip0, 118)) {
            set0 = new IntSingletonSet(dynamicCast(ip0, 118).target_0);
        }
        else {
            return false;
        }
    }
    if (instanceOf(op1, 139)) {
        set1 = $getInitialChars(dynamicCast(op1, 139), caseBlind);
    }
    else if (instanceOf(op1, 189)) {
        ip1 = dynamicCast(op1, 189).predicate;
        if (instanceOf(ip1, 134)) {
            set1 = dynamicCast(ip1, 134).set_0;
        }
        else if (instanceOf(ip1, 118)) {
            set1 = new IntSingletonSet(dynamicCast(ip1, 118).target_0);
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
    return $isDisjoint(set0, set1);
}

function $setInstructions(this$static, instructions){
    var caseBlind, i_0, next, nextOp, op, op$index, op$max;
    this$static.instructions = instructions;
    this$static.optimizationFlags = 0;
    this$static.prefix_0 = null;
    if (instructions.length != 0) {
        instanceOf(instructions[0], 139) && (this$static.prefix_0 = dynamicCast(instructions[0], 139).atom);
        if (instanceOf(instructions[0], 251)) {
            next = instructions[0].next;
            if (instanceOf(instructions[next], 289)) {
                nextOp = instructions[1];
                instanceOf(nextOp, 139)?(this$static.prefix_0 = dynamicCast(nextOp, 139).atom):instanceOf(nextOp, 290) && (this$static.optimizationFlags |= 2);
            }
        }
        for (op$index = 0 , op$max = instructions.length; op$index < op$max; ++op$index) {
            op = instructions[op$index];
            if (instanceOf(op, 388)) {
                this$static.optimizationFlags |= 1;
                break;
            }
        }
        caseBlind = this$static.flags.caseIndependent;
        for (i_0 = 0; i_0 < instructions.length; i_0++) {
            op = instructions[i_0];
            if (instanceOf(op, 328) && op.next == i_0 + 2 && (instanceOf(instructions[i_0 + 1], 139) || instanceOf(instructions[i_0 + 1], 189))) {
                if ($noAmbiguity(this$static, instructions[i_0 + 1], instructions[op.next], caseBlind)) {
                    setCheck(instructions, i_0, new Operation$OpConfidentStar);
                    instructions[i_0].next = op.next;
                }
            }
            else if (instanceOf(op, 384) && op.next == i_0 - 2 && (instanceOf(instructions[i_0 - 1], 139) || instanceOf(instructions[i_0 - 1], 189)) && instructions[i_0 - 2].next == i_0 + 1) {
                if ($noAmbiguity(this$static, instructions[i_0 - 1], instructions[i_0 + 1], caseBlind)) {
                    setCheck(instructions, i_0, new Operation$OpConfidentPlus);
                    instructions[i_0].next = i_0 + 1;
                }
            }
        }
    }
}

function REProgram(instructions, parens, flags){
    this.flags = flags;
    $setInstructions(this, instructions);
    this.maxParens = parens;
}

defineClass(663, 1, {}, REProgram);
_.maxParens = -1;
_.nullable = false;
_.optimizationFlags = 0;
var Lclient_net_sf_saxon_ce_regex_REProgram_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'REProgram', 663, Ljava_lang_Object_2_classLit);
function RESyntaxException(s){
    RuntimeException_0.call(this, 'Syntax error in regular expression: ' + s);
}

function RESyntaxException_0(s, offset){
    RuntimeException_0.call(this, 'Syntax error at char ' + offset + ' in regular expression: ' + s);
}

defineClass(158, 35, {158:1, 3:1, 19:1, 35:1, 37:1}, RESyntaxException, RESyntaxException_0);
var Lclient_net_sf_saxon_ce_regex_RESyntaxException_2_classLit = createForClass('client.net.sf.saxon.ce.regex', 'RESyntaxException', 158, Ljava_lang_RuntimeException_2_classLit);
function getBlock(name_0){
    var cc;
    !blocks && readBlocks(new Configuration);
    cc = dynamicCast($getStringValue_1(blocks, name_0), 195);
    if (cc) {
        return cc;
    }
    cc = dynamicCast($getStringValue_1(blocks, normalizeBlockName(name_0)), 195);
    return cc;
}

function normalizeBlockName(name_0){
    var c, fsb, i_0;
    fsb = new FastStringBuffer(name_0.length);
    for (i_0 = 0; i_0 < name_0.length; i_0++) {
        c = name_0.charCodeAt(i_0);
        switch (c) {
            case 32:
        case 9:
    case 13:
case 10:
      case 95:
          break;
      default:$ensureCapacity_0(fsb, 1);
          fsb.array[fsb.used++] = c;
        }
    }
    return $condense(fsb) , valueOf_3(fsb.array, 0, fsb.used);
}

function readBlocks(config){
    var blockName, doc, from, item_0, iter, range, rangeElement, ranges, to;
    blocks = new HashMap_0(250);
    try {
        doc = $buildDocument(config, 'unicodeBlocks.xml');
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            throw new RESyntaxException('Unable to read unicodeBlocks.xml file');
        }
        else 
            throw unwrap($e0);
    }
    iter = $iterateAxis_0(doc, 4, new NameTest_0(1, '', 'block'));
    while (true) {
        item_0 = dynamicCast(iter.next_0(), 7);
        if (!item_0) {
            break;
        }
        blockName = normalizeBlockName(getAttributeValue(item_0, '', 'name'));
        range = null;
        ranges = item_0.iterateAxis(3, ($clinit_NodeKindTest() , ELEMENT));
        while (true) {
            rangeElement = dynamicCast(ranges.next_0(), 7);
            if (!rangeElement) {
                break;
            }
            from = __parseAndValidateInt($substring_0(getAttributeValue(rangeElement, '', 'from'), 2), 16);
            to = __parseAndValidateInt($substring_0(getAttributeValue(rangeElement, '', 'to'), 2), 16);
            !range?(range = new IntRangeSet_0(initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [from]), initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [to]))):$addRange(range, from, to);
        }
        $putStringValue(blocks, blockName, range);
    }
}

var blocks = null;
function $clinit_NodeImpl(){
    $clinit_NodeImpl = emptyMethod;
    NODE_LETTER = initValues(getClassLiteralForArray(C_classLit, 1), $intern_9, 0, 7, [120, 101, 97, 116, 120, 120, 120, 112, 99, 114, 120, 120, 120, 110]);
}

function $getDisplayName_1(this$static){
    var qName;
    qName = this$static.getNodeName();
    return !qName?'':$getDisplayName_0(qName);
}

function $getLastDescendantOrSelf(this$static){
    var last;
    last = this$static.getLastChild();
    if (!last) {
        return this$static;
    }
    return $getLastDescendantOrSelf(last);
}

function $getLocalPart_0(this$static){
    var qName;
    qName = this$static.getNodeName();
    return !qName?'':valueOf_3(qName.content_0, qName.localNameStart, qName.prefixStart - qName.localNameStart);
}

function $getNextInDocument(this$static, anchor){
    var next, parent_0;
    next = this$static.getFirstChild();
    if (next) {
        return next;
    }
    if (this$static == anchor) {
        return null;
    }
    next = this$static.getNextSibling();
    if (next) {
        return next;
    }
    parent_0 = this$static;
    while (true) {
        parent_0 = $getParent_0(parent_0);
        if (!parent_0) {
            return null;
        }
        if (parent_0 == anchor) {
            return null;
        }
        next = parent_0.getNextSibling();
        if (next) {
            return next;
        }
    }
}

function $getParent_0(this$static){
    if (instanceOf(this$static.parent_0, 148) && dynamicCast(this$static.parent_0, 148).imaginary) {
        return null;
    }
    return this$static.parent_0;
}

function $getPhysicalRoot(this$static){
    var up;
    up = this$static.parent_0;
    while (!!up && !instanceOf(up, 148)) {
        up = up.parent_0;
    }
    return dynamicCast(up, 148);
}

function $getURI(this$static){
    var qName;
    qName = this$static.getNodeName();
    return !qName?'':$getNamespaceURI(qName);
}

function $iterateAxis_1(this$static, axisNumber, nodeTest){
    var a, all, atts, i_0, index_0, nodes, parent_0;
    switch (axisNumber) {
        case 0:
            return new SteppingIterator(this$static, new Navigator$ParentFunction(nodeTest), false);
        case 1:
            return new SteppingIterator(this$static, new Navigator$ParentFunction(nodeTest), true);
        case 2:
            if (this$static.getNodeKind() != 1) {
                return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
            }

            atts = $getAttributeList(dynamicCast(this$static, 27));
            if (instanceOf(nodeTest, 60)) {
                index_0 = $findByStructuredQName(atts, dynamicCast(nodeTest, 60).qName);
                if (index_0 < 0) {
                    return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
                }
                else {
                    a = new AttributeImpl(dynamicCast(this$static, 27), index_0);
                    return new SingletonIterator(a);
                }
            }
            else {
                nodes = initDim(Lclient_net_sf_saxon_ce_tree_linked_AttributeImpl_2_classLit, $intern_66, 242, atts.values == null?0:atts.used, 0, 1);
                for (i_0 = 0; i_0 < (atts.values == null?0:atts.used); i_0++) {
                    nodes[i_0] = new AttributeImpl(dynamicCast(this$static, 27), i_0);
                }
                return newAxisFilter(new ArrayIterator(nodes), nodeTest);
            }

        case 3:
            if (instanceOf(this$static, 31)) {
                all = new ArrayIterator($allChildren(dynamicCast(this$static, 31)));
                return nodeTest == ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)?all:newAxisFilter(all, nodeTest);
            }
            else {
                return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
            }

        case 4:
            return this$static.getNodeKind() == 9 && instanceOf(nodeTest, 60) && nodeTest.getRequiredNodeKind() == 1?$getAllElements(dynamicCast(this$static, 148), dynamicCast(nodeTest, 60).qName):this$static.hasChildNodes_0()?new SteppingIterator(this$static, new NodeImpl$NextDescendantFunction(this$static, nodeTest), false):($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1);
        case 5:
            return new SteppingIterator(this$static, new NodeImpl$NextDescendantFunction(this$static, nodeTest), true);
        case 6:
            return newAxisFilter(new Navigator$FollowingEnumeration(this$static), nodeTest);
        case 7:
            return new SteppingIterator(this$static, new NodeImpl$NextSiblingFunction(nodeTest), false);
        case 8:
            if (this$static.getNodeKind() != 1) {
                return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
            }

            return makeIterator(this$static, nodeTest);
        case 9:
            parent_0 = $getParent_0(this$static);
            if (!parent_0) {
                return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
            }

            return $clinit_Navigator() , !!parent_0 && nodeTest.matchesItem(parent_0)?!parent_0?($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1):new SingletonIterator(parent_0):($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1);
        case 10:
            return newAxisFilter(new Navigator$PrecedingEnumeration(this$static, false), nodeTest);
        case 11:
            return new SteppingIterator(this$static, new NodeImpl$PrecedingSiblingFunction(nodeTest), false);
        case 12:
            return $clinit_Navigator() , nodeTest.matchesItem(this$static)?new SingletonIterator(this$static):($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1);
        default:throw new IllegalArgumentException_0('Unknown axis number ' + axisNumber);
    }
}

function $setRawParent(this$static, parent_0){
    this$static.parent_0 = parent_0;
}

defineClass(10, 23, $intern_67);
_.compareOrder = function compareOrder_1(other){
    var a, b;
    if (instanceOf(other, 177)) {
        return -other.compareOrder(this);
    }
    a = this.getSequenceNumber();
    b = dynamicCast(other, 10).getSequenceNumber();
    if (a[0] < b[0]) {
        return -1;
    }
    if (a[0] > b[0]) {
        return 1;
    }
    if (a[1] < b[1]) {
        return -1;
    }
    if (a[1] > b[1]) {
        return 1;
    }
    return 0;
}
;
_.equals$ = function equals_34(other){
    return instanceOf(other, 7) && this.isSameNodeInfo(dynamicCast(other, 7));
}
;
_.generateId = function generateId_1(buffer){
    this.parent_0.generateId(buffer);
    $append_1(buffer, NODE_LETTER[this.getNodeKind()]);
    $append_3(buffer, '' + this.index_0);
}
;
_.getBaseURI = function getBaseURI_2(){
    return this.parent_0.getBaseURI();
}
;
_.getDeclaredNamespaces = function getDeclaredNamespaces_1(buffer){
    return null;
}
;
_.getDisplayName = function getDisplayName_1(){
    return $getDisplayName_1(this);
}
;
_.getDocumentNumber = function getDocumentNumber_2(){
    return this.getPhysicalRoot().documentNumber;
}
;
_.getDocumentRoot = function getDocumentRoot_1(){
    var parent_0;
    parent_0 = $getParent_0(this);
    return !parent_0?null:parent_0.getDocumentRoot();
}
;
_.getFirstChild = function getFirstChild(){
    return null;
}
;
_.getLastChild = function getLastChild(){
    return null;
}
;
_.getLocalPart = function getLocalPart_1(){
    return $getLocalPart_0(this);
}
;
_.getNextInDocument = function getNextInDocument(anchor){
    return $getNextInDocument(this, anchor);
}
;
_.getNextSibling = function getNextSibling(){
    if (!this.parent_0) {
        return null;
    }
    return $getNthChild(this.parent_0, this.index_0 + 1);
}
;
_.getNodeName = function getNodeName_1(){
    return null;
}
;
_.getParent = function getParent_1(){
    return $getParent_0(this);
}
;
_.getPhysicalRoot = function getPhysicalRoot(){
    return $getPhysicalRoot(this);
}
;
_.getPreviousInDocument = function getPreviousInDocument(){
    var prev;
    prev = this.getPreviousSibling();
    if (prev) {
        return $getLastDescendantOrSelf(prev);
    }
    return $getParent_0(this);
}
;
_.getPreviousSibling = function getPreviousSibling(){
    if (!this.parent_0) {
        return null;
    }
    return $getNthChild(this.parent_0, this.index_0 - 1);
}
;
_.getRoot = function getRoot_1(){
    var parent_0;
    parent_0 = $getParent_0(this);
    return !parent_0?this:parent_0.getRoot();
}
;
_.getSequenceNumber = function getSequenceNumber(){
    var i_0, prev, prevseq;
    prev = this;
    for (i_0 = 0;; i_0++) {
        if (instanceOf(prev, 31)) {
            prevseq = prev.getSequenceNumber();
            return initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [prevseq[0], prevseq[1] + $intern_34 + i_0]);
        }
        prev = prev.getPreviousInDocument();
    }
}
;
_.getSiblingPosition = function getSiblingPosition_1(){
    return this.index_0;
}
;
_.getSystemId = function getSystemId_4(){
    return this.parent_0.getSystemId();
}
;
_.getTypedValue = function getTypedValue_2(){
    return new UntypedAtomicValue(this.getStringValue());
}
;
_.getURI = function getURI_1(){
    return $getURI(this);
}
;
_.hasChildNodes_0 = function hasChildNodes_1(){
    return !!this.getFirstChild();
}
;
_.isSameNodeInfo = function isSameNodeInfo_2(other){
    return this == other;
}
;
_.iterateAxis = function iterateAxis_1(axisNumber, nodeTest){
    return $iterateAxis_1(this, axisNumber, nodeTest);
}
;
_.index_0 = 0;
var NODE_LETTER;
var Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit = createForClass('client.net.sf.saxon.ce.tree.linked', 'NodeImpl', 10, Lclient_net_sf_saxon_ce_value_AbstractNode_2_classLit);
function $clinit_ParentNodeImpl(){
    $clinit_ParentNodeImpl = emptyMethod;
    $clinit_NodeImpl();
    EMPTY_NODE_LIST = initDim(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, $intern_66, 10, 0, 0, 1);
}

function $addChild(this$static, node, index_0){
    var c, kids;
    if (this$static.children == null) {
        c = initDim(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, $intern_66, 10, 10, 0, 1);
    }
    else if (instanceOf(this$static.children, 10)) {
        c = initDim(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, $intern_66, 10, 10, 0, 1);
        setCheck(c, 0, dynamicCast(this$static.children, 10));
    }
    else {
        c = dynamicCast(this$static.children, 33);
    }
    if (index_0 >= c.length) {
        kids = initDim(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, $intern_66, 10, c.length * 2, 0, 1);
        arraycopy(c, 0, kids, 0, c.length);
        c = kids;
    }
    setCheck(c, index_0, node);
    node.parent_0 = this$static;
    node.index_0 = index_0;
    this$static.children = c;
}

function $allChildren(this$static){
    return this$static.children == null?EMPTY_NODE_LIST:instanceOf(this$static.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this$static.children, 10)]):dynamicCast(this$static.children, 33);
}

function $compact_0(this$static, size_0){
    var kids;
    if (size_0 == 0) {
        this$static.children = null;
    }
    else if (size_0 == 1) {
        instanceOf(this$static.children, 33) && (this$static.children = dynamicCast(this$static.children, 33)[0]);
    }
    else {
        kids = initDim(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, $intern_66, 10, size_0, 0, 1);
        arraycopy(this$static.children, 0, kids, 0, size_0);
        this$static.children = kids;
    }
}

function $getFirstChild(this$static){
    if (this$static.children == null)
        return null;
    if (instanceOf(this$static.children, 10))
        return dynamicCast(this$static.children, 10);
    return dynamicCast(this$static.children, 33)[0];
}

function $getNthChild(this$static, n){
    var nodes;
    if (this$static.children == null)
        return null;
    if (instanceOf(this$static.children, 10)) {
        return n == 0?dynamicCast(this$static.children, 10):null;
    }
    nodes = dynamicCast(this$static.children, 33);
    if (n < 0 || n >= nodes.length)
        return null;
    return nodes[n];
}

function $getStringValue_0(this$static){
    var next, sb;
    sb = null;
    next = $getFirstChild(this$static);
    while (next) {
        if (instanceOf(next, 287)) {
            !sb && (sb = new FastStringBuffer(64));
            $append_3(sb, next.getStringValue());
        }
        next = next.getNextInDocument(this$static);
    }
    if (!sb)
        return '';
    return $condense(sb) , valueOf_3(sb.array, 0, sb.used);
}

function $setChildren_0(this$static, children){
    this$static.children = children;
}

function $setRawSequenceNumber(this$static, seq){
    this$static.sequence = seq;
}

defineClass(31, 10, {15:1, 7:1, 14:1, 10:1, 31:1, 23:1});
_.getFirstChild = function getFirstChild_0(){
    return $getFirstChild(this);
}
;
_.getLastChild = function getLastChild_0(){
    var n;
    if (this.children == null)
        return null;
    if (instanceOf(this.children, 10))
        return dynamicCast(this.children, 10);
    n = dynamicCast(this.children, 33);
    return n[n.length - 1];
}
;
_.getSequenceNumber = function getSequenceNumber_0(){
    return initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [this.sequence, 0]);
}
;
_.getStringValue = function getStringValue_2(){
    return $getStringValue_0(this);
}
;
_.hasChildNodes_0 = function hasChildNodes_2(){
    return this.children != null;
}
;
_.children = null;
_.sequence = 0;
var EMPTY_NODE_LIST;
var Lclient_net_sf_saxon_ce_tree_linked_ParentNodeImpl_2_classLit = createForClass('client.net.sf.saxon.ce.tree.linked', 'ParentNodeImpl', 31, Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit);
function $getAttributeList(this$static){
    return !this$static.attributeList?($clinit_AttributeCollection() , EMPTY_ATTRIBUTE_COLLECTION):this$static.attributeList;
}

function $getAttributeValue(this$static, localName){
    return !this$static.attributeList?null:$getValue_0(this$static.attributeList, '', localName);
}

function $getPrefixForURI(this$static, uri_0){
    var iter, ns;
    if ($equals_5(uri_0, 'http://www.w3.org/XML/1998/namespace')) {
        return 'xml';
    }
    iter = $iterateAxis_1(this$static, 8, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
    while (true) {
        ns = dynamicCast(iter.next_0(), 7);
        if (!ns) {
            return null;
        }
        if ($equals_5(ns.getStringValue(), uri_0)) {
            return ns.getLocalPart();
        }
    }
}

function $getRoot(this$static){
    var up;
    up = this$static.parent_0;
    return !up || instanceOf(up, 148) && dynamicCast(up, 148).imaginary?this$static:up.getRoot();
}

function $getSystemId(this$static){
    var root;
    root = $getPhysicalRoot(this$static);
    return !root?null:$getSystemId_0(root, this$static.sequence);
}

function $initialise(this$static, qName, atts, parent_0, sequenceNumber){
    this$static.elementName_0 = qName;
    this$static.parent_0 = parent_0;
    this$static.sequence = sequenceNumber;
    this$static.attributeList = atts;
}

function $setAttributeList(this$static, atts){
    this$static.attributeList = atts;
}

function $setLocation(this$static, systemId){
    var root;
    root = this$static.parent_0.getPhysicalRoot();
    $setSystemId_2(root, this$static.sequence, systemId);
}

function $setNamespaceList(this$static, namespaces){
    this$static.namespaceList = namespaces;
}

function $setNodeName(this$static, name_0){
    this$static.elementName_0 = name_0;
}

function ElementImpl(){
    $clinit_ParentNodeImpl();
}

defineClass(27, 31, {15:1, 7:1, 14:1, 27:1, 10:1, 31:1, 23:1}, ElementImpl);
_.copy = function copy_5(out, copyOptions){
    var childCopyOptions, i_0, localNamespaces, nc, next, ns;
    out.startElement(this.elementName_0, 0);
    childCopyOptions = copyOptions & -3;
    if ((copyOptions & 1) != 0) {
        localNamespaces = this.namespaceList == null?($clinit_NamespaceBinding() , EMPTY_ARRAY):this.namespaceList;
        for (i_0 = 0; i_0 < localNamespaces.length; i_0++) {
            ns = localNamespaces[i_0];
            if (!ns) {
                break;
            }
            out.namespace_0(ns, 0);
        }
    }
    else if ((copyOptions & 2) != 0) {
        sendNamespaces(this, out);
        childCopyOptions |= 1;
    }
    if (this.attributeList) {
        for (i_0 = 0; i_0 < $getLength(this.attributeList); i_0++) {
            nc = $getStructuredQName(this.attributeList, i_0);
            !!nc && out.attribute(nc, $getValue(this.attributeList, i_0));
        }
    }
    out.startContent();
    next = $getFirstChild(this);
    while (next) {
        next.copy(out, childCopyOptions);
        next = next.getNextSibling();
    }
    out.endElement();
}
;
_.generateId = function generateId_2(buffer){
    var sequence;
    sequence = this.sequence;
    if (sequence >= 0) {
        $generateId($getPhysicalRoot(this), buffer);
        $append_3(buffer, 'e');
        $append_3(buffer, '' + sequence);
    }
    else {
        this.parent_0.generateId(buffer);
        $append_3(buffer, 'f');
        $append_3(buffer, '' + this.index_0);
    }
}
;
_.getBaseURI = function getBaseURI_3(){
    return getBaseURI_7(this);
}
;
_.getDeclaredNamespaces = function getDeclaredNamespaces_2(buffer){
    return this.namespaceList == null?($clinit_NamespaceBinding() , EMPTY_ARRAY):this.namespaceList;
}
;
_.getDocumentRoot = function getDocumentRoot_2(){
    var root;
    root = $getRoot(this);
    return instanceOf(root, 109)?dynamicCast(root, 109):null;
}
;
_.getNodeKind = function getNodeKind_7(){
    return 1;
}
;
_.getNodeName = function getNodeName_2(){
    return this.elementName_0;
}
;
_.getRoot = function getRoot_2(){
    return $getRoot(this);
}
;
_.getSystemId = function getSystemId_5(){
    return $getSystemId(this);
}
;
_.namespaceList = null;
var Lclient_net_sf_saxon_ce_tree_linked_ElementImpl_2_classLit = createForClass('client.net.sf.saxon.ce.tree.linked', 'ElementImpl', 27, Lclient_net_sf_saxon_ce_tree_linked_ParentNodeImpl_2_classLit);
function $bindVariable(this$static, qName){
    var curr, preceding, prev, var_$;
    curr = this$static;
    prev = this$static;
    if (!instanceOf($getParent_0(this$static), 61)) {
        preceding = curr.iterateAxis(11, ($clinit_NodeKindTest() , ELEMENT));
        while (true) {
            curr = dynamicCast(preceding.next_0(), 7);
            while (!curr) {
                curr = prev.getParent();
                while (instanceOf(curr, 11) && !dynamicCast(curr, 11).seesAvuncularVariables()) {
                    curr = curr.getParent();
                }
                prev = curr;
                if (instanceOf(curr.getParent(), 61)) {
                    break;
                }
                preceding = curr.iterateAxis(11, ELEMENT);
                curr = dynamicCast(preceding.next_0(), 7);
            }
            if (instanceOf(curr.getParent(), 61)) {
                break;
            }
            if (instanceOf(curr, 181)) {
                var_$ = dynamicCast(curr, 181);
                if ($equals_0($getObjectName(var_$), qName)) {
                    return var_$;
                }
            }
        }
    }
    return $getGlobalVariable_0(this$static.getPrincipalStylesheetModule(), qName);
}

function $checkAttribute(this$static, name_0, flags){
    var i_0, val, yesNo;
    $add_17(this$static.permittedAttributes, name_0);
    val = $getValue_0(!this$static.attributeList?($clinit_AttributeCollection() , EMPTY_ATTRIBUTE_COLLECTION):this$static.attributeList, '', name_0);
    if (val == null) {
        flags.indexOf('1') != -1 && $compileError_2(this$static, 'Element must have an @' + ($getDisplayName_1(this$static) + '/' + name_0) + ' attribute', 'XTSE0010');
    }
    else {
        for (i_0 = 0; i_0 < flags.length; i_0++) {
            switch (flags.charCodeAt(i_0)) {
                case 97:
                    return $makeAttributeValueTemplate(this$static, val);
                case 98:
                    yesNo = trim_0(val);
                    if ($equals_5('yes', yesNo)) {
                        return $clinit_Boolean() , $clinit_Boolean() , TRUE_1;
                    }
                    else if ($equals_5('no', yesNo)) {
                        return $clinit_Boolean() , $clinit_Boolean() , FALSE_1;
                    }
                    else {
                        $compileError_2(this$static, 'The @' + name_0 + " attribute must have the value 'yes' or 'no'", 'XTSE0020');
                    }

                case 101:
                    return $makeExpression(this$static, val);
                case 112:
                    return $makePattern(this$static, val);
                case 113:
                    {
                        return $makeQName(this$static, val);
                    }

                case 115:
                    return val;
                case 116:
                    $compileError_2(this$static, 'The @type attribute is available only with a schema-aware XSLT processor', 'XTSE1660');
                case 118:
                    $equals_5(val, 'strip') || $compileError_2(this$static, 'The @type attribute is available only with a schema-aware XSLT processor', 'XTSE1660');
                    return null;
                case 119:
                    return toString__Ljava_lang_String___devirtual$_0(collapseWhitespace(val));
                case 122:
                    return $makeSequenceType(this$static, val);
            }
        }
    }
    return null;
}

function $checkForUnknownAttributes(this$static){
    var a, atts, qn;
    atts = !this$static.attributeList?($clinit_AttributeCollection() , EMPTY_ATTRIBUTE_COLLECTION):this$static.attributeList;
    for (a = 0; a < (atts.values == null?0:atts.used); a++) {
        qn = $getStructuredQName(atts, a);
        $equals_5($getNamespaceURI(qn), '') && !$contains_4(this$static.permittedAttributes, valueOf_3(qn.content_0, qn.localNameStart, qn.prefixStart - qn.localNameStart)) && $checkUnknownAttribute(this$static, qn);
    }
}

function $checkSortComesFirst(this$static, sortRequired){
    var child, child$array, child$index, child$max, nonSortFound, sortFound;
    sortFound = false;
    nonSortFound = false;
    for (child$array = this$static.children == null?EMPTY_NODE_LIST:instanceOf(this$static.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this$static.children, 10)]):dynamicCast(this$static.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
        child = child$array[child$index];
        if (instanceOf(child, 143)) {
            nonSortFound && $compileError_2(dynamicCast(child, 143), 'Within ' + $getDisplayName_1(this$static) + ', xsl:sort elements must come before other instructions', 'XTSE0010');
            sortFound = true;
        }
        else 
            child.getNodeKind() == 3?isWhite(child.getStringValue()) || (nonSortFound = true):(nonSortFound = true);
    }
    sortRequired && !sortFound && $compileError_2(this$static, $getDisplayName_1(this$static) + ' must have at least one xsl:sort child', 'XTSE0010');
}

function $checkTopLevel(this$static, errorCode){
    instanceOf($getParent_0(this$static), 61) || $compileError_2(this$static, 'Element must be used only at top level of stylesheet', errorCode);
}

function $checkUnknownAttribute(this$static, nc){
    var attributeURI, elementURI, localName;
    if ($compareTo_5($getEffectiveVersion(this$static), ($clinit_DecimalValue() , TWO)) > 0) {
        return;
    }
    attributeURI = $getNamespaceURI(nc);
    elementURI = $getURI(this$static);
    localName = valueOf_3(nc.content_0, nc.localNameStart, nc.prefixStart - nc.localNameStart);
    if ($equals_5(localName, 'default-collation') || $equals_5(localName, 'xpath-default-namespace') || $equals_5(localName, 'extension-element-prefixes') || $equals_5(localName, 'exclude-result-prefixes') || $equals_5(localName, 'version') || $equals_5(localName, 'use-when')) {
        if ($equals_5(elementURI, 'http://www.w3.org/1999/XSL/Transform')) {
            if ($equals_5('', attributeURI)) {
                return;
            }
        }
        else if ($equals_5(attributeURI, 'http://www.w3.org/1999/XSL/Transform') && this$static.isInstruction()) {
            return;
        }
    }
    ($equals_5('', attributeURI) || $equals_5('http://www.w3.org/1999/XSL/Transform', attributeURI)) && $compileError_2(this$static, 'Attribute ' + wrap($getDisplayName_0(nc), 2) + ' is not allowed on element ' + wrap($getDisplayName_1(this$static), 1), 'XTSE0090');
}

function $compileError(this$static, error){
    var pss;
    error.isStaticError = true;
    !error.locator && (error.locator = this$static);
    pss = this$static.getPreparedStylesheet();
    if (!pss) {
        throw error;
    }
    else {
        $reportError(pss, error);
    }
}

function $compileError_0(this$static, message){
    var tce;
    tce = new XPathException_0(message);
    tce.locator = this$static;
    $compileError(this$static, tce);
}

function $compileError_1(this$static, message, errorCode){
    var tce;
    loggingIsEnabled()?(tce = new XPathException_0(message)):(tce = new XPathException_0(''));
    tce.errorCode = errorCode;
    tce.locator = this$static;
    $compileError(this$static, tce);
}

function $compileError_2(this$static, message, errorCode){
    var tce;
    loggingIsEnabled()?(tce = new XPathException_0(message)):(tce = new XPathException_0(''));
    errorCode != null && (tce.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', errorCode));
        tce.locator = this$static;
        $compileError(this$static, tce);
}

function $compileSequenceConstructor(this$static, exec_0, decl){
    return $compileSequenceConstructor_0(this$static, exec_0, decl, $iterateAxis_1(this$static, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
}

function $compileSequenceConstructor_0(this$static, exec_0, decl, iter){
    var block, child, contents, let_0, lookahead, node, sibling, snode, t, tail, text_0, tracer, var_$;
    contents = new ArrayList_0(10);
    while (true) {
        node = dynamicCast(iter.next_0(), 7);
        if (!node) {
            break;
        }
        if (node.getNodeKind() == 3) {
            lookahead = node.iterateAxis(7, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
            sibling = dynamicCast(lookahead.next_0(), 7);
            if (!(instanceOf(sibling, 76) || instanceOf(sibling, 143))) {
                text_0 = new ValueOf(new StringLiteral_0(node.getStringValue()));
                $setSourceLocator(text_0, this$static);
                if (loggingIsEnabled() && isTraceEnabled) {
                    tracer = $inject_0(text_0, (!this$static.staticContext && (this$static.staticContext = new ExpressionContext(this$static)) , this$static.staticContext), new StructuredQName('xsl', 'http://www.w3.org/1999/XSL/Transform', 'text'), null);
                        $setSourceLocator(tracer, this$static);
                        instanceOf(tracer, 39) && (text_0 = dynamicCast(tracer, 39));
                }
                setCheck(contents.array, contents.array.length, text_0);
            }
        }
        else if (instanceOf(node, 254)) {
            var_$ = $compileLocalVariable(dynamicCast(node, 254), exec_0, decl);
            if (!var_$)
                ;
            else {
                tail = $compileSequenceConstructor_0(this$static, exec_0, decl, iter);
                if (!tail || instanceOf(tail, 9) && instanceOf(dynamicCast(tail, 9).value_0, 141))
                    ;
                else {
                    let_0 = new LetExpression;
                    $setRequiredType(let_0, var_$.requiredType);
                    $setVariableQName(let_0, var_$.variableQName);
                    $setSequence(let_0, var_$.select);
                    let_0.action = tail;
                    $adoptChildExpression(let_0, tail);
                    $fixupBinding(dynamicCast(node, 254), let_0);
                    $setSourceLocator(let_0, this$static);
                    if (loggingIsEnabled() && isTraceEnabled) {
                        t = new TraceExpression(let_0);
                        $setConstructType(t, ($clinit_Location() , LET_EXPRESSION));
                        $setObjectName(t, var_$.variableQName);
                        setCheck(contents.array, contents.array.length, t);
                    }
                    else {
                        setCheck(contents.array, contents.array.length, let_0);
                    }
                }
            }
        }
        else if (instanceOf(node, 11)) {
            snode = dynamicCast(node, 11);
            if (!!snode.validationError && !instanceOf(this$static, 249)) {
                child = $fallbackProcessing(this$static, exec_0, decl, snode);
            }
            else {
                child = snode.compile(exec_0, decl);
                if (child) {
                    !child.getContainer() && $setContainer(child, this$static);
                    $setSourceLocator(child, this$static);
                    loggingIsEnabled() && isTraceEnabled && (child = makeTraceInstruction(snode, child));
                }
            }
            !!child && (setCheck(contents.array, contents.array.length, child) , true);
        }
    }
    block = makeBlock_0(contents);
    $setSourceLocator(block, this$static);
    return block;
}

function $definesExcludedNamespace(this$static, uri_0){
    var excludedNamespace, excludedNamespace$array, excludedNamespace$index, excludedNamespace$max;
    if (this$static.excludedNamespaces == null) {
        return false;
    }
    for (excludedNamespace$array = this$static.excludedNamespaces , excludedNamespace$index = 0 , excludedNamespace$max = excludedNamespace$array.length; excludedNamespace$index < excludedNamespace$max; ++excludedNamespace$index) {
        excludedNamespace = excludedNamespace$array[excludedNamespace$index];
        if ($equals_5(excludedNamespace, uri_0)) {
            return true;
        }
    }
    return false;
}

function $definesExtensionElement(this$static, uri_0){
    var extensionNamespace, extensionNamespace$array, extensionNamespace$index, extensionNamespace$max;
    if (this$static.extensionNamespaces == null) {
        return false;
    }
    for (extensionNamespace$array = this$static.extensionNamespaces , extensionNamespace$index = 0 , extensionNamespace$max = extensionNamespace$array.length; extensionNamespace$index < extensionNamespace$max; ++extensionNamespace$index) {
        extensionNamespace = extensionNamespace$array[extensionNamespace$index];
        if ($equals_5(extensionNamespace, uri_0)) {
            return true;
        }
    }
    return false;
}

function $fallbackProcessing(this$static, exec_0, decl, instruction){
    var b, child, child$array, child$index, child$max, fallback;
    fallback = null;
    for (child$array = instruction.children == null?EMPTY_NODE_LIST:instanceOf(instruction.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(instruction.children, 10)]):dynamicCast(instruction.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
        child = child$array[child$index];
        if (instanceOf(child, 203)) {
            b = $compileSequenceConstructor(dynamicCast(child, 203), exec_0, decl);
            !b && (b = new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10)));
            if (!fallback) {
                fallback = b;
            }
            else {
                fallback = makeBlock(fallback, b);
                $setSourceLocator(fallback, this$static);
            }
        }
    }
    return fallback?fallback:new ErrorExpression(instruction.validationError);
}

function $fixupReferences(this$static){
    var child, child$array, child$index, child$max;
    for (child$array = this$static.children == null?EMPTY_NODE_LIST:instanceOf(this$static.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this$static.children, 10)]):dynamicCast(this$static.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
        child = child$array[child$index];
        instanceOf(child, 11) && dynamicCast(child, 11).fixupReferences();
    }
}

function $getAttributeSets(this$static, use, list){
    var array, aset, asetname, asetname$iterator, err, found, i_0, name_0, psm;
    !list && (list = new ArrayList_0(4));
    psm = this$static.getPrincipalStylesheetModule();
    for (asetname$iterator = new AbstractList$IteratorImpl(tokenize(use)); asetname$iterator.i < asetname$iterator.this$01_0.size_1();) {
        asetname = (checkCriticalElement(asetname$iterator.i < asetname$iterator.this$01_0.size_1()) , dynamicCastToString(asetname$iterator.this$01_0.get_1(asetname$iterator.last = asetname$iterator.i++)));
        try {
            name_0 = $makeQName(this$static, asetname);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                err = $e0;
                $compileError_2(this$static, err.message_0, 'XTSE0710');
                name_0 = null;
            }
            else 
                throw unwrap($e0);
        }
        found = $getAttributeSets_0(psm, name_0, list);
        found || $compileError_2(this$static, 'No attribute-set exists named ' + asetname, 'XTSE0710');
    }
    array = initDim(Lclient_net_sf_saxon_ce_expr_instruct_AttributeSet_2_classLit, $intern_1, 370, list.array.length, 0, 1);
    for (i_0 = 0; i_0 < list.array.length; i_0++) {
        aset = dynamicCast((checkElementIndex(i_0, list.array.length) , dynamicCast(list.array[i_0], 75)).sourceElement, 221);
        array[i_0] = aset.procedure;
    }
    return array;
}

function $getCommonChildItemType(this$static){
    var child, child$array, child$index, child$max, ret, t;
    t = ($clinit_EmptySequenceTest() , $clinit_EmptySequenceTest() , THE_INSTANCE_8);
    for (child$array = this$static.children == null?EMPTY_NODE_LIST:instanceOf(this$static.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this$static.children, 10)]):dynamicCast(this$static.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
        child = child$array[child$index];
        if (instanceOf(child, 11)) {
            ret = dynamicCast(child, 11).getReturnedItemType();
            !!ret && (t = getCommonSuperType(t, ret));
        }
        else {
            t = getCommonSuperType(t, ($clinit_NodeKindTest() , TEXT));
        }
        if (t == ($clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2)) {
            return t;
        }
    }
    return t;
}

function $getContainingStylesheet(this$static){
    var node;
    if (!this$static.containingStylesheet) {
        node = this$static;
        while (!!node && !instanceOf(node, 61)) {
            node = node.getParent();
        }
        this$static.containingStylesheet = dynamicCast(node, 61);
    }
    return this$static.containingStylesheet;
}

function $getDefaultCollationName(this$static){
    var e;
    e = this$static;
    while (instanceOf(e, 11)) {
        if (dynamicCast(e, 11).defaultCollationName != null) {
            return dynamicCast(e, 11).defaultCollationName;
        }
        e = e.getParent();
    }
    return 'http://www.w3.org/2005/xpath-functions/collation/codepoint';
}

function $getDefaultXPathNamespace(this$static){
    var anc, x_0;
    anc = this$static;
    while (instanceOf(anc, 11)) {
        x_0 = dynamicCast(anc, 11).defaultXPathNamespace;
        if (x_0 != null) {
            return x_0;
        }
        anc = anc.getParent();
    }
    return '';
}

function $getEffectiveVersion(this$static){
    var node;
    if (!this$static.version) {
        node = $getParent_0(this$static);
        if (instanceOf(node, 11)) {
            this$static.version = $getEffectiveVersion(dynamicCast(node, 11));
        }
        else {
            return $clinit_DecimalValue() , TWO;
        }
    }
    return this$static.version;
}

function $getLastChildInstruction(this$static){
    var child, child$array, child$index, child$max, last;
    last = null;
    for (child$array = this$static.children == null?EMPTY_NODE_LIST:instanceOf(this$static.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this$static.children, 10)]):dynamicCast(this$static.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
        child = child$array[child$index];
        instanceOf(child, 11)?(last = dynamicCast(child, 11)):(last = null);
    }
    return last;
}

function $getObjectName(this$static){
    if (!this$static.objectName) {
        try {
            this$static.objectName = dynamicCast($checkAttribute(this$static, 'name', 'q'), 8);
            !this$static.objectName && (this$static.objectName = new StructuredQName('saxon', 'http://saxon.sf.net/', 'unnamed-' + $getLocalPart_0(this$static)));
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                this$static.objectName = new StructuredQName('saxon', 'http://saxon.sf.net/', 'unknown-' + $getLocalPart_0(this$static));
            }
            else 
                throw unwrap($e0);
        }
    }
    return this$static.objectName;
}

function $getPreparedStylesheet(this$static){
    var xss;
    xss = $getContainingStylesheet(this$static);
    return !xss?null:!xss.principalStylesheetModule?null:xss.principalStylesheetModule.preparedStylesheet;
}

function $getWithParamInstructions(this$static, exec_0, decl, tunnel, caller){
    var array, child, child$array, child$index, child$max, p_0, params, wp;
    params = new ArrayList;
    for (child$array = this$static.children == null?EMPTY_NODE_LIST:instanceOf(this$static.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this$static.children, 10)]):dynamicCast(this$static.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
        child = child$array[child$index];
        if (instanceOf(child, 154)) {
            wp = dynamicCast(child, 154);
            if (wp.tunnel == tunnel) {
                p_0 = $compile_3(wp, exec_0, decl);
                copyLocationInfo(caller, p_0);
                setCheck(params.array, params.array.length, p_0);
            }
        }
    }
    array = initDim(Lclient_net_sf_saxon_ce_expr_instruct_WithParam_2_classLit, {17:1, 895:1, 3:1, 5:1}, 317, params.array.length, 0, 1);
    return dynamicCast($toArray(params, array), 895);
}

function $isExcludedNamespace(this$static, uri_0){
    var p_0;
    if ($equals_5(uri_0, 'http://www.w3.org/1999/XSL/Transform') || $equals_5(uri_0, 'http://www.w3.org/XML/1998/namespace')) {
        return true;
    }
    p_0 = $getParent_0(this$static);
    return $definesExcludedNamespace(this$static, uri_0) || instanceOf(p_0, 11) && $isExcludedNamespace(dynamicCast(p_0, 11), uri_0);
}

function $isExtensionNamespace(this$static, uri_0){
    var p_0;
    p_0 = $getParent_0(this$static);
    return $definesExtensionElement(this$static, uri_0) || instanceOf(p_0, 11) && $isExtensionNamespace(dynamicCast(p_0, 11), uri_0);
}

function $makeAttributeValueTemplate(this$static, expression){
    var err;
    try {
        return make_3(expression, this$static, (!this$static.staticContext && (this$static.staticContext = new ExpressionContext(this$static)) , this$static.staticContext));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $compileError(this$static, err);
            return new StringLiteral_0(expression);
        }
        else 
            throw unwrap($e0);
    }
}

function $makeExpression(this$static, expression){
    var erexp, err;
    try {
        return make(expression, (!this$static.staticContext && (this$static.staticContext = new ExpressionContext(this$static)) , this$static.staticContext), this$static, 0, this$static);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            err.locator = this$static;
            $compileError(this$static, err);
            erexp = new ErrorExpression(err);
            $setSourceLocator(erexp, this$static);
            $setContainer(erexp, this$static);
            return erexp;
        }
        else 
            throw unwrap($e0);
    }
}

function $makePattern(this$static, pattern){
    var err;
    try {
        return make_1(pattern, (!this$static.staticContext && (this$static.staticContext = new ExpressionContext(this$static)) , this$static.staticContext), this$static);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $compileError(this$static, err);
            return new NodeTestPattern(($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
        }
        else 
            throw unwrap($e0);
    }
}

function $makeQName(this$static, lexicalQName){
    var code_0, e, err, qName;
    try {
        qName = fromLexicalQName(lexicalQName, '', new InscopeNamespaceResolver(this$static));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            e.isStaticError = true;
            code_0 = !e.errorCode?null:$getLocalName_1(e.errorCode);
            $equals_5('FONS0004', code_0)?(e.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTSE0280')):$equals_5('FOCA0002', code_0)?(e.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTSE0020')):code_0 == null && (e.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTSE0020'));
                throw e;
        }
        else 
            throw unwrap($e0);
    }
    if (isReserved($getNamespaceURI(qName))) {
        err = new XPathException_0('Namespace prefix ' + valueOf_3(qName.content_0, qName.prefixStart, qName.content_0.length - qName.prefixStart) + ' refers to a reserved namespace');
        err.isStaticError = true;
        err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTSE0080');
            throw err;
    }
    return qName;
}

function $makeSequenceType(this$static, sequenceType){
    var err, parser_0;
    try {
        parser_0 = new ExpressionParser;
        $setLanguage(parser_0, 0);
        return $parseSequenceType_0(parser_0, sequenceType, (!this$static.staticContext && (this$static.staticContext = new ExpressionContext(this$static)) , this$static.staticContext));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $compileError(this$static, err);
            return $clinit_SequenceType() , ANY_SEQUENCE;
        }
        else 
            throw unwrap($e0);
    }
}

function $makeSortKeys(this$static, decl){
    var child, child$array, child$array0, child$index, child$index0, child$max, child$max0, k_0, keys_0, numberOfSortKeys;
    numberOfSortKeys = 0;
    for (child$array0 = this$static.children == null?EMPTY_NODE_LIST:instanceOf(this$static.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this$static.children, 10)]):dynamicCast(this$static.children, 33) , child$index0 = 0 , child$max0 = child$array0.length; child$index0 < child$max0; ++child$index0) {
        child = child$array0[child$index0];
        if (instanceOf(child, 143)) {
            $compile_2(dynamicCast(child, 143), this$static.getExecutable(), decl);
            numberOfSortKeys != 0 && !!dynamicCast(child, 143).stable && $compileError_2(this$static, 'stable attribute may appear only on the first xsl:sort element', 'XTSE1017');
            ++numberOfSortKeys;
        }
    }
    if (numberOfSortKeys > 0) {
        keys_0 = initDim(Lclient_net_sf_saxon_ce_expr_sort_SortKeyDefinition_2_classLit, $intern_1, 369, numberOfSortKeys, 0, 1);
        k_0 = 0;
        for (child$array = this$static.children == null?EMPTY_NODE_LIST:instanceOf(this$static.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this$static.children, 10)]):dynamicCast(this$static.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
            child = child$array[child$index];
            instanceOf(child, 143) && (keys_0[k_0++] = $simplify_1(dynamicCast(child, 143).sortKeyDefinition, make_0((!this$static.staticContext && (this$static.staticContext = new ExpressionContext(this$static)) , this$static.staticContext), this$static.getExecutable())));
        }
        return keys_0;
    }
    else {
        return null;
    }
}

function $onlyAllow(this$static, localName){
    var child, child$array, child$index, child$max;
    for (child$array = this$static.children == null?EMPTY_NODE_LIST:instanceOf(this$static.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this$static.children, 10)]):dynamicCast(this$static.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
        child = child$array[child$index];
        if (binarySearch(localName, $getLocalPart_0(child), ($clinit_Comparators() , $clinit_Comparators() , NATURAL)) >= 0)
            ;
        else 
            child.getNodeKind() == 3?isWhite(child.getStringValue()) || $compileError_2(this$static, 'No character data is allowed within ' + $getDisplayName_1(this$static), 'XTSE0010'):$compileError_2(this$static, 'Child element ' + $getDisplayName_1(child) + ' is not allowed as a child of ' + $getDisplayName_1(this$static), 'XTSE0010');
    }
}

function $processAllAttributes(this$static){
    var child, child$array, child$index, child$max;
    instanceOf(this$static, 174) || $processDefaultCollationAttribute(this$static, '');
    !this$static.staticContext && (this$static.staticContext = new ExpressionContext(this$static));
    $processAttributes(this$static);
    for (child$array = this$static.children == null?EMPTY_NODE_LIST:instanceOf(this$static.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this$static.children, 10)]):dynamicCast(this$static.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
        child = child$array[child$index];
        instanceOf(child, 11) && dynamicCast(child, 11).processAllAttributes();
    }
}

function $processAttributes(this$static){
    var err;
    try {
        this$static.prepareAttributes();
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $compileError(this$static, err);
        }
        else 
            throw unwrap($e0);
    }
}

function $processDefaultCollationAttribute(this$static, ns){
    var base, collationURI, uri_0, uri$iterator, v;
    v = !this$static.attributeList?null:$getValue_0(this$static.attributeList, ns, 'default-collation');
    if (v != null) {
        for (uri$iterator = new AbstractList$IteratorImpl(tokenize(v)); uri$iterator.i < uri$iterator.this$01_0.size_1();) {
            uri_0 = (checkCriticalElement(uri$iterator.i < uri$iterator.this$01_0.size_1()) , dynamicCastToString(uri$iterator.this$01_0.get_1(uri$iterator.last = uri$iterator.i++)));
            if ($equals_5(uri_0, 'http://www.w3.org/2005/xpath-functions/collation/codepoint') || $equals_5(uri_0.substr(0, 20), 'http://saxon.sf.net/')) {
                this$static.defaultCollationName = uri_0;
                return;
            }
            else {
                try {
                    collationURI = new URI_2(uri_0);
                    if (collationURI.m_scheme == null) {
                        base = new URI_1(getBaseURI_7(this$static));
                        collationURI = new URI_0(base, $toString_1(collationURI));
                        uri_0 = $toString_1(collationURI);
                    }
                }
                catch ($e0) {
                    $e0 = wrap_0($e0);
                    if (instanceOf($e0, 51)) {
                        $compileError_0(this$static, "default collation '" + uri_0 + "' is not a valid URI");
                        uri_0 = 'http://www.w3.org/2005/xpath-functions/collation/codepoint';
                    }
                    else 
                        throw unwrap($e0);
                }
                if ($getNamedCollation((this$static.getPreparedStylesheet() , uri_0))) {
                    this$static.defaultCollationName = uri_0;
                    return;
                }
            }
        }
        $compileError_2(this$static, 'No recognized collation URI found in default-collation attribute', 'XTSE0125');
    }
}

function $processDefaultXPathNamespaceAttribute(this$static, ns){
    var v;
    v = !this$static.attributeList?null:$getValue_0(this$static.attributeList, ns, 'xpath-default-namespace');
    v != null && (this$static.defaultXPathNamespace = v);
}

function $processExcludedNamespaces(this$static, ns){
    var ext;
    ext = !this$static.attributeList?null:$getValue_0(this$static.attributeList, ns, 'exclude-result-prefixes');
    ext != null && (this$static.excludedNamespaces = $processPrefixList(this$static, ext, true));
}

function $processExtensionElementAttribute(this$static, ns){
    var ext;
    ext = !this$static.attributeList?null:$getValue_0(this$static.attributeList, ns, 'extension-element-prefixes');
    ext != null && (this$static.extensionNamespaces = $processPrefixList(this$static, ext, false));
}

function $processPrefixList(this$static, in_$, allowAll){
    var codes, count, resolver, result, s, s$iterator, tokens, uri_0;
    resolver = new InscopeNamespaceResolver(this$static);
    if (allowAll && $equals_5('#all', trim_0(in_$))) {
        codes = new NamespaceIterator(this$static);
        result = new ArrayList;
        while ($hasNext_1(codes)) {
            $add_16(result, codes.next.uri_0);
        }
        return dynamicCast($toArray(result, initDim(Ljava_lang_String_2_classLit, $intern_8, 2, result.array.length, 4, 1)), 42);
    }
    else {
        tokens = tokenize(in_$);
        count = tokens.array.length;
        result = initDim(Ljava_lang_String_2_classLit, $intern_8, 2, count, 4, 1);
        count = 0;
        for (s$iterator = new AbstractList$IteratorImpl(tokens); s$iterator.i < s$iterator.this$01_0.size_1();) {
            s = (checkCriticalElement(s$iterator.i < s$iterator.this$01_0.size_1()) , dynamicCastToString(s$iterator.this$01_0.get_1(s$iterator.last = s$iterator.i++)));
            $equals_5('#default', s)?(s = ''):allowAll && $equals_5('#all', s) && $compileError_2(this$static, 'In exclude-result-prefixes, cannot mix #all with other values', 'XTSE0020');
            uri_0 = $getURIForPrefix(resolver, s, true);
            uri_0 == null && $compileError_2(this$static, 'Prefix ' + s + ' is undeclared', 'XTSE1430');
            result[count++] = uri_0;
        }
        return result;
    }
}

function $processVersionAttribute(this$static, ns){
    var v, val;
    v = trim_0(!this$static.attributeList?null:$getValue_0(this$static.attributeList, ns, 'version'));
    if (v != null) {
        val = makeDecimalValue(v);
        if (instanceOf(val, 29)) {
            $compileError_2(this$static, 'The version attribute must be a decimal literal', 'XTSE0110');
            this$static.version = ($clinit_DecimalValue() , TWO);
        }
        else {
            this$static.version = dynamicCast(val, 68);
        }
    }
}

function $setObjectName_0(this$static, qName){
    this$static.objectName = qName;
}

function $setValidationError(this$static, reason){
    this$static.validationError = reason;
    this$static.reportingCircumstances = 2;
}

function $typeCheck_6(this$static, exp_0){
    var erexp, err;
    if (!exp_0) {
        return null;
    }
    $setContainer(exp_0, this$static);
    try {
        exp_0 = $typeCheck_1(make_0((!this$static.staticContext && (this$static.staticContext = new ExpressionContext(this$static)) , this$static.staticContext), this$static.getExecutable()), exp_0, ($clinit_Type() , ITEM_TYPE));
        exp_0 = resolveCallsToCurrentFunction(exp_0);
        loggingIsEnabled() && isTraceEnabled && (exp_0 = $inject_0(exp_0, (!this$static.staticContext && (this$static.staticContext = new ExpressionContext(this$static)) , this$static.staticContext), new StructuredQName('xsl', 'http://www.w3.org/1999/XSL/Transform', 'text'), new StructuredQName('', '', '')));
            return exp_0;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            if (err.isStaticError || err.isTypeError) {
                $compileError(this$static, err);
                return exp_0;
            }
            else {
                erexp = new ErrorExpression(err);
                $setSourceLocator(erexp, this$static);
                return erexp;
            }
        }
        else 
            throw unwrap($e0);
    }
}

function $typeCheck_7(this$static, name_0, pattern){
    var e2, err, errpat, filter, let_0, offer, sub_0, usesCurrent;
    if (!pattern) {
        return null;
    }
    try {
        pattern = pattern.analyze(make_0((!this$static.staticContext && (this$static.staticContext = new ExpressionContext(this$static)) , this$static.staticContext), this$static.getExecutable()), ($clinit_Type() , NODE_TYPE));
        usesCurrent = false;
        sub_0 = pattern.iterateSubExpressions();
        while (sub_0.hasNext()) {
            filter = dynamicCast(sub_0.next_2(), 6);
            if (callsFunction(filter, ($clinit_Current() , FN_CURRENT))) {
                usesCurrent = true;
                break;
            }
        }
        if (usesCurrent) {
            let_0 = new LetExpression;
            $setVariableQName(let_0, new StructuredQName('saxon', 'http://saxon.sf.net/', 'current' + getHashCode(this$static)));
                $setRequiredType(let_0, ($clinit_SequenceType() , SINGLE_ITEM));
                $setSequence(let_0, new ContextItemExpression);
                $setAction(let_0, new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10)));
                offer = new PromotionOffer;
                offer.action = 14;
                offer.containingExpression = let_0;
                pattern.resolveCurrent(let_0, offer, true);
        }
        return pattern;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            if ($isReportableStatically(err)) {
                e2 = new XPathException_4('Error in ' + name_0 + ' pattern', err);
                e2.locator = this$static;
                $setErrorCodeQName(e2, err.errorCode);
                throw e2;
            }
            else {
                errpat = new LocationPathPattern;
                $setExecutable_1(errpat, this$static.getExecutable());
                $addFilter(errpat, new ErrorExpression(err));
                return errpat;
            }
        }
        else 
            throw unwrap($e0);
    }
}

function $validateChildren(this$static, decl){
    var child, child$array, child$index, child$max, containsInstructions;
    containsInstructions = this$static.mayContainSequenceConstructor();
    for (child$array = this$static.children == null?EMPTY_NODE_LIST:instanceOf(this$static.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this$static.children, 10)]):dynamicCast(this$static.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
        child = child$array[child$index];
        if (instanceOf(child, 11)) {
            containsInstructions && !dynamicCast(child, 11).isInstruction() && !this$static.isPermittedChild(dynamicCast(child, 11)) && $compileError_2(dynamicCast(child, 11), 'An ' + $getDisplayName_1(this$static) + ' element must not contain an ' + $getDisplayName_1(child) + ' element', 'XTSE0010');
            dynamicCast(child, 11).validateSubtree(decl);
        }
    }
}

function $validateSubtree(this$static, decl){
    var child, child$array, child$index, child$max, err, hasFallback;
    if ((this$static.actionsCompleted & 1) != 0) {
        return;
    }
    this$static.actionsCompleted |= 1;
    if (this$static.validationError) {
        if (this$static.reportingCircumstances == 1) {
            $compileError(this$static, this$static.validationError);
        }
        else if (this$static.reportingCircumstances == 2 && $compareTo_5($getEffectiveVersion(this$static), ($clinit_DecimalValue() , TWO)) <= 0) {
            $compileError(this$static, this$static.validationError);
        }
        else if (this$static.reportingCircumstances == 4) {
            hasFallback = false;
            for (child$array = this$static.children == null?EMPTY_NODE_LIST:instanceOf(this$static.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this$static.children, 10)]):dynamicCast(this$static.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
                child = child$array[child$index];
                if (instanceOf(child, 203)) {
                    hasFallback = true;
                    $validateSubtree(dynamicCast(child, 203), decl);
                }
            }
            hasFallback || $compileError(this$static, this$static.validationError);
        }
    }
    else {
        try {
            this$static.validate(decl);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                err = $e0;
                $compileError(this$static, err);
            }
            else 
                throw unwrap($e0);
        }
        this$static.validateChildren(decl);
        this$static.postValidate();
    }
}

function StyleElement(){
    $clinit_ParentNodeImpl();
    ElementImpl.call(this);
    this.permittedAttributes = new HashSet_0(8);
}

function makeTraceInstruction(source, child){
    var construct, qName, tracer;
    if (instanceOf(child, 162) && !instanceOf(source, 194)) {
        return child;
    }
    construct = source.elementName_0;
    if (instanceOf(source, 174)) {
        construct = ($clinit_Location() , LITERAL_RESULT_ELEMENT);
        qName = source.elementName_0;
    }
    else {
        qName = source.getObjectName();
    }
    tracer = $inject_0(child, (!source.staticContext && (source.staticContext = new ExpressionContext(source)) , source.staticContext), construct, qName);
    $setSourceLocator(tracer, source);
    return tracer;
}

defineClass(11, 27, $intern_68);
_.fixupReferences = function fixupReferences(){
    $fixupReferences(this);
}
;
_.getContainerGranularity = function getContainerGranularity_2(){
    return 1;
}
;
_.getExecutable = function getExecutable_3(){
    return this.getPreparedStylesheet();
}
;
_.getLocation = function getLocation_0(){
    return getPath(this) + ' in ' + getBaseURI_7(this);
}
;
_.getObjectName = function getObjectName(){
    return $getObjectName(this);
}
;
_.getPreparedStylesheet = function getPreparedStylesheet(){
    return $getPreparedStylesheet(this);
}
;
_.getPrincipalStylesheetModule = function getPrincipalStylesheetModule(){
    return $getContainingStylesheet(this).principalStylesheetModule;
}
;
_.getReturnedItemType = function getReturnedItemType(){
    return $clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2;
}
;
_.getSourceLocator = function getSourceLocator_2(){
    return this;
}
;
_.index_1 = function index_1(decl, top_0){
}
;
_.isDeclaration = function isDeclaration(){
    return false;
}
;
_.isInstruction = function isInstruction(){
    return false;
}
;
_.isPermittedChild = function isPermittedChild(child){
    return false;
}
;
_.markTailCalls = function markTailCalls(){
    return false;
}
;
_.mayContainParam = function mayContainParam(attName){
    return false;
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor(){
    return false;
}
;
_.postValidate = function postValidate(){
}
;
_.processAllAttributes = function processAllAttributes(){
    $processAllAttributes(this);
}
;
_.seesAvuncularVariables = function seesAvuncularVariables(){
    return true;
}
;
_.validate = function validate(decl){
}
;
_.validateChildren = function validateChildren(decl){
    $validateChildren(this, decl);
}
;
_.validateSubtree = function validateSubtree(decl){
    $validateSubtree(this, decl);
}
;
_.actionsCompleted = 0;
_.defaultCollationName = null;
_.defaultXPathNamespace = null;
_.excludedNamespaces = null;
_.extensionNamespaces = null;
_.reportingCircumstances = 1;
_.staticContext = null;
_.validationError = null;
_.version = null;
var Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'StyleElement', 11, Lclient_net_sf_saxon_ce_tree_linked_ElementImpl_2_classLit);
function AbsentExtensionElement(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(249, 11, {28:1, 15:1, 7:1, 14:1, 249:1, 11:1, 27:1, 10:1, 31:1, 23:1}, AbsentExtensionElement);
_.compile = function compile(exec_0, decl){
    if (instanceOf($getParent_0(this), 61)) {
        return null;
    }
    !this.validationError && (this.validationError = new XPathException_0('Unknown instruction'));
    return $fallbackProcessing(this, exec_0, decl, this);
}
;
_.isInstruction = function isInstruction_0(){
    return true;
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_0(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes(){
}
;
_.processAllAttributes = function processAllAttributes_0(){
    if (instanceOf($getParent_0(this), 61) && $compareTo_5($getEffectiveVersion(this), ($clinit_DecimalValue() , TWO)) > 0)
        ;
    else {
        $processAllAttributes(this);
    }
}
;
_.validate = function validate_0(decl){
}
;
_.validateSubtree = function validateSubtree_0(decl){
    if (instanceOf($getParent_0(this), 61) && $compareTo_5($getEffectiveVersion(this), ($clinit_DecimalValue() , TWO)) > 0)
        ;
    else {
        $validateSubtree(this, decl);
    }
}
;
var Lclient_net_sf_saxon_ce_style_AbsentExtensionElement_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'AbsentExtensionElement', 249, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function make_3(avt, sourceLocator, env){
    var args, components, err, exp_0, fn, i0, i1, i8, i9, last, len, parser_0, visitor;
    components = new ArrayList_0(5);
    len = avt.length;
    last = 0;
    visitor = make_0(env, null);
    while (last < len) {
        i0 = avt.indexOf('{', last);
            i1 = avt.indexOf('{{', last);
                i8 = avt.indexOf('}', last);
                i9 = avt.indexOf('}}', last);
                if ((i0 < 0 || len < i0) && (i8 < 0 || len < i8)) {
                    last < len && $add_16(components, new StringLiteral_0(avt.substr(last, len - last)));
                    break;
                }
                else if (i8 >= 0 && (i0 < 0 || i8 < i0)) {
                    if (i8 != i9) {
                        err = new XPathException_0('Closing curly brace in attribute value template "' + avt.substr(0, len) + '" must be doubled');
                        err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTSE0370');
                            err.isStaticError = true;
                            throw err;
                    }
                    last < i8 + 1 && $add_16(components, new StringLiteral_0(avt.substr(last, i8 + 1 - last)));
                    last = i8 + 2;
                }
                else if (i1 >= 0 && i1 == i0) {
                    last < i1 + 1 && $add_16(components, new StringLiteral_0(avt.substr(last, i1 + 1 - last)));
                    last = i1 + 2;
                }
                else if (i0 >= 0) {
                    i0 > last && last < i0 && $add_16(components, new StringLiteral_0(avt.substr(last, i0 - last)));
                    parser_0 = new ExpressionParser;
                    $setDefaultContainer(parser_0, env.element);
                    $setLanguage(parser_0, 0);
                    exp_0 = $parse(parser_0, avt, i0 + 1, 215, env);
                    exp_0 = $simplify(visitor, exp_0);
                    last = parser_0.t.currentTokenStartOffset + 1;
                    $compareTo_5($getEffectiveVersion(env.element), ($clinit_DecimalValue() , TWO)) < 0?$add_16(components, makeFirstItem(exp_0)):$add_16(components, $simplify(visitor, makeSimpleContentConstructor(exp_0, new StringLiteral(($clinit_StringValue() , SINGLE_SPACE)))));
                }
                else {
                    throw new IllegalStateException_0('Internal error parsing AVT');
                }
    }
    if (components.array.length == 0) {
        return new StringLiteral(($clinit_StringValue() , EMPTY_STRING));
    }
    if (components.array.length == 1) {
        return $simplify(visitor, (checkElementIndex(0, components.array.length) , dynamicCast(components.array[0], 6)));
    }
    args = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, components.array.length, 0, 1);
    $toArray(components, args);
    fn = dynamicCast(makeSystemFunction('concat', args), 345);
    $setSourceLocator(fn, sourceLocator);
    return $simplify(visitor, fn);
}

function makeFirstItem(exp_0){
    var th;
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    instanceOf(exp_0.getItemType(), 43) || (exp_0 = new Atomizer(exp_0));
    (exp_0.getCardinality() & $intern_14) != 0 && (exp_0 = new FirstItemExpression(exp_0));
    $isSubType(th, exp_0.getItemType(), ($clinit_AtomicType() , STRING)) || (exp_0 = new AtomicSequenceConverter(exp_0, STRING));
    return exp_0;
}

function DataElement(){
    $clinit_ParentNodeImpl();
    ElementImpl.call(this);
}

defineClass(248, 27, {15:1, 7:1, 14:1, 248:1, 27:1, 10:1, 31:1, 23:1}, DataElement);
var Lclient_net_sf_saxon_ce_style_DataElement_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'DataElement', 248, Lclient_net_sf_saxon_ce_tree_linked_ElementImpl_2_classLit);
function Declaration(module, source){
    this.module = module;
    this.sourceElement = source;
}

defineClass(75, 1, {75:1}, Declaration);
var Lclient_net_sf_saxon_ce_style_Declaration_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'Declaration', 75, Ljava_lang_Object_2_classLit);
function ExpressionContext(styleElement){
    this.element = styleElement;
}

defineClass(58, 1, {58:1}, ExpressionContext);
_.bindVariable = function bindVariable_0(qName){
    var err, var_$, xslVariableDeclaration;
    xslVariableDeclaration = $bindVariable(this.element, qName);
    if (!xslVariableDeclaration) {
        err = new XPathException_0('Variable ' + $getDisplayName_0(qName) + ' has not been declared');
        err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XPST0008');
            err.isStaticError = true;
            throw err;
    }
    var_$ = instanceOf($getParent_0(xslVariableDeclaration), 61)?new VariableReference:new LocalVariableReference;
    $add_16(xslVariableDeclaration.references, var_$);
    return var_$;
}
;
_.getBaseURI = function getBaseURI_4(){
    return getBaseURI_7(this.element);
}
;
_.getConfiguration = function getConfiguration_2(){
    return this.element.getPreparedStylesheet().config;
}
;
_.getDefaultCollationName = function getDefaultCollationName_0(){
    return $getDefaultCollationName(this.element);
}
;
_.getDefaultElementNamespace = function getDefaultElementNamespace_0(){
    return $getDefaultXPathNamespace(this.element);
}
;
_.getDefaultFunctionNamespace = function getDefaultFunctionNamespace_0(){
    return 'http://www.w3.org/2005/xpath-functions';
}
;
_.getFunctionLibrary = function getFunctionLibrary_1(){
    return this.element.getPrincipalStylesheetModule().functionLibrary;
}
;
_.getNamespaceResolver = function getNamespaceResolver_0(){
    return new InscopeNamespaceResolver(this.element);
}
;
_.isInBackwardsCompatibleMode = function isInBackwardsCompatibleMode_0(){
    return $compareTo_5($getEffectiveVersion(this.element), ($clinit_DecimalValue() , TWO)) < 0;
}
;
var Lclient_net_sf_saxon_ce_style_ExpressionContext_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'ExpressionContext', 58, Ljava_lang_Object_2_classLit);
function $compileContent(this$static, exec_0, decl, inst, separator){
    var err;
    !separator && (separator = new StringLiteral(($clinit_StringValue() , SINGLE_SPACE)));
    try {
        !this$static.select && (this$static.select = $compileSequenceConstructor_0(this$static, exec_0, decl, $iterateAxis_1(this$static, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7))));
        this$static.select = makeSimpleContentConstructor(this$static.select, separator);
        inst.setSelect(this$static.select, exec_0.config);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $compileError(this$static, err);
        }
        else 
            throw unwrap($e0);
    }
}

function $validate(this$static){
    var errorCode;
    if (!!this$static.select && this$static.children != null) {
        errorCode = this$static.getErrorCodeForSelectPlusContent();
        $compileError_2(this$static, 'An ' + $getDisplayName_1(this$static) + ' element with a select attribute must be empty', errorCode);
    }
}

function XSLLeafNodeConstructor(){
    StyleElement.call(this);
}

function makeSimpleContentConstructor(select, separator){
    $clinit_ParentNodeImpl();
    if (instanceOf(select, 93) && instanceOf(dynamicCast(select, 93).select, 21)) {
        return dynamicCast(select, 93).select;
    }
    select = new AdjacentTextNodeMerger(select);
    select = new Atomizer(select);
    select = new AtomicSequenceConverter(select, ($clinit_AtomicType() , STRING));
    select = makeSystemFunction('string-join', initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [select, separator]));
    return select;
}

defineClass(293, 11, $intern_68);
_.isInstruction = function isInstruction_1(){
    return true;
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_1(){
    return true;
}
;
_.validate = function validate_1(decl){
    $validate(this);
}
;
_.select = null;
var Lclient_net_sf_saxon_ce_style_XSLLeafNodeConstructor_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLLeafNodeConstructor', 293, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function $compile_0(this$static, exec_0, decl){
    var inst, localName, resolver;
    if (instanceOf(this$static.attributeName, 21) && !this$static.namespace && $indexOf_3($getPrimitiveStringValue(dynamicCast(dynamicCast(this$static.attributeName, 21).value_0, 12)), fromCodePoint(58)) < 0) {
        localName = trim_0($getPrimitiveStringValue(dynamicCast(dynamicCast(this$static.attributeName, 21).value_0, 12)));
        inst = new FixedAttribute(new StructuredQName('', '', localName));
    }
    else {
        resolver = new InscopeNamespaceResolver(this$static);
        inst = new ComputedAttribute(this$static.attributeName, this$static.namespace, resolver);
    }
    $setContainer(inst, this$static);
    $compileContent(this$static, exec_0, decl, inst, this$static.separator);
    loggingIsEnabled() && isTraceEnabled && $AddTraceProperty(inst, 'name', this$static.attributeName);
    return inst;
}

function $prepareAttributes(this$static){
    this$static.attributeName = dynamicCast($checkAttribute(this$static, 'name', 'a1'), 6);
    this$static.namespace = dynamicCast($checkAttribute(this$static, 'namespace', 'a'), 6);
    this$static.select = dynamicCast($checkAttribute(this$static, 'select', 'e'), 6);
    this$static.separator = dynamicCast($checkAttribute(this$static, 'separator', 'a'), 6);
    $checkAttribute(this$static, 'validation', 'v');
    $checkAttribute(this$static, 'type', 't');
    $checkForUnknownAttributes(this$static);
    !this$static.separator && (!this$static.select?(this$static.separator = new StringLiteral(($clinit_StringValue() , EMPTY_STRING))):(this$static.separator = new StringLiteral(($clinit_StringValue() , SINGLE_SPACE))));
}

function $validate_0(this$static, decl){
    this$static.attributeName = $typeCheck_6(this$static, this$static.attributeName);
    this$static.namespace = $typeCheck_6(this$static, this$static.namespace);
    this$static.select = $typeCheck_6(this$static, this$static.select);
    this$static.separator = $typeCheck_6(this$static, this$static.separator);
    $validate(this$static);
}

function XSLAttribute(){
    $clinit_ParentNodeImpl();
    XSLLeafNodeConstructor.call(this);
}

defineClass(396, 293, $intern_68, XSLAttribute);
_.compile = function compile_0(exec_0, decl){
    return $compile_0(this, exec_0, decl);
}
;
_.getErrorCodeForSelectPlusContent = function getErrorCodeForSelectPlusContent(){
    return 'XTSE0840';
}
;
_.prepareAttributes = function prepareAttributes_0(){
    $prepareAttributes(this);
}
;
_.validate = function validate_2(decl){
    $validate_0(this, decl);
}
;
var Lclient_net_sf_saxon_ce_style_XSLAttribute_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLAttribute', 396, Lclient_net_sf_saxon_ce_style_XSLLeafNodeConstructor_2_classLit);
function IXSLRemoveAttribute(){
    $clinit_ParentNodeImpl();
    XSLAttribute.call(this);
}

defineClass(732, 396, $intern_68, IXSLRemoveAttribute);
_.compile = function compile_1(exec_0, decl){
    var constructor_0;
    constructor_0 = $compile_0(this, exec_0, decl);
    return new SetAttribute(constructor_0, 1);
}
;
_.prepareAttributes = function prepareAttributes_1(){
    $prepareAttributes(this);
    !!this.select && $compileError_0(this, 'ixsl:remove-attribute does not allow @select');
}
;
_.validate = function validate_3(decl){
    $validate_0(this, decl);
    this.children != null && $compileError_2(this, 'Element must be empty', 'XTSE0260');
}
;
var Lclient_net_sf_saxon_ce_style_IXSLRemoveAttribute_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'IXSLRemoveAttribute', 732, Lclient_net_sf_saxon_ce_style_XSLAttribute_2_classLit);
function IXSLScheduleAction(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(733, 11, $intern_68, IXSLScheduleAction);
_.compile = function compile_2(exec_0, decl){
    var call_0;
    call_0 = $compile_1(this.instruction, exec_0, decl);
    call_0.useTailRecursion = true;
    return new ScheduleExecution(call_0, this.wait, this.href_0);
}
;
_.isInstruction = function isInstruction_2(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_2(){
    this.wait = dynamicCast($checkAttribute(this, 'wait', 'e'), 6);
    this.href_0 = dynamicCast($checkAttribute(this, 'href', 'a'), 6);
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_4(decl){
    var child, child$array, child$index, child$max, err, found, role;
    make_0((!this.staticContext && (this.staticContext = new ExpressionContext(this)) , this.staticContext), $getPreparedStylesheet(this));
    if (this.wait) {
        this.wait = $typeCheck_6(this, this.wait);
        try {
            role = new RoleLocator(4, 'ixsl:schedule-action/wait', 0);
            this.wait = staticTypeCheck_1(this.wait, ($clinit_SequenceType() , SINGLE_INTEGER), false, role);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                err = $e0;
                $compileError(this, err);
            }
            else 
                throw unwrap($e0);
        }
    }
    found = false;
    for (child$array = this.children == null?EMPTY_NODE_LIST:instanceOf(this.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this.children, 10)]):dynamicCast(this.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
        child = child$array[child$index];
        if (instanceOf(child, 203))
            ;
        else if (instanceOf(child, 337)) {
            found && $compileError_0(this, 'ixsl:schedule-action must contain a single xsl:call-template instruction');
            found = true;
            this.instruction = dynamicCast(child, 337);
        }
    }
    found || $compileError_0(this, 'ixsl:schedule-action must contain a single xsl:call-template instruction');
}
;
var Lclient_net_sf_saxon_ce_style_IXSLScheduleAction_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'IXSLScheduleAction', 733, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function IXSLSetAttribute(){
    $clinit_ParentNodeImpl();
    XSLAttribute.call(this);
}

defineClass(731, 396, $intern_68, IXSLSetAttribute);
_.compile = function compile_3(exec_0, decl){
    var constructor_0;
    constructor_0 = $compile_0(this, exec_0, decl);
    return new SetAttribute(constructor_0, 0);
}
;
var Lclient_net_sf_saxon_ce_style_IXSLSetAttribute_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'IXSLSetAttribute', 731, Lclient_net_sf_saxon_ce_style_XSLAttribute_2_classLit);
function IXSLSetProperty(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(734, 11, $intern_68, IXSLSetProperty);
_.compile = function compile_4(exec_0, decl){
    return new SetProperty(this.targetObject, this.select, this.name_0);
}
;
_.isInstruction = function isInstruction_3(){
    return true;
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_2(){
    return false;
}
;
_.prepareAttributes = function prepareAttributes_3(){
    this.targetObject = dynamicCast($checkAttribute(this, 'object', 'e'), 6);
    this.select = dynamicCast($checkAttribute(this, 'select', 'e'), 6);
    this.name_0 = dynamicCast($checkAttribute(this, 'name', 'a'), 6);
    $checkForUnknownAttributes(this);
    !this.targetObject && (this.targetObject = new IXSLFunction('window', initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, 0, 0, 1)));
}
;
_.name_0 = null;
_.select = null;
_.targetObject = null;
var Lclient_net_sf_saxon_ce_style_IXSLSetProperty_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'IXSLSetProperty', 734, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function $makeStylesheet(this$static, exec_0){
    var builder, err, message, nodeFactory, st, te, version, xslPrefix;
    nodeFactory = new StyleNodeFactory;
    xslPrefix = $getPrefixForURI(this$static, 'http://www.w3.org/1999/XSL/Transform');
        if (xslPrefix == null) {
            $equals_5($getLocalPart_0(this$static), 'stylesheet') || $equals_5($getLocalPart_0(this$static), 'transform')?$getPrefixForURI(this$static, 'http://www.w3.org/TR/WD-xsl') != null?(message = "Saxon is not able to process Microsoft's WD-xsl dialect"):(message = 'Namespace for stylesheet element should be http://www.w3.org/1999/XSL/Transform'):$equals_5($getLocalPart_0(this$static), 'parsererror')?(message = 'Stylesheet is not well-formed XML. ' + $getStringValue_0(this$static)):(message = 'The supplied file does not appear to be a stylesheet (found ' + $getLocalPart_0(this$static) + ')');
                err = new XPathException_2(message, 'XTSE0150');
                err.locator = this$static;
                err.isStaticError = true;
                $reportError(exec_0, err);
                throw err;
        }
        version = !this$static.attributeList?null:$getValue_0(this$static.attributeList, 'http://www.w3.org/1999/XSL/Transform', 'version');
            if (version == null) {
                err = new XPathException_2('Simplified stylesheet: xsl:version attribute is missing', 'XTSE0150');
                err.isStaticError = true;
                err.locator = this$static;
                $reportError(exec_0, err);
                throw err;
            }
            try {
                builder = new LinkedTreeBuilder;
                $setPipelineConfiguration(builder, $makePipelineConfiguration(exec_0.config));
                builder.nodeFactory = nodeFactory;
                $setSystemId(builder, $getSystemId(this$static));
                builder.depth = 0;
                builder.size_0[builder.depth] = 0;
                $startDocument_0(builder);
                st = new StructuredQName('xsl', 'http://www.w3.org/1999/XSL/Transform', 'stylesheet');
                    $startElement_1(builder, st);
                    $namespace_1(builder, new NamespaceBinding('xsl', 'http://www.w3.org/1999/XSL/Transform'));
                        $attribute_0(builder, new StructuredQName('', '', 'version'), version);
                        $startContent_1(builder);
                        te = new StructuredQName('xsl', 'http://www.w3.org/1999/XSL/Transform', 'template');
                            $startElement_1(builder, te);
                            $attribute_0(builder, new StructuredQName('', '', 'match'), '/');
                            $startContent_1(builder);
                            $addChild(builder.currentNode, this$static, builder.size_0[builder.depth]++);
                            $endElement_1(builder);
                            $endElement_1(builder);
                            $compact_0(builder.currentNode, builder.size_0[builder.depth]);
                            $close_1(builder);
                            return dynamicCast($getCurrentRoot(builder), 148);
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 4)) {
                    err = $e0;
                    err.locator = this$static;
                    throw err;
                }
                else 
                    throw unwrap($e0);
            }
}

function LiteralResultElement(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
    this.namespaceCodes = new ArrayList;
}

defineClass(174, 11, {28:1, 15:1, 7:1, 14:1, 174:1, 11:1, 27:1, 10:1, 31:1, 23:1}, LiteralResultElement);
_.compile = function compile_5(exec_0, decl){
    var att, bindings, content_0, err, exp_0, i_0, inst, trace, use;
    if (this.toplevel)
        return null;
    bindings = dynamicCast($toArray(this.namespaceCodes, initDim(Lclient_net_sf_saxon_ce_om_NamespaceBinding_2_classLit, $intern_5, 53, this.namespaceCodes.array.length, 0, 1)), 136);
    inst = new FixedElement(this.resultNameCode, bindings, this.inheritNamespaces);
    $setBaseURI_0(inst, getBaseURI_7(this));
    content_0 = $compileSequenceConstructor_0(this, exec_0, decl, $iterateAxis_1(this, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
    if (this.numberOfAttributes > 0) {
        for (i_0 = this.attributeNames.length - 1; i_0 >= 0; i_0--) {
            att = new FixedAttribute(this.attributeNames[i_0]);
            try {
                $setSelect(att, this.attributeValues[i_0]);
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 4)) {
                    err = $e0;
                    $compileError(this, err);
                }
                else 
                    throw unwrap($e0);
            }
            $setSourceLocator(att, this);
            exp_0 = att;
            if (loggingIsEnabled() && isTraceEnabled) {
                trace = new TraceExpression(exp_0);
                new InscopeNamespaceResolver(this);
                $setConstructType(trace, ($clinit_Location() , LITERAL_RESULT_ATTRIBUTE));
                $setSourceLocator(trace, this);
                $setObjectName(trace, this.attributeNames[i_0]);
                exp_0 = trace;
            }
            if (!content_0) {
                content_0 = exp_0;
            }
            else {
                content_0 = makeBlock(exp_0, content_0);
                $setSourceLocator(content_0, this);
            }
        }
    }
    if (this.attributeSets != null) {
        use = new UseAttributeSets(this.attributeSets);
        if (!content_0) {
            content_0 = use;
        }
        else {
            content_0 = makeBlock(use, content_0);
            $setSourceLocator(content_0, this);
        }
    }
    !content_0 && (content_0 = new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10)));
    inst.content_0 = content_0;
    $adoptChildExpression(inst, content_0);
    return inst;
}
;
_.isInstruction = function isInstruction_4(){
    return true;
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_3(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_4(){
    var attributeNames2, attributeValues2, atts, exp_0, i_0, inheritAtt, local, num, qn, uri_0;
    atts = !this.attributeList?($clinit_AttributeCollection() , EMPTY_ATTRIBUTE_COLLECTION):this.attributeList;
    num = atts.values == null?0:atts.used;
    if (num == 0) {
        this.numberOfAttributes = 0;
    }
    else {
        this.attributeNames = initDim(Lclient_net_sf_saxon_ce_om_StructuredQName_2_classLit, $intern_1, 8, num, 0, 1);
        this.attributeValues = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, num, 0, 1);
        this.numberOfAttributes = 0;
        for (i_0 = 0; i_0 < num; i_0++) {
            qn = $getStructuredQName(atts, i_0);
            uri_0 = $getNamespaceURI(qn);
            local = valueOf_3(qn.content_0, qn.localNameStart, qn.prefixStart - qn.localNameStart);
            if ($equals_5(uri_0, 'http://www.w3.org/1999/XSL/Transform')) {
                if ($equals_5(local, 'use-attribute-sets'))
                    ;
                else if ($equals_5(local, 'default-collation'))
                    ;
                else if ($equals_5(local, 'extension-element-prefixes'))
                    ;
                else if ($equals_5(local, 'exclude-result-prefixes'))
                    ;
                else if ($equals_5(local, 'version'))
                    ;
                else if ($equals_5(local, 'xpath-default-namespace'))
                    ;
                else if ($equals_5(local, 'type') || $equals_5(local, 'validation') && !$equals_5($getValue(atts, i_0), 'strip')) {
                    $compileError_2(this, 'The xsl:type and xsl:validate attributes require a schema-aware processor', 'XTSE1660');
                }
                else if ($equals_5(local, 'use-when'))
                    ;
                else if ($equals_5(local, 'inherit-namespaces')) {
                    inheritAtt = $getValue(atts, i_0);
                    $equals_5(inheritAtt, 'yes')?(this.inheritNamespaces = true):$equals_5(inheritAtt, 'no')?(this.inheritNamespaces = false):$compileError_2(this, 'The xsl:inherit-namespaces attribute has permitted values (yes, no)', 'XTSE0020');
                }
                else {
                    $compileError_2(this, 'Unknown XSL attribute ' + $getDisplayName_0(qn), 'XTSE0805');
                }
            }
            else {
                this.attributeNames[this.numberOfAttributes] = qn;
                exp_0 = $makeAttributeValueTemplate(this, $getValue(atts, i_0));
                setCheck(this.attributeValues, this.numberOfAttributes, exp_0);
                ++this.numberOfAttributes;
            }
        }
        if (this.numberOfAttributes < this.attributeNames.length) {
            attributeNames2 = initDim(Lclient_net_sf_saxon_ce_om_StructuredQName_2_classLit, $intern_1, 8, this.numberOfAttributes, 0, 1);
            arraycopy(this.attributeNames, 0, attributeNames2, 0, this.numberOfAttributes);
            this.attributeNames = attributeNames2;
            attributeValues2 = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, this.numberOfAttributes, 0, 1);
            arraycopy(this.attributeValues, 0, attributeValues2, 0, this.numberOfAttributes);
            this.attributeValues = attributeValues2;
        }
    }
}
;
_.validate = function validate_5(decl){
    var alias, anameCode, attURI, defaultNamespace, elementAlias, elementURI, i_0, inscope, n, ncode, newNSCode, resolver, sheet_0, suri, uri_0, useAttSets;
    this.toplevel = instanceOf($getParent_0(this), 61);
    this.resultNameCode = this.elementName_0;
    elementURI = $getURI(this);
    if (this.toplevel) {
        !elementURI.length && $compileError_2(this, 'Top level elements must have a non-null namespace URI', 'XTSE0130');
    }
    else {
        inscope = new NamespaceIterator(this);
        while ($hasNext_1(inscope)) {
            $add_16(this.namespaceCodes, inscope.next);
        }
        resolver = new InscopeNamespaceResolver(this);
        defaultNamespace = $getURIForPrefix(resolver, '', true);
        !defaultNamespace.length && $add_16(this.namespaceCodes, ($clinit_NamespaceBinding() , DEFAULT_UNDECLARATION));
        sheet_0 = $getContainingStylesheet(this).principalStylesheetModule;
        if (sheet_0.numberOfAliases > 0) {
            for (i_0 = 0; i_0 < this.namespaceCodes.array.length; i_0++) {
                suri = dynamicCast($get_1(this.namespaceCodes, i_0), 53).uri_0;
                ncode = dynamicCast($getStringValue_1(sheet_0.namespaceAliasMap, suri), 53);
                !!ncode && !$equals_5(ncode.uri_0, suri) && $set_0(this.namespaceCodes, i_0, ncode);
            }
            elementAlias = dynamicCast($getStringValue_1(sheet_0.namespaceAliasMap, elementURI), 53);
            !!elementAlias && !$equals_5(elementAlias.uri_0, elementURI) && (this.resultNameCode = new StructuredQName(elementAlias.prefix_0, elementAlias.uri_0, $getLocalPart_0(this)));
        }
        useAttSets = !this.attributeList?null:$getValue_0(this.attributeList, 'http://www.w3.org/1999/XSL/Transform', 'use-attribute-sets');
            useAttSets != null && (this.attributeSets = $getAttributeSets(this, useAttSets, null));
            if (this.numberOfAttributes > 0) {
                for (i_0 = 0; i_0 < this.numberOfAttributes; i_0++) {
                    anameCode = this.attributeNames[i_0];
                    alias = anameCode;
                    attURI = $getNamespaceURI(anameCode);
                    if (attURI.length) {
                        newNSCode = dynamicCast($getStringValue_1(sheet_0.namespaceAliasMap, attURI), 53);
                        !!newNSCode && !$equals_5(newNSCode.uri_0, attURI) && (alias = new StructuredQName(newNSCode.prefix_0, newNSCode.uri_0, $getLocalName_0(!this.attributeList?($clinit_AttributeCollection() , EMPTY_ATTRIBUTE_COLLECTION):this.attributeList, i_0)));
                    }
                    this.attributeNames[i_0] = alias;
                    setCheck(this.attributeValues, i_0, $typeCheck_6(this, this.attributeValues[i_0]));
                }
            }
            for (n = this.namespaceCodes.array.length - 1; n >= 0; n--) {
                uri_0 = dynamicCast($get_1(this.namespaceCodes, n), 53).uri_0;
                $isExcludedNamespace(this, uri_0) && !$contains_4(sheet_0.aliasResultUriSet, uri_0) && this.namespaceCodes.remove_3(n);
            }
    }
}
;
_.validateChildren = function validateChildren_0(decl){
    this.toplevel || $validateChildren(this, decl);
}
;
_.inheritNamespaces = true;
_.numberOfAttributes = 0;
_.toplevel = false;
var Lclient_net_sf_saxon_ce_style_LiteralResultElement_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'LiteralResultElement', 174, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function $getPrecedence(this$static){
    return this$static.wasIncluded?$getPrecedence(this$static.importer):this$static.precedence;
}

function $setInputTypeAnnotations(this$static, annotations){
    this$static.inputTypeAnnotations |= annotations;
    this$static.inputTypeAnnotations == 3 && $compileError_4(this$static.getPrincipalStylesheetModule(), "One stylesheet module specifies input-type-annotations='strip', another specifies input-type-annotations='preserve'", 'XTSE0265');
}

function $setMinImportPrecedence(this$static, min_0){
    this$static.minImportPrecedence = min_0;
}

function $spliceIncludes(this$static){
    var child, child$array, child$index, child$max, decl, errors, foundNonImport, inc, incchildren, j, last, previousElement, xslinc;
    foundNonImport = false;
    this$static.topLevel = new ArrayList_0(50);
    this$static.minImportPrecedence = this$static.precedence;
    previousElement = this$static.sourceElement;
    for (child$array = $allChildren(this$static.sourceElement) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
        child = child$array[child$index];
        if (child.getNodeKind() == 3) {
            isWhite(child.getStringValue()) || $compileError_2(previousElement, 'No character data is allowed between top-level elements', 'XTSE0120');
        }
        else if (instanceOf(child, 248)) {
            foundNonImport = true;
        }
        else {
            previousElement = dynamicCast(child, 11);
            if (instanceOf(child, 244)) {
                xslinc = dynamicCast(child, 244);
                $processAttributes(xslinc);
                $equals_5('import', $getLocalPart_0(xslinc))?foundNonImport && $compileError_2(xslinc, 'xsl:import elements must come first', 'XTSE0200'):(foundNonImport = true);
                xslinc.children != null && $compileError_2(xslinc, 'Element must be empty', 'XTSE0260');
                $checkTopLevel(xslinc, $equals_5($getLocalPart_0(xslinc), 'import')?'XTSE0190':'XTSE0170');
                errors = $getPreparedStylesheet_0(this$static.sourceElement).errorCount;
                inc = $getIncludedStylesheet(xslinc, this$static, this$static.precedence);
                if (!inc) {
                    return;
                }
                errors = $getPreparedStylesheet_0(this$static.sourceElement).errorCount - errors;
                errors > 0 && $compileError_2(xslinc, 'Reported ' + errors + (errors == 1?' error':' errors') + ' in ' + $substring_1($getLocalPart_0(xslinc), 0, 6) + 'ed stylesheet module', 'XTSE0165');
                if ($equals_5($getLocalPart_0(xslinc), 'import')) {
                    this$static.precedence = $getPrecedence(inc) + 1;
                }
                else {
                    this$static.precedence = $getPrecedence(inc);
                    $setMinImportPrecedence(inc, this$static.minImportPrecedence);
                    inc.wasIncluded = true;
                }
                incchildren = inc.topLevel;
                for (j = 0; j < incchildren.array.length; j++) {
                    decl = (checkElementIndex(j, incchildren.array.length) , dynamicCast(incchildren.array[j], 75));
                    last = this$static.topLevel.array.length - 1;
                    if (last < 0 || $getPrecedence(decl.module) >= $getPrecedence(dynamicCast($get_1(this$static.topLevel, last), 75).module)) {
                        $add_16(this$static.topLevel, decl);
                    }
                    else {
                        while (last >= 0 && $getPrecedence(decl.module) < $getPrecedence(dynamicCast($get_1(this$static.topLevel, last), 75).module)) {
                            --last;
                        }
                        $add_15(this$static.topLevel, last + 1, decl);
                    }
                }
            }
            else {
                foundNonImport = true;
                decl = new Declaration(this$static, dynamicCast(child, 11));
                $add_16(this$static.topLevel, decl);
            }
        }
    }
}

function StylesheetModule(sourceElement, precedence){
    this.topLevel = new ArrayList;
    this.sourceElement = sourceElement;
    this.precedence = precedence;
}

defineClass(371, 1, {}, StylesheetModule);
_.getPrincipalStylesheetModule = function getPrincipalStylesheetModule_0(){
    return this.importer.getPrincipalStylesheetModule();
}
;
_.inputTypeAnnotations = 0;
_.minImportPrecedence = 0;
_.precedence = 0;
_.wasIncluded = false;
var Lclient_net_sf_saxon_ce_style_StylesheetModule_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'StylesheetModule', 371, Ljava_lang_Object_2_classLit);
function $allocatePatternSlots(this$static, n){
    n > this$static.largestPatternStackFrame && (this$static.largestPatternStackFrame = n);
}

function $allocateUniqueParameterNumber(this$static, qName){
    var x_0;
    !this$static.localParameterNumbers && (this$static.localParameterNumbers = new HashMap_0(50));
    x_0 = dynamicCast($get_0(this$static.localParameterNumbers, qName), 83);
    if (!x_0) {
        x_0 = valueOf(this$static.localParameterNumbers.size_0);
        $put_0(this$static.localParameterNumbers, qName, x_0);
    }
    return x_0.value_0;
}

function $buildIndexes(this$static){
    var decl, i_0;
    for (i_0 = this$static.topLevel.array.length - 1; i_0 >= 0; i_0--) {
        decl = dynamicCast($get_1(this$static.topLevel, i_0), 75);
        decl.sourceElement.index_1(decl, this$static);
    }
}

function $collectNamespaceAliases(this$static){
    var aliasesAtThisPrecedence, currentPrecedence, decl, i_0, ncode, prec, scode, xna;
    this$static.namespaceAliasMap = new HashMap_0(this$static.numberOfAliases);
    this$static.aliasResultUriSet = new HashSet_0(this$static.numberOfAliases);
    aliasesAtThisPrecedence = new HashSet;
    currentPrecedence = -1;
    for (i_0 = 0; i_0 < this$static.numberOfAliases; i_0++) {
        decl = dynamicCast($get_1(this$static.namespaceAliasList, i_0), 75);
        xna = dynamicCast(decl.sourceElement, 380);
        scode = xna.stylesheetURI;
        ncode = xna.resultNamespaceBinding;
        prec = $getPrecedence(decl.module);
        if (currentPrecedence != prec) {
            currentPrecedence = prec;
            $reset_0(aliasesAtThisPrecedence.map_0);
        }
        $hasStringValue(aliasesAtThisPrecedence.map_0, scode) && ($equals(dynamicCast($getStringValue_1(this$static.namespaceAliasMap, scode), 53), ncode.uri_0) || $compileError_2(xna, 'More than one alias is defined for the same namespace', 'XTSE0810'));
        if ($getStringValue_1(this$static.namespaceAliasMap, scode) == null) {
            $putStringValue(this$static.namespaceAliasMap, scode, ncode);
            $add_17(this$static.aliasResultUriSet, ncode.uri_0);
        }
        $add_17(aliasesAtThisPrecedence, scode);
    }
    this$static.namespaceAliasList = null;
}

function $compileError_3(this$static, error){
    var pss;
    error.isStaticError = true;
    pss = this$static.preparedStylesheet;
    if (!pss) {
        throw error;
    }
    else {
        $reportError(pss, error);
    }
}

function $compileError_4(this$static, message, errorCode){
    var tce;
    tce = new XPathException_0(message);
    errorCode != null && (tce.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', errorCode));
        $compileError_3(this$static, tce);
}

function $compileStylesheet(this$static){
    var arities, arities0, decl, err, fi, i_0, i0, i1, inst, node, pss, ruleManager, snode;
    try {
        pss = this$static.preparedStylesheet;
        for (i0 = 0; i0 < this$static.topLevel.array.length; i0++) {
            decl = dynamicCast($get_1(this$static.topLevel, i0), 75);
            snode = decl.sourceElement;
            instanceOf(snode, 216) && $register(dynamicCast(snode, 216), decl);
        }
        for (i1 = 0; i1 < this$static.topLevel.array.length; i1++) {
            decl = dynamicCast($get_1(this$static.topLevel, i1), 75);
            snode = decl.sourceElement;
            if ((snode.actionsCompleted & 2) == 0) {
                snode.actionsCompleted |= 2;
                inst = snode.compile(pss, decl);
                !!inst && $setSourceLocator(inst, snode);
            }
        }
        for (arities0 = $iterator(new AbstractMap$1(this$static.functionIndex)); $hasNext_2(arities0.val$outerIter2);) {
            for (fi = $iterator_0(new AbstractMap$2(dynamicCast($get_0(this$static.functionIndex, $next_11(arities0)), 22))); $hasNext_2(fi.val$outerIter2);) {
                decl = dynamicCast($next_12(fi), 75);
                node = decl.sourceElement;
                if ((node.actionsCompleted & 4) == 0) {
                    node.actionsCompleted |= 4;
                    $typeCheckBody(dynamicCast(node, 178));
                }
            }
        }
        if (this$static.preparedStylesheet.errorCount > 0) {
            return;
        }
        for (i_0 = 0; i_0 < this$static.topLevel.array.length; i_0++) {
            decl = dynamicCast($get_1(this$static.topLevel, i_0), 75);
            node = decl.sourceElement;
            if (instanceOf(node, 194) && !instanceOf(node, 178) && (node.actionsCompleted & 8) == 0) {
                node.actionsCompleted |= 8;
                dynamicCast(node, 194).optimize_0(decl);
            }
        }
        for (arities = $iterator(new AbstractMap$1(this$static.functionIndex)); $hasNext_2(arities.val$outerIter2);) {
            for (fi = $iterator_0(new AbstractMap$2(dynamicCast($get_0(this$static.functionIndex, $next_11(arities)), 22))); $hasNext_2(fi.val$outerIter2);) {
                decl = dynamicCast($next_12(fi), 75);
                node = decl.sourceElement;
                if ((node.actionsCompleted & 8) == 0) {
                    node.actionsCompleted |= 8;
                    dynamicCast(node, 194).optimize_0(decl);
                }
            }
        }
        !pss.decimalFormatManager && (pss.decimalFormatManager = new DecimalFormatManager);
        if (pss.decimalFormatManager) {
            try {
                $fixupDefaultDefault((!pss.decimalFormatManager && (pss.decimalFormatManager = new DecimalFormatManager) , pss.decimalFormatManager));
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 4)) {
                    err = $e0;
                    $compileError_4(this$static, err.message_0, !err.errorCode?null:$getLocalName_1(err.errorCode));
                }
                else 
                    throw unwrap($e0);
            }
        }
        ruleManager = this$static.preparedStylesheet.ruleManager;
        $computeRankings_0(ruleManager);
    }
    catch ($e1) {
        $e1 = wrap_0($e1);
        if (instanceOf($e1, 35)) {
            err = $e1;
            if (this$static.preparedStylesheet.errorCount == 0) {
                throw unwrap(err);
            }
        }
        else 
            throw unwrap($e1);
    }
}

function $getAttributeSets_0(this$static, name_0, list){
    var decl, decl$iterator, found, t;
    found = false;
    for (decl$iterator = new AbstractList$IteratorImpl(this$static.topLevel); decl$iterator.i < decl$iterator.this$01_0.size_1();) {
        decl = (checkCriticalElement(decl$iterator.i < decl$iterator.this$01_0.size_1()) , dynamicCast(decl$iterator.this$01_0.get_1(decl$iterator.last = decl$iterator.i++), 75));
        if (instanceOf(decl.sourceElement, 221)) {
            t = dynamicCast(decl.sourceElement, 221);
            if ($equals_0($getObjectName_0(t), name_0)) {
                setCheck(list.array, list.array.length, decl);
                found = true;
            }
        }
    }
    return found;
}

function $getFunction(this$static, name_0, arity_0){
    var a, arities, decl;
    if (arity_0 == -1) {
        for (arities = $iterator(new AbstractMap$1(this$static.functionIndex)); $hasNext_2(arities.val$outerIter2);) {
            a = dynamicCast($next_11(arities), 83).value_0;
            decl = $getFunctionDeclaration(this$static, name_0, a);
            if (decl) {
                return dynamicCast(decl.sourceElement, 178);
            }
        }
        return null;
    }
    else {
        decl = $getFunctionDeclaration(this$static, name_0, arity_0);
        return !decl?null:dynamicCast(decl.sourceElement, 178);
    }
}

function $getFunctionDeclaration(this$static, name_0, arity_0){
    var m;
    m = dynamicCast($get_0(this$static.functionIndex, valueOf(arity_0)), 22);
    return !m?null:dynamicCast(getEntryValueOrNull($getEntry(m.hashCodeMap, name_0)), 75);
}

function $getGlobalVariable_0(this$static, qName){
    var decl;
    decl = dynamicCast($get_0(this$static.globalVariableIndex, qName), 75);
    return !decl?null:dynamicCast(decl.sourceElement, 181);
}

function $indexFunction(this$static, decl){
    var arity_0, f2, function_$, other, otherPrecedence, qName, thisPrecedence;
    function_$ = dynamicCast(decl.sourceElement, 178);
    qName = $getObjectName_1(function_$);
    arity_0 = $getNumberOfArguments(function_$);
    other = $getFunctionDeclaration(this$static, qName, arity_0);
    if (!other) {
        $putFunction(this$static, decl);
    }
    else {
        thisPrecedence = $getPrecedence(decl.module);
        otherPrecedence = $getPrecedence(other.module);
        if (thisPrecedence == otherPrecedence) {
            f2 = other.sourceElement;
            decl.sourceElement == f2?$compileError_2(function_$, 'Function ' + $getDisplayName_0(qName) + ' is declared more than once ' + '(caused by including the containing module more than once)', 'XTSE0770'):$compileError_2(function_$, 'Duplicate function declaration', 'XTSE0770');
        }
        else if (thisPrecedence < otherPrecedence)
            ;
        else {
            $putFunction(this$static, decl);
        }
    }
}

function $indexNamedTemplate(this$static, decl){
    var other, otherPrecedence, qName, template, thisPrecedence;
    template = dynamicCast(decl.sourceElement, 216);
    qName = $getTemplateName(template);
    if (qName) {
        other = dynamicCast($get_0(this$static.templateIndex, qName), 75);
        if (!other) {
            $put_0(this$static.templateIndex, qName, decl);
            $putNamedTemplate(this$static.preparedStylesheet, qName, template.compiledTemplate);
        }
        else {
            thisPrecedence = $getPrecedence(decl.module);
            otherPrecedence = $getPrecedence(other.module);
            if (thisPrecedence == otherPrecedence) {
                $compileError_2(template, 'Duplicate named template', 'XTSE0660');
            }
            else if (thisPrecedence < otherPrecedence)
                ;
            else {
                $put_0(this$static.templateIndex, qName, decl);
                $putNamedTemplate(this$static.preparedStylesheet, qName, template.compiledTemplate);
            }
        }
    }
}

function $indexVariableDeclaration(this$static, decl){
    var other, otherPrecedence, qName, thisPrecedence, v2, var_$;
    var_$ = dynamicCast(decl.sourceElement, 181);
    qName = $getObjectName(var_$);
    if (qName) {
        other = dynamicCast($get_0(this$static.globalVariableIndex, qName), 75);
        if (!other) {
            $put_0(this$static.globalVariableIndex, qName, decl);
        }
        else {
            thisPrecedence = $getPrecedence(decl.module);
            otherPrecedence = $getPrecedence(other.module);
            if (thisPrecedence == otherPrecedence) {
                v2 = other.sourceElement;
                v2 == var_$?$compileError_2(var_$, 'Global variable ' + $getDisplayName_0(qName) + ' is declared more than once ' + '(caused by including the containing module more than once)', 'XTSE0630'):$compileError_2(var_$, 'Duplicate global variable declaration', 'XTSE0630');
            }
            else if (thisPrecedence < otherPrecedence && var_$ != other.sourceElement) {
                var_$.redundant = true;
            }
            else if (var_$ != other.sourceElement) {
                dynamicCast(other.sourceElement, 181).redundant = true;
                $put_0(this$static.globalVariableIndex, qName, decl);
            }
        }
    }
}

function $preprocess(this$static){
    var aTopLevel, aTopLevel$iterator, decl, decl$iterator, decl0, inst, top_0;
    $spliceIncludes(this$static);
    $buildIndexes(this$static);
    $processAllAttributes_0(this$static);
    $collectNamespaceAliases(this$static);
    for (decl$iterator = new AbstractList$IteratorImpl(this$static.topLevel); decl$iterator.i < decl$iterator.this$01_0.size_1();) {
        decl0 = (checkCriticalElement(decl$iterator.i < decl$iterator.this$01_0.size_1()) , dynamicCast(decl$iterator.this$01_0.get_1(decl$iterator.last = decl$iterator.i++), 75));
        inst = decl0.sourceElement;
        if ((inst.actionsCompleted & 16) == 0) {
            inst.actionsCompleted |= 16;
            inst.fixupReferences();
        }
    }
    top_0 = this$static.sourceElement;
    $setInputTypeAnnotations(this$static, $getInputTypeAnnotationsAttribute(top_0));
    decl = new Declaration(this$static, top_0);
    if ((top_0.actionsCompleted & 1) == 0) {
        top_0.actionsCompleted |= 1;
        $validate_2(top_0);
        for (aTopLevel$iterator = new AbstractList$IteratorImpl(this$static.topLevel); aTopLevel$iterator.i < aTopLevel$iterator.this$01_0.size_1();) {
            aTopLevel = (checkCriticalElement(aTopLevel$iterator.i < aTopLevel$iterator.this$01_0.size_1()) , dynamicCast(aTopLevel$iterator.this$01_0.get_1(aTopLevel$iterator.last = aTopLevel$iterator.i++), 75));
            aTopLevel.sourceElement.validateSubtree(aTopLevel);
        }
    }
}

function $processAllAttributes_0(this$static){
    var decl, decl$iterator, err, inst;
    $processDefaultCollationAttribute(this$static.sourceElement, '');
    $prepareAttributes_3(this$static.sourceElement);
    for (decl$iterator = new AbstractList$IteratorImpl(this$static.topLevel); decl$iterator.i < decl$iterator.this$01_0.size_1();) {
        decl = (checkCriticalElement(decl$iterator.i < decl$iterator.this$01_0.size_1()) , dynamicCast(decl$iterator.this$01_0.get_1(decl$iterator.last = decl$iterator.i++), 75));
        inst = decl.sourceElement;
        if ((inst.actionsCompleted & 32) == 0) {
            inst.actionsCompleted |= 32;
            try {
                inst.processAllAttributes();
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 4)) {
                    err = $e0;
                    $compileError(decl.sourceElement, err);
                }
                else 
                    throw unwrap($e0);
            }
        }
    }
}

function $putFunction(this$static, decl){
    var arity_0, function_$, m, qName;
    function_$ = dynamicCast(decl.sourceElement, 178);
    qName = $getObjectName_1(function_$);
    arity_0 = $getNumberOfArguments(function_$);
    m = dynamicCast($get_0(this$static.functionIndex, valueOf(arity_0)), 22);
    if (!m) {
        m = new HashMap;
        $put_0(this$static.functionIndex, valueOf(arity_0), m);
    }
    $put_1(m.hashCodeMap, qName, decl);
}

function PrincipalStylesheetModule(sourceElement){
    StylesheetModule.call(this, sourceElement, 0);
    this.globalVariableIndex = new HashMap_0(20);
    this.templateIndex = new HashMap_0(20);
    this.functionIndex = new HashMap_0(8);
    this.namespaceAliasList = new ArrayList_0(5);
    this.moduleCache = new HashMap_0(4);
}

defineClass(640, 371, {}, PrincipalStylesheetModule);
_.getPrincipalStylesheetModule = function getPrincipalStylesheetModule_1(){
    return this;
}
;
_.largestPatternStackFrame = 0;
_.localParameterNumbers = null;
_.numberOfAliases = 0;
var Lclient_net_sf_saxon_ce_style_PrincipalStylesheetModule_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'PrincipalStylesheetModule', 640, Lclient_net_sf_saxon_ce_style_StylesheetModule_2_classLit);
function $isElementAvailable(uri_0, localName){
    var e;
    if ($equals_5(uri_0, 'http://www.w3.org/1999/XSL/Transform')) {
        e = $makeXSLElement(localName);
        if (e) {
            return e.isInstruction();
        }
    }
    return false;
}

function $makeXSLElement(localName){
    switch (localName.charCodeAt(0)) {
        case 97:
            if ($equals_5(localName, 'analyze-string')) {
                return new XSLAnalyzeString;
            }
            else if ($equals_5(localName, 'apply-imports')) {
                return new XSLApplyImports;
            }
            else if ($equals_5(localName, 'apply-templates')) {
                return new XSLApplyTemplates;
            }
            else if ($equals_5(localName, 'attribute')) {
                return new XSLAttribute;
            }
            else if ($equals_5(localName, 'attribute-set')) {
                return new XSLAttributeSet;
            }

        case 99:
            if ($equals_5(localName, 'call-template')) {
                return new XSLCallTemplate;
            }
            else if ($equals_5(localName, 'character-map')) {
                return new XSLCharacterMap;
            }
            else if ($equals_5(localName, 'choose')) {
                return new XSLChoose;
            }
            else if ($equals_5(localName, 'comment')) {
                return new XSLComment;
            }
            else if ($equals_5(localName, 'copy')) {
                return new XSLCopy;
            }
            else if ($equals_5(localName, 'copy-of')) {
                return new XSLCopyOf;
            }

        case 100:
            if ($equals_5(localName, 'decimal-format')) {
                return new XSLDecimalFormat;
            }
            else if ($equals_5(localName, 'document')) {
                return new XSLDocument;
            }

        case 101:
            if ($equals_5(localName, 'element')) {
                return new XSLElement;
            }

        case 102:
            if ($equals_5(localName, 'fallback')) {
                return new XSLFallback;
            }
            else if ($equals_5(localName, 'for-each')) {
                return new XSLForEach;
            }
            else if ($equals_5(localName, 'for-each-group')) {
                return new XSLForEachGroup;
            }
            else if ($equals_5(localName, 'function')) {
                return new XSLFunction;
            }

        case 105:
            if ($equals_5(localName, 'if')) {
                return new XSLIf;
            }
            else if ($equals_5(localName, 'import')) {
                return new XSLGeneralIncorporate;
            }
            else if ($equals_5(localName, 'import-schema')) {
                return new XSLImportSchema;
            }
            else if ($equals_5(localName, 'include')) {
                return new StyleNodeFactory$1;
            }

        case 107:
            if ($equals_5(localName, 'key')) {
                return new XSLKey;
            }

        case 109:
            if ($equals_5(localName, 'matching-substring')) {
                return new XSLMatchingSubstring;
            }
            else if ($equals_5(localName, 'message')) {
                return new XSLMessage;
            }

        case 110:
            if ($equals_5(localName, 'next-match')) {
                return new XSLNextMatch;
            }
            else if ($equals_5(localName, 'non-matching-substring')) {
                return new XSLMatchingSubstring;
            }
            else if ($equals_5(localName, 'number')) {
                return new XSLNumber;
            }
            else if ($equals_5(localName, 'namespace')) {
                return new XSLMinorNodeConstructor;
            }
            else if ($equals_5(localName, 'namespace-alias')) {
                return new XSLNamespaceAlias;
            }

        case 111:
            if ($equals_5(localName, 'otherwise')) {
                return new XSLOtherwise;
            }
            else if ($equals_5(localName, 'output')) {
                return new XSLOutput;
            }
            else if ($equals_5(localName, 'output-character')) {
                return new XSLOutputCharacter;
            }

        case 112:
            if ($equals_5(localName, 'param')) {
                return new XSLParam;
            }
            else if ($equals_5(localName, 'perform-sort')) {
                return new XSLPerformSort;
            }
            else if ($equals_5(localName, 'preserve-space')) {
                return new XSLPreserveSpace;
            }
            else if ($equals_5(localName, 'processing-instruction')) {
                return new XSLMinorNodeConstructor;
            }

        case 114:
            if ($equals_5(localName, 'result-document')) {
                return new XSLResultDocument;
            }

        case 115:
            if ($equals_5(localName, 'sequence')) {
                return new XSLSequence;
            }
            else if ($equals_5(localName, 'sort')) {
                return new XSLSort;
            }
            else if ($equals_5(localName, 'strip-space')) {
                return new XSLPreserveSpace;
            }
            else if ($equals_5(localName, 'stylesheet')) {
                return new XSLStylesheet;
            }

        case 116:
            if ($equals_5(localName, 'template')) {
                return new XSLTemplate;
            }
            else if ($equals_5(localName, 'text')) {
                return new XSLText;
            }
            else if ($equals_5(localName, 'transform')) {
                return new XSLStylesheet;
            }

        case 118:
            if ($equals_5(localName, 'value-of')) {
                return new XSLValueOf;
            }
            else if ($equals_5(localName, 'variable')) {
                return new XSLVariable;
            }

        case 119:
            if ($equals_5(localName, 'with-param')) {
                return new XSLWithParam;
            }
            else if ($equals_5(localName, 'when')) {
                return new XSLWhen;
            }

        default:return null;
    }
}

function StyleNodeFactory(){
}

defineClass(430, 1, {}, StyleNodeFactory);
_.makeElementNode = function makeElementNode(parent_0, nameCode, attlist, namespaces, namespacesUsed, pipe, baseURI, sequence){
    var actualElement, d, e, err, localname, node, reason, se, temp, toplevel, uri_0, uriCode;
    toplevel = instanceOf(parent_0, 61);
    if (instanceOf(parent_0, 248)) {
        d = new DataElement;
        d.namespaceList = initDim(Lclient_net_sf_saxon_ce_om_NamespaceBinding_2_classLit, $intern_5, 53, namespacesUsed, 0, 1);
        arraycopy(namespaces, 0, d.namespaceList, 0, namespacesUsed);
        $initialise(d, nameCode, attlist, parent_0, sequence);
        $setLocation(d, baseURI);
        return d;
    }
    e = null;
    $equals_5($getNamespaceURI(nameCode), 'http://www.w3.org/1999/XSL/Transform') && (e = $makeXSLElement(valueOf_3(nameCode.content_0, nameCode.localNameStart, nameCode.prefixStart - nameCode.localNameStart)));
    if (e) {
        e.namespaceList = initDim(Lclient_net_sf_saxon_ce_om_NamespaceBinding_2_classLit, $intern_5, 53, namespacesUsed, 0, 1);
        arraycopy(namespaces, 0, e.namespaceList, 0, namespacesUsed);
        $initialise(e, nameCode, attlist, parent_0, sequence);
        $setLocation(e, baseURI);
        try {
            $processExtensionElementAttribute(e, '');
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                err = $e0;
                e.validationError = err;
                e.reportingCircumstances = 1;
            }
            else 
                throw unwrap($e0);
        }
        try {
            $processExcludedNamespaces(e, '');
        }
        catch ($e1) {
            $e1 = wrap_0($e1);
            if (instanceOf($e1, 4)) {
                err = $e1;
                e.validationError = err;
                e.reportingCircumstances = 1;
            }
            else 
                throw unwrap($e1);
        }
        try {
            $processVersionAttribute(e, '');
        }
        catch ($e2) {
            $e2 = wrap_0($e2);
            if (instanceOf($e2, 4)) {
                err = $e2;
                e.validationError = err;
                e.reportingCircumstances = 1;
            }
            else 
                throw unwrap($e2);
        }
        $processDefaultXPathNamespaceAttribute(e, '');
        return e;
    }
    uriCode = $getNamespaceURI(nameCode);
    if (instanceOf(parent_0, 61) && !!uriCode.length && !$equals_5(uriCode, 'http://www.w3.org/1999/XSL/Transform')) {
        d = new DataElement;
        d.namespaceList = initDim(Lclient_net_sf_saxon_ce_om_NamespaceBinding_2_classLit, $intern_5, 53, namespacesUsed, 0, 1);
        arraycopy(namespaces, 0, d.namespaceList, 0, namespacesUsed);
        $initialise(d, nameCode, attlist, parent_0, sequence);
        $setLocation(d, baseURI);
        return d;
    }
    else {
        localname = valueOf_3(nameCode.content_0, nameCode.localNameStart, nameCode.prefixStart - nameCode.localNameStart);
        temp = null;
        if ($equals_5(uriCode, 'http://www.w3.org/1999/XSL/Transform') && instanceOf(parent_0, 61) && $compareTo_5($getEffectiveVersion(dynamicCast(parent_0, 61)), ($clinit_DecimalValue() , TWO)) <= 0) {
            temp = new AbsentExtensionElement;
            $setValidationError(temp, new XPathException_0('Unknown top-level XSLT declaration'));
        }
        new LiteralResultElement;
        !temp && (temp = new LiteralResultElement);
        temp.namespaceList = initDim(Lclient_net_sf_saxon_ce_om_NamespaceBinding_2_classLit, $intern_5, 53, namespacesUsed, 0, 1);
        arraycopy(namespaces, 0, temp.namespaceList, 0, namespacesUsed);
        try {
            $initialise(temp, nameCode, attlist, parent_0, sequence);
            $setLocation(temp, baseURI);
            $processDefaultCollationAttribute(temp, 'http://www.w3.org/1999/XSL/Transform');
                $processExtensionElementAttribute(temp, 'http://www.w3.org/1999/XSL/Transform');
                    $processExcludedNamespaces(temp, 'http://www.w3.org/1999/XSL/Transform');
                        $processVersionAttribute(temp, 'http://www.w3.org/1999/XSL/Transform');
                            $processDefaultXPathNamespaceAttribute(temp, 'http://www.w3.org/1999/XSL/Transform');
        }
        catch ($e3) {
            $e3 = wrap_0($e3);
            if (instanceOf($e3, 4)) {
                err = $e3;
                temp.validationError = err;
                temp.reportingCircumstances = 1;
            }
            else 
                throw unwrap($e3);
        }
        actualElement = null;
        if ($equals_5(uriCode, 'http://www.w3.org/1999/XSL/Transform')) {
            reason = new XPathException_0('Unknown XSLT element: ' + localname);
            reason.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTSE0010');
                reason.isStaticError = true;
                actualElement = new AbsentExtensionElement;
                temp.validationError = reason;
                temp.reportingCircumstances = 4;
        }
        else if ($isExtensionNamespace(temp, uriCode) && !toplevel) {
            uri_0 = $getNamespaceURI(nameCode);
            $equals_5('http://saxonica.com/ns/interactiveXSLT', uri_0) && (actualElement = $equals_5(localname, 'set-attribute')?new IXSLSetAttribute:$equals_5(localname, 'remove-attribute')?new IXSLRemoveAttribute:$equals_5(localname, 'schedule-action')?new IXSLScheduleAction:$equals_5(localname, 'set-property')?new IXSLSetProperty:null);
                if (!actualElement) {
                    actualElement = new AbsentExtensionElement;
                    se = new XPathException_1('Unknown extension instruction', temp);
                    se.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTDE1450');
                        temp.validationError = se;
                        temp.reportingCircumstances = 3;
                }
        }
        else {
            actualElement = new LiteralResultElement;
        }
        if (actualElement.___clazz$ == Lclient_net_sf_saxon_ce_style_LiteralResultElement_2_classLit) {
            node = temp;
        }
        else {
            node = actualElement;
            $setRawParent(actualElement, temp.parent_0);
            $setAttributeList(actualElement, !temp.attributeList?($clinit_AttributeCollection() , EMPTY_ATTRIBUTE_COLLECTION):temp.attributeList);
            $setNamespaceList(actualElement, temp.namespaceList);
            $setNodeName(actualElement, temp.elementName_0);
            $setRawSequenceNumber(actualElement, temp.sequence);
            actualElement.extensionNamespaces = temp.extensionNamespaces;
            actualElement.excludedNamespaces = temp.excludedNamespaces;
            actualElement.version = temp.version;
            actualElement.validationError = temp.validationError;
            actualElement.reportingCircumstances = temp.reportingCircumstances;
        }
        return node;
    }
}
;
var Lclient_net_sf_saxon_ce_style_StyleNodeFactory_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'StyleNodeFactory', 430, Ljava_lang_Object_2_classLit);
function $getIncludedStylesheet(this$static, importer, precedence){
    var abs_0, anc, base, decl, e, err, hash, incModule, includedDoc, includedSheet, key, outermost, psm, pss, rawDoc, relative, source;
    if (this$static.href_0 == null) {
        return null;
    }
    try {
        psm = importer.getPrincipalStylesheetModule();
        pss = psm.preparedStylesheet;
        key = computeDocumentKey(this$static.href_0, getBaseURI_7(this$static));
        includedSheet = dynamicCast($get_0(psm.moduleCache, key), 61);
        if (includedSheet) {
            incModule = new StylesheetModule(includedSheet, precedence);
            incModule.importer = importer;
        }
        else {
            relative = this$static.href_0;
            hash = $indexOf_3(relative, fromCodePoint(35));
            if (hash == 0 || relative.length == 0) {
                $compileError_2(this$static, 'A stylesheet cannot ' + $getLocalPart_0(this$static) + ' itself', $equals_5($getLocalPart_0(this$static), 'include')?'XTSE0180':'XTSE0210');
                return null;
            }
            else if (hash == relative.length - 1) {
                relative = relative.substr(0, hash);
            }
            else if (hash > 0) {
                hash + 1 < relative.length && __substr(relative, hash + 1, relative.length - (hash + 1));
                relative = relative.substr(0, hash);
            }
            try {
                base = new URI_1(getBaseURI_7(this$static));
                abs_0 = new URI_0(base, relative);
                source = $toString_1(abs_0);
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 51)) {
                    e = $e0;
                    throw new XPathException_5(e);
                }
                else 
                    throw unwrap($e0);
            }
            anc = importer;
            if (source != null) {
                while (anc) {
                    if ($equals_5(source, $getSystemId(anc.sourceElement))) {
                        $compileError_2(this$static, 'A stylesheet cannot ' + $getLocalPart_0(this$static) + ' itself', $equals_5($getLocalPart_0(this$static), 'include')?'XTSE0180':'XTSE0210');
                        return null;
                    }
                    anc = anc.importer;
                }
            }
            rawDoc = $buildDocument($getPreparedStylesheet(this$static).config, source);
            $add_1($getPreparedStylesheet(this$static).config.sourceDocumentPool, rawDoc, key);
            includedDoc = $loadStylesheetModule(pss, rawDoc);
            outermost = includedDoc.documentElement_0;
            if (instanceOf(outermost, 174)) {
                includedDoc = $makeStylesheet(dynamicCast(outermost, 174), $getPreparedStylesheet(this$static));
                outermost = includedDoc.documentElement_0;
            }
            if (!instanceOf(outermost, 61)) {
                $compileError_2(this$static, 'Included document ' + this$static.href_0 + ' is not a stylesheet', 'XTSE0165');
                return null;
            }
            includedSheet = dynamicCast(outermost, 61);
            includedSheet.principalStylesheetModule = psm;
            includedSheet.exec_0 = psm.preparedStylesheet;
            $put_0(psm.moduleCache, key, includedSheet);
            incModule = new StylesheetModule(includedSheet, precedence);
            incModule.importer = importer;
            decl = new Declaration(incModule, includedSheet);
            $validate_2(includedSheet);
            !!includedSheet.validationError && (this$static.reportingCircumstances == 1?$compileError(includedSheet, includedSheet.validationError):includedSheet.reportingCircumstances == 2 && $compileError(includedSheet, includedSheet.validationError));
        }
        $spliceIncludes(incModule);
        $setInputTypeAnnotations(importer, $getInputTypeAnnotationsAttribute(includedSheet) | incModule.inputTypeAnnotations);
        return incModule;
    }
    catch ($e1) {
        $e1 = wrap_0($e1);
        if (instanceOf($e1, 4)) {
            err = $e1;
            err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTSE0165');
                err.isStaticError = true;
                $compileError(this$static, err);
                return null;
        }
        else 
            throw unwrap($e1);
    }
}

function XSLGeneralIncorporate(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(244, 11, $intern_69, XSLGeneralIncorporate);
_.compile = function compile_6(exec_0, decl){
    return null;
}
;
_.isDeclaration = function isDeclaration_0(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_5(){
    this.href_0 = dynamicCastToString($checkAttribute(this, 'href', 'w1'));
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_6(decl){
    this.children != null && $compileError_2(this, 'Element must be empty', 'XTSE0260');
    $checkTopLevel(this, $equals_5($getLocalPart_0(this), 'import')?'XTSE0190':'XTSE0170');
}
;
var Lclient_net_sf_saxon_ce_style_XSLGeneralIncorporate_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLGeneralIncorporate', 244, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function StyleNodeFactory$1(){
    $clinit_ParentNodeImpl();
    XSLGeneralIncorporate.call(this);
}

defineClass(633, 244, $intern_69, StyleNodeFactory$1);
var Lclient_net_sf_saxon_ce_style_StyleNodeFactory$1_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'StyleNodeFactory/1', 633, Lclient_net_sf_saxon_ce_style_XSLGeneralIncorporate_2_classLit);
function StylesheetFunctionLibrary(sheet_0, overriding){
    this.stylesheet = sheet_0;
    this.overriding = overriding;
}

defineClass(432, 1, $intern_60, StylesheetFunctionLibrary);
_.bind_0 = function bind_4(functionName, staticArgs, env, container){
    var fc, fn;
    fn = $getFunction(this.stylesheet, functionName, staticArgs.length);
    if (!fn) {
        return null;
    }
    if ($isOverriding(fn) != this.overriding) {
        return null;
    }
    fc = new UserFunctionCall;
    $add_16(fn.references, fc);
    fc.name_0 = functionName;
    $setArguments(fc, staticArgs);
    $setContainer(fc, container);
    return fc;
}
;
_.hasFunctionSignature = function hasFunctionSignature_3(functionName, arity_0){
    return !!$getFunction(this.stylesheet, functionName, arity_0);
}
;
_.overriding = false;
var Lclient_net_sf_saxon_ce_style_StylesheetFunctionLibrary_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'StylesheetFunctionLibrary', 432, Ljava_lang_Object_2_classLit);
function $evaluateUseWhen(this$static, expr, staticContext){
    var contextItemType, controller, dynamicContext, slots, visitor;
    contextItemType = ($clinit_Type() , ITEM_TYPE);
    visitor = make_0(staticContext, staticContext.executable);
    expr = $typeCheck_1(visitor, expr, contextItemType);
    slots = allocateSlots(expr, 0);
    controller = new Controller(this$static.pipelineConfiguration.config);
    $setCurrentDateTime(controller, this$static.currentDateTime);
    dynamicContext = new XPathContext(controller);
    dynamicContext = dynamicContext.newCleanContext();
    slots == 0?(dynamicContext.stackFrame = ($clinit_XPathContext() , EMPTY_STACKFRAME)):(dynamicContext.stackFrame = initDim(Lclient_net_sf_saxon_ce_om_Sequence_2_classLit, $intern_1, 14, slots, 0, 1));
    return expr.effectiveBooleanValue(dynamicContext);
}

function $prepareUseWhen(this$static, expression, staticContext, sourceLocator){
    var expr, i_0, uri_0;
    $setBaseURI_1(staticContext, sourceLocator.this$01.systemId);
    staticContext.defaultElementNamespace = '';
    for (i_0 = this$static.defaultNamespaceStack.arrayList.array.length - 1; i_0 >= 0; i_0--) {
        uri_0 = dynamicCastToString($get_2(this$static.defaultNamespaceStack, i_0));
        if (uri_0 != null) {
            staticContext.defaultElementNamespace = uri_0;
            break;
        }
    }
    expr = make(expression, staticContext, staticContext, 0, sourceLocator);
    $setContainer(expr, staticContext);
    return expr;
}

function UseWhenFilter(startTag, resolver){
    ProxyReceiver.call(this);
    this.defaultNamespaceStack = new Stack;
    this.currentDateTime = getCurrentDateTime(null);
    this.startTag = startTag;
    this.nsResolver = resolver;
}

defineClass(636, 245, $intern_7, UseWhenFilter);
_.attribute = function attribute_6(nameCode, value_0){
    this.depthOfHole == 0 && this.nextReceiver.attribute(nameCode, value_0);
}
;
_.characters = function characters_6(chars){
    this.depthOfHole == 0 && this.nextReceiver.characters(chars);
}
;
_.comment_0 = function comment_6(chars){
}
;
_.endElement = function endElement_6(){
    $pop(this.defaultNamespaceStack);
    this.depthOfHole > 0?--this.depthOfHole:this.nextReceiver.endElement();
}
;
_.namespace_0 = function namespace_6(nsBinding, properties){
    this.depthOfHole == 0 && this.nextReceiver.namespace_0(nsBinding, properties);
}
;
_.open_1 = function open_8(){
    this.nextReceiver.open_1();
}
;
_.processingInstruction = function processingInstruction_5(target, data_0){
}
;
_.startContent = function startContent_5(){
    this.depthOfHole == 0 && this.nextReceiver.startContent();
}
;
_.startElement = function startElement_8(qName, properties){
    var b, e, err, expr, loc, local, staticContext, uriCode, useWhen;
    $push(this.defaultNamespaceStack, $getAttribute(this.startTag, '', 'xpath-default-namespace'));
    if (this.emptyStylesheetElement) {
        ++this.depthOfHole;
        return;
    }
    if (this.depthOfHole == 0) {
        uriCode = $getNamespaceURI(qName);
        $equals_5(uriCode, 'http://www.w3.org/1999/XSL/Transform')?(useWhen = $getAttribute(this.startTag, '', 'use-when')):(useWhen = $getAttribute(this.startTag, 'http://www.w3.org/1999/XSL/Transform', 'use-when'));
            if (useWhen != null) {
                expr = null;
                try {
                    loc = new UseWhenFilter$1(this);
                    staticContext = new UseWhenStaticContext(this.pipelineConfiguration.config, this.nsResolver, loc);
                    expr = $prepareUseWhen(this, useWhen, staticContext, loc);
                    b = $evaluateUseWhen(this, expr, staticContext);
                    if (!b) {
                        local = valueOf_3(qName.content_0, qName.localNameStart, qName.prefixStart - qName.localNameStart);
                        if ($equals_5($getNamespaceURI(qName), 'http://www.w3.org/1999/XSL/Transform') && ($equals_5(local, 'stylesheet') || $equals_5(local, 'transform'))) {
                            this.emptyStylesheetElement = true;
                        }
                        else {
                            this.depthOfHole = 1;
                            return;
                        }
                    }
                }
                catch ($e0) {
                    $e0 = wrap_0($e0);
                    if (instanceOf($e0, 4)) {
                        e = $e0;
                        err = new XPathException_0('Error in use-when expression. ' + e.message_0);
                        $setLocator(err, $getSourceLocator(expr));
                        $setErrorCodeQName(err, e.errorCode);
                        this.pipelineConfiguration.errorListener.error_0(err);
                        err.hasBeenReported = true;
                        throw err;
                    }
                    else 
                        throw unwrap($e0);
                }
            }
            this.nextReceiver.startElement(qName, properties);
    }
    else {
        ++this.depthOfHole;
    }
}
;
_.depthOfHole = 0;
_.emptyStylesheetElement = false;
var Lclient_net_sf_saxon_ce_style_UseWhenFilter_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'UseWhenFilter', 636, Lclient_net_sf_saxon_ce_event_ProxyReceiver_2_classLit);
function UseWhenFilter$1(this$0){
    this.this$01 = this$0;
}

defineClass(637, 1, {}, UseWhenFilter$1);
_.getLocation = function getLocation_1(){
    return 'use-when expression in ' + this.this$01.systemId;
}
;
_.getSystemId = function getSystemId_6(){
    return this.this$01.systemId;
}
;
var Lclient_net_sf_saxon_ce_style_UseWhenFilter$1_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'UseWhenFilter/1', 637, Ljava_lang_Object_2_classLit);
function UseWhenStaticContext(config, namespaceContext, sourceLocator){
    var lib;
    AbstractStaticContext.call(this);
    this.config = config;
    this.namespaceContext = namespaceContext;
    this.sourceLocator = sourceLocator;
    lib = new FunctionLibraryList;
    $addFunctionLibrary(lib, ($clinit_SystemFunctionLibrary() , $get_0(THE_INSTANCES, valueOf(5)) == null && $put_0(THE_INSTANCES, valueOf(5), new SystemFunctionLibrary(5)) , dynamicCast($get_0(THE_INSTANCES, valueOf(5)), 284)));
    $addFunctionLibrary(lib, ($clinit_ConstructorFunctionLibrary() , $clinit_ConstructorFunctionLibrary() , THE_INSTANCE_3));
    this.functionLibrary = lib;
    this.executable = new Executable(config);
}

defineClass(665, 434, {28:1}, UseWhenStaticContext);
_.bindVariable = function bindVariable_1(qName){
    var err;
    err = new XPathException_0('Variables cannot be used in a use-when expression');
    err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XPST0008');
        err.isStaticError = true;
        throw err;
}
;
_.getContainerGranularity = function getContainerGranularity_3(){
    return 1;
}
;
_.getDefaultCollationName = function getDefaultCollationName_1(){
    return 'http://www.w3.org/2005/xpath-functions/collation/codepoint';
}
;
_.getDefaultFunctionNamespace = function getDefaultFunctionNamespace_1(){
    return 'http://www.w3.org/2005/xpath-functions';
}
;
_.getExecutable = function getExecutable_4(){
    return this.executable;
}
;
_.getFunctionLibrary = function getFunctionLibrary_2(){
    return this.functionLibrary;
}
;
_.getNamespaceResolver = function getNamespaceResolver_1(){
    return this.namespaceContext;
}
;
_.getSourceLocator = function getSourceLocator_3(){
    return this.sourceLocator;
}
;
_.isInBackwardsCompatibleMode = function isInBackwardsCompatibleMode_1(){
    return false;
}
;
var Lclient_net_sf_saxon_ce_style_UseWhenStaticContext_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'UseWhenStaticContext', 665, Lclient_net_sf_saxon_ce_sxpath_AbstractStaticContext_2_classLit);
function XSLAnalyzeString(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(395, 11, {28:1, 15:1, 7:1, 14:1, 11:1, 395:1, 27:1, 10:1, 31:1, 23:1}, XSLAnalyzeString);
_.compile = function compile_7(exec_0, decl){
    var e, matchingBlock, nonMatchingBlock, visitor;
    matchingBlock = null;
    !!this.matching && (matchingBlock = $compileSequenceConstructor(this.matching, exec_0, decl));
    nonMatchingBlock = null;
    !!this.nonMatching && (nonMatchingBlock = $compileSequenceConstructor(this.nonMatching, exec_0, decl));
    try {
        visitor = make_0((!this.staticContext && (this.staticContext = new ExpressionContext(this)) , this.staticContext), $getPreparedStylesheet(this));
        return new AnalyzeString(this.select, this.regex, this.flags, !matchingBlock?null:matchingBlock.simplify(visitor), !nonMatchingBlock?null:nonMatchingBlock.simplify(visitor));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            $compileError(this, e);
            return null;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.getReturnedItemType = function getReturnedItemType_0(){
    return $getCommonChildItemType(this);
}
;
_.isInstruction = function isInstruction_5(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_6(){
    this.select = dynamicCast($checkAttribute(this, 'select', 'e1'), 6);
    this.regex = dynamicCast($checkAttribute(this, 'regex', 'a1'), 6);
    this.flags = dynamicCast($checkAttribute(this, 'flags', 'a'), 6);
    !this.flags && (this.flags = $makeAttributeValueTemplate(this, ''));
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_7(decl){
    var b, child, child$array, child$index, child$max, state;
    state = 0;
    for (child$array = this.children == null?EMPTY_NODE_LIST:instanceOf(this.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this.children, 10)]):dynamicCast(this.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
        child = child$array[child$index];
        if (instanceOf(child, 203)) {
            state = 3;
        }
        else if (instanceOf(child, 339)) {
            b = $equals_5($getLocalPart_0(child), 'matching-substring');
            if (b) {
                state != 0 && $compileError_2(this, 'Content model for xsl:analyze-string is (xsl:matching-substring? xsl:non-matching-substring? xsl:fallback*)', 'XTSE0010');
                state = 1;
                this.matching = dynamicCast(child, 11);
            }
            else {
                state >= 2 && $compileError_2(this, 'Content model for xsl:analyze-string is (xsl:matching-substring? xsl:non-matching-substring? xsl:fallback*)', 'XTSE0010');
                state = 2;
                this.nonMatching = dynamicCast(child, 11);
            }
        }
        else {
            $compileError_2(this, 'Content model for xsl:analyze-string is (xsl:matching-substring? xsl:non-matching-substring? xsl:fallback*)', 'XTSE0010');
        }
    }
    !this.matching && !this.nonMatching && $compileError_2(this, 'Content model for xsl:analyze-string is (xsl:matching-substring? xsl:non-matching-substring? xsl:fallback*)', 'XTSE1130');
    this.select = $typeCheck_6(this, this.select);
    this.regex = $typeCheck_6(this, this.regex);
    this.flags = $typeCheck_6(this, this.flags);
}
;
var Lclient_net_sf_saxon_ce_style_XSLAnalyzeString_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLAnalyzeString', 395, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLApplyImports(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(708, 11, $intern_68, XSLApplyImports);
_.compile = function compile_8(exec_0, decl){
    var inst;
    inst = new ApplyImports(1);
    $setActualParameters(inst, $getWithParamInstructions(this, exec_0, decl, false, inst), $getWithParamInstructions(this, exec_0, decl, true, inst));
    return inst;
}
;
_.isInstruction = function isInstruction_6(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_7(){
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_8(decl){
    $onlyAllow(this, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['with-param']));
}
;
var Lclient_net_sf_saxon_ce_style_XSLApplyImports_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLApplyImports', 708, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLApplyTemplates(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(709, 11, $intern_68, XSLApplyTemplates);
_.compile = function compile_9(exec_0, decl){
    var app, sortKeys, sortedSequence;
    sortKeys = $makeSortKeys(this, decl);
    sortKeys != null && (this.useTailRecursion = false);
    sortedSequence = this.select;
    sortKeys != null && (sortedSequence = new SortExpression(this.select, sortKeys));
    $compileSequenceConstructor_0(this, exec_0, decl, $iterateAxis_1(this, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
    app = new ApplyTemplates(sortedSequence, this.useCurrentMode, this.useTailRecursion, this.defaultedSelectExpression, this.mode);
    $setActualParameters_0(app, $getWithParamInstructions(this, exec_0, decl, false, app), $getWithParamInstructions(this, exec_0, decl, true, app));
    loggingIsEnabled() && isTraceEnabled && this.modeAttribute != null && $AddTraceProperty_0(app, 'mode', this.modeAttribute);
    return app;
}
;
_.isInstruction = function isInstruction_7(){
    return true;
}
;
_.markTailCalls = function markTailCalls_0(){
    this.useTailRecursion = true;
    return true;
}
;
_.prepareAttributes = function prepareAttributes_8(){
    var err;
    this.select = dynamicCast($checkAttribute(this, 'select', 'e'), 6);
    this.modeAttribute = dynamicCastToString($checkAttribute(this, 'mode', 'w'));
    $checkForUnknownAttributes(this);
    if (this.modeAttribute != null) {
        if ($equals_5(this.modeAttribute, '#current')) {
            this.useCurrentMode = true;
        }
        else if ($equals_5(this.modeAttribute, '#default'))
            ;
        else {
            try {
                this.modeName = $makeQName(this, this.modeAttribute);
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 4)) {
                    err = $e0;
                    $compileError_1(this, 'Mode name ' + wrap(this.modeAttribute, 6) + ' is not a valid QName', err.errorCode);
                    this.modeName = null;
                }
                else 
                    throw unwrap($e0);
            }
        }
    }
    !!this.select && (this.defaultedSelectExpression = false);
}
;
_.validate = function validate_9(decl){
    var err, role;
    if (!this.useCurrentMode) {
        !this.modeName && (this.modeName = ($getContainingStylesheet(this) , null));
        this.mode = $getMode($getPreparedStylesheet(this).ruleManager, this.modeName, true);
    }
    $onlyAllow(this, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['sort', 'with-param']));
    if (!this.select) {
        this.select = new AxisExpression(3, null);
        $setSourceLocator(this.select, this);
    }
    this.select = $typeCheck_6(this, this.select);
    try {
        role = new RoleLocator(4, 'xsl:apply-templates/select', 0);
        role.errorCode = 'XTTE0520';
        this.select = staticTypeCheck_1(this.select, ($clinit_SequenceType() , NODE_SEQUENCE), false, role);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $compileError(this, err);
        }
        else 
            throw unwrap($e0);
    }
}
;
_.defaultedSelectExpression = true;
_.useCurrentMode = false;
_.useTailRecursion = false;
var Lclient_net_sf_saxon_ce_style_XSLApplyTemplates_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLApplyTemplates', 709, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function $checkCircularity(this$static, origin){
    var it;
    if (this$static == origin) {
        $compileError_2(this$static, 'The definition of the attribute set is circular', 'XTSE0720');
        this$static.useAttributeSets = null;
    }
    else {
        if (!this$static.validated) {
            return;
        }
        if (this$static.attributeSetElements) {
            for (it = new AbstractList$IteratorImpl(this$static.attributeSetElements); it.i < it.this$01_0.size_1();) {
                $checkCircularity(dynamicCast((checkCriticalElement(it.i < it.this$01_0.size_1()) , dynamicCast(it.this$01_0.get_1(it.last = it.i++), 75)).sourceElement, 221), origin);
            }
        }
    }
}

function $getObjectName_0(this$static){
    var o;
    o = $getObjectName(this$static);
    if (!o) {
        try {
            $prepareAttributes_0(this$static);
            o = $getObjectName_0(this$static);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                o = new StructuredQName('saxon', 'http://saxon.sf.net/', 'badly-named-attribute-set');
                    this$static.objectName = o;
            }
            else 
                throw unwrap($e0);
        }
    }
    return o;
}

function $prepareAttributes_0(this$static){
    $setObjectName_0(this$static, dynamicCast($checkAttribute(this$static, 'name', 'q1'), 8));
    this$static.useAtt = dynamicCastToString($checkAttribute(this$static, 'use-attribute-sets', 'w'));
    $checkForUnknownAttributes(this$static);
}

function XSLAttributeSet(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
    this.procedure = new AttributeSet;
}

defineClass(221, 11, {28:1, 15:1, 7:1, 14:1, 11:1, 194:1, 221:1, 27:1, 10:1, 31:1, 23:1}, XSLAttributeSet);
_.compile = function compile_10(exec_0, decl){
    var body_0, e, exp2, visitor;
    body_0 = $compileSequenceConstructor_0(this, exec_0, decl, $iterateAxis_1(this, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
    !body_0 && (body_0 = new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10)));
    try {
        visitor = make_0((!this.staticContext && (this.staticContext = new ExpressionContext(this)) , this.staticContext), $getPreparedStylesheet(this));
        body_0 = $simplify(visitor, body_0);
        $setUseAttributeSets(this.procedure, this.useAttributeSets);
        $setName(this.procedure, $getObjectName_0(this));
        $setBody(this.procedure, body_0);
        $setSourceLocator_0(this.procedure, this);
        $setExecutable(this.procedure, exec_0);
        exp2 = body_0.optimize(visitor, ($clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2));
        body_0 != exp2 && $setBody(this.procedure, exp2);
        $allocateSlots(this.procedure, 0);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            $compileError(this, e);
        }
        else 
            throw unwrap($e0);
    }
    return null;
}
;
_.getObjectName = function getObjectName_0(){
    return $getObjectName_0(this);
}
;
_.isDeclaration = function isDeclaration_1(){
    return true;
}
;
_.optimize_0 = function optimize_61(declaration){
}
;
_.prepareAttributes = function prepareAttributes_9(){
    $prepareAttributes_0(this);
}
;
_.validate = function validate_10(decl){
    var it;
    if (this.validated)
        return;
    instanceOf($getParent_0(this), 61) || $compileError_2(this, 'Element must be used only at top level of stylesheet', 'XTSE0010');
    $onlyAllow(this, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['attribute']));
    if (this.useAtt != null) {
        this.attributeSetElements = new ArrayList_0(5);
        this.useAttributeSets = $getAttributeSets(this, this.useAtt, this.attributeSetElements);
        for (it = new AbstractList$IteratorImpl(this.attributeSetElements); it.i < it.this$01_0.size_1();) {
            $checkCircularity(dynamicCast((checkCriticalElement(it.i < it.this$01_0.size_1()) , dynamicCast(it.this$01_0.get_1(it.last = it.i++), 75)).sourceElement, 221), this);
        }
    }
    this.validated = true;
}
;
_.attributeSetElements = null;
_.useAttributeSets = null;
_.validated = false;
var Lclient_net_sf_saxon_ce_style_XSLAttributeSet_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLAttributeSet', 221, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function $compile_1(this$static, exec_0, decl){
    var call_0, target;
    if (!this$static.template) {
        return null;
    }
    target = this$static.template.compiledTemplate;
    call_0 = new CallTemplate(target, this$static.useTailRecursion);
    $setActualParameters_1(call_0, $getWithParamInstructions(this$static, exec_0, decl, false, call_0), $getWithParamInstructions(this$static, exec_0, decl, true, call_0));
    loggingIsEnabled() && isTraceEnabled && $AddTraceProperty_0(call_0, 'name', $getDisplayName_0(this$static.calledTemplateName));
    return call_0;
}

function $findTemplate(this$static, templateName){
    var psm, template, decl;
    psm = $getContainingStylesheet(this$static).principalStylesheetModule;
    template = (decl = dynamicCast($get_0(psm.templateIndex, templateName), 75) , !decl?null:dynamicCast(decl.sourceElement, 216));
    !template && $compileError_2(this$static, 'No template exists named ' + this$static.calledTemplateName, 'XTSE0650');
    return template;
}

function XSLCallTemplate(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(337, 11, {28:1, 15:1, 7:1, 14:1, 11:1, 337:1, 27:1, 10:1, 31:1, 23:1}, XSLCallTemplate);
_.compile = function compile_11(exec_0, decl){
    return $compile_1(this, exec_0, decl);
}
;
_.getReturnedItemType = function getReturnedItemType_1(){
    var result;
    if (!this.template || this.gettingReturnedItemType) {
        return $clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2;
    }
    else {
        this.gettingReturnedItemType = true;
        result = $getReturnedItemType(this.template);
        this.gettingReturnedItemType = false;
        return result;
    }
}
;
_.isInstruction = function isInstruction_8(){
    return true;
}
;
_.markTailCalls = function markTailCalls_1(){
    this.useTailRecursion = true;
    return true;
}
;
_.postValidate = function postValidate_0(){
    var child, child$array, child$index, child$max, ok, param, param$array, param$array0, param$index, param$index0, param$max, param$max0, required, w, w$array, w$index, w$max, withParam;
    if (this.template) {
        for (param$array0 = $allChildren(this.template) , param$index0 = 0 , param$max0 = param$array0.length; param$index0 < param$max0; ++param$index0) {
            param = param$array0[param$index0];
            if (instanceOf(param, 76) && dynamicCast(param, 76).requiredParam && !dynamicCast(param, 76).tunnel) {
                ok = false;
                for (child$array = this.children == null?EMPTY_NODE_LIST:instanceOf(this.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this.children, 10)]):dynamicCast(this.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
                    child = child$array[child$index];
                    if (instanceOf(child, 154) && $equals_0($getObjectName(dynamicCast(child, 154)), $getObjectName(dynamicCast(param, 76)))) {
                        ok = true;
                        break;
                    }
                }
                ok || $compileError_2(this, 'No value supplied for required parameter ' + wrap($getAttributeValue(dynamicCast(param, 76), 'name'), 5), 'XTSE0690');
            }
        }
        for (w$array = this.children == null?EMPTY_NODE_LIST:instanceOf(this.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this.children, 10)]):dynamicCast(this.children, 33) , w$index = 0 , w$max = w$array.length; w$index < w$max; ++w$index) {
            w = w$array[w$index];
            if (instanceOf(w, 154) && !dynamicCast(w, 154).tunnel) {
                withParam = dynamicCast(w, 154);
                ok = false;
                for (param$array = $allChildren(this.template) , param$index = 0 , param$max = param$array.length; param$index < param$max; ++param$index) {
                    param = param$array[param$index];
                    if (instanceOf(param, 76) && $equals_0($getObjectName(dynamicCast(param, 76)), $getObjectName(withParam))) {
                        ok = true;
                        required = $getRequiredType_0(dynamicCast(param, 76));
                        $checkAgainstRequiredType(withParam, required);
                        break;
                    }
                }
                ok || $compareTo_5($getEffectiveVersion(this), ($clinit_DecimalValue() , TWO)) < 0 || $compileError_2(this, 'Parameter ' + (!withParam.attributeList?null:$getValue_0(withParam.attributeList, '', 'name')) + ' is not declared in the called template', 'XTSE0680');
            }
        }
    }
}
;
_.prepareAttributes = function prepareAttributes_10(){
    this.calledTemplateName = dynamicCast($checkAttribute(this, 'name', 'q1'), 8);
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_11(decl){
    $onlyAllow(this, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['with-param']));
    $equals_5($getNamespaceURI(this.calledTemplateName), 'http://saxon.sf.net/') && $equals_5($getLocalName_1(this.calledTemplateName), 'error-template') || (this.template = $findTemplate(this, this.calledTemplateName));
}
;
_.gettingReturnedItemType = false;
_.template = null;
_.useTailRecursion = false;
var Lclient_net_sf_saxon_ce_style_XSLCallTemplate_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLCallTemplate', 337, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLCharacterMap(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(397, 11, {28:1, 15:1, 7:1, 14:1, 11:1, 397:1, 27:1, 10:1, 31:1, 23:1}, XSLCharacterMap);
_.compile = function compile_12(exec_0, decl){
    return null;
}
;
_.isDeclaration = function isDeclaration_2(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_11(){
    $setObjectName_0(this, dynamicCast($checkAttribute(this, 'name', 'q1'), 8));
    dynamicCastToString($checkAttribute(this, 'use-character-maps', 's'));
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_12(decl){
    if (this.validated)
        return;
    instanceOf($getParent_0(this), 61) || $compileError_2(this, 'Element must be used only at top level of stylesheet', 'XTSE0010');
    $onlyAllow(this, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['output-character']));
    this.validated = true;
}
;
_.validated = false;
var Lclient_net_sf_saxon_ce_style_XSLCharacterMap_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLCharacterMap', 397, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLChoose(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(338, 11, {28:1, 15:1, 7:1, 14:1, 11:1, 338:1, 27:1, 10:1, 31:1, 23:1}, XSLChoose);
_.compile = function compile_13(exec_0, decl){
    var action, actions, ch_0, child, child$array, child$index, child$max, conditionTests, conditions, entries, visitor, w;
    entries = this.numberOfWhens + (!this.otherwise?0:1);
    conditions = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, entries, 0, 1);
    actions = initDim(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, $intern_16, 6, entries, 0, 1);
    conditionTests = null;
    loggingIsEnabled() && isTraceEnabled && (conditionTests = initDim(Ljava_lang_String_2_classLit, $intern_8, 2, entries, 4, 1));
    w = 0;
    visitor = make_0((!this.staticContext && (this.staticContext = new ExpressionContext(this)) , this.staticContext), $getPreparedStylesheet(this));
    for (child$array = this.children == null?EMPTY_NODE_LIST:instanceOf(this.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this.children, 10)]):dynamicCast(this.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
        child = child$array[child$index];
        action = $compileSequenceConstructor(dynamicCast(child, 11), exec_0, decl);
        setCheck(actions, w, $simplify(visitor, action));
        instanceOf(child, 222)?setCheck(conditions, w, dynamicCast(child, 222).test_0):instanceOf(child, 294) && setCheck(conditions, w, makeLiteral(($clinit_BooleanValue() , TRUE_0)));
        conditionTests != null && (conditionTests[w] = instanceOf(child, 222)?$getAttributeValue(dynamicCast(child, 222), 'test'):'');
        ++w;
    }
    ch_0 = new Choose(conditions, actions);
    ch_0.conditionTests = conditionTests;
    return ch_0;
}
;
_.getReturnedItemType = function getReturnedItemType_2(){
    return $getCommonChildItemType(this);
}
;
_.isInstruction = function isInstruction_9(){
    return true;
}
;
_.markTailCalls = function markTailCalls_2(){
    var child, child$array, child$index, child$max, found;
    found = false;
    for (child$array = this.children == null?EMPTY_NODE_LIST:instanceOf(this.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this.children, 10)]):dynamicCast(this.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
        child = child$array[child$index];
        found = found | dynamicCast(child, 11).markTailCalls();
    }
    return found;
}
;
_.prepareAttributes = function prepareAttributes_12(){
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_13(decl){
    var child, child$array, child$index, child$max, se;
    for (child$array = this.children == null?EMPTY_NODE_LIST:instanceOf(this.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this.children, 10)]):dynamicCast(this.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
        child = child$array[child$index];
        if (instanceOf(child, 222)) {
            !!this.otherwise && $compileError_2(this.otherwise, 'xsl:otherwise must come last', 'XTSE0010');
            ++this.numberOfWhens;
        }
        else if (instanceOf(child, 294)) {
            this.otherwise?$compileError_2(dynamicCast(child, 294), 'Only one xsl:otherwise is allowed in an xsl:choose', 'XTSE0010'):(this.otherwise = dynamicCast(child, 11));
        }
        else {
            se = instanceOf(child, 11)?dynamicCast(child, 11):this;
            $compileError_2(se, 'Only xsl:when and xsl:otherwise are allowed within xsl:choose', 'XTSE0010');
        }
    }
    this.numberOfWhens == 0 && $compileError_2(this, 'xsl:choose must contain at least one xsl:when', 'XTSE0010');
}
;
_.numberOfWhens = 0;
var Lclient_net_sf_saxon_ce_style_XSLChoose_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLChoose', 338, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLComment(){
    $clinit_ParentNodeImpl();
    XSLLeafNodeConstructor.call(this);
}

defineClass(710, 293, $intern_68, XSLComment);
_.compile = function compile_14(exec_0, decl){
    var inst;
    inst = new Comment_0;
    $compileContent(this, exec_0, decl, inst, new StringLiteral(($clinit_StringValue() , SINGLE_SPACE)));
    return inst;
}
;
_.getErrorCodeForSelectPlusContent = function getErrorCodeForSelectPlusContent_0(){
    return 'XTSE0940';
}
;
_.prepareAttributes = function prepareAttributes_13(){
    this.select = dynamicCast($checkAttribute(this, 'select', 'e'), 6);
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_14(decl){
    this.select = $typeCheck_6(this, this.select);
    $validate(this);
}
;
var Lclient_net_sf_saxon_ce_style_XSLComment_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLComment', 710, Lclient_net_sf_saxon_ce_style_XSLLeafNodeConstructor_2_classLit);
function XSLCopy(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(711, 11, $intern_68, XSLCopy);
_.compile = function compile_15(exec_0, decl){
    var choice, condition, content_0, err, inst, role, use;
    this.select = $typeCheck_6(this, this.select);
    try {
        role = new RoleLocator(4, 'xsl:copy/select', 0);
        role.errorCode = 'XTTE2170';
        this.select = staticTypeCheck_1(this.select, ($clinit_SequenceType() , OPTIONAL_ITEM), false, role);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $compileError(this, err);
        }
        else 
            throw unwrap($e0);
    }
    inst = new Copy(this.select, this.copyNamespaces, this.inheritNamespaces);
    content_0 = $compileSequenceConstructor_0(this, exec_0, decl, $iterateAxis_1(this, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
    if (this.attributeSets != null) {
        use = new UseAttributeSets(this.attributeSets);
        condition = new InstanceOfExpression(new ContextItemExpression, ($clinit_SequenceType() , new SequenceType(($clinit_NodeKindTest() , ELEMENT), $intern_21)));
        choice = makeConditional(condition, use);
        if (!content_0) {
            content_0 = choice;
        }
        else {
            content_0 = makeBlock(choice, content_0);
            $setSourceLocator(content_0, this);
        }
    }
    !content_0 && (content_0 = new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10)));
    inst.content_0 = content_0;
    $adoptChildExpression(inst, content_0);
    return inst;
}
;
_.isInstruction = function isInstruction_10(){
    return true;
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_4(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_14(){
    var b;
    b = dynamicCast($checkAttribute(this, 'copy-namespaces', 'b'), 116);
    !!b && (this.copyNamespaces = b.value_0);
    b = dynamicCast($checkAttribute(this, 'inherit-namespaces', 'b'), 116);
    !!b && (this.inheritNamespaces = b.value_0);
    $checkAttribute(this, 'type', 't');
    $checkAttribute(this, 'validation', 'v');
    this.use = dynamicCastToString($checkAttribute(this, 'use-attribute-sets', 'w'));
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_15(decl){
    this.use != null && (this.attributeSets = $getAttributeSets(this, this.use, null));
    if (!this.select) {
        this.select = new ContextItemExpression;
        $setSourceLocator(this.select, this);
    }
}
;
_.attributeSets = null;
_.copyNamespaces = true;
_.inheritNamespaces = true;
_.select = null;
var Lclient_net_sf_saxon_ce_style_XSLCopy_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLCopy', 711, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLCopyOf(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(712, 11, $intern_68, XSLCopyOf);
_.compile = function compile_16(exec_0, decl){
    var inst;
    inst = new CopyOf(this.select, this.copyNamespaces);
    $setStaticBaseUri(inst, getBaseURI_7(this));
    return inst;
}
;
_.isInstruction = function isInstruction_11(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_15(){
    var b;
    this.select = dynamicCast($checkAttribute(this, 'select', 'e1'), 6);
    b = dynamicCast($checkAttribute(this, 'copy-namespaces', 'b'), 116);
    !!b && (this.copyNamespaces = b.value_0);
    $checkAttribute(this, 'type', 't');
    $checkAttribute(this, 'validation', 'v');
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_16(decl){
    this.children != null && $compileError_2(this, 'Element must be empty', 'XTSE0260');
    this.select = $typeCheck_6(this, this.select);
}
;
_.copyNamespaces = false;
var Lclient_net_sf_saxon_ce_style_XSLCopyOf_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLCopyOf', 712, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function $makeDecimalFormatSymbols(this$static){
    var d, err, map_0;
    d = new DecimalSymbols;
    this$static.decimalSeparator != null && (d.decimalSeparator = $toChar(this$static, this$static.decimalSeparator));
    this$static.groupingSeparator != null && (d.groupingSeparator = $toChar(this$static, this$static.groupingSeparator));
    this$static.infinity != null && (d.infinity = this$static.infinity);
    this$static.minusSign != null && (d.minusSign = $toChar(this$static, this$static.minusSign));
    this$static.NaN_0 != null && (d.NaN_0 = this$static.NaN_0);
    this$static.percent != null && (d.percent = $toChar(this$static, this$static.percent));
    this$static.perMille != null && (d.permill = $toChar(this$static, this$static.perMille));
    this$static.digit != null && (d.digit = $toChar(this$static, this$static.digit));
    this$static.patternSeparator != null && (d.patternSeparator = $toChar(this$static, this$static.patternSeparator));
    try {
        map_0 = new HashMap_0(20);
        $put_0(map_0, valueOf(d.decimalSeparator), 'decimal-separator');
        $get_0(map_0, valueOf(d.groupingSeparator)) != null && $duplicate('grouping-separator', dynamicCastToString($get_0(map_0, valueOf(d.groupingSeparator))));
        $put_0(map_0, valueOf(d.groupingSeparator), 'grouping-separator');
        $get_0(map_0, valueOf(d.percent)) != null && $duplicate('percent', dynamicCastToString($get_0(map_0, valueOf(d.percent))));
        $put_0(map_0, valueOf(d.percent), 'percent');
        $get_0(map_0, valueOf(d.permill)) != null && $duplicate('per-mille', dynamicCastToString($get_0(map_0, valueOf(d.permill))));
        $put_0(map_0, valueOf(d.permill), 'per-mille');
        $get_0(map_0, valueOf(d.zeroDigit)) != null && $duplicate('zero-digit', dynamicCastToString($get_0(map_0, valueOf(d.zeroDigit))));
        $put_0(map_0, valueOf(d.zeroDigit), 'zero-digit');
        $get_0(map_0, valueOf(d.digit)) != null && $duplicate('digit', dynamicCastToString($get_0(map_0, valueOf(d.digit))));
        $put_0(map_0, valueOf(d.digit), 'digit');
        $get_0(map_0, valueOf(d.patternSeparator)) != null && $duplicate('pattern-separator', dynamicCastToString($get_0(map_0, valueOf(d.patternSeparator))));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $compileError_2(this$static, err.message_0, 'XTSE1300');
        }
        else 
            throw unwrap($e0);
    }
    return d;
}

function $prepareAttributes_1(this$static){
    if (this$static.prepared) {
        return;
    }
    this$static.prepared = true;
    $setObjectName_0(this$static, dynamicCast($checkAttribute(this$static, 'name', 'q1'), 8));
    this$static.decimalSeparator = dynamicCastToString($checkAttribute(this$static, 'decimal-separator', 's'));
    this$static.groupingSeparator = dynamicCastToString($checkAttribute(this$static, 'grouping-separator', 's'));
    this$static.infinity = dynamicCastToString($checkAttribute(this$static, 'infinity', 's'));
    this$static.minusSign = dynamicCastToString($checkAttribute(this$static, 'minus-sign', 's'));
    this$static.NaN_0 = dynamicCastToString($checkAttribute(this$static, 'NaN', 's'));
    this$static.percent = dynamicCastToString($checkAttribute(this$static, 'percent', 's'));
    this$static.perMille = dynamicCastToString($checkAttribute(this$static, 'per-mille', 's'));
    this$static.digit = dynamicCastToString($checkAttribute(this$static, 'digit', 's'));
    this$static.patternSeparator = dynamicCastToString($checkAttribute(this$static, 'pattern-separator', 's'));
    $checkForUnknownAttributes(this$static);
}

function $toChar(this$static, s){
    var e;
    e = expand_0(s);
    e.length != 1 && $compileError_2(this$static, 'Attribute "' + s + '" should be a single character', 'XTSE0020');
    return e[0];
}

function XSLDecimalFormat(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(713, 11, $intern_68, XSLDecimalFormat);
_.compile = function compile_17(exec_0, decl){
    return null;
}
;
_.index_1 = function index_2(decl, top_0){
    var d, dfm, err;
    $prepareAttributes_1(this);
    d = $makeDecimalFormatSymbols(this);
    dfm = $getDecimalFormatManager($getPreparedStylesheet(this));
    try {
        $setDefaultDecimalFormat(dfm, d, $getPrecedence(decl.module));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $compileError_1(this, err.message_0, err.errorCode);
        }
        else 
            throw unwrap($e0);
    }
}
;
_.isDeclaration = function isDeclaration_3(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_16(){
    $prepareAttributes_1(this);
}
;
_.validate = function validate_17(decl){
    instanceOf($getParent_0(this), 61) || $compileError_2(this, 'Element must be used only at top level of stylesheet', 'XTSE0010');
    this.children != null && $compileError_2(this, 'Element must be empty', 'XTSE0260');
}
;
_.prepared = false;
var Lclient_net_sf_saxon_ce_style_XSLDecimalFormat_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLDecimalFormat', 713, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLDocument(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(714, 11, $intern_68, XSLDocument);
_.compile = function compile_18(exec_0, decl){
    var b, inst;
    inst = new DocumentInstr(false, null, getBaseURI_7(this));
    b = $compileSequenceConstructor_0(this, exec_0, decl, $iterateAxis_1(this, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
    !b && (b = new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10)));
    inst.content_0 = b;
    $adoptChildExpression(inst, b);
    return inst;
}
;
_.isInstruction = function isInstruction_12(){
    return true;
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_5(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_17(){
    $checkAttribute(this, 'validation', 'v');
    $checkAttribute(this, 'type', 't');
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_18(decl){
}
;
var Lclient_net_sf_saxon_ce_style_XSLDocument_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLDocument', 714, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function $compileContentExpression(this$static, exec_0, decl, inst){
    var content_0, use;
    content_0 = $compileSequenceConstructor_0(this$static, exec_0, decl, $iterateAxis_1(this$static, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
    if (this$static.attributeSets != null) {
        use = new UseAttributeSets(this$static.attributeSets);
        if (!content_0) {
            content_0 = use;
        }
        else {
            content_0 = makeBlock(use, content_0);
            $setSourceLocator(content_0, this$static);
        }
    }
    !content_0 && (content_0 = new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10)));
    inst.content_0 = content_0;
    $adoptChildExpression(inst, content_0);
    return inst;
}

function XSLElement(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(715, 11, $intern_68, XSLElement);
_.compile = function compile_19(exec_0, decl){
    var inst, inst0, nameCode, nsuri, parts, qName, resolver;
    resolver = new InscopeNamespaceResolver(this);
    if (instanceOf(this.elementName, 21)) {
        qName = $getPrimitiveStringValue(dynamicCast(dynamicCast(this.elementName, 21).value_0, 12));
        try {
            parts = getQNameParts(qName);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 145)) {
                $compileError_2(this, 'Invalid element name: ' + qName, 'XTDE0820');
                return null;
            }
            else 
                throw unwrap($e0);
        }
        nsuri = null;
        if (instanceOf(this.namespace, 21)) {
            nsuri = $getPrimitiveStringValue(dynamicCast(dynamicCast(this.namespace, 21).value_0, 12));
            nsuri.length == 0 && (parts[0] = '');
        }
        else if (!this.namespace) {
            nsuri = $getURIForPrefix(resolver, parts[0], true);
            nsuri == null && $compileError_2(this, 'Undeclared namespace prefix ' + wrap(parts[0], 6), 'XTDE0830');
        }
        if (nsuri != null) {
            nameCode = new StructuredQName(parts[0], nsuri, parts[1]);
            inst0 = new FixedElement(nameCode, null, this.inheritNamespaces);
            $setBaseURI_0(inst0, getBaseURI_7(this));
            loggingIsEnabled() && isTraceEnabled && $AddTraceProperty(inst0, 'name', this.elementName);
            return $compileContentExpression(this, exec_0, decl, inst0);
        }
    }
    inst = new ComputedElement(this.elementName, this.namespace, resolver, this.inheritNamespaces);
    return $compileContentExpression(this, exec_0, decl, inst);
}
;
_.isInstruction = function isInstruction_13(){
    return true;
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_6(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_18(){
    var b;
    this.elementName = dynamicCast($checkAttribute(this, 'name', 'a1'), 6);
    this.namespace = dynamicCast($checkAttribute(this, 'namespace', 'a'), 6);
    $checkAttribute(this, 'validation', 'v');
    $checkAttribute(this, 'type', 't');
    b = dynamicCast($checkAttribute(this, 'inherit-namespaces', 'b'), 116);
    !!b && (this.inheritNamespaces = b.value_0);
    this.use = dynamicCastToString($checkAttribute(this, 'use-attribute-sets', 's'));
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_19(decl){
    this.use != null && (this.attributeSets = $getAttributeSets(this, this.use, null));
    this.elementName = $typeCheck_6(this, this.elementName);
    this.namespace = $typeCheck_6(this, this.namespace);
}
;
_.attributeSets = null;
_.inheritNamespaces = true;
_.namespace = null;
var Lclient_net_sf_saxon_ce_style_XSLElement_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLElement', 715, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLFallback(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(203, 11, {28:1, 15:1, 7:1, 14:1, 11:1, 203:1, 27:1, 10:1, 31:1, 23:1}, XSLFallback);
_.compile = function compile_20(exec_0, decl){
    return null;
}
;
_.isInstruction = function isInstruction_14(){
    return true;
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_7(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_19(){
    $checkForUnknownAttributes(this);
}
;
_.seesAvuncularVariables = function seesAvuncularVariables_0(){
    return false;
}
;
_.validate = function validate_20(decl){
}
;
var Lclient_net_sf_saxon_ce_style_XSLFallback_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLFallback', 203, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLForEach(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(716, 11, $intern_68, XSLForEach);
_.compile = function compile_21(exec_0, decl){
    var block, err, sortKeys, sortedSequence;
    sortKeys = $makeSortKeys(this, decl);
    sortedSequence = this.select;
    sortKeys != null && (sortedSequence = new SortExpression(this.select, sortKeys));
    block = $compileSequenceConstructor_0(this, exec_0, decl, $iterateAxis_1(this, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
    if (!block) {
        return new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
    }
    try {
        return new ForEach(sortedSequence, $simplify(make_0((!this.staticContext && (this.staticContext = new ExpressionContext(this)) , this.staticContext), $getPreparedStylesheet(this)), block), this.containsTailCall);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $compileError(this, err);
            return null;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.getReturnedItemType = function getReturnedItemType_3(){
    return $getCommonChildItemType(this);
}
;
_.isInstruction = function isInstruction_15(){
    return true;
}
;
_.isPermittedChild = function isPermittedChild_0(child){
    return instanceOf(child, 143);
}
;
_.markTailCalls = function markTailCalls_3(){
    var last;
    if ((this.select.getCardinality() & $intern_14) != 0) {
        return false;
    }
    else {
        last = $getLastChildInstruction(this);
        this.containsTailCall = !!last && last.markTailCalls();
        return this.containsTailCall;
    }
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_8(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_20(){
    this.select = dynamicCast($checkAttribute(this, 'select', 'e1'), 6);
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_21(decl){
    $checkSortComesFirst(this, false);
    this.select = $typeCheck_6(this, this.select);
}
;
_.containsTailCall = false;
_.select = null;
var Lclient_net_sf_saxon_ce_style_XSLForEach_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLForEach', 716, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLForEachGroup(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(717, 11, $intern_68, XSLForEachGroup);
_.compile = function compile_22(exec_0, decl){
    var action, algorithm, e, key;
    algorithm = 0;
    key = null;
    if (this.groupBy) {
        algorithm = 0;
        key = this.groupBy;
    }
    else if (this.groupAdjacent) {
        algorithm = 1;
        key = this.groupAdjacent;
    }
    else if (this.starting) {
        algorithm = 2;
        key = new PatternSponsor(this.starting);
    }
    else if (this.ending) {
        algorithm = 3;
        key = new PatternSponsor(this.ending);
    }
    action = $compileSequenceConstructor_0(this, exec_0, decl, $iterateAxis_1(this, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
    if (!action) {
        return new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
    }
    try {
        return new ForEachGroup(this.select, $simplify(make_0((!this.staticContext && (this.staticContext = new ExpressionContext(this)) , this.staticContext), $getPreparedStylesheet(this)), action), algorithm, key, this.collationName, getBaseURI_7(this), $makeSortKeys(this, decl));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            $compileError(this, e);
            return null;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.isInstruction = function isInstruction_16(){
    return true;
}
;
_.isPermittedChild = function isPermittedChild_1(child){
    return instanceOf(child, 143);
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_9(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_21(){
    var base, c, collation, collationAtt, collationURI, defaultCollation;
    this.select = dynamicCast($checkAttribute(this, 'select', 'e1'), 6);
    this.groupBy = dynamicCast($checkAttribute(this, 'group-by', 'e'), 6);
    this.groupAdjacent = dynamicCast($checkAttribute(this, 'group-adjacent', 'e'), 6);
    this.starting = dynamicCast($checkAttribute(this, 'group-starting-with', 'p'), 117);
    this.ending = dynamicCast($checkAttribute(this, 'group-ending-with', 'p'), 117);
    collationAtt = dynamicCastToString($checkAttribute(this, 'collation', 'w'));
    $checkForUnknownAttributes(this);
    c = (!this.groupBy?0:1) + (!this.groupAdjacent?0:1) + (!this.starting?0:1) + (!this.ending?0:1);
    c != 1 && $compileError_2(this, 'Exactly one of the attributes group-by, group-adjacent, group-starting-with, and group-ending-with must be specified', 'XTSE1080');
    if (collationAtt != null) {
        if (!this.groupBy && !this.groupAdjacent) {
            $compileError_2(this, 'A collation may be specified only if group-by or group-adjacent is specified', 'XTSE1090');
        }
        else {
            this.collationName = $makeAttributeValueTemplate(this, collationAtt);
            if (instanceOf(this.collationName, 21)) {
                collation = $getPrimitiveStringValue(dynamicCast(dynamicCast(this.collationName, 21).value_0, 12));
                try {
                    collationURI = new URI_2(collation);
                    if (collationURI.m_scheme == null) {
                        base = new URI_1(getBaseURI_7(this));
                        collationURI = new URI_0(base, $toString_1(collationURI));
                        this.collationName = new StringLiteral_0($toString_1(collationURI));
                    }
                }
                catch ($e0) {
                    $e0 = wrap_0($e0);
                    if (instanceOf($e0, 51)) {
                        $compileError_2(this, "Collation name '" + this.collationName + "' is not a valid URI", 'XTDE1110');
                        this.collationName = new StringLiteral_0('http://www.w3.org/2005/xpath-functions/collation/codepoint');
                    }
                    else 
                        throw unwrap($e0);
                }
            }
        }
    }
    else {
        defaultCollation = $getDefaultCollationName(this);
        defaultCollation != null && (this.collationName = new StringLiteral_0(defaultCollation));
    }
}
;
_.validate = function validate_22(decl){
    var err, prefix, role;
    $checkSortComesFirst(this, false);
    this.select = $typeCheck_6(this, this.select);
    make_0((!this.staticContext && (this.staticContext = new ExpressionContext(this)) , this.staticContext), $getPreparedStylesheet(this));
    if (this.groupBy) {
        this.groupBy = $typeCheck_6(this, this.groupBy);
        try {
            role = new RoleLocator(4, 'xsl:for-each-group/group-by', 0);
            this.groupBy = staticTypeCheck_1(this.groupBy, ($clinit_SequenceType() , ATOMIC_SEQUENCE), false, role);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                err = $e0;
                $compileError(this, err);
            }
            else 
                throw unwrap($e0);
        }
    }
    else if (this.groupAdjacent) {
        this.groupAdjacent = $typeCheck_6(this, this.groupAdjacent);
        try {
            role = new RoleLocator(4, 'xsl:for-each-group/group-adjacent', 0);
            role.errorCode = 'XTTE1100';
            this.groupAdjacent = staticTypeCheck_1(this.groupAdjacent, ($clinit_SequenceType() , SINGLE_ATOMIC), false, role);
        }
        catch ($e1) {
            $e1 = wrap_0($e1);
            if (instanceOf($e1, 4)) {
                err = $e1;
                $compileError(this, err);
            }
            else 
                throw unwrap($e1);
        }
    }
    this.starting = $typeCheck_7(this, 'starting', this.starting);
    this.ending = $typeCheck_7(this, 'ending', this.ending);
    if (!!this.starting || !!this.ending) {
        try {
            role = new RoleLocator(4, 'xsl:for-each-group/select', 0);
            role.errorCode = 'XTTE1120';
            this.select = staticTypeCheck_1(this.select, ($clinit_SequenceType() , NODE_SEQUENCE), false, role);
        }
        catch ($e2) {
            $e2 = wrap_0($e2);
            if (instanceOf($e2, 4)) {
                err = $e2;
                prefix = this.starting?'With group-starting-with attribute: ':'With group-ending-with attribute: ';
                $compileError_1(this, prefix + err.message_0, err.errorCode);
            }
            else 
                throw unwrap($e2);
        }
    }
}
;
_.ending = null;
_.groupAdjacent = null;
_.groupBy = null;
_.select = null;
_.starting = null;
var Lclient_net_sf_saxon_ce_style_XSLForEachGroup_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLForEachGroup', 717, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function $compileAsExpression(this$static, exec_0, decl){
    var exp_0, fn, trace, visitor;
    exp_0 = $compileSequenceConstructor_0(this$static, exec_0, decl, $iterateAxis_1(this$static, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
    if (!exp_0) {
        exp_0 = new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10));
    }
    else {
        visitor = make_0((!this$static.staticContext && (this$static.staticContext = new ExpressionContext(this$static)) , this$static.staticContext), $getPreparedStylesheet(this$static));
        exp_0 = exp_0.simplify(visitor);
    }
    if (loggingIsEnabled() && isTraceEnabled) {
        trace = new TraceExpression(exp_0);
        $setConstructType(trace, this$static.elementName_0);
        $setObjectName(trace, $getObjectName_1(this$static));
        exp_0 = trace;
    }
    fn = new UserFunction;
    fn.body_0 = exp_0;
    $setContainer(exp_0, fn);
    $setFunctionName_0(fn, $getObjectName_1(this$static));
    $setParameterDefinitions(this$static, fn);
    $setResultType(fn, this$static.resultType);
    fn.sourceLocator = this$static;
    fn.executable = exec_0;
    this$static.compiledFunction = fn;
    $fixupInstruction(this$static, fn);
}

function $fixupInstruction(this$static, compiledFunction){
    var call_0, call$iterator, err;
    make_0((!this$static.staticContext && (this$static.staticContext = new ExpressionContext(this$static)) , this$static.staticContext), $getPreparedStylesheet(this$static));
    try {
        for (call$iterator = new AbstractList$IteratorImpl(this$static.references); call$iterator.i < call$iterator.this$01_0.size_1();) {
            call_0 = (checkCriticalElement(call$iterator.i < call$iterator.this$01_0.size_1()) , dynamicCast(call$iterator.this$01_0.get_1(call$iterator.last = call$iterator.i++), 261));
            call_0.function_$ = compiledFunction;
            $checkFunctionCall(call_0, compiledFunction);
        }
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            $compileError(this$static, err);
        }
        else 
            throw unwrap($e0);
    }
}

function $getNumberOfArguments(this$static){
    var child, child$array, child$index, child$max;
    if (this$static.numberOfArguments == -1) {
        this$static.numberOfArguments = 0;
        for (child$array = this$static.children == null?EMPTY_NODE_LIST:instanceOf(this$static.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this$static.children, 10)]):dynamicCast(this$static.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
            child = child$array[child$index];
            if (instanceOf(child, 76)) {
                ++this$static.numberOfArguments;
            }
            else {
                return this$static.numberOfArguments;
            }
        }
    }
    return this$static.numberOfArguments;
}

function $getObjectName_1(this$static){
    var qn;
    qn = $getObjectName(this$static);
    if (!qn) {
        try {
            qn = dynamicCast($checkAttribute(this$static, 'name', 'q1'), 8);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (!instanceOf($e0, 4))
                throw unwrap($e0);
        }
        this$static.objectName = qn;
    }
    return qn;
}

function $isOverriding(this$static){
    var b;
    if (!this$static.prepared) {
        try {
            b = dynamicCast($checkAttribute(this$static, 'override', 'b'), 116);
            !!b && (this$static.override = b.value_0);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (!instanceOf($e0, 4))
                throw unwrap($e0);
        }
    }
    return this$static.override;
}

function $setParameterDefinitions(this$static, fn){
    var child, child$array, child$index, child$max, count, param, params;
    params = initDim(Lclient_net_sf_saxon_ce_expr_instruct_UserFunctionParameter_2_classLit, $intern_1, 319, $getNumberOfArguments(this$static), 0, 1);
    fn.parameterDefinitions = params;
    count = 0;
    for (child$array = this$static.children == null?EMPTY_NODE_LIST:instanceOf(this$static.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this$static.children, 10)]):dynamicCast(this$static.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
        child = child$array[child$index];
        if (instanceOf(child, 76)) {
            param = new UserFunctionParameter;
            params[count++] = param;
            $setRequiredType_2(param, $getRequiredType_0(dynamicCast(child, 76)));
            $setVariableQName_1(param, $getObjectName(dynamicCast(child, 76)));
            $setSlotNumber_2(param, dynamicCast(child, 76).slotNumber);
            $fixupBinding(dynamicCast(child, 76), param);
        }
    }
}

function $typeCheckBody(this$static){
    var err, exp_0, exp2, role, visitor;
    exp_0 = this$static.compiledFunction.body_0;
    exp2 = exp_0;
    visitor = make_0((!this$static.staticContext && (this$static.staticContext = new ExpressionContext(this$static)) , this$static.staticContext), $getPreparedStylesheet(this$static));
    try {
        exp2 = $typeCheck_1(visitor, exp_0, null);
        if (this$static.resultType) {
            role = new RoleLocator(5, $getDisplayName_0($getObjectName_1(this$static)), 0);
            role.errorCode = 'XTTE0780';
            exp2 = staticTypeCheck_1(exp2, this$static.resultType, false, role);
        }
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            !err.locator && (err.locator = this$static);
            $compileError(this$static, err);
        }
        else 
            throw unwrap($e0);
    }
    exp2 != exp_0 && $setBody(this$static.compiledFunction, exp2);
}

function XSLFunction(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
    this.references = new ArrayList_0(10);
}

defineClass(178, 11, {28:1, 15:1, 7:1, 14:1, 11:1, 194:1, 178:1, 27:1, 10:1, 31:1, 23:1}, XSLFunction);
_.compile = function compile_23(exec_0, decl){
    $compileAsExpression(this, exec_0, decl);
    return null;
}
;
_.fixupReferences = function fixupReferences_0(){
    var reference, reference$iterator;
    for (reference$iterator = new AbstractList$IteratorImpl(this.references); reference$iterator.i < reference$iterator.this$01_0.size_1();) {
        reference = (checkCriticalElement(reference$iterator.i < reference$iterator.this$01_0.size_1()) , dynamicCast(reference$iterator.this$01_0.get_1(reference$iterator.last = reference$iterator.i++), 261));
        $setStaticType_0(reference, this.resultType);
    }
    $fixupReferences(this);
}
;
_.getObjectName = function getObjectName_1(){
    return $getObjectName_1(this);
}
;
_.index_1 = function index_3(decl, top_0){
    $indexFunction(top_0, decl);
}
;
_.isDeclaration = function isDeclaration_4(){
    return true;
}
;
_.isPermittedChild = function isPermittedChild_2(child){
    return instanceOf(child, 76);
}
;
_.mayContainParam = function mayContainParam_0(attName){
    return !$equals_5('required', attName);
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_10(){
    return true;
}
;
_.optimize_0 = function optimize_62(declaration){
    var err, exp_0, exp2, tailCalls, visitor;
    exp_0 = this.compiledFunction.body_0;
    visitor = make_0((!this.staticContext && (this.staticContext = new ExpressionContext(this)) , this.staticContext), $getPreparedStylesheet(this));
    exp2 = exp_0;
    try {
        exp2 = exp_0.optimize(visitor, null);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            !err.locator && (err.locator = this);
            $compileError(this, err);
        }
        else 
            throw unwrap($e0);
    }
    exp2 != exp_0 && $setBody(this.compiledFunction, exp2);
    tailCalls = exp2.markTailFunctionCalls($getObjectName_1(this), $getNumberOfArguments(this));
    if (tailCalls != 0) {
        $setTailRecursive(this.compiledFunction, tailCalls > 1);
        $setBody(this.compiledFunction, new TailCallLoop(this.compiledFunction));
    }
    $allocateSlots(this.compiledFunction, $getNumberOfArguments(this));
    $computeEvaluationMode(this.compiledFunction);
}
;
_.prepareAttributes = function prepareAttributes_22(){
    var b;
    if (this.prepared) {
        return;
    }
    this.prepared = true;
    $setObjectName_0(this, dynamicCast($checkAttribute(this, 'name', 'q1'), 8));
    this.resultType = dynamicCast($checkAttribute(this, 'as', 'z'), 55);
    b = dynamicCast($checkAttribute(this, 'override', 'b'), 116);
    !!b && (this.override = b.value_0);
    $checkForUnknownAttributes(this);
    !this.resultType && (this.resultType = ($clinit_SequenceType() , ANY_SEQUENCE));
    $equals_5($getNamespaceURI($getObjectName_1(this)), '') && $compileError_2(this, 'Function name must have a namespace prefix', 'XTSE0740');
}
;
_.validate = function validate_23(decl){
    instanceOf($getParent_0(this), 61) || $compileError_2(this, 'Element must be used only at top level of stylesheet', 'XTSE0010');
    $getNumberOfArguments(this);
}
;
_.numberOfArguments = -1;
_.override = true;
_.prepared = false;
var Lclient_net_sf_saxon_ce_style_XSLFunction_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLFunction', 178, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function $checkAgainstRequiredType(this$static, required){
    var category, err, errorCode, role;
    try {
        if (required) {
            if (this$static.select) {
                category = 3;
                errorCode = 'XTTE0570';
                if (instanceOf(this$static, 76)) {
                    category = 8;
                    errorCode = 'XTTE0600';
                }
                else if (instanceOf(this$static, 154)) {
                    category = 8;
                    errorCode = 'XTTE0590';
                }
                role = new RoleLocator(category, !this$static.attributeList?null:$getValue_0(this$static.attributeList, '', 'name'), 0);
                role.errorCode = errorCode;
                this$static.select = staticTypeCheck_1(this$static.select, required, false, role);
            }
        }
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            err.locator = this$static;
            $compileError(this$static, err);
            this$static.select = new ErrorExpression(err);
        }
        else 
            throw unwrap($e0);
    }
}

function $initializeInstruction(this$static, exec_0, decl, var_$){
    var b, doc, err, exp2, gvar, role, visitor;
    $init(var_$, this$static.select, $getObjectName(this$static));
    $setRequiredParam(var_$, this$static.requiredParam);
    $setImplicitlyRequiredParam(var_$, this$static.implicitlyRequiredParam);
    $setRequiredType_0(var_$, this$static.requiredType);
    $setTunnel(var_$, this$static.tunnel);
    if (this$static.children != null) {
        if (!this$static.requiredType) {
            doc = new DocumentInstr(this$static.textonly, this$static.constantText, getBaseURI_7(this$static));
            $adoptChildExpression(var_$, doc);
            b = $compileSequenceConstructor_0(this$static, exec_0, decl, $iterateAxis_1(this$static, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
            !b && (b = new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10)));
            doc.content_0 = b;
            $adoptChildExpression(doc, b);
            this$static.select = doc;
            $setSelectExpression(var_$, doc);
        }
        else {
            this$static.select = $compileSequenceConstructor_0(this$static, exec_0, decl, $iterateAxis_1(this$static, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
            $adoptChildExpression(var_$, this$static.select);
            !this$static.select && (this$static.select = new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10)));
            try {
                if (this$static.requiredType) {
                    $setContainer(var_$, this$static);
                    $setContainer(this$static.select, this$static);
                    role = new RoleLocator(3, !this$static.attributeList?null:$getValue_0(this$static.attributeList, '', 'name'), 0);
                    role.errorCode = 'XTTE0570';
                    this$static.select = $simplify(make_0((!this$static.staticContext && (this$static.staticContext = new ExpressionContext(this$static)) , this$static.staticContext), $getPreparedStylesheet(this$static)), this$static.select);
                    this$static.select = staticTypeCheck_1(this$static.select, this$static.requiredType, false, role);
                }
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 4)) {
                    err = $e0;
                    err.locator = this$static;
                    $compileError(this$static, err);
                    this$static.select = new ErrorExpression(err);
                }
                else 
                    throw unwrap($e0);
            }
            $setSelectExpression(var_$, this$static.select);
        }
    }
    if (this$static.global) {
        gvar = dynamicCast(var_$, 230);
        $setContainer(var_$, gvar);
        exp2 = this$static.select;
        if (exp2) {
            try {
                visitor = make_0((!this$static.staticContext && (this$static.staticContext = new ExpressionContext(this$static)) , this$static.staticContext), $getPreparedStylesheet(this$static));
                $setContainer(exp2, gvar);
                exp2 = $typeCheck_1(visitor, $simplify(visitor, this$static.select), ($clinit_Type() , NODE_TYPE));
            }
            catch ($e1) {
                $e1 = wrap_0($e1);
                if (instanceOf($e1, 4)) {
                    err = $e1;
                    $compileError(this$static, err);
                }
                else 
                    throw unwrap($e1);
            }
            loggingIsEnabled() && isTraceEnabled && (exp2 = makeTraceInstruction(this$static, exp2));
        }
        exp2 != this$static.select && $setSelectExpression(gvar, exp2);
    }
}

function $prepareAttributes_2(this$static){
    var b;
    $setObjectName_0(this$static, dynamicCast($checkAttribute(this$static, 'name', 'q1'), 8));
    this$static.select = dynamicCast($checkAttribute(this$static, 'select', 'e'), 6);
    this$static.requiredType = dynamicCast($checkAttribute(this$static, 'as', 'z'), 55);
    b = dynamicCast($checkAttribute(this$static, 'required', 'b'), 116);
    !!b && (this$static.requiredParam = b.value_0);
    b = dynamicCast($checkAttribute(this$static, 'tunnel', 'b'), 116);
    !!b && (this$static.tunnel = b.value_0);
    $checkForUnknownAttributes(this$static);
    !!this$static.select && !this$static.allowsValue() && $compileError_2(this$static, 'Function parameters cannot have a default value', 'XTSE0760');
    this$static.tunnel && instanceOf(this$static, 76) && !instanceOf($getParent_0(this$static), 216) && $compileError_2(this$static, "For attribute 'tunnel' within an " + $getDisplayName_1($getParent_0(this$static)) + " parameter, the only permitted value is 'no'", 'XTSE0020');
}

function $validate_1(this$static){
    this$static.global = instanceOf($getParent_0(this$static), 61);
    !!this$static.select && this$static.children != null && $compileError_2(this$static, 'An ' + $getDisplayName_1(this$static) + ' element with a select attribute must be empty', 'XTSE0620');
    this$static.children != null && !this$static.allowsValue() && $compileError_2(this$static, 'Function parameters cannot have a default value', 'XTSE0760');
}

function XSLGeneralVariable(){
    StyleElement.call(this);
}

defineClass(452, 11, $intern_68);
_.allowsValue = function allowsValue(){
    return true;
}
;
_.getReturnedItemType = function getReturnedItemType_4(){
    return null;
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_11(){
    return true;
}
;
_.postValidate = function postValidate_1(){
    var first, kids;
    $checkAgainstRequiredType(this, this.requiredType);
    if (!this.select && this.allowsValue()) {
        this.textonly = true;
        kids = $iterateAxis_1(this, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
        first = dynamicCast(kids.next_0(), 7);
        if (!first) {
            !this.requiredType?(this.select = new StringLiteral(($clinit_StringValue() , EMPTY_STRING))):instanceOf(this, 76)?this.requiredParam || ((this.requiredType.cardinality & $intern_17) != 0?(this.select = new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10))):(this.implicitlyRequiredParam = true)):(this.requiredType.cardinality & $intern_17) != 0?(this.select = new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10))):$compileError_2(this, 'The implicit value () is not valid for the declared type', 'XTTE0570');
        }
        else {
            !kids.next_0() && first.getNodeKind() == 3 && (this.constantText = first.getStringValue());
            this.textonly = $getCommonChildItemType(this) == ($clinit_NodeKindTest() , TEXT);
        }
    }
    this.select = $typeCheck_6(this, this.select);
}
;
_.prepareAttributes = function prepareAttributes_23(){
    $prepareAttributes_2(this);
}
;
_.validate = function validate_24(decl){
    $validate_1(this);
}
;
_.compiledVariable = null;
_.constantText = null;
_.global = false;
_.implicitlyRequiredParam = false;
_.redundant = false;
_.requiredParam = false;
_.requiredType = null;
_.select = null;
_.textonly = false;
_.tunnel = false;
var Lclient_net_sf_saxon_ce_style_XSLGeneralVariable_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLGeneralVariable', 452, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLIf(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(718, 11, $intern_68, XSLIf);
_.compile = function compile_24(exec_0, decl){
    var action, actions, conditions, inst, testVal;
    if (instanceOf(this.test_0, 9)) {
        testVal = dynamicCast(this.test_0, 9).value_0;
        try {
            return effectiveBooleanValue_2(testVal.iterate())?$compileSequenceConstructor_0(this, exec_0, decl, $iterateAxis_1(this, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7))):null;
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (!instanceOf($e0, 4))
                throw unwrap($e0);
        }
    }
    action = $compileSequenceConstructor_0(this, exec_0, decl, $iterateAxis_1(this, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
    if (!action) {
        return null;
    }
    conditions = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [this.test_0]);
    actions = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_expr_Expression_2_classLit, 1), $intern_16, 6, 0, [action]);
    inst = new Choose(conditions, actions);
    loggingIsEnabled() && isTraceEnabled && $AddTraceProperty_0(inst, 'test', !this.attributeList?null:$getValue_0(this.attributeList, '', 'test'));
    return inst;
}
;
_.getReturnedItemType = function getReturnedItemType_5(){
    return $getCommonChildItemType(this);
}
;
_.isInstruction = function isInstruction_17(){
    return true;
}
;
_.markTailCalls = function markTailCalls_4(){
    var last;
    last = $getLastChildInstruction(this);
    return !!last && last.markTailCalls();
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_12(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_24(){
    this.test_0 = dynamicCast($checkAttribute(this, 'test', 'e1'), 6);
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_25(decl){
    this.test_0 = $typeCheck_6(this, this.test_0);
}
;
var Lclient_net_sf_saxon_ce_style_XSLIf_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLIf', 718, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLImportSchema(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(719, 11, $intern_68, XSLImportSchema);
_.compile = function compile_25(exec_0, decl){
    return null;
}
;
_.isDeclaration = function isDeclaration_5(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_25(){
    $checkAttribute(this, 'schema-location', 's');
    $checkAttribute(this, 'namespace', 's');
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_26(decl){
    instanceOf($getParent_0(this), 61) || $compileError_2(this, 'Element must be used only at top level of stylesheet', 'XTSE0010');
    $compileError_0(this, 'This XSLT processor is not schema-aware');
}
;
var Lclient_net_sf_saxon_ce_style_XSLImportSchema_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLImportSchema', 719, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLKey(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(720, 11, {28:1, 15:1, 7:1, 14:1, 11:1, 194:1, 27:1, 10:1, 31:1, 23:1}, XSLKey);
_.compile = function compile_26(exec_0, decl){
    var body_0, collator, e, err, keydef, km, role, slots, useType, visitor;
    !this.staticContext && (this.staticContext = new ExpressionContext(this));
    collator = null;
    if (this.collationName != null) {
        collator = $getNamedCollation(($getPreparedStylesheet(this) , this.collationName));
        if (!collator) {
            $compileError_2(this, 'The collation name ' + wrap(this.collationName, 7) + ' is not recognized', 'XTSE1210');
            collator = ($clinit_CodepointCollator() , $clinit_CodepointCollator() , theInstance_0);
        }
        if (instanceOf(collator, 161)) {
            collator = null;
            this.collationName = null;
        }
        else {
            $compileError_2(this, 'The collation used for xsl:key must be capable of generating collation keys', 'XTSE1210');
        }
    }
    if (!this.use) {
        body_0 = $compileSequenceConstructor_0(this, exec_0, decl, $iterateAxis_1(this, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
        try {
            visitor = make_0((!this.staticContext && (this.staticContext = new ExpressionContext(this)) , this.staticContext), $getPreparedStylesheet(this));
            this.use = new Atomizer(body_0);
            this.use = $simplify(visitor, this.use);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                e = $e0;
                $compileError(this, e);
            }
            else 
                throw unwrap($e0);
        }
        try {
            role = new RoleLocator(4, 'xsl:key/use', 0);
            this.use = staticTypeCheck_1(this.use, ($clinit_SequenceType() , new SequenceType(($clinit_AtomicType() , ANY_ATOMIC), $intern_12)), false, role);
            this.use = $typeCheck_1(make_0((!this.staticContext && (this.staticContext = new ExpressionContext(this)) , this.staticContext), $getPreparedStylesheet(this)), this.use, this.match_0.getNodeTest());
        }
        catch ($e1) {
            $e1 = wrap_0($e1);
            if (instanceOf($e1, 4)) {
                err = $e1;
                $compileError(this, err);
            }
            else 
                throw unwrap($e1);
        }
    }
    useType = dynamicCast(this.use.getItemType(), 43);
    if ($compareTo_5($getEffectiveVersion(this), ($clinit_DecimalValue() , TWO)) < 0) {
        if (useType != ($clinit_AtomicType() , STRING) && useType != UNTYPED_ATOMIC) {
            this.use = new AtomicSequenceConverter(this.use, STRING);
        }
    }
    slots = this.match_0.allocateSlots(0);
    $allocatePatternSlots($getContainingStylesheet(this).principalStylesheetModule, slots);
    km = $getKeyManager($getPreparedStylesheet(this));
    keydef = new KeyDefinition(this.match_0, this.use, this.collationName, collator);
    keydef.sourceLocator = this;
    $setExecutable(keydef, $getPreparedStylesheet(this));
    $setBackwardsCompatible(keydef, $compareTo_5($getEffectiveVersion(this), TWO) < 0);
    keydef.numberOfSlots = allocateSlots(keydef.body_0, 0);
    try {
        $addKeyDefinition_0(km, $getObjectName(this), keydef);
    }
    catch ($e2) {
        $e2 = wrap_0($e2);
        if (instanceOf($e2, 4)) {
            err = $e2;
            $compileError(this, err);
        }
        else 
            throw unwrap($e2);
    }
    return null;
}
;
_.index_1 = function index_4(decl, top_0){
    var keyName;
    keyName = $getObjectName(this);
    !!keyName && $preRegisterKeyDefinition($getKeyManager(top_0.preparedStylesheet), keyName);
}
;
_.isDeclaration = function isDeclaration_6(){
    return true;
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_13(){
    return true;
}
;
_.optimize_0 = function optimize_63(declaration){
}
;
_.prepareAttributes = function prepareAttributes_26(){
    $setObjectName_0(this, dynamicCast($checkAttribute(this, 'name', 'q1'), 8));
    this.use = dynamicCast($checkAttribute(this, 'use', 'e'), 6);
    this.match_0 = dynamicCast($checkAttribute(this, 'match', 'p1'), 117);
    this.collationName = dynamicCastToString($checkAttribute(this, 'collation', 'w'));
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_27(decl){
    var base, collationURI, err, role;
    instanceOf($getParent_0(this), 61) || $compileError_2(this, 'Element must be used only at top level of stylesheet', 'XTSE0010');
    if (this.use) {
        this.children != null && $compileError_2(this, 'An xsl:key element with a @use attribute must be empty', 'XTSE1205');
        try {
            role = new RoleLocator(4, 'xsl:key/use', 0);
            this.use = staticTypeCheck_1(this.use, ($clinit_SequenceType() , new SequenceType(($clinit_AtomicType() , ANY_ATOMIC), $intern_12)), false, role);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                err = $e0;
                $compileError(this, err);
            }
            else 
                throw unwrap($e0);
        }
    }
    else {
        this.children != null || $compileError_2(this, 'An xsl:key element must either have a @use attribute or have content', 'XTSE1205');
    }
    this.use = $typeCheck_6(this, this.use);
    this.match_0 = $typeCheck_7(this, 'match', this.match_0);
    !!this.use && (this.use = $typeCheck_1(make_0((!this.staticContext && (this.staticContext = new ExpressionContext(this)) , this.staticContext), $getPreparedStylesheet(this)), this.use, this.match_0.getNodeTest()));
    if (this.collationName != null) {
        try {
            collationURI = new URI_2(this.collationName);
            if (collationURI.m_scheme == null) {
                base = new URI_1(getBaseURI_7(this));
                collationURI = new URI_0(base, $toString_1(collationURI));
                this.collationName = $toString_1(collationURI);
            }
        }
        catch ($e1) {
            $e1 = wrap_0($e1);
            if (instanceOf($e1, 51)) {
                $compileError_0(this, "Collation name '" + this.collationName + "' is not a valid URI");
            }
            else 
                throw unwrap($e1);
        }
    }
    else {
        this.collationName = $getDefaultCollationName(this);
    }
}
;
var Lclient_net_sf_saxon_ce_style_XSLKey_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLKey', 720, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLMatchingSubstring(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(339, 11, {28:1, 15:1, 7:1, 14:1, 11:1, 339:1, 27:1, 10:1, 31:1, 23:1}, XSLMatchingSubstring);
_.compile = function compile_27(exec_0, decl){
    throw new UnsupportedOperationException_0('XSLMatchingSubstring#compile() should not be called');
}
;
_.getReturnedItemType = function getReturnedItemType_6(){
    return $getCommonChildItemType(this);
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_14(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_27(){
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_28(decl){
    instanceOf($getParent_0(this), 395) || $compileError_2(this, $getDisplayName_1(this) + ' must be immediately within xsl:analyze-string', 'XTSE0010');
}
;
var Lclient_net_sf_saxon_ce_style_XSLMatchingSubstring_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLMatchingSubstring', 339, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLMessage(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(721, 11, $intern_68, XSLMessage);
_.compile = function compile_28(exec_0, decl){
    var b, inst;
    b = $compileSequenceConstructor_0(this, exec_0, decl, $iterateAxis_1(this, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
    if (b) {
        if (!this.select) {
            this.select = b;
        }
        else {
            this.select = makeBlock(this.select, b);
            $setSourceLocator(this.select, this);
        }
    }
    !this.select && (this.select = new StringLiteral_0('xsl:message (no content)'));
    inst = new Message(this.select, this.terminate);
    return inst;
}
;
_.isInstruction = function isInstruction_18(){
    return true;
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_15(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_28(){
    this.terminate = dynamicCast($checkAttribute(this, 'terminate', 'a'), 6);
    this.select = dynamicCast($checkAttribute(this, 'select', 'e'), 6);
    !this.terminate && (this.terminate = $makeAttributeValueTemplate(this, 'no'));
}
;
_.validate = function validate_29(decl){
    this.select = $typeCheck_6(this, this.select);
    this.terminate = $typeCheck_6(this, this.terminate);
}
;
_.select = null;
_.terminate = null;
var Lclient_net_sf_saxon_ce_style_XSLMessage_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLMessage', 721, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLMinorNodeConstructor(){
    $clinit_ParentNodeImpl();
    XSLLeafNodeConstructor.call(this);
}

defineClass(451, 293, $intern_68, XSLMinorNodeConstructor);
_.compile = function compile_29(exec_0, decl){
    var inst;
    inst = $equals_5($getLocalPart_0(this), 'namespace')?new NamespaceConstructor(this.name_0):new ProcessingInstruction_0(this.name_0);
    $compileContent(this, exec_0, decl, inst, new StringLiteral(($clinit_StringValue() , SINGLE_SPACE)));
    return inst;
}
;
_.getErrorCodeForSelectPlusContent = function getErrorCodeForSelectPlusContent_1(){
    return $equals_5($getLocalPart_0(this), 'namespace')?'XTSE0910':'XTSE0880';
}
;
_.prepareAttributes = function prepareAttributes_29(){
    this.name_0 = dynamicCast($checkAttribute(this, 'name', 'a1'), 6);
    this.select = dynamicCast($checkAttribute(this, 'select', 'e'), 6);
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_30(decl){
    this.name_0 = $typeCheck_6(this, this.name_0);
    this.select = $typeCheck_6(this, this.select);
    $validate(this);
}
;
var Lclient_net_sf_saxon_ce_style_XSLMinorNodeConstructor_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLMinorNodeConstructor', 451, Lclient_net_sf_saxon_ce_style_XSLLeafNodeConstructor_2_classLit);
function XSLNamespaceAlias(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(380, 11, {28:1, 15:1, 7:1, 14:1, 11:1, 380:1, 27:1, 10:1, 31:1, 23:1}, XSLNamespaceAlias);
_.compile = function compile_30(exec_0, decl){
    return null;
}
;
_.index_1 = function index_5(decl, top_0){
    $add_16(top_0.namespaceAliasList, decl);
    ++top_0.numberOfAliases;
}
;
_.isDeclaration = function isDeclaration_7(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_30(){
    var resolver, resultPrefix, resultURI, stylesheetPrefix;
    stylesheetPrefix = dynamicCastToString($checkAttribute(this, 'stylesheet-prefix', 'w1'));
    resultPrefix = dynamicCastToString($checkAttribute(this, 'result-prefix', 'w1'));
    $checkForUnknownAttributes(this);
    $equals_5(stylesheetPrefix, '#default') && (stylesheetPrefix = '');
    $equals_5(resultPrefix, '#default') && (resultPrefix = '');
    resolver = new InscopeNamespaceResolver(this);
    this.stylesheetURI = $getURIForPrefix(resolver, stylesheetPrefix, true);
    if (this.stylesheetURI == null) {
        $compileError_2(this, 'stylesheet-prefix ' + stylesheetPrefix + ' has not been declared', 'XTSE0812');
        this.stylesheetURI = '';
        this.resultNamespaceBinding = ($clinit_NamespaceBinding() , DEFAULT_UNDECLARATION);
        return;
    }
    resultURI = $getURIForPrefix(resolver, resultPrefix, true);
    if (resultURI == null) {
        $compileError_2(this, 'result-prefix ' + resultPrefix + ' has not been declared', 'XTSE0812');
        this.stylesheetURI = '';
        resultURI = '';
    }
    this.resultNamespaceBinding = new NamespaceBinding(resultPrefix, resultURI);
}
;
_.validate = function validate_31(decl){
    instanceOf($getParent_0(this), 61) || $compileError_2(this, 'Element must be used only at top level of stylesheet', 'XTSE0010');
}
;
var Lclient_net_sf_saxon_ce_style_XSLNamespaceAlias_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLNamespaceAlias', 380, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLNextMatch(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(722, 11, $intern_68, XSLNextMatch);
_.compile = function compile_31(exec_0, decl){
    var inst;
    inst = new ApplyImports(2);
    $setActualParameters(inst, $getWithParamInstructions(this, exec_0, decl, false, inst), $getWithParamInstructions(this, exec_0, decl, true, inst));
    return inst;
}
;
_.isInstruction = function isInstruction_19(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_31(){
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_32(decl){
    $onlyAllow(this, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['fallback', 'with-param']));
}
;
var Lclient_net_sf_saxon_ce_style_XSLNextMatch_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLNextMatch', 722, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLNumber(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(723, 11, $intern_68, XSLNumber);
_.compile = function compile_32(exec_0, decl){
    var expr, inst;
    expr = new NumberInstruction(this.select, this.level_0, this.count, this.from, this.value_0, this.format, this.groupSize, this.groupSeparator, this.letterValue, this.ordinal, this.lang_0, this.formatter, this.numberer, this.hasVariablesInPatterns, $compareTo_5($getEffectiveVersion(this), ($clinit_DecimalValue() , TWO)) < 0);
    $setSourceLocator(expr, this);
    inst = new ValueOf(expr);
    $setSourceLocator(inst, this);
    return inst;
}
;
_.getReturnedItemType = function getReturnedItemType_7(){
    return $clinit_NodeKindTest() , TEXT;
}
;
_.isInstruction = function isInstruction_20(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_32(){
    var language, levelAtt;
    this.select = dynamicCast($checkAttribute(this, 'select', 'e'), 6);
    this.value_0 = dynamicCast($checkAttribute(this, 'value', 'e'), 6);
    this.count = dynamicCast($checkAttribute(this, 'count', 'p'), 117);
    this.from = dynamicCast($checkAttribute(this, 'from', 'p'), 117);
    levelAtt = dynamicCastToString($checkAttribute(this, 'level', 'w'));
    this.format = dynamicCast($checkAttribute(this, 'format', 'a'), 6);
    this.lang_0 = dynamicCast($checkAttribute(this, 'lang', 'a'), 6);
    this.letterValue = dynamicCast($checkAttribute(this, 'letter-value', 'a'), 6);
    this.groupSize = dynamicCast($checkAttribute(this, 'grouping-size', 'a'), 6);
    this.groupSeparator = dynamicCast($checkAttribute(this, 'grouping-separator', 'a'), 6);
    this.ordinal = dynamicCast($checkAttribute(this, 'ordinal', 'a'), 6);
    $checkForUnknownAttributes(this);
    !!this.value_0 && (!!this.select || !!this.count || !!this.from || levelAtt != null) && $compileError_2(this, 'If the value attribute is present then select, count, from, and level must be absent', 'XTSE0975');
    (!!this.count && $indexOf_3(this.count.toString$(), fromCodePoint(36)) >= 0 || !!this.count && $indexOf_3(this.count.toString$(), fromCodePoint(36)) >= 0) && (this.hasVariablesInPatterns = true);
    levelAtt == null?(this.level_0 = 0):$equals_5(levelAtt, 'single')?(this.level_0 = 0):$equals_5(levelAtt, 'multiple')?(this.level_0 = 1):$equals_5(levelAtt, 'any')?(this.level_0 = 2):$compileError_2(this, 'Invalid value for level attribute', 'XTSE0020');
    this.level_0 == 0 && !this.from && !this.count && (this.level_0 = 3);
    if (this.format) {
        if (instanceOf(this.format, 21)) {
            this.formatter = new NumberFormatter;
            $prepare_0(this.formatter, $getPrimitiveStringValue(dynamicCast(dynamicCast(this.format, 21).value_0, 12)));
        }
    }
    else {
        this.formatter = new NumberFormatter;
        $prepare_0(this.formatter, '1');
    }
    if (!this.groupSize != !this.groupSeparator) {
        this.groupSize = null;
        this.groupSeparator = null;
    }
    if (!this.lang_0) {
        this.numberer = new Numberer_en;
    }
    else {
        if (instanceOf(this.lang_0, 21)) {
            language = $getPrimitiveStringValue(dynamicCast(dynamicCast(this.lang_0, 21).value_0, 12));
            if (language.length != 0) {
                $clinit_StringValue();
                if (!$matches_1(language, '[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*')) {
                    $compileError_2(this, 'The lang attribute must be a valid language code', 'XTDE0030');
                    this.lang_0 = new StringLiteral(EMPTY_STRING);
                }
            }
            this.numberer = new Numberer_en;
        }
    }
}
;
_.validate = function validate_33(decl){
    var err, role;
    this.children != null && $compileError_2(this, 'Element must be empty', 'XTSE0260');
    this.select = $typeCheck_6(this, this.select);
    this.value_0 = $typeCheck_6(this, this.value_0);
    this.format = $typeCheck_6(this, this.format);
    this.groupSize = $typeCheck_6(this, this.groupSize);
    this.groupSeparator = $typeCheck_6(this, this.groupSeparator);
    this.letterValue = $typeCheck_6(this, this.letterValue);
    this.ordinal = $typeCheck_6(this, this.ordinal);
    this.lang_0 = $typeCheck_6(this, this.lang_0);
    this.from = $typeCheck_7(this, 'from', this.from);
    this.count = $typeCheck_7(this, 'count', this.count);
    if (this.select) {
        try {
            role = new RoleLocator(4, 'xsl:number/select', 0);
            role.errorCode = 'XTTE1000';
            this.select = staticTypeCheck_1(this.select, ($clinit_SequenceType() , SINGLE_NODE), false, role);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                err = $e0;
                $compileError(this, err);
            }
            else 
                throw unwrap($e0);
        }
    }
}
;
_.count = null;
_.format = null;
_.formatter = null;
_.from = null;
_.groupSeparator = null;
_.groupSize = null;
_.hasVariablesInPatterns = false;
_.lang_0 = null;
_.letterValue = null;
_.level_0 = 0;
_.numberer = null;
_.ordinal = null;
_.select = null;
_.value_0 = null;
var Lclient_net_sf_saxon_ce_style_XSLNumber_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLNumber', 723, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLOtherwise(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(294, 11, {28:1, 15:1, 7:1, 14:1, 11:1, 294:1, 27:1, 10:1, 31:1, 23:1}, XSLOtherwise);
_.compile = function compile_33(exec_0, decl){
    throw new UnsupportedOperationException_0('XSLOtherwise#compile() should not be called');
}
;
_.getReturnedItemType = function getReturnedItemType_8(){
    return $getCommonChildItemType(this);
}
;
_.markTailCalls = function markTailCalls_5(){
    var last;
    last = $getLastChildInstruction(this);
    return !!last && last.markTailCalls();
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_16(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_33(){
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_34(decl){
    instanceOf($getParent_0(this), 338) || $compileError_2(this, 'xsl:otherwise must be immediately within xsl:choose', 'XTSE0010');
}
;
var Lclient_net_sf_saxon_ce_style_XSLOtherwise_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLOtherwise', 294, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLOutput(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(724, 11, $intern_68, XSLOutput);
_.compile = function compile_34(exec_0, decl){
    return null;
}
;
_.isDeclaration = function isDeclaration_8(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_34(){
}
;
_.validate = function validate_35(decl){
    instanceOf($getParent_0(this), 61) || $compileError_2(this, 'Element must be used only at top level of stylesheet', 'XTSE0010');
    this.children != null && $compileError_2(this, 'Element must be empty', 'XTSE0260');
}
;
var Lclient_net_sf_saxon_ce_style_XSLOutput_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLOutput', 724, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLOutputCharacter(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(725, 11, $intern_68, XSLOutputCharacter);
_.compile = function compile_35(exec_0, decl){
    return null;
}
;
_.prepareAttributes = function prepareAttributes_35(){
    $checkAttribute(this, 'character', 's1');
    $checkAttribute(this, 'string', 's1');
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_36(decl){
    this.children != null && $compileError_2(this, 'Element must be empty', 'XTSE0260');
    instanceOf($getParent_0(this), 397) || $compileError_2(this, 'xsl:output-character may appear only as a child of xsl:character-map', 'XTSE0010');
}
;
var Lclient_net_sf_saxon_ce_style_XSLOutputCharacter_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLOutputCharacter', 725, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function $fixupBinding(this$static, binding){
    var reference, reference$iterator;
    for (reference$iterator = new AbstractList$IteratorImpl(this$static.references); reference$iterator.i < reference$iterator.this$01_0.size_1();) {
        reference = (checkCriticalElement(reference$iterator.i < reference$iterator.this$01_0.size_1()) , dynamicCast(reference$iterator.this$01_0.get_1(reference$iterator.last = reference$iterator.i++), 62));
        reference.binding = binding;
        reference.staticProperties = -1;
    }
}

function XSLVariableDeclaration(){
    XSLGeneralVariable.call(this);
    this.references = new ArrayList_0(10);
}

defineClass(181, 452, {28:1, 15:1, 7:1, 14:1, 11:1, 194:1, 181:1, 27:1, 10:1, 31:1, 23:1});
_.fixupReferences = function fixupReferences_1(){
    var constantValue, properties, reference, reference$iterator, relation, th, type_0;
    type_0 = this.getRequiredType();
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    for (reference$iterator = new AbstractList$IteratorImpl(this.references); reference$iterator.i < reference$iterator.this$01_0.size_1();) {
        reference = (checkCriticalElement(reference$iterator.i < reference$iterator.this$01_0.size_1()) , dynamicCast(reference$iterator.this$01_0.get_1(reference$iterator.last = reference$iterator.i++), 62));
        constantValue = null;
        properties = 0;
        if (instanceOf(this, 254)) {
            if (instanceOf(this.select, 9)) {
                relation = $relationship(th, this.select.getItemType(), type_0.primaryType);
                (relation == 0 || relation == 2) && (constantValue = dynamicCast(this.select, 9).value_0);
            }
            !!this.select && (properties = $getSpecialProperties(this.select));
        }
        $setStaticType(reference, type_0, constantValue, properties);
    }
    $fixupReferences(this);
}
;
_.index_1 = function index_6(decl, top_0){
    $indexVariableDeclaration(top_0, decl);
}
;
_.isDeclaration = function isDeclaration_9(){
    return true;
}
;
_.isInstruction = function isInstruction_21(){
    return true;
}
;
_.optimize_0 = function optimize_64(declaration){
    var err, exp2, numberOfSlots, visitor;
    if (this.global && !this.redundant && !!this.select) {
        exp2 = this.select;
        visitor = make_0((!this.staticContext && (this.staticContext = new ExpressionContext(this)) , this.staticContext), $getPreparedStylesheet(this));
        try {
            exp2 = exp2.optimize(visitor, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                err = $e0;
                !err.locator && (err.locator = this);
                $compileError(this, err);
            }
            else 
                throw unwrap($e0);
        }
        numberOfSlots = allocateSlots(exp2, 0);
        $setContainsLocals(dynamicCast(this.compiledVariable, 230), numberOfSlots);
        if (exp2 != this.select) {
            this.select = exp2;
            $setSelectExpression(this.compiledVariable, this.select);
        }
    }
}
;
_.validate = function validate_37(decl){
    $validate_1(this);
    this.global && (this.redundant || (this.slotNumber = $getPreparedStylesheet(this).numberOfGlobals++));
}
;
_.slotNumber = -9876;
var Lclient_net_sf_saxon_ce_style_XSLVariableDeclaration_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLVariableDeclaration', 181, Lclient_net_sf_saxon_ce_style_XSLGeneralVariable_2_classLit);
function $getRequiredType_0(this$static){
    return this$static.requiredType?this$static.requiredType:($clinit_SequenceType() , ANY_SEQUENCE);
}

function XSLParam(){
    $clinit_ParentNodeImpl();
    XSLVariableDeclaration.call(this);
}

defineClass(76, 181, {28:1, 15:1, 7:1, 14:1, 11:1, 194:1, 76:1, 181:1, 27:1, 10:1, 31:1, 23:1}, XSLParam);
_.allowsValue = function allowsValue_0(){
    return !instanceOf($getParent_0(this), 178);
}
;
_.compile = function compile_36(exec_0, decl){
    var inst, pref, psm, role, slot;
    if (this.redundant) {
        return null;
    }
    if (instanceOf($getParent_0(this), 178)) {
        return null;
    }
    else {
        slot = this.slotNumber;
        if (this.requiredType) {
            pref = new SuppliedParameterReference(slot);
            $setSourceLocator(pref, this);
            role = new RoleLocator(8, !this.attributeList?null:$getValue_0(this.attributeList, '', 'name'), 0);
            role.errorCode = 'XTTE0590';
            this.conversion = staticTypeCheck_1(pref, this.requiredType, false, role);
        }
        if (this.global) {
            inst = new GlobalParam;
            $setExecutable_0(dynamicCast(inst, 306), $getPreparedStylesheet(this));
            $setContainer(inst, dynamicCast(inst, 306));
            this.requiredParam && $addRequiredParam($getPreparedStylesheet(this), $getObjectName(this));
            !!this.select && $setContainer(this.select, dynamicCast(inst, 230));
            this.compiledVariable = inst;
        }
        else {
            psm = $getContainingStylesheet(this).principalStylesheetModule;
            inst = new LocalParam;
            $setConversion(dynamicCast(inst, 231), this.conversion);
            $setParameterId(dynamicCast(inst, 231), $allocateUniqueParameterNumber(psm, $getObjectName(this)));
        }
        $initializeInstruction(this, exec_0, decl, inst);
        $setVariableQName_0(inst, $getObjectName(this));
        inst.slotNumber = slot;
        $setRequiredType_0(inst, this.requiredType?this.requiredType:($clinit_SequenceType() , ANY_SEQUENCE));
        $fixupBinding(this, inst);
        this.compiledVariable = inst;
        return inst;
    }
}
;
_.getRequiredType = function getRequiredType_4(){
    return $getRequiredType_0(this);
}
;
_.validate = function validate_38(decl){
    var index_0, node, parent_0, prec;
    parent_0 = $getParent_0(this);
    this.global = instanceOf(parent_0, 61);
    instanceOf(parent_0, 11) && dynamicCast(parent_0, 11).mayContainParam(null) || $compileError_2(this, 'xsl:param must be immediately within a template, function or stylesheet', 'XTSE0010');
    if (!this.global) {
        prec = $iterateAxis_1(this, 11, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
        index_0 = 0;
        while (true) {
            node = dynamicCast(prec.next_0(), 10);
            if (!node) {
                break;
            }
            if (instanceOf(node, 76)) {
                $equals_0($getObjectName(this), $getObjectName(dynamicCast(node, 76))) && $compileError_2(this, 'The name of the parameter is not unique', 'XTSE0580');
                ++index_0;
            }
            else 
                instanceOf(node, 11)?$compileError_2(this, 'xsl:param must not be preceded by other instructions', 'XTSE0010'):isWhite(node.getStringValue()) || $compileError_2(this, 'xsl:param must not be preceded by text', 'XTSE0010');
        }
        this.slotNumber = index_0;
    }
    if (this.requiredParam) {
        !!this.select && $compileError_2(this, "The select attribute should be omitted when required='yes'", 'XTSE0010');
        this.children != null && $compileError_2(this, "A parameter specifying required='yes' must have empty content", 'XTSE0010');
    }
    $validate_1(this);
    this.global && (this.redundant || (this.slotNumber = $getPreparedStylesheet(this).numberOfGlobals++));
}
;
_.conversion = null;
var Lclient_net_sf_saxon_ce_style_XSLParam_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLParam', 76, Lclient_net_sf_saxon_ce_style_XSLVariableDeclaration_2_classLit);
function XSLPerformSort(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(726, 11, $intern_68, XSLPerformSort);
_.compile = function compile_37(exec_0, decl){
    var body_0, e, sortKeys;
    sortKeys = $makeSortKeys(this, decl);
    if (this.select) {
        return new SortExpression(this.select, sortKeys);
    }
    else {
        body_0 = $compileSequenceConstructor_0(this, exec_0, decl, $iterateAxis_1(this, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
        !body_0 && (body_0 = new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10)));
        try {
            return new SortExpression($simplify(make_0((!this.staticContext && (this.staticContext = new ExpressionContext(this)) , this.staticContext), $getPreparedStylesheet(this)), body_0), sortKeys);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                e = $e0;
                $compileError(this, e);
                return null;
            }
            else 
                throw unwrap($e0);
        }
    }
}
;
_.getReturnedItemType = function getReturnedItemType_9(){
    return !this.select?$getCommonChildItemType(this):this.select.getItemType();
}
;
_.isInstruction = function isInstruction_22(){
    return true;
}
;
_.isPermittedChild = function isPermittedChild_3(child){
    return instanceOf(child, 143);
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_17(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_36(){
    this.select = dynamicCast($checkAttribute(this, 'select', 'e1'), 6);
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_39(decl){
    $checkSortComesFirst(this, true);
    !!this.select && $onlyAllow(this, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['fallback', 'sort']));
    this.select = $typeCheck_6(this, this.select);
}
;
_.select = null;
var Lclient_net_sf_saxon_ce_style_XSLPerformSort_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLPerformSort', 726, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLPreserveSpace(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(453, 11, $intern_68, XSLPreserveSpace);
_.compile = function compile_38(exec_0, decl){
    var localname, nt, prefix, preserve, qn, resolver, s, s$iterator, stripperRules, uri_0;
    preserve = $equals_5($getLocalPart_0(this), 'preserve-space')?($clinit_StripSpaceRules() , PRESERVE):($clinit_StripSpaceRules() , STRIP);
    stripperRules = $getStripperRules($getPreparedStylesheet(this));
    resolver = new InscopeNamespaceResolver(this);
    for (s$iterator = new AbstractList$IteratorImpl(tokenize(this.elements)); s$iterator.i < s$iterator.this$01_0.size_1();) {
        s = (checkCriticalElement(s$iterator.i < s$iterator.this$01_0.size_1()) , dynamicCastToString(s$iterator.this$01_0.get_1(s$iterator.last = s$iterator.i++)));
        if ($equals_5(s, '*')) {
            nt = ($clinit_NodeKindTest() , ELEMENT);
            $addRule_1(stripperRules, nt, preserve, decl.module);
        }
        else if ($endsWith(s, ':*')) {
            s.length == 2 && $compileError_0(this, "No prefix before ':*'");
            prefix = $substring_1(s, 0, s.length - 2);
            uri_0 = $getURIForPrefix(resolver, prefix, false);
            nt = new NamespaceTest(1, uri_0);
            $addRule_1(stripperRules, nt, preserve, decl.module);
        }
        else if ($equals_5(s.substr(0, 2), '*:')) {
            s.length == 2 && $compileError_0(this, "No local name after '*:'");
            localname = __substr(s, 2, s.length - 2);
            nt = new LocalNameTest(1, localname);
            $addRule_1(stripperRules, nt, preserve, decl.module);
        }
        else {
            try {
                qn = fromLexicalQName(s, $getDefaultXPathNamespace(this), resolver);
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 4)) {
                    $compileError_2(this, 'Element name ' + s + ' is not a valid QName', 'XTSE0280');
                    return null;
                }
                else 
                    throw unwrap($e0);
            }
            nt = new NameTest(1, qn);
            $addRule_1(stripperRules, nt, preserve, decl.module);
        }
    }
    return null;
}
;
_.isDeclaration = function isDeclaration_10(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_37(){
    this.elements = dynamicCastToString($checkAttribute(this, 'elements', 's1'));
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_40(decl){
    this.children != null && $compileError_2(this, 'Element must be empty', 'XTSE0260');
    instanceOf($getParent_0(this), 61) || $compileError_2(this, 'Element must be used only at top level of stylesheet', 'XTSE0010');
}
;
_.elements = '*';
var Lclient_net_sf_saxon_ce_style_XSLPreserveSpace_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLPreserveSpace', 453, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function $clinit_XSLResultDocument(){
    $clinit_XSLResultDocument = emptyMethod;
    $clinit_ParentNodeImpl();
    fans = new ArrayList_0(25);
    $add_16(fans, 'method');
    $add_16(fans, 'output-version');
    $add_16(fans, 'byte-order-mark');
    $add_16(fans, 'indent');
    $add_16(fans, 'encoding');
    $add_16(fans, 'media-type');
    $add_16(fans, 'doctype-system');
    $add_16(fans, 'doctype-public');
    $add_16(fans, 'omit-xml-declaration');
    $add_16(fans, 'standalone');
    $add_16(fans, 'cdata-section-elements');
    $add_16(fans, 'include-content-type');
    $add_16(fans, 'escape-uri-attributes');
    $add_16(fans, 'undeclare-prefixes');
    $add_16(fans, 'normalization-form');
    $add_16(fans, 'use-character-maps');
}

function XSLResultDocument(){
    $clinit_XSLResultDocument();
    StyleElement.call(this);
}

defineClass(727, 11, $intern_68, XSLResultDocument);
_.compile = function compile_39(exec_0, decl){
    var b, inst;
    inst = new ResultDocument(this.href_0, this.methodExpression, (getBaseURI_7(this) , new InscopeNamespaceResolver(this)));
    b = $compileSequenceConstructor_0(this, exec_0, decl, $iterateAxis_1(this, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
    !b && (b = new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10)));
    inst.content_0 = b;
    $adoptChildExpression(inst, b);
    return inst;
}
;
_.getReturnedItemType = function getReturnedItemType_10(){
    return null;
}
;
_.isInstruction = function isInstruction_23(){
    return true;
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_18(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_38(){
    var att, att$iterator;
    for (att$iterator = new AbstractList$IteratorImpl(fans); att$iterator.i < att$iterator.this$01_0.size_1();) {
        att = (checkCriticalElement(att$iterator.i < att$iterator.this$01_0.size_1()) , dynamicCastToString(att$iterator.this$01_0.get_1(att$iterator.last = att$iterator.i++)));
        $checkAttribute(this, att, 's');
    }
    this.methodExpression = dynamicCast($checkAttribute(this, 'method', 'a'), 6);
    $checkAttribute(this, 'validation', 'v');
    $checkAttribute(this, 'type', 't');
    $checkAttribute(this, 'format', 'q');
    this.href_0 = dynamicCast($checkAttribute(this, 'href', 'a'), 6);
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_41(decl){
    this.href_0 = $typeCheck_6(this, this.href_0);
    this.methodExpression = $typeCheck_6(this, this.methodExpression);
    $getPreparedStylesheet(this).createsSecondaryResult = true;
}
;
var fans;
var Lclient_net_sf_saxon_ce_style_XSLResultDocument_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLResultDocument', 727, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLSequence(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(728, 11, $intern_68, XSLSequence);
_.compile = function compile_40(exec_0, decl){
    loggingIsEnabled() && isTraceEnabled && $AddTraceProperty_0(this.select, 'select', this.selectAttTrace);
    return this.select;
}
;
_.getReturnedItemType = function getReturnedItemType_11(){
    return this.select.getItemType();
}
;
_.isInstruction = function isInstruction_24(){
    return true;
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_19(){
    return false;
}
;
_.prepareAttributes = function prepareAttributes_39(){
    this.select = dynamicCast($checkAttribute(this, 'select', 'e1'), 6);
    $checkForUnknownAttributes(this);
    loggingIsEnabled() && isTraceEnabled && (this.selectAttTrace = !this.attributeList?null:$getValue_0(this.attributeList, '', 'select'));
}
;
_.validate = function validate_42(decl){
    $onlyAllow(this, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['fallback']));
    this.select = $typeCheck_6(this, this.select);
}
;
_.selectAttTrace = '';
var Lclient_net_sf_saxon_ce_style_XSLSequence_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLSequence', 728, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function $compile_2(this$static, exec_0, decl){
    var atomizedSortKey, b, e, visitor;
    if (!this$static.select) {
        b = $compileSequenceConstructor_0(this$static, exec_0, decl, $iterateAxis_1(this$static, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
        !b && (b = new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10)));
        $setContainer(b, this$static);
        try {
            visitor = make_0((!this$static.staticContext && (this$static.staticContext = new ExpressionContext(this$static)) , this$static.staticContext), $getPreparedStylesheet(this$static));
            atomizedSortKey = new Atomizer(b);
            atomizedSortKey = $simplify(visitor, atomizedSortKey);
            copyLocationInfo(b, atomizedSortKey);
            $setSortKey(this$static.sortKeyDefinition, atomizedSortKey);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                e = $e0;
                $compileError(this$static, e);
            }
            else 
                throw unwrap($e0);
        }
    }
    this$static.sortKeyDefinition = $simplify_1(this$static.sortKeyDefinition, make_0((!this$static.staticContext && (this$static.staticContext = new ExpressionContext(this$static)) , this$static.staticContext), $getPreparedStylesheet(this$static)));
    return null;
}

function XSLSort(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(143, 11, {28:1, 15:1, 7:1, 14:1, 11:1, 143:1, 27:1, 10:1, 31:1, 23:1}, XSLSort);
_.compile = function compile_41(exec_0, decl){
    return $compile_2(this, exec_0, decl);
}
;
_.getReturnedItemType = function getReturnedItemType_12(){
    return null;
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_20(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_40(){
    this.select = dynamicCast($checkAttribute(this, 'select', 'e'), 6);
    this.order = dynamicCast($checkAttribute(this, 'order', 'a'), 6);
    this.dataType = dynamicCast($checkAttribute(this, 'data-type', 'a'), 6);
    this.caseOrder = dynamicCast($checkAttribute(this, 'case-order', 'a'), 6);
    this.lang_0 = dynamicCast($checkAttribute(this, 'lang', 'a'), 6);
    this.collationName = dynamicCast($checkAttribute(this, 'collation', 'a'), 6);
    this.stable = dynamicCast($checkAttribute(this, 'stable', 'a'), 6);
    !this.order && (this.order = new StringLiteral_0('ascending'));
!this.caseOrder?(this.caseOrder = new StringLiteral_0('#default')):(this.useDefaultCollation = false);
    !this.lang_0?(this.lang_0 = new StringLiteral(($clinit_StringValue() , EMPTY_STRING))):(this.useDefaultCollation = false);
    !!this.collationName && (this.useDefaultCollation = false);
}
;
_.validate = function validate_43(decl){
    var base, collationString, collationURI, err, role, stringCollator;
    !!this.select && this.children != null && $compileError_2(this, 'An xsl:sort element with a select attribute must be empty', 'XTSE1015');
    !this.select && this.children == null && (this.select = new ContextItemExpression);
    this.useDefaultCollation && (this.collationName = new StringLiteral_0($getDefaultCollationName(this)));
    stringCollator = null;
    if (instanceOf(this.collationName, 21)) {
        collationString = $getPrimitiveStringValue(dynamicCast(dynamicCast(this.collationName, 21).value_0, 12));
        try {
            collationURI = new URI_2(collationString);
            if (collationURI.m_scheme == null) {
                base = new URI_1(getBaseURI_7(this));
                collationURI = new URI_0(base, $toString_1(collationURI));
                collationString = $toString_1(collationURI);
            }
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 51)) {
                $compileError_0(this, "Collation name '" + collationString + "' is not a valid URI");
                collationString = 'http://www.w3.org/2005/xpath-functions/collation/codepoint';
            }
            else 
                throw unwrap($e0);
        }
        stringCollator = $getNamedCollation(($getPreparedStylesheet(this) , collationString));
        if (!stringCollator) {
            $compileError_2(this, 'Collation ' + collationString + ' has not been defined', 'XTDE1035');
            stringCollator = ($clinit_CodepointCollator() , $clinit_CodepointCollator() , theInstance_0);
        }
    }
    this.select = $typeCheck_6(this, this.select);
    this.order = $typeCheck_6(this, this.order);
    this.caseOrder = $typeCheck_6(this, this.caseOrder);
    this.lang_0 = $typeCheck_6(this, this.lang_0);
    this.dataType = $typeCheck_6(this, this.dataType);
    this.collationName = $typeCheck_6(this, this.collationName);
    this.stable = $typeCheck_6(this, this.stable);
    if (this.select) {
        try {
            role = new RoleLocator(4, 'xsl:sort/select', 0);
            this.select = staticTypeCheck_1(this.select, ($clinit_SequenceType() , ATOMIC_SEQUENCE), false, role);
        }
        catch ($e1) {
            $e1 = wrap_0($e1);
            if (instanceOf($e1, 4)) {
                err = $e1;
                $compileError(this, err);
            }
            else 
                throw unwrap($e1);
        }
    }
    this.sortKeyDefinition = new SortKeyDefinition;
    $setSortProperty(this.sortKeyDefinition, 0, this.order);
    $setSortProperty(this.sortKeyDefinition, 2, this.caseOrder);
    $setSortProperty(this.sortKeyDefinition, 3, this.lang_0);
    $setSortKey(this.sortKeyDefinition, this.select);
    $setSortProperty(this.sortKeyDefinition, 1, this.dataType);
    $setSortProperty(this.sortKeyDefinition, 4, this.collationName);
    $setCollation(this.sortKeyDefinition, stringCollator);
    $setBaseURI_2(this.sortKeyDefinition, getBaseURI_7(this));
    $setSortProperty(this.sortKeyDefinition, 5, this.stable);
    $compareTo_5($getEffectiveVersion(this), ($clinit_DecimalValue() , TWO)) < 0;
}
;
_.dataType = null;
_.useDefaultCollation = true;
var Lclient_net_sf_saxon_ce_style_XSLSort_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLSort', 143, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function $getInputTypeAnnotationsAttribute(this$static){
    var inputTypeAnnotationsAtt;
    inputTypeAnnotationsAtt = !this$static.attributeList?null:$getValue_0(this$static.attributeList, '', 'input-type-annotations');
    if (inputTypeAnnotationsAtt != null) {
        if ($equals_5(inputTypeAnnotationsAtt, 'strip')) {
            return 1;
        }
        else if ($equals_5(inputTypeAnnotationsAtt, 'preserve')) {
            return 2;
        }
        else if ($equals_5(inputTypeAnnotationsAtt, 'unspecified')) {
            return 0;
        }
        else {
            $compileError_2(this$static, 'Invalid value for input-type-annotations attribute. Permitted values are (strip, preserve, unspecified)', 'XTSE0020');
        }
    }
    return -1;
}

function $getPreparedStylesheet_0(this$static){
    return !this$static.principalStylesheetModule?null:this$static.principalStylesheetModule.preparedStylesheet;
}

function $prepareAttributes_3(this$static){
    var inputTypeAnnotationsAtt;
    $checkAttribute(this$static, 'version', 's1');
    $checkAttribute(this$static, 'id', 's');
    $checkAttribute(this$static, 'extension-element-prefixes', 's');
    $checkAttribute(this$static, 'exclude-result-prefixes', 's');
    $checkAttribute(this$static, 'default-validation', 'v');
    inputTypeAnnotationsAtt = dynamicCastToString($checkAttribute(this$static, 'input-type-annotations', 'w'));
    $checkForUnknownAttributes(this$static);
    if (inputTypeAnnotationsAtt != null) {
        if ($equals_5(inputTypeAnnotationsAtt, 'strip'))
            ;
        else if ($equals_5(inputTypeAnnotationsAtt, 'preserve'))
            ;
        else if ($equals_5(inputTypeAnnotationsAtt, 'unspecified'))
            ;
        else {
            $compileError_2(this$static, 'Invalid value for input-type-annotations attribute. Permitted values are (strip, preserve, unspecified)', 'XTSE0020');
        }
    }
}

function $validate_2(this$static){
    var child, child$array, child$index, child$max;
    !!this$static.validationError && $compileError(this$static, this$static.validationError);
    $getParent_0(this$static).getNodeKind() != 9 && $compileError_2(this$static, $getDisplayName_1(this$static) + ' must be the outermost element', 'XTSE0010');
    for (child$array = this$static.children == null?EMPTY_NODE_LIST:instanceOf(this$static.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this$static.children, 10)]):dynamicCast(this$static.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
        child = child$array[child$index];
        if (child.getNodeKind() == 3 || instanceOf(child, 11) && dynamicCast(child, 11).isDeclaration() || instanceOf(child, 248))
            ;
        else if (!$equals_5('http://www.w3.org/1999/XSL/Transform', $getURI(child)) && !$equals_5('', $getURI(child)))
            ;
        else if (instanceOf(child, 249) && $compareTo_5($getEffectiveVersion(dynamicCast(child, 11)), ($clinit_DecimalValue() , TWO)) > 0)
            ;
        else 
            $equals_5('http://www.w3.org/1999/XSL/Transform', $getURI(child))?$compileError_2(dynamicCast(child, 11), 'Element ' + $getDisplayName_1(child) + ' must not appear directly within ' + $getDisplayName_1(this$static), 'XTSE0010'):$compileError_2(dynamicCast(child, 11), 'Element ' + $getDisplayName_1(child) + ' must not appear directly within ' + $getDisplayName_1(this$static) + ' because it is not in a namespace', 'XTSE0130');
    }
}

function XSLStylesheet(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(61, 11, {28:1, 15:1, 7:1, 14:1, 11:1, 61:1, 27:1, 10:1, 31:1, 23:1}, XSLStylesheet);
_.compile = function compile_42(exec_0, decl){
    return null;
}
;
_.getExecutable = function getExecutable_5(){
    return this.exec_0;
}
;
_.getPreparedStylesheet = function getPreparedStylesheet_0(){
    return $getPreparedStylesheet_0(this);
}
;
_.getPrincipalStylesheetModule = function getPrincipalStylesheetModule_2(){
    return this.principalStylesheetModule;
}
;
_.mayContainParam = function mayContainParam_1(attName){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_41(){
    $prepareAttributes_3(this);
}
;
_.processAllAttributes = function processAllAttributes_1(){
    var child, child$array, child$index, child$max, err;
    $processDefaultCollationAttribute(this, '');
    $prepareAttributes_3(this);
    for (child$array = this.children == null?EMPTY_NODE_LIST:instanceOf(this.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this.children, 10)]):dynamicCast(this.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
        child = child$array[child$index];
        if (instanceOf(child, 11)) {
            try {
                dynamicCast(child, 11).processAllAttributes();
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 4)) {
                    err = $e0;
                    $compileError(dynamicCast(child, 11), err);
                }
                else 
                    throw unwrap($e0);
            }
        }
    }
}
;
_.validate = function validate_44(decl){
    $validate_2(this);
}
;
var Lclient_net_sf_saxon_ce_style_XSLStylesheet_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLStylesheet', 61, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function $getReturnedItemType(this$static){
    return !this$static.requiredType?$getCommonChildItemType(this$static):this$static.requiredType.primaryType;
}

function $getTemplateName(this$static){
    if (!this$static.templateName && !this$static.prepared) {
        try {
            $prepareAttributes_4(this$static);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (!instanceOf($e0, 4))
                throw unwrap($e0);
        }
    }
    return this$static.templateName;
}

function $markTailCalls(this$static){
    var last;
    last = $getLastChildInstruction(this$static);
    return !!last && last.markTailCalls();
}

function $prepareAttributes_4(this$static){
    var a, allModes, count, e, err, mname, modeAtt, s, s$iterator, tokens;
    if (this$static.prepared) {
        return;
    }
    this$static.prepared = true;
    this$static.templateName = dynamicCast($checkAttribute(this$static, 'name', 'q'), 8);
    !!this$static.templateName && $setObjectName_0(this$static, this$static.templateName);
    modeAtt = dynamicCastToString($checkAttribute(this$static, 'mode', 's'));
    this$static.match_0 = dynamicCast($checkAttribute(this$static, 'match', 'p'), 117);
    this$static.priorityAtt = dynamicCastToString($checkAttribute(this$static, 'priority', 'w'));
    this$static.requiredType = dynamicCast($checkAttribute(this$static, 'as', 'z'), 55);
    $checkForUnknownAttributes(this$static);
    a = !this$static.attributeList?null:$getValue_0(this$static.attributeList, 'http://saxonica.com/ns/interactiveXSLT', 'prevent-default');
        this$static.ixslPreventDefault = $equals_5('yes', a);
        this$static.ixslEventProperty = !this$static.attributeList?null:$getValue_0(this$static.attributeList, 'http://saxonica.com/ns/interactiveXSLT', 'event-property');
            if (!this$static.match_0) {
                !this$static.templateName && $compileError_2(this$static, 'A template must have a name or match pattern (or both)', 'XTSE0500');
                (modeAtt != null || this$static.priorityAtt != null) && $compileError_2(this$static, 'A template with no match pattern must have no mode or priority', 'XTSE0500');
            }
            try {
                if (modeAtt != null) {
                    tokens = tokenize(modeAtt);
                    tokens.array.length == 0 && $compileError_2(this$static, 'The mode attribute must not be empty', 'XTSE0550');
                    this$static.modeNames = initDim(Lclient_net_sf_saxon_ce_om_StructuredQName_2_classLit, $intern_1, 8, tokens.array.length, 0, 1);
                    count = 0;
                    allModes = false;
                    for (s$iterator = new AbstractList$IteratorImpl(tokens); s$iterator.i < s$iterator.this$01_0.size_1();) {
                        s = (checkCriticalElement(s$iterator.i < s$iterator.this$01_0.size_1()) , dynamicCastToString(s$iterator.this$01_0.get_1(s$iterator.last = s$iterator.i++)));
                        if ($equals_5('#default', s)) {
                            mname = ($getContainingStylesheet(this$static) , null);
                            mname = ($clinit_Mode() , UNNAMED_MODE_NAME);
                        }
                        else if ($equals_5('#all', s)) {
                            allModes = true;
                            mname = ($clinit_Mode() , ALL_MODES);
                        }
                        else {
                            mname = $makeQName(this$static, s);
                        }
                        for (e = 0; e < count; e++) {
                            $equals_0(this$static.modeNames[e], mname) && $compileError_2(this$static, 'In the list of modes, the value ' + s + ' is duplicated', 'XTSE0550');
                        }
                        this$static.modeNames[count++] = mname;
                    }
                    allModes && count > 1 && $compileError_2(this$static, "mode='#all' cannot be combined with other modes", 'XTSE0550');
                }
                else {
                    this$static.modeNames = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_om_StructuredQName_2_classLit, 1), $intern_1, 8, 0, [($clinit_Mode() , UNNAMED_MODE_NAME)]);
                }
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 4)) {
                    err = $e0;
                    !err.errorCode && (err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTSE0280'));
                        $equals_5(!err.errorCode?null:$getLocalName_1(err.errorCode), 'XTSE0020') && (err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTSE0550'));
                            err.isStaticError = true;
                            $compileError(this$static, err);
                }
                else 
                    throw unwrap($e0);
            }
            this$static.prioritySpecified = this$static.priorityAtt != null;
            if (this$static.prioritySpecified) {
                try {
                    castableAsDecimal(this$static.priorityAtt) || $compileError_2(this$static, 'Invalid numeric value for priority (' + this$static.priority + ')', 'XTSE0530');
                    this$static.priority = __parseAndValidateDouble(this$static.priorityAtt);
                }
                catch ($e1) {
                    $e1 = wrap_0($e1);
                    if (instanceOf($e1, 57)) {
                        this$static.priority = -1;
                    }
                    else 
                        throw unwrap($e1);
                }
            }
}

function $register(this$static, declaration){
    var mgr, mode, module, nc, nc$array, nc$index, nc$max, slots;
    if (this$static.match_0) {
        module = declaration.module;
        slots = this$static.match_0.allocateSlots(0);
        mgr = $getPreparedStylesheet(this$static).ruleManager;
        for (nc$array = this$static.modeNames , nc$index = 0 , nc$max = nc$array.length; nc$index < nc$max; ++nc$index) {
            nc = nc$array[nc$index];
            mode = $getMode(mgr, nc, true);
            this$static.prioritySpecified?$setTemplateRule(mgr, this$static.match_0, this$static.compiledTemplate, mode, module, this$static.priority, this$static.ixslPreventDefault, this$static.ixslEventProperty):$setTemplateRule(mgr, this$static.match_0, this$static.compiledTemplate, mode, module, NaN, this$static.ixslPreventDefault, this$static.ixslEventProperty);
            mode.stackFrameSlotsNeeded = max_1(mode.stackFrameSlotsNeeded, slots);
        }
        $allocatePatternSlots($getContainingStylesheet(this$static).principalStylesheetModule, slots);
    }
}

function XSLTemplate(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
    this.compiledTemplate = new Template;
}

defineClass(216, 11, {28:1, 15:1, 7:1, 14:1, 11:1, 194:1, 216:1, 27:1, 10:1, 31:1, 23:1}, XSLTemplate);
_.compile = function compile_43(exec_0, decl){
    var block, e, err, exp_0, role;
    block = $compileSequenceConstructor_0(this, exec_0, decl, $iterateAxis_1(this, 3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
    !block && (block = new Literal(($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10)));
    $setBody_0(this.compiledTemplate, block);
    $setExecutable(this.compiledTemplate, $getPreparedStylesheet(this));
    $setSourceLocator_0(this.compiledTemplate, this);
    $setHasRequiredParams(this.compiledTemplate, this.hasRequiredParams);
    $setRequiredType_1(this.compiledTemplate, this.requiredType);
    exp_0 = null;
    try {
        exp_0 = $simplify(make_0((!this.staticContext && (this.staticContext = new ExpressionContext(this)) , this.staticContext), $getPreparedStylesheet(this)), block);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            $compileError(this, e);
        }
        else 
            throw unwrap($e0);
    }
    try {
        if (this.requiredType) {
            role = new RoleLocator(7, this.templateName?$getDisplayName_0(this.templateName):this.match_0.toString$(), 0);
            role.errorCode = 'XTTE0505';
            exp_0 = staticTypeCheck_1(exp_0, this.requiredType, false, role);
        }
    }
    catch ($e1) {
        $e1 = wrap_0($e1);
        if (instanceOf($e1, 4)) {
            err = $e1;
            $compileError(this, err);
        }
        else 
            throw unwrap($e1);
    }
    $setBody_0(this.compiledTemplate, exp_0);
    $setTemplateName(this.compiledTemplate, $getObjectName(this));
    if (loggingIsEnabled() && isTraceEnabled) {
        exp_0 = makeTraceInstruction(this, exp_0);
        if (instanceOf(exp_0, 162)) {
            $setProperty(dynamicCast(exp_0, 162), 'match', this.match_0.toString$());
            $setProperty(dynamicCast(exp_0, 162), 'mode', !this.attributeList?null:$getValue_0(this.attributeList, '', 'mode'));
        }
        $setBody_0(this.compiledTemplate, exp_0);
    }
    return null;
}
;
_.getReturnedItemType = function getReturnedItemType_13(){
    return $getReturnedItemType(this);
}
;
_.index_1 = function index_7(decl, top_0){
    $indexNamedTemplate(top_0, decl);
}
;
_.isDeclaration = function isDeclaration_11(){
    return true;
}
;
_.isPermittedChild = function isPermittedChild_4(child){
    return instanceOf(child, 76);
}
;
_.markTailCalls = function markTailCalls_6(){
    return $markTailCalls(this);
}
;
_.mayContainParam = function mayContainParam_2(attName){
    return true;
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_21(){
    return true;
}
;
_.optimize_0 = function optimize_65(declaration){
    var contextItemType, e, exp_0, exp2, visitor;
    contextItemType = ($clinit_Type() , ITEM_TYPE);
    !$getObjectName(this) && (contextItemType = this.match_0.getNodeTest());
    exp_0 = this.compiledTemplate.body_0;
    visitor = make_0((!this.staticContext && (this.staticContext = new ExpressionContext(this)) , this.staticContext), $getPreparedStylesheet(this));
    try {
        exp2 = $typeCheck_1(visitor, exp_0, contextItemType);
        exp2 = $optimize_1(visitor, exp2, contextItemType);
        exp_0 != exp2 && $setBody_0(this.compiledTemplate, exp2);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            $compileError(this, e);
        }
        else 
            throw unwrap($e0);
    }
    $allocateSlots(this.compiledTemplate, this.numberOfParams);
}
;
_.postValidate = function postValidate_2(){
    $markTailCalls(this);
}
;
_.prepareAttributes = function prepareAttributes_42(){
    $prepareAttributes_4(this);
}
;
_.validate = function validate_45(decl){
    var param, param$array, param$index, param$max;
    instanceOf($getParent_0(this), 61) || $compileError_2(this, 'Element must be used only at top level of stylesheet', 'XTSE0010');
    this.match_0 = $typeCheck_7(this, 'match', this.match_0);
    this.numberOfParams = 0;
    for (param$array = this.children == null?EMPTY_NODE_LIST:instanceOf(this.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this.children, 10)]):dynamicCast(this.children, 33) , param$index = 0 , param$max = param$array.length; param$index < param$max; ++param$index) {
        param = param$array[param$index];
        if (instanceOf(param, 76)) {
            ++this.numberOfParams;
            dynamicCast(param, 76).requiredParam && (this.hasRequiredParams = true);
        }
    }
}
;
_.hasRequiredParams = false;
_.ixslEventProperty = null;
_.ixslPreventDefault = false;
_.numberOfParams = 0;
_.prepared = false;
_.priority = 0;
_.priorityAtt = null;
_.prioritySpecified = false;
_.requiredType = null;
var Lclient_net_sf_saxon_ce_style_XSLTemplate_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLTemplate', 216, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function XSLText(){
    $clinit_ParentNodeImpl();
    XSLLeafNodeConstructor.call(this);
}

defineClass(729, 293, $intern_68, XSLText);
_.compile = function compile_44(exec_0, decl){
    return new ValueOf(makeLiteral(this.value_0));
}
;
_.getErrorCodeForSelectPlusContent = function getErrorCodeForSelectPlusContent_2(){
    return null;
}
;
_.getReturnedItemType = function getReturnedItemType_14(){
    return $clinit_NodeKindTest() , TEXT;
}
;
_.prepareAttributes = function prepareAttributes_43(){
    $checkAttribute(this, 'disable-output-escaping', 'b');
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_46(decl){
    var child, child$array, child$index, child$max;
    this.value_0 = ($clinit_StringValue() , EMPTY_STRING);
    for (child$array = this.children == null?EMPTY_NODE_LIST:instanceOf(this.children, 10)?initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, 1), $intern_66, 10, 0, [dynamicCast(this.children, 10)]):dynamicCast(this.children, 33) , child$index = 0 , child$max = child$array.length; child$index < child$max; ++child$index) {
        child = child$array[child$index];
        if (instanceOf(child, 11)) {
            $compileError_2(dynamicCast(child, 11), 'xsl:text must not contain child elements', 'XTSE0010');
            return;
        }
        else {
            this.value_0 = makeStringValue(child.getStringValue());
        }
    }
    $validate(this);
}
;
var Lclient_net_sf_saxon_ce_style_XSLText_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLText', 729, Lclient_net_sf_saxon_ce_style_XSLLeafNodeConstructor_2_classLit);
function XSLValueOf(){
    $clinit_ParentNodeImpl();
    XSLLeafNodeConstructor.call(this);
}

defineClass(730, 293, $intern_68, XSLValueOf);
_.compile = function compile_45(exec_0, decl){
    var inst, th;
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    if (!this.separator && !!this.select && $compareTo_5($getEffectiveVersion(this), ($clinit_DecimalValue() , TWO)) < 0) {
        if (!instanceOf(this.select.getItemType(), 43)) {
            this.select = new Atomizer(this.select);
            this.select = $simplify(make_0((!this.staticContext && (this.staticContext = new ExpressionContext(this)) , this.staticContext), $getPreparedStylesheet(this)), this.select);
        }
        (this.select.getCardinality() & $intern_14) != 0 && (this.select = new FirstItemExpression(this.select));
        $isSubType(th, this.select.getItemType(), ($clinit_AtomicType() , STRING)) || (this.select = new AtomicSequenceConverter(this.select, STRING));
    }
    else {
        !this.separator && (!this.select?(this.separator = new StringLiteral(($clinit_StringValue() , EMPTY_STRING))):(this.separator = new StringLiteral(($clinit_StringValue() , SINGLE_SPACE))));
    }
    inst = new ValueOf(this.select);
    $compileContent(this, exec_0, decl, inst, this.separator);
    loggingIsEnabled() && isTraceEnabled && $AddTraceProperty_0(inst, 'select', this.selectAttTrace);
    return inst;
}
;
_.getErrorCodeForSelectPlusContent = function getErrorCodeForSelectPlusContent_3(){
    return 'XTSE0870';
}
;
_.getReturnedItemType = function getReturnedItemType_15(){
    return $clinit_NodeKindTest() , TEXT;
}
;
_.prepareAttributes = function prepareAttributes_44(){
    this.select = dynamicCast($checkAttribute(this, 'select', 'e'), 6);
    this.separator = dynamicCast($checkAttribute(this, 'separator', 'a'), 6);
    $checkAttribute(this, 'disable-output-escaping', 'b');
    $checkForUnknownAttributes(this);
    loggingIsEnabled() && isTraceEnabled && (this.selectAttTrace = !this.attributeList?null:$getValue_0(this.attributeList, '', 'select'));
}
;
_.validate = function validate_47(decl){
    $validate(this);
    this.select = $typeCheck_6(this, this.select);
    this.separator = $typeCheck_6(this, this.separator);
}
;
_.selectAttTrace = '';
var Lclient_net_sf_saxon_ce_style_XSLValueOf_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLValueOf', 730, Lclient_net_sf_saxon_ce_style_XSLLeafNodeConstructor_2_classLit);
function $compileLocalVariable(this$static, exec_0, decl){
    var inst;
    this$static.references.array.length == 0 && (this$static.redundant = true);
    if (!this$static.redundant) {
        if (this$static.global) {
            throw new AssertionError('Global variable found when compiling local variable');
        }
        else {
            inst = new LocalVariable;
            $setContainer(inst, this$static);
            !!this$static.select && $setContainer(this$static.select, this$static);
            $initializeInstruction(this$static, exec_0, decl, inst);
            $setVariableQName_0(inst, $getObjectName(this$static));
            $setRequiredType_0(inst, $getRequiredType_1(this$static));
            return inst;
        }
    }
    return null;
}

function $getRequiredType_1(this$static){
    var defaultType;
    $clinit_TypeHierarchy();
    defaultType = !this$static.requiredType?($clinit_SequenceType() , ANY_SEQUENCE):this$static.requiredType;
    if (this$static.requiredType) {
        return this$static.requiredType;
    }
    else if (this$static.select) {
        if (isEmptySequence(this$static.select)) {
            return defaultType;
        }
        else {
            try {
                return $clinit_SequenceType() , new SequenceType(this$static.select.getItemType(), this$static.select.getCardinality());
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 19)) {
                    return defaultType;
                }
                else 
                    throw unwrap($e0);
            }
        }
    }
    else 
        return this$static.children != null?($clinit_SequenceType() , new SequenceType(($clinit_NodeKindTest() , DOCUMENT), $intern_21)):($clinit_SequenceType() , SINGLE_STRING);
}

function XSLVariable(){
    $clinit_ParentNodeImpl();
    XSLVariableDeclaration.call(this);
}

defineClass(254, 181, {28:1, 15:1, 7:1, 14:1, 11:1, 194:1, 254:1, 181:1, 27:1, 10:1, 31:1, 23:1}, XSLVariable);
_.compile = function compile_46(exec_0, decl){
    var inst;
    this.references.array.length == 0 && (this.redundant = true);
    if (!this.redundant) {
        if (this.global) {
            inst = new GlobalVariable;
            $setExecutable_0(inst, $getPreparedStylesheet(this));
            !!this.select && $setContainer(this.select, inst);
            $initializeInstruction(this, exec_0, decl, inst);
            $setVariableQName_0(inst, $getObjectName(this));
            $setSlotNumber_1(inst, this.slotNumber);
            $setRequiredType_0(inst, $getRequiredType_1(this));
            $fixupBinding(this, inst);
            $setContainer(inst, inst);
            this.compiledVariable = inst;
            return inst;
        }
        else {
            throw new AssertionError('Local variable found when compiling a global variable');
        }
    }
    return null;
}
;
_.getRequiredType = function getRequiredType_5(){
    return $getRequiredType_1(this);
}
;
_.isInstruction = function isInstruction_25(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_45(){
    if (this.state == 2)
        return;
    this.state == 1 && $compileError_2(this, 'Circular reference to variable', 'XTDE0640');
    this.state = 1;
    $prepareAttributes_2(this);
    this.state = 2;
}
;
_.state = 0;
var Lclient_net_sf_saxon_ce_style_XSLVariable_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLVariable', 254, Lclient_net_sf_saxon_ce_style_XSLVariableDeclaration_2_classLit);
function XSLWhen(){
    $clinit_ParentNodeImpl();
    StyleElement.call(this);
}

defineClass(222, 11, {28:1, 15:1, 7:1, 14:1, 11:1, 222:1, 27:1, 10:1, 31:1, 23:1}, XSLWhen);
_.compile = function compile_47(exec_0, decl){
    return null;
}
;
_.getReturnedItemType = function getReturnedItemType_16(){
    return $getCommonChildItemType(this);
}
;
_.markTailCalls = function markTailCalls_7(){
    var last;
    last = $getLastChildInstruction(this);
    return !!last && last.markTailCalls();
}
;
_.mayContainSequenceConstructor = function mayContainSequenceConstructor_22(){
    return true;
}
;
_.prepareAttributes = function prepareAttributes_46(){
    this.test_0 = dynamicCast($checkAttribute(this, 'test', 'e1'), 6);
    $checkForUnknownAttributes(this);
}
;
_.validate = function validate_48(decl){
    instanceOf($getParent_0(this), 338) || $compileError_2(this, 'xsl:when must be immediately within xsl:choose', 'XTSE0010');
    this.test_0 = $typeCheck_6(this, this.test_0);
}
;
var Lclient_net_sf_saxon_ce_style_XSLWhen_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLWhen', 222, Lclient_net_sf_saxon_ce_style_StyleElement_2_classLit);
function $compile_3(this$static, exec_0, decl){
    var inst, psm;
    psm = $getContainingStylesheet(this$static).principalStylesheetModule;
    inst = new WithParam;
    $adoptChildExpression(inst, this$static.select);
    $setParameterId_0(inst, $allocateUniqueParameterNumber(psm, $getObjectName(this$static)));
    $initializeInstruction(this$static, exec_0, decl, inst);
    return inst;
}

function XSLWithParam(){
    $clinit_ParentNodeImpl();
    XSLGeneralVariable.call(this);
}

defineClass(154, 452, {28:1, 15:1, 7:1, 14:1, 11:1, 154:1, 27:1, 10:1, 31:1, 23:1}, XSLWithParam);
_.compile = function compile_48(exec_0, decl){
    return $compile_3(this, exec_0, decl);
}
;
_.validate = function validate_49(decl){
    var iter, prev;
    $validate_1(this);
    iter = $iterateAxis_1(this, 11, ($clinit_NodeKindTest() , ELEMENT));
    while (true) {
        prev = iter.next_0();
        if (!prev) {
            break;
        }
        instanceOf(prev, 154) && $equals_0($getObjectName(this), $getObjectName(dynamicCast(prev, 154))) && $compileError_2(this, 'Duplicate parameter name', 'XTSE0670');
    }
}
;
var Lclient_net_sf_saxon_ce_style_XSLWithParam_2_classLit = createForClass('client.net.sf.saxon.ce.style', 'XSLWithParam', 154, Lclient_net_sf_saxon_ce_style_XSLGeneralVariable_2_classLit);
function $clinit_AbstractTraceListener(){
    $clinit_AbstractTraceListener = emptyMethod;
    spaceBuffer = new StringBuffer_1('                ');
}

function $close_0(this$static){
    this$static.t_total = sub_1(this$static.t_total, ($clinit_System() , fromDouble(now_1())));
    --this$static.indent;
    $finest_0(this$static.logger, '<\/trace>');
    dumpTrace();
}

function $endCurrentItem(this$static, item_0){
    var curr;
    --this$static.indent;
    if (instanceOf(item_0, 7)) {
        curr = dynamicCast(item_0, 7);
        $finest_0(this$static.logger, spaces(this$static.indent) + '<\/source><!-- ' + getPath(curr) + ' -->');
    }
}

function $enter(this$static, info){
    var file, infotype, msg, name_0, newModule, prop, props, qName, rcurly, tag, val;
    infotype = info.constructType;
    qName = info.objectName;
    tag = $equals_0(infotype, ($clinit_Location() , LITERAL_RESULT_ELEMENT))?'LRE':$equals_0(infotype, LITERAL_RESULT_ATTRIBUTE)?'ATTR':$equals_0(infotype, LET_EXPRESSION)?'xsl:variable':$equals_0(infotype, TRACE_CALL)?'user-trace':$getDisplayName_0(infotype);
    if (tag == null) {
        return;
    }
    file = abbreviatePath(info.getSystemId());
    msg = spaces(this$static.indent) + '<' + tag;
    name_0 = dynamicCastToString($getStringValue_1(info.properties, 'name'));
    name_0 != null?(msg += ' name="' + $escape_0(name_0) + '"'):!!qName && (msg += ' name="' + $escape_0($getDisplayName_0(qName)) + '"');
    props = $iterator(new AbstractMap$1(info.properties));
    while ($hasNext_2(props.val$outerIter2)) {
        prop = dynamicCastToString($next_11(props));
        val = $getStringValue_1(info.properties, prop);
        if ($equals_5(prop.substr(0, 1), '{')) {
            rcurly = $indexOf_3(prop, fromCodePoint(125));
            rcurly > 0 && (prop = __substr(prop, rcurly + 1, prop.length - (rcurly + 1)));
        }
        val != null && !$equals_5(prop, 'name') && !$equals_5(prop, 'expression') && (msg += ' ' + prop + '="' + $escape_0(toString__Ljava_lang_String___devirtual$(val)) + '"');
    }
    newModule = $escape_0(file);
    if ($equals_5(newModule, prevModule)) {
        msg += '>';
    }
    else {
        prevModule = newModule;
        msg += ' module="' + newModule + '">';
    }
    $finest_0(this$static.logger, msg);
    ++this$static.indent;
}

function $enterChooseItem(this$static, test_0){
    !test_0.length?$finest_0(this$static.logger, spaces(this$static.indent) + '<xsl:otherwise>'):$finest_0(this$static.logger, spaces(this$static.indent) + '<xsl:when test="' + $escape_0(test_0) + '">');
    ++this$static.indent;
}

function $escape_0(in_$){
    var c, collapsed, i_0, sb;
    if (in_$ == null) {
        return '';
    }
    collapsed = collapseWhitespace(in_$);
    sb = new FastStringBuffer(length__I__devirtual$(collapsed) + 10);
    for (i_0 = 0; i_0 < length__I__devirtual$(collapsed); i_0++) {
        c = charAt_I_C__devirtual$(collapsed, i_0);
        c == 60?$append_3(sb, '&lt;'):c == 62?$append_3(sb, '&gt;'):c == 38?$append_3(sb, '&amp;'):c == 34?$append_3(sb, '&#34;'):c == 10?$append_3(sb, '&#xA;'):c == 13?$append_3(sb, '&#xD;'):c == 9?$append_3(sb, '&#x9;'):($ensureCapacity_0(sb, 1) , sb.array[sb.used++] = c);
    }
    return $condense(sb) , valueOf_3(sb.array, 0, sb.used);
}

function $leave(this$static, info){
    var infotype, tag;
    infotype = info.constructType;
    tag = $equals_0(infotype, ($clinit_Location() , LITERAL_RESULT_ELEMENT))?'LRE':$equals_0(infotype, LITERAL_RESULT_ATTRIBUTE)?'ATTR':$equals_0(infotype, LET_EXPRESSION)?'xsl:variable':$equals_0(infotype, TRACE_CALL)?'user-trace':$getDisplayName_0(infotype);
    if (tag == null) {
        return;
    }
    --this$static.indent;
    $finest_0(this$static.logger, spaces(this$static.indent) + '<\/' + tag + '>');
}

function $leaveChooseItem(this$static, test_0){
    !test_0.length?$finest_0(this$static.logger, spaces(this$static.indent) + '<\/xsl:otherwise>'):$finest_0(this$static.logger, spaces(this$static.indent) + '<\/xsl:when>');
    --this$static.indent;
}

function $open_1(this$static){
    prevModule = '';
    this$static.t_total = ($clinit_System() , fromDouble(now_1()));
    $finest_0(this$static.logger, '<trace saxon-version="1.1" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ixsl="http://saxonica.com/ns/interactiveXSLT">');
        ++this$static.indent;
}

function $startCurrentItem(this$static, item_0){
    var curr;
    if (instanceOf(item_0, 7)) {
        curr = dynamicCast(item_0, 7);
        $finest_0(this$static.logger, spaces(this$static.indent) + '<source node="' + getPath(curr) + '" file="' + $escape_0(abbreviatePath(curr.getSystemId())) + '">');
    }
    ++this$static.indent;
}

function spaces(n){
    while (spaceBuffer.string.length < n) {
        $append_8(spaceBuffer, spaceBuffer);
    }
    return $substring(spaceBuffer, n);
}

defineClass(587, 1, {});
_.indent = 0;
_.t_total = {l:0, m:0, h:0};
var prevModule = '', spaceBuffer;
var Lclient_net_sf_saxon_ce_trace_AbstractTraceListener_2_classLit = createForClass('client.net.sf.saxon.ce.trace', 'AbstractTraceListener', 587, Ljava_lang_Object_2_classLit);
function $clinit_Location(){
    $clinit_Location = emptyMethod;
    LITERAL_RESULT_ELEMENT = new StructuredQName('xsl', 'http://www.w3.org/1999/XSL/Transform', 'LiteralResultElement');
        LITERAL_RESULT_ATTRIBUTE = new StructuredQName('xsl', 'http://www.w3.org/1999/XSL/Transform', 'LiteralResultAttribute');
            new StructuredQName('xsl', 'http://www.w3.org/1999/XSL/Transform', 'template');
                LET_EXPRESSION = new StructuredQName('', 'http://saxon.sf.net/', 'let-expression');
                    TRACE_CALL = new StructuredQName('fn', 'http://www.w3.org/2005/xpath-functions', 'trace');
                        new StructuredQName('xsl', 'http://www.w3.org/1999/XSL/Transform', 'function');
                            new StructuredQName('', 'http://saxon.sf.net/', 'xpath-expression');
}

var LET_EXPRESSION, LITERAL_RESULT_ATTRIBUTE, LITERAL_RESULT_ELEMENT, TRACE_CALL;
function $inject(exp_0, env, construct, qName){
    var properties, property, property$iterator, trace;
    if (instanceOf(exp_0, 9)) {
        return exp_0;
    }
    trace = new TraceExpression(exp_0);
    new InscopeNamespaceResolver(env.element);
    trace.constructType = construct;
    trace.objectName = qName;
    properties = exp_0.traceProperties;
    if (properties) {
        for (property$iterator = new AbstractList$IteratorImpl(properties); property$iterator.i < property$iterator.this$01_0.size_1();) {
            property = (checkCriticalElement(property$iterator.i < property$iterator.this$01_0.size_1()) , dynamicCast(property$iterator.this$01_0.get_1(property$iterator.last = property$iterator.i++), 42));
            $setProperty(trace, property[0], property[1]);
        }
    }
    return trace;
}

function $inject_0(exp_0, env, construct, qName){
    return $clinit_AbstractTraceListener() , ($equals_0(construct, ($clinit_Location() , LITERAL_RESULT_ELEMENT))?'LRE':$equals_0(construct, LITERAL_RESULT_ATTRIBUTE)?'ATTR':$equals_0(construct, LET_EXPRESSION)?'xsl:variable':$equals_0(construct, TRACE_CALL)?'user-trace':$getDisplayName_0(construct)) != null?$inject(exp_0, env, construct, qName):exp_0;
}

function XSLTTraceListener(){
    $clinit_AbstractTraceListener();
    this.logger = (new LoggerImplRegular , $ensureLogger(getLogManager(), 'Trace'));
}

defineClass(528, 587, {}, XSLTTraceListener);
var Lclient_net_sf_saxon_ce_trace_XSLTTraceListener_2_classLit = createForClass('client.net.sf.saxon.ce.trace', 'XSLTTraceListener', 528, Lclient_net_sf_saxon_ce_trace_AbstractTraceListener_2_classLit);
function $clinit_DecimalFormatManager(){
    $clinit_DecimalFormatManager = emptyMethod;
    DEFAULT_NAME = new StructuredQName('saxon', 'http://saxon.sf.net/', 'default-decimal-format');
}

function $fixupDefaultDefault(this$static){
    this$static.usingOriginalDefault && $setNamedDecimalFormat(this$static, DEFAULT_NAME, this$static.defaultDFS, -1000);
}

function $getNamedDecimalFormat(this$static, qName){
    var dfi;
    dfi = dynamicCast($get_0(this$static.formatTable, qName), 320);
    if (!dfi) {
        return null;
    }
    return dfi.dfs;
}

function $setDefaultDecimalFormat(this$static, dfs, precedence){
    var err;
    if (!this$static.usingOriginalDefault) {
        if (!$equals_1(dfs, this$static.defaultDFS)) {
            err = new XPathException_0('There are two conflicting definitions of the default decimal format');
            err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTSE1290');
                err.isStaticError = true;
                throw err;
        }
    }
    this$static.defaultDFS = dfs;
    this$static.usingOriginalDefault = false;
    $setNamedDecimalFormat(this$static, DEFAULT_NAME, dfs, precedence);
}

function $setNamedDecimalFormat(this$static, qName, dfs, precedence){
    var dfi, err, info, o, old, oldPrecedence;
    o = $get_0(this$static.formatTable, qName);
    if (o != null) {
        info = dynamicCast(o, 320);
        old = info.dfs;
        oldPrecedence = info.precedence;
        if (precedence < oldPrecedence) {
            return;
        }
        if (precedence == oldPrecedence && !$equals_1(dfs, old)) {
            err = new XPathException_0('There are two conflicting definitions of the named decimal-format');
            err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTSE1290');
                err.isStaticError = true;
                throw err;
        }
    }
    dfi = new DecimalFormatManager$DecimalFormatInfo;
    dfi.dfs = dfs;
    dfi.precedence = precedence;
    $put_0(this$static.formatTable, qName, dfi);
}

function DecimalFormatManager(){
    $clinit_DecimalFormatManager();
    this.formatTable = new HashMap_0(10);
    this.defaultDFS = new DecimalSymbols;
}

defineClass(376, 1, {}, DecimalFormatManager);
_.usingOriginalDefault = true;
var DEFAULT_NAME;
var Lclient_net_sf_saxon_ce_trans_DecimalFormatManager_2_classLit = createForClass('client.net.sf.saxon.ce.trans', 'DecimalFormatManager', 376, Ljava_lang_Object_2_classLit);
function DecimalFormatManager$DecimalFormatInfo(){
}

defineClass(320, 1, {320:1}, DecimalFormatManager$DecimalFormatInfo);
_.precedence = 0;
var Lclient_net_sf_saxon_ce_trans_DecimalFormatManager$DecimalFormatInfo_2_classLit = createForClass('client.net.sf.saxon.ce.trans', 'DecimalFormatManager/DecimalFormatInfo', 320, Ljava_lang_Object_2_classLit);
function $duplicate(role1, role2){
    throw new XPathException_0('The same character is used as the ' + role1 + ' and as the ' + role2);
}

function $equals_1(this$static, obj){
    var o;
    if (!instanceOf(obj, 288)) {
        return false;
    }
    o = dynamicCast(obj, 288);
    return this$static.decimalSeparator == o.decimalSeparator && this$static.groupingSeparator == o.groupingSeparator && this$static.digit == o.digit && this$static.minusSign == o.minusSign && this$static.percent == o.percent && this$static.permill == o.permill && this$static.zeroDigit == o.zeroDigit && this$static.patternSeparator == o.patternSeparator && $equals_5(this$static.infinity, o.infinity) && $equals_5(this$static.NaN_0, o.NaN_0);
}

function DecimalSymbols(){
}

defineClass(288, 1, {288:1}, DecimalSymbols);
_.equals$ = function equals_35(obj){
    return $equals_1(this, obj);
}
;
_.hashCode$ = function hashCode_38(){
    return this.decimalSeparator + 37 * this.groupingSeparator + 41 * this.digit;
}
;
_.NaN_0 = 'NaN';
_.decimalSeparator = 46;
_.digit = 35;
_.groupingSeparator = 44;
_.infinity = 'Infinity';
_.minusSign = 45;
_.patternSeparator = 59;
_.percent = 37;
_.permill = 8240;
_.zeroDigit = 48;
var Lclient_net_sf_saxon_ce_trans_DecimalSymbols_2_classLit = createForClass('client.net.sf.saxon.ce.trans', 'DecimalSymbols', 288, Ljava_lang_Object_2_classLit);
function wrap(cs, valueType){
    var c, i_0, len, qn, s, sb, uri_0;
    if (cs == null) {
        return '(NULL)';
    }
    if (length__I__devirtual$(cs) == 0) {
        return '(zero-length-string)';
    }
    sb = new FastStringBuffer(64);
    len = length__I__devirtual$(cs);
    for (i_0 = 0; i_0 < len; i_0++) {
        c = charAt_I_C__devirtual$(cs, i_0);
        if (c < 32 || c > 255) {
            $append_3(sb, '\\u');
            $append_3(sb, toUnsignedRadixString(c, 16));
        }
        else {
            $ensureCapacity_0(sb, 1);
            sb.array[sb.used++] = c;
        }
    }
    if (len > 30) {
        if (valueType == 1 && $charAt(sb, 0) == 123) {
            qn = fromClarkName(($condense(sb) , valueOf_3(sb.array, 0, sb.used)));
            uri_0 = $getNamespaceURI(qn);
            uri_0.length > 15 && (uri_0 = '...' + $substring_0(uri_0, uri_0.length - 15));
            s = '{' + uri_0 + '}' + valueOf_3(qn.content_0, qn.localNameStart, qn.prefixStart - qn.localNameStart);
        }
        else 
            valueType == 7?(s = '...' + $substring_0(($condense(sb) , valueOf_3(sb.array, 0, sb.used)), len - 30)):(s = ($condense(sb) , valueOf_3(sb.array, 0, sb.used)).substr(0, 30) + '...');
    }
    else {
        s = ($condense(sb) , valueOf_3(sb.array, 0, sb.used));
    }
    switch (valueType) {
        case 1:
            return '<' + s + '>';
        case 2:
            return '@' + s;
        case 3:
            return s + '()';
        case 5:
            return '$' + s;
        case 4:
            return '"' + s + '"';
        default:return '{' + s + '}';
    }
}

function $setBackwardsCompatible(this$static, bc){
    this$static.backwardsCompatible = bc;
}

function KeyDefinition(match_0, use, collationName, collation){
    this.match_0 = match_0;
    this.use = use;
    this.body_0 = use;
    $setContainer(use, this);
    this.use = use;
    this.collation = collation;
    this.collationName = collationName;
}

defineClass(263, 279, {28:1, 279:1, 359:1, 263:1}, KeyDefinition);
_.getSystemId = function getSystemId_7(){
    return null;
}
;
_.backwardsCompatible = false;
var Lclient_net_sf_saxon_ce_trans_KeyDefinition_2_classLit = createForClass('client.net.sf.saxon.ce.trans', 'KeyDefinition', 263, Lclient_net_sf_saxon_ce_expr_instruct_Procedure_2_classLit);
function $addKeyDefinition(this$static, keyDef){
    var err, i_0, other, v;
    if (this$static.keyDefinitions.array.length == 0) {
        this$static.collationName = keyDef.collationName;
    }
    else {
        if (this$static.collationName == null && keyDef.collationName != null || this$static.collationName != null && !$equals_5(this$static.collationName, keyDef.collationName)) {
            err = new XPathException_0('All keys with the same name must use the same collation');
            err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTSE1220');
                throw err;
        }
        v = this$static.keyDefinitions;
        for (i_0 = 0; i_0 < v.array.length; i_0++) {
            other = (checkElementIndex(i_0, v.array.length) , dynamicCast(v.array[i_0], 263));
            if (keyDef.match_0.equals$(other.match_0) && keyDef.body_0.equals$(other.body_0)) {
                return;
            }
        }
    }
    keyDef.backwardsCompatible && (this$static.backwardsCompatible = true);
    $add_16(this$static.keyDefinitions, keyDef);
}

function KeyDefinitionSet(keyName){
    this.keyName = keyName;
    this.keyDefinitions = new ArrayList_0(3);
}

defineClass(232, 1, {232:1}, KeyDefinitionSet);
_.backwardsCompatible = false;
var Lclient_net_sf_saxon_ce_trans_KeyDefinitionSet_2_classLit = createForClass('client.net.sf.saxon.ce.trans', 'KeyDefinitionSet', 232, Ljava_lang_Object_2_classLit);
function $addKeyDefinition_0(this$static, keyName, keydef){
    var backwardsCompatible, exp_0, i_0, kd, keySet, v;
    keySet = dynamicCast($get_0(this$static.keyMap, keyName), 232);
    if (!keySet) {
        keySet = new KeyDefinitionSet(keyName);
        $put_0(this$static.keyMap, keyName, keySet);
    }
    $addKeyDefinition(keySet, keydef);
    backwardsCompatible = keySet.backwardsCompatible;
    if (backwardsCompatible) {
        v = keySet.keyDefinitions;
        for (i_0 = 0; i_0 < v.array.length; i_0++) {
            kd = (checkElementIndex(i_0, v.array.length) , dynamicCast(v.array[i_0], 263));
            kd.backwardsCompatible = true;
            if (!kd.body_0.getItemType().equals$(($clinit_AtomicType() , STRING))) {
                exp_0 = new AtomicSequenceConverter(kd.body_0, STRING);
                kd.body_0 = exp_0;
                $setContainer(exp_0, kd);
                kd.use = exp_0;
            }
        }
    }
}

function $buildIndex(keySet, itemType, doc, context){
    var definitions, index_0, k_0;
    definitions = keySet.keyDefinitions;
    index_0 = new HashMap_0(100);
    for (k_0 = 0; k_0 < definitions.array.length; k_0++) {
        $constructIndex(doc, index_0, (checkElementIndex(k_0, definitions.array.length) , dynamicCast(definitions.array[k_0], 263)), itemType, context, k_0 == 0);
    }
    return index_0;
}

function $constructIndex(doc, index_0, keydef, soughtItemType, context, isFirst){
    var item_0, iter, match_0, xc;
    match_0 = keydef.match_0;
    xc = context.newContext();
    $openStackFrame(xc, keydef.numberOfSlots);
    iter = $selectNodes(match_0, doc, xc);
    while (true) {
        item_0 = iter.next_0();
        if (!item_0) {
            break;
        }
        $processKeyNode(dynamicCast(item_0, 7), soughtItemType, keydef, index_0, xc, isFirst);
    }
}

function $getIndex_0(this$static, doc, keyName, itemType){
    var docIndex, id_0;
    !this$static.docIndexes && (this$static.docIndexes = new HashMap_0(10));
    docIndex = dynamicCast($get_0(this$static.docIndexes, doc), 22);
    if (!docIndex) {
        return null;
    }
    id_0 = new KeyManager$IndexId(keyName, itemType);
    return getEntryValueOrNull($getEntry(docIndex.hashCodeMap, id_0));
}

function $getKeyDefinitionSet(this$static, qName){
    return dynamicCast($get_0(this$static.keyMap, qName), 232);
}

function $preRegisterKeyDefinition(this$static, keyName){
    var keySet;
    keySet = dynamicCast($get_0(this$static.keyMap, keyName), 232);
    if (!keySet) {
        keySet = new KeyDefinitionSet(keyName);
        $put_0(this$static.keyMap, keyName, keySet);
    }
}

function $processKeyNode(curr, soughtItemType, keydef, index_0, xc, isFirst){
    var actualItemType, av, collation, comparer, d, found, i_0, item_0, nodes, tz, use, useval, val;
    xc.setSingletonFocus(curr);
    collation = keydef.collation;
    use = keydef.use;
    useval = use.iterate_0(xc);
    tz = xc.getImplicitTimezone();
    while (true) {
        item_0 = dynamicCast(useval.next_0(), 13);
        if (!item_0) {
            break;
        }
        actualItemType = item_0.getItemType_0();
        if (!isComparable(actualItemType, soughtItemType, false)) {
            continue;
        }
        if (soughtItemType == ($clinit_AtomicType() , UNTYPED_ATOMIC) || soughtItemType == STRING || soughtItemType == ANY_URI) {
            !collation?(val = toString__Ljava_lang_String___devirtual$_0(item_0.getPrimitiveStringValue())):(val = collation.getCollationKey(toString__Ljava_lang_String___devirtual$_0(item_0.getPrimitiveStringValue())));
        }
        else {
            if (item_0.isNaN_0()) {
                break;
            }
            try {
                av = item_0.convert(soughtItemType).asAtomic();
                val = av.getXPathComparable(false, collation, tz);
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 4)) {
                    break;
                }
                else 
                    throw unwrap($e0);
            }
        }
        nodes = dynamicCast(isJavaString(val)?$getStringValue_1(index_0, val):getEntryValueOrNull($getEntry(index_0.hashCodeMap, val)), 88);
        if (!nodes) {
            nodes = new ArrayList_0(4);
            isJavaString(val)?$putStringValue(index_0, val, nodes):$put_1(index_0.hashCodeMap, val, nodes);
            nodes.add_3(curr);
        }
        else {
            if (isFirst) {
                maskUndefined(nodes.get_1(nodes.size_1() - 1)) !== maskUndefined(curr) && nodes.add_3(curr);
            }
            else {
                comparer = ($clinit_LocalOrderComparer() , $clinit_LocalOrderComparer() , instance_1);
                found = false;
                for (i_0 = 0; i_0 < nodes.size_1(); i_0++) {
                    d = $compare_1(curr, dynamicCast(nodes.get_1(i_0), 7));
                    if (d <= 0) {
                        if (d == 0)
                            ;
                        else {
                            nodes.add_4(i_0, curr);
                        }
                        found = true;
                        break;
                    }
                }
                found || nodes.add_3(curr);
            }
        }
    }
}

function $putIndex(this$static, doc, keyName, itemType, index_0, context){
    var controller, indexList, indexRef;
    !this$static.docIndexes && (this$static.docIndexes = new HashMap_0(10));
    indexRef = dynamicCast($get_0(this$static.docIndexes, doc), 22);
    if (!indexRef) {
        indexList = new HashMap_0(10);
        controller = context.getController();
        $contains_1(controller.config.sourceDocumentPool, doc)?$setUserData(context.getController(), doc, 'saxon:key-index-list', indexList):doc.setUserData('saxon:key-index-list', indexList);
        $put_0(this$static.docIndexes, doc, new HashMap_1(indexList));
    }
    else {
        indexList = indexRef;
    }
    $put_0(indexList, new KeyManager$IndexId(keyName, itemType), index_0);
}

function $selectByKey(this$static, keySet, doc, soughtValue, context){
    var collation, de, definition, definitions, index_0, indexObject, itemType, itemType0, keyName, nodes, val;
    if (!soughtValue) {
        return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
    }
    definitions = keySet.keyDefinitions;
    definition = (checkElementIndex(0, definitions.array.length) , dynamicCast(definitions.array[0], 263));
    collation = definition.collation;
    keyName = keySet.keyName;
    if (keySet.backwardsCompatible) {
        soughtValue = soughtValue.convert(($clinit_AtomicType() , STRING)).asAtomic();
    }
    else {
        itemType0 = soughtValue.getItemType_0();
        (itemType0 == ($clinit_AtomicType() , INTEGER) || itemType0 == DECIMAL || itemType0 == FLOAT) && (soughtValue = new DoubleValue(dynamicCast(soughtValue, 25).getDoubleValue()));
    }
    itemType = soughtValue.getItemType_0();
    indexObject = $getIndex_0(this$static, doc, keyName, itemType);
    if (isJavaString(indexObject)) {
        de = new XPathException_0('Key definition is circular');
        de.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XTDE0640');
            throw de;
    }
    index_0 = dynamicCast(indexObject, 22);
    if (!index_0) {
        $putIndex(this$static, doc, keyName, itemType, 'Under Construction', context);
        index_0 = $buildIndex(keySet, itemType, doc, context);
        $putIndex(this$static, doc, keyName, itemType, index_0, context);
    }
    nodes = dynamicCast($get_0(index_0, (itemType == ($clinit_AtomicType() , STRING) || itemType == UNTYPED_ATOMIC || itemType == ANY_URI?!collation?(val = toString__Ljava_lang_String___devirtual$_0(soughtValue.getPrimitiveStringValue())):(val = collation.getCollationKey(toString__Ljava_lang_String___devirtual$_0(soughtValue.getPrimitiveStringValue()))):(val = soughtValue.getXPathComparable(false, collation, context.getImplicitTimezone())) , val)), 16);
    return !nodes?($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1):new ListIterator(nodes);
}

function KeyManager(){
    this.keyMap = new HashMap_0(10);
    this.docIndexes = new HashMap_0(10);
}

defineClass(762, 1, {}, KeyManager);
var Lclient_net_sf_saxon_ce_trans_KeyManager_2_classLit = createForClass('client.net.sf.saxon.ce.trans', 'KeyManager', 762, Ljava_lang_Object_2_classLit);
function KeyManager$IndexId(keyName, primitiveType){
    this.keyName = keyName;
    this.primitiveType = primitiveType;
}

defineClass(262, 1, {262:1}, KeyManager$IndexId);
_.equals$ = function equals_36(o){
    return instanceOf(o, 262) && $equals_0(this.keyName, dynamicCast(o, 262).keyName) && this.primitiveType == dynamicCast(o, 262).primitiveType;
}
;
_.hashCode$ = function hashCode_39(){
    return $hashCode(this.keyName) ^ getHashCode(this.primitiveType);
}
;
var Lclient_net_sf_saxon_ce_trans_KeyManager$IndexId_2_classLit = createForClass('client.net.sf.saxon.ce.trans', 'KeyManager/IndexId', 262, Ljava_lang_Object_2_classLit);
function $clinit_Mode(){
    $clinit_Mode = emptyMethod;
    ALL_MODES = new StructuredQName('saxon', 'http://saxon.sf.net/', '_omniMode');
        UNNAMED_MODE_NAME = new StructuredQName('saxon', 'http://saxon.sf.net/', '_defaultMode');
}

function $$init_6(this$static){
    this$static.namedElementRuleChains = new HashMap_0(32);
    this$static.namedAttributeRuleChains = new HashMap_0(8);
}

function $addRule(this$static, pattern, action, module, priority, explicitMode, ixslPreventDefault, ixslEventProperty){
    var chain, kind, kind0, minImportPrecedence, moduleHash, newRule, nodeName, precedence, sequence, test_0;
    explicitMode && (this$static.hasRules = true);
    if (instanceOf(pattern.getNodeTest(), 123)) {
        return;
    }
    moduleHash = getHashCode(module);
    !this$static.mostRecentRule?(sequence = 0):action == this$static.mostRecentRule.action && moduleHash == this$static.mostRecentModuleHash?(sequence = this$static.mostRecentRule.sequence):(sequence = this$static.mostRecentRule.sequence + 1);
    precedence = $getPrecedence(module);
    minImportPrecedence = module.minImportPrecedence;
    newRule = new Rule(pattern, action, precedence, minImportPrecedence, priority, sequence, ixslPreventDefault, ixslEventProperty);
    if (instanceOf(pattern, 92)) {
        test_0 = pattern.getNodeTest();
        if (instanceOf(test_0, 176)) {
            newRule.alwaysMatches = true;
        }
        else if (instanceOf(test_0, 147)) {
            newRule.alwaysMatches = true;
        }
        else if (instanceOf(test_0, 60)) {
            kind0 = test_0.getRequiredNodeKind();
            (kind0 == 1 || kind0 == 2) && (newRule.alwaysMatches = true);
        }
    }
    this$static.mostRecentRule = newRule;
    this$static.mostRecentModuleHash = moduleHash;
    kind = pattern.getNodeKind();
    nodeName = instanceOf(pattern.getNodeTest(), 60)?dynamicCast(pattern.getNodeTest(), 60).qName:null;
    switch (kind) {
        case 1:
            {
                if (!nodeName) {
                    this$static.unnamedElementRuleChain = $addRuleToList(newRule, this$static.unnamedElementRuleChain);
                }
                else {
                    chain = dynamicCast($get_0(this$static.namedElementRuleChains, nodeName), 63);
                    $put_0(this$static.namedElementRuleChains, nodeName, $addRuleToList(newRule, chain));
                }
                break;
            }

        case 2:
            {
                if (!nodeName) {
                    this$static.unnamedAttributeRuleChain = $addRuleToList(newRule, this$static.unnamedAttributeRuleChain);
                }
                else {
                    chain = dynamicCast($get_0(this$static.namedAttributeRuleChains, nodeName), 63);
                    $put_0(this$static.namedAttributeRuleChains, nodeName, $addRuleToList(newRule, chain));
                }
                break;
            }

        case 0:
            this$static.genericNodeRuleChain = $addRuleToList(newRule, this$static.genericNodeRuleChain);
            break;
        case 9:
            this$static.documentRuleChain = $addRuleToList(newRule, this$static.documentRuleChain);
            break;
        case 3:
            this$static.textRuleChain = $addRuleToList(newRule, this$static.textRuleChain);
            break;
        case 8:
            this$static.commentRuleChain = $addRuleToList(newRule, this$static.commentRuleChain);
            break;
        case 7:
            this$static.processingInstructionRuleChain = $addRuleToList(newRule, this$static.processingInstructionRuleChain);
            break;
        case 13:
            this$static.namespaceRuleChain = $addRuleToList(newRule, this$static.namespaceRuleChain);
            break;
        case 15:
            if (instanceOf(pattern, 273)) {
                !this$static.virtualRuleChain && (this$static.virtualRuleChain = new ArrayList);
                newRule.isVirtual = true;
                $add_16(this$static.virtualRuleChain, newRule);
            }

    }
}

function $addRuleToList(newRule, list){
    var precedence, prev, priority, rule;
    if (!list) {
        return newRule;
    }
    precedence = newRule.precedence;
    priority = newRule.priority;
    rule = list;
    prev = null;
    while (rule) {
        if (rule.precedence < precedence || rule.precedence == precedence && rule.priority <= priority) {
            newRule.next = rule;
            if (!prev) {
                return newRule;
            }
            else {
                prev.next = newRule;
            }
            break;
        }
        else {
            prev = rule;
            rule = rule.next;
        }
    }
    if (!rule) {
        prev.next = newRule;
        newRule.next = null;
    }
    return list;
}

function $computeRankings(this$static){
    var addToSorter, sorter;
    sorter = new Mode$RuleSorter;
    addToSorter = new Mode$3(sorter);
    $processRules(this$static, addToSorter);
    $allocateRanks(sorter);
}

function $getRule(this$static, node, context){
    var bestRule, namedNodeChain, unnamedNodeChain;
    this$static.stackFrameSlotsNeeded > 0 && (context = $makeNewContext(this$static, context));
    bestRule = null;
    switch (node.getNodeKind()) {
        case 9:
            unnamedNodeChain = this$static.documentRuleChain;
            break;
        case 1:
            {
                unnamedNodeChain = this$static.unnamedElementRuleChain;
                namedNodeChain = dynamicCast($get_0(this$static.namedElementRuleChains, node.getNodeName()), 63);
                !!namedNodeChain && (bestRule = $searchRuleChain(node, context, null, namedNodeChain));
                break;
            }

        case 2:
            {
                unnamedNodeChain = this$static.unnamedAttributeRuleChain;
                namedNodeChain = dynamicCast($get_0(this$static.namedAttributeRuleChains, node.getNodeName()), 63);
                !!namedNodeChain && (bestRule = $searchRuleChain(node, context, null, namedNodeChain));
                break;
            }

        case 3:
            unnamedNodeChain = this$static.textRuleChain;
            break;
        case 8:
            unnamedNodeChain = this$static.commentRuleChain;
            break;
        case 7:
            unnamedNodeChain = this$static.processingInstructionRuleChain;
            break;
        case 13:
            unnamedNodeChain = this$static.namespaceRuleChain;
            break;
        default:throw new AssertionError('Unknown node kind');
    }
    !!unnamedNodeChain && (bestRule = $searchRuleChain(node, context, bestRule, unnamedNodeChain));
    !!this$static.genericNodeRuleChain && (bestRule = $searchRuleChain(node, context, bestRule, this$static.genericNodeRuleChain));
    return bestRule;
}

function $getRule_0(this$static, node, context, filter){
    var bestRule, namedNodeChain, unnamedNodeChain;
    this$static.stackFrameSlotsNeeded > 0 && (context = $makeNewContext(this$static, context));
    bestRule = null;
    switch (node.getNodeKind()) {
        case 9:
            unnamedNodeChain = this$static.documentRuleChain;
            break;
        case 1:
            {
                unnamedNodeChain = this$static.unnamedElementRuleChain;
                namedNodeChain = dynamicCast($get_0(this$static.namedElementRuleChains, node.getNodeName()), 63);
                bestRule = $searchRuleChain_0(node, context, null, namedNodeChain, filter);
                break;
            }

        case 2:
            {
                unnamedNodeChain = this$static.unnamedAttributeRuleChain;
                namedNodeChain = dynamicCast($get_0(this$static.namedAttributeRuleChains, node.getNodeName()), 63);
                bestRule = $searchRuleChain_0(node, context, null, namedNodeChain, filter);
                break;
            }

        case 3:
            unnamedNodeChain = this$static.textRuleChain;
            break;
        case 8:
            unnamedNodeChain = this$static.commentRuleChain;
            break;
        case 7:
            unnamedNodeChain = this$static.processingInstructionRuleChain;
            break;
        case 13:
            unnamedNodeChain = this$static.namespaceRuleChain;
            break;
        default:throw new AssertionError('Unknown node kind');
    }
    bestRule = $searchRuleChain_0(node, context, bestRule, unnamedNodeChain, filter);
    return $searchRuleChain_0(node, context, bestRule, this$static.genericNodeRuleChain, filter);
}

function $getVirtualRule(this$static, context){
    var eventObject, jso, r, r$iterator;
    if (!this$static.virtualRuleChain) {
        return null;
    }
    eventObject = dynamicCastJso($getUserData(context.getController(), 'Saxon-CE', 'current-object'));
    for (r$iterator = new AbstractList$IteratorImpl(this$static.virtualRuleChain); r$iterator.i < r$iterator.this$01_0.size_1();) {
        r = (checkCriticalElement(r$iterator.i < r$iterator.this$01_0.size_1()) , dynamicCast(r$iterator.this$01_0.get_1(r$iterator.last = r$iterator.i++), 63));
        jso = dynamicCast(r.pattern, 273);
        if (jso.val_0 === eventObject) {
            return r;
        }
    }
    return null;
}

function $makeNewContext(this$static, context){
    context = context.newContext();
    $openStackFrame(context, this$static.stackFrameSlotsNeeded);
    return context;
}

function $processRuleChain(r, action){
    while (r) {
        $addRule_0(action.val$sorter2, r);
        r = r.next;
    }
}

function $processRules(this$static, action){
    var ii, r;
    $processRuleChain(this$static.documentRuleChain, action);
    $processRuleChain(this$static.unnamedElementRuleChain, action);
    ii = $iterator(new AbstractMap$1(this$static.namedElementRuleChains));
    while ($hasNext_2(ii.val$outerIter2)) {
        r = dynamicCast($get_0(this$static.namedElementRuleChains, $next_11(ii)), 63);
        $processRuleChain(r, action);
    }
    $processRuleChain(this$static.unnamedAttributeRuleChain, action);
    ii = $iterator(new AbstractMap$1(this$static.namedAttributeRuleChains));
    while ($hasNext_2(ii.val$outerIter2)) {
        r = dynamicCast($get_0(this$static.namedAttributeRuleChains, $next_11(ii)), 63);
        $processRuleChain(r, action);
    }
    $processRuleChain(this$static.textRuleChain, action);
    $processRuleChain(this$static.commentRuleChain, action);
    $processRuleChain(this$static.processingInstructionRuleChain, action);
    $processRuleChain(this$static.namespaceRuleChain, action);
    $processRuleChain(this$static.genericNodeRuleChain, action);
}

function $searchRuleChain(node, context, bestRule, head){
    var rank;
    while (head) {
        if (bestRule) {
            rank = head.rank - bestRule.rank;
            if (rank < 0) {
                break;
            }
            else if (rank == 0) {
                if (head.alwaysMatches || head.pattern.matches_2(node, context)) {
                    bestRule = bestRule.sequence > head.sequence?bestRule:head;
                    break;
                }
            }
            else {
                (head.alwaysMatches || head.pattern.matches_2(node, context)) && (bestRule = head);
            }
        }
        else if (head.alwaysMatches || head.pattern.matches_2(node, context)) {
            bestRule = head;
            break;
        }
        head = head.next;
    }
    return bestRule;
}

function $searchRuleChain_0(node, context, bestRule, head, filter){
    var rank;
    while (head) {
        if (filter.testRule(head)) {
            if (bestRule) {
                rank = head.rank - bestRule.rank;
                if (rank < 0) {
                    break;
                }
                else if (rank == 0) {
                    if (head.alwaysMatches || head.pattern.matches_2(node, context)) {
                        bestRule = bestRule.sequence > head.sequence?bestRule:head;
                        break;
                    }
                }
                else {
                    (head.alwaysMatches || head.pattern.matches_2(node, context)) && (bestRule = head);
                }
            }
            else if (head.alwaysMatches || head.pattern.matches_2(node, context)) {
                bestRule = head;
                break;
            }
        }
        head = head.next;
    }
    return bestRule;
}

function Mode(modeName){
    $clinit_Mode();
    $$init_6(this);
    this.modeName = modeName;
}

function Mode_0(omniMode, modeName){
    $clinit_Mode();
    var fp, ii, r;
    $$init_6(this);
    this.modeName = modeName;
    if (omniMode) {
        this.documentRuleChain = !omniMode.documentRuleChain?null:new Rule_0(omniMode.documentRuleChain);
        this.textRuleChain = !omniMode.textRuleChain?null:new Rule_0(omniMode.textRuleChain);
        this.commentRuleChain = !omniMode.commentRuleChain?null:new Rule_0(omniMode.commentRuleChain);
        this.processingInstructionRuleChain = !omniMode.processingInstructionRuleChain?null:new Rule_0(omniMode.processingInstructionRuleChain);
        this.namespaceRuleChain = !omniMode.namespaceRuleChain?null:new Rule_0(omniMode.namespaceRuleChain);
        this.unnamedElementRuleChain = !omniMode.unnamedElementRuleChain?null:new Rule_0(omniMode.unnamedElementRuleChain);
        this.unnamedAttributeRuleChain = !omniMode.unnamedAttributeRuleChain?null:new Rule_0(omniMode.unnamedAttributeRuleChain);
        this.namedElementRuleChains = new HashMap_0(omniMode.namedElementRuleChains.size_0);
        ii = $iterator(new AbstractMap$1(omniMode.namedElementRuleChains));
        while ($hasNext_2(ii.val$outerIter2)) {
            fp = dynamicCast($next_11(ii), 8);
            r = dynamicCast($get_0(omniMode.namedElementRuleChains, fp), 63);
            $put_0(this.namedElementRuleChains, fp, new Rule_0(r));
        }
        ii = $iterator(new AbstractMap$1(omniMode.namedAttributeRuleChains));
        while ($hasNext_2(ii.val$outerIter2)) {
            fp = dynamicCast($next_11(ii), 8);
            r = dynamicCast($get_0(omniMode.namedAttributeRuleChains, fp), 63);
            $put_0(this.namedAttributeRuleChains, fp, new Rule_0(r));
        }
        this.mostRecentRule = omniMode.mostRecentRule;
        this.mostRecentModuleHash = omniMode.mostRecentModuleHash;
    }
}

defineClass(157, 1, {157:1}, Mode, Mode_0);
_.commentRuleChain = null;
_.documentRuleChain = null;
_.genericNodeRuleChain = null;
_.hasRules = false;
_.mostRecentModuleHash = 0;
_.namespaceRuleChain = null;
_.processingInstructionRuleChain = null;
_.stackFrameSlotsNeeded = 0;
_.textRuleChain = null;
_.unnamedAttributeRuleChain = null;
_.unnamedElementRuleChain = null;
_.virtualRuleChain = null;
var ALL_MODES, UNNAMED_MODE_NAME;
var Lclient_net_sf_saxon_ce_trans_Mode_2_classLit = createForClass('client.net.sf.saxon.ce.trans', 'Mode', 157, Ljava_lang_Object_2_classLit);
function Mode$1(val$min, val$max){
    this.val$min2 = val$min;
    this.val$max3 = val$max;
}

defineClass(642, 1, {}, Mode$1);
_.testRule = function testRule(r){
    var p_0;
    p_0 = r.precedence;
    return p_0 >= this.val$min2 && p_0 <= this.val$max3;
}
;
_.val$max3 = 0;
_.val$min2 = 0;
var Lclient_net_sf_saxon_ce_trans_Mode$1_2_classLit = createForClass('client.net.sf.saxon.ce.trans', 'Mode/1', 642, Ljava_lang_Object_2_classLit);
function Mode$2(val$currentRule){
    this.val$currentRule2 = val$currentRule;
}

defineClass(643, 1, {}, Mode$2);
_.testRule = function testRule_0(r){
    var comp;
    comp = $compareRank(r, this.val$currentRule2);
    return comp < 0 || comp == 0 && r.sequence < this.val$currentRule2.sequence;
}
;
var Lclient_net_sf_saxon_ce_trans_Mode$2_2_classLit = createForClass('client.net.sf.saxon.ce.trans', 'Mode/2', 643, Ljava_lang_Object_2_classLit);
function Mode$3(val$sorter){
    this.val$sorter2 = val$sorter;
}

defineClass(644, 1, {}, Mode$3);
var Lclient_net_sf_saxon_ce_trans_Mode$3_2_classLit = createForClass('client.net.sf.saxon.ce.trans', 'Mode/3', 644, Ljava_lang_Object_2_classLit);
function $addRule_0(this$static, rule){
    $add_16(this$static.rules_0, rule);
}

function $allocateRanks(this$static){
    var i_0, rank;
    quickSort1(0, this$static.rules_0.array.length, this$static);
    rank = 0;
    for (i_0 = 0; i_0 < this$static.rules_0.array.length; i_0++) {
        i_0 > 0 && $compareComputedRank(dynamicCast($get_1(this$static.rules_0, i_0 - 1), 63), dynamicCast($get_1(this$static.rules_0, i_0), 63)) != 0 && ++rank;
        $setRank(dynamicCast($get_1(this$static.rules_0, i_0), 63), rank);
    }
}

function Mode$RuleSorter(){
    this.rules_0 = new ArrayList_0(100);
}

defineClass(641, 1, {}, Mode$RuleSorter);
_.compare = function compare_4(a, b){
    return $compareComputedRank(dynamicCast($get_1(this.rules_0, a), 63), dynamicCast($get_1(this.rules_0, b), 63));
}
;
_.swap = function swap_1(a, b){
    var temp;
    temp = dynamicCast($get_1(this.rules_0, a), 63);
    $set_0(this.rules_0, a, dynamicCast($get_1(this.rules_0, b), 63));
    $set_0(this.rules_0, b, temp);
}
;
var Lclient_net_sf_saxon_ce_trans_Mode$RuleSorter_2_classLit = createForClass('client.net.sf.saxon.ce.trans', 'Mode/RuleSorter', 641, Ljava_lang_Object_2_classLit);
function $compareComputedRank(this$static, other){
    return this$static.precedence == other.precedence?this$static.priority == other.priority?0:this$static.priority < other.priority?-1:1:this$static.precedence < other.precedence?-1:1;
}

function $compareRank(this$static, other){
    return this$static.rank - other.rank;
}

function $setRank(this$static, rank){
    this$static.rank = rank;
}

function Rule(p_0, o, prec, min_0, prio, seq, prev, eventProp){
    this.pattern = p_0;
    this.action = o;
    this.precedence = prec;
    this.minImportPrecedence = min_0;
    this.priority = prio;
    this.next = null;
    this.sequence = seq;
    this.ixslPreventDefault = prev;
    this.ixslEventProperty = eventProp;
}

function Rule_0(r){
    this.pattern = r.pattern;
    this.action = r.action;
    this.precedence = r.precedence;
    this.minImportPrecedence = r.minImportPrecedence;
    this.priority = r.priority;
    this.sequence = r.sequence;
    this.ixslPreventDefault = r.ixslPreventDefault;
    !r.next?(this.next = null):(this.next = new Rule_0(r.next));
}

defineClass(63, 1, {63:1}, Rule, Rule_0);
_.alwaysMatches = false;
_.isVirtual = false;
_.ixslPreventDefault = false;
_.minImportPrecedence = 0;
_.precedence = 0;
_.priority = 0;
_.rank = 0;
_.sequence = 0;
var Lclient_net_sf_saxon_ce_trans_Rule_2_classLit = createForClass('client.net.sf.saxon.ce.trans', 'Rule', 63, Ljava_lang_Object_2_classLit);
function $computeRankings_0(this$static){
    var iter, mode;
    $computeRankings(this$static.unnamedMode);
    iter = $iterator_0(new AbstractMap$2(this$static.modes));
    while ($hasNext_2(iter.val$outerIter2)) {
        mode = dynamicCast($next_12(iter), 157);
        $computeRankings(mode);
    }
}

function $getMode(this$static, modeName, createIfAbsent){
    var m;
    if (!modeName || $equals_0(modeName, ($clinit_Mode() , UNNAMED_MODE_NAME))) {
        return this$static.unnamedMode;
    }
    if ($equals_0(modeName, ($clinit_Mode() , ALL_MODES))) {
        !this$static.omniMode && (this$static.omniMode = new Mode(modeName));
        return this$static.omniMode;
    }
    m = dynamicCast($get_0(this$static.modes, modeName), 157);
    if (!m && createIfAbsent) {
        m = new Mode_0(this$static.omniMode, modeName);
        $put_0(this$static.modes, modeName, m);
    }
    return m;
}

function $getModesInNamespace(this$static){
    var name_0, name$iterator, result;
    result = new ArrayList;
    for (name$iterator = $iterator(new AbstractMap$1(this$static.modes)); $hasNext_2(name$iterator.val$outerIter2);) {
        name_0 = dynamicCast($next_11(name$iterator), 8);
        $equals_5('http://saxonica.com/ns/interactiveXSLT', $getNamespaceURI(name_0)) && $add_16(result, dynamicCast($get_0(this$static.modes, name_0), 157));
    }
    return result;
}

function $getNextMatchHandler(this$static, node, mode, currentRule, c){
    var filter;
    !mode && (mode = this$static.unnamedMode);
    return filter = new Mode$2(currentRule) , $getRule_0(mode, node, c, filter);
}

function $getTemplateRule(this$static, node, mode, min_0, max_0, c){
    var filter;
    !mode && (mode = this$static.unnamedMode);
    return filter = new Mode$1(min_0, max_0) , $getRule_0(mode, node, c, filter);
}

function $setTemplateRule(this$static, pattern, eh, mode, module, priority, ixslPreventDefault, ixslEventProperty){
    var currentSetter, iter, m, p1, p2, up;
    if (instanceOf(pattern, 179)) {
        up = dynamicCast(pattern, 179);
        p1 = up.p1;
        p2 = up.p2;
        currentSetter = up.variableBinding;
        if (currentSetter) {
            p1.variableBinding = currentSetter;
            p2.variableBinding = currentSetter;
        }
        $setTemplateRule(this$static, p1, eh, mode, module, priority, ixslPreventDefault, ixslEventProperty);
        $setTemplateRule(this$static, p2, eh, mode, module, priority, ixslPreventDefault, ixslEventProperty);
        return;
    }
    isNaN(priority) && (priority = pattern.getDefaultPriority());
    $addRule(mode, pattern, eh, module, priority, true, ixslPreventDefault, ixslEventProperty);
    if (mode == this$static.omniMode) {
        $addRule(this$static.unnamedMode, pattern, eh, module, priority, false, ixslPreventDefault, ixslEventProperty);
        iter = $iterator_0(new AbstractMap$2(this$static.modes));
        while ($hasNext_2(iter.val$outerIter2)) {
            m = dynamicCast($next_12(iter), 157);
            $addRule(m, pattern, eh, module, priority, false, ixslPreventDefault, ixslEventProperty);
        }
    }
}

function RuleManager(){
    this.unnamedMode = new Mode(($clinit_Mode() , UNNAMED_MODE_NAME));
    this.modes = new HashMap_0(5);
}

defineClass(581, 1, {}, RuleManager);
_.omniMode = null;
var Lclient_net_sf_saxon_ce_trans_RuleManager_2_classLit = createForClass('client.net.sf.saxon.ce.trans', 'RuleManager', 581, Ljava_lang_Object_2_classLit);
function $clinit_StripSpaceRules(){
    $clinit_StripSpaceRules = emptyMethod;
    STRIP = new Template;
    PRESERVE = new Template;
}

function $addRule_1(this$static, test_0, action, module){
    var chain, fp, minImportPrecedence, newRule, pattern, precedence, priority;
    precedence = $getPrecedence(module);
    minImportPrecedence = module.minImportPrecedence;
    priority = test_0.getDefaultPriority();
    pattern = new NodeTestPattern(test_0);
    $setSystemId_1(pattern, $getSystemId(module.sourceElement));
    newRule = new Rule(pattern, action, precedence, minImportPrecedence, priority, this$static.sequence++, false, null);
    $setRank(newRule, (precedence << 16) + this$static.sequence);
    if (instanceOf(test_0, 147)) {
        newRule.alwaysMatches = true;
        this$static.anyElementRule = $addRuleToList_0(newRule, this$static.anyElementRule, true);
    }
    else if (instanceOf(test_0, 60)) {
        newRule.alwaysMatches = true;
        fp = dynamicCast(test_0, 60).qName;
        chain = dynamicCast($get_0(this$static.namedElementRules, fp), 63);
        $put_0(this$static.namedElementRules, fp, $addRuleToList_0(newRule, chain, true));
    }
    else {
        this$static.unnamedElementRuleChain = $addRuleToList_0(newRule, this$static.unnamedElementRuleChain, false);
    }
}

function $addRuleToList_0(newRule, list, dropRemainder){
    var precedence, prev, rule;
    if (!list) {
        return newRule;
    }
    precedence = newRule.precedence;
    rule = list;
    prev = null;
    while (rule) {
        if (rule.precedence <= precedence) {
            newRule.next = dropRemainder?null:rule;
            if (!prev) {
                return newRule;
            }
            else {
                prev.next = newRule;
            }
            break;
        }
        else {
            prev = rule;
            rule = rule.next;
        }
    }
    if (!rule) {
        prev.next = newRule;
        newRule.next = null;
    }
    return list;
}

function StripSpaceRules(){
    $clinit_StripSpaceRules();
    this.namedElementRules = new HashMap_0(32);
}

defineClass(768, 1, {}, StripSpaceRules);
_.anyElementRule = null;
_.sequence = 0;
_.unnamedElementRuleChain = null;
var PRESERVE, STRIP;
var Lclient_net_sf_saxon_ce_trans_StripSpaceRules_2_classLit = createForClass('client.net.sf.saxon.ce.trans', 'StripSpaceRules', 768, Ljava_lang_Object_2_classLit);
function XPathException$Circularity(message){
    XPathException_0.call(this, message);
}

defineClass(365, 4, {4:1, 365:1, 3:1, 19:1, 37:1}, XPathException$Circularity);
var Lclient_net_sf_saxon_ce_trans_XPathException$Circularity_2_classLit = createForClass('client.net.sf.saxon.ce.trans', 'XPathException/Circularity', 365, Lclient_net_sf_saxon_ce_trans_XPathException_2_classLit);
defineClass(218, 1, {218:1});
var Lclient_net_sf_saxon_ce_trans_update_PendingUpdateAction_2_classLit = createForClass('client.net.sf.saxon.ce.trans.update', 'PendingUpdateAction', 218, Ljava_lang_Object_2_classLit);
function DeleteAction(node){
    this.targetNode = node;
}

defineClass(377, 218, {377:1, 218:1}, DeleteAction);
_.apply_0 = function apply_0(context){
    var parent_0;
    parent_0 = $getParentElement(this.targetNode);
    !!parent_0 && $removeChild(parent_0, this.targetNode);
}
;
var Lclient_net_sf_saxon_ce_trans_update_DeleteAction_2_classLit = createForClass('client.net.sf.saxon.ce.trans.update', 'DeleteAction', 377, Lclient_net_sf_saxon_ce_trans_update_PendingUpdateAction_2_classLit);
function InsertAction(content_0, targetNode){
    this.content_0 = content_0;
    this.targetNode = targetNode;
    this.position_0 = 1;
}

defineClass(378, 218, {378:1, 218:1}, InsertAction);
_.apply_0 = function apply_1(context){
    var count, i_0, list, refNode;
    switch (this.position_0) {
        case 0:
            {
                list = this.content_0.childNodes;
                count = list.length;
                for (i_0 = count - 1; i_0 >= 0; i_0--) {
                    $insertFirst(this.targetNode, list[i_0]);
                }
                break;
            }

        case 1:
            {
                while (this.content_0.hasChildNodes()) {
                    $appendChild_0(this.targetNode, this.content_0.firstChild);
                }
                break;
            }

        case 2:
            {
                refNode = $getChild(this.targetNode, this.position_0);
                list = this.content_0.childNodes;
                count = list.length;
                for (i_0 = 0; i_0 < count; i_0++) {
                    $insertBefore(this.targetNode, list[i_0], refNode);
                }
                break;
            }

        case 3:
            {
                refNode = $getChild(this.targetNode, this.position_0);
                list = this.content_0.childNodes;
                count = list.length;
                for (i_0 = count - 1; i_0 >= 0; i_0--) {
                    $insertAfter(this.targetNode, list[i_0], refNode);
                }
                break;
            }

        default:throw new UnsupportedOperationException_0('Unknown insert position ' + this.position_0);
    }
}
;
_.position_0 = 0;
var Lclient_net_sf_saxon_ce_trans_update_InsertAction_2_classLit = createForClass('client.net.sf.saxon.ce.trans.update', 'InsertAction', 378, Lclient_net_sf_saxon_ce_trans_update_PendingUpdateAction_2_classLit);
function $add_3(this$static, action){
    $add_16(this$static.list, action);
}

function $apply_1(this$static, context){
    var action, e, i_0, i0, i1, state;
    try {
        state = 'delete';
        for (i0 = 0; i0 < this$static.list.array.length; i0++) {
            action = dynamicCast($get_1(this$static.list, i0), 218);
            instanceOf(action, 377) && action.apply_0(context);
        }
        state = 'insert';
        for (i1 = 0; i1 < this$static.list.array.length; i1++) {
            action = dynamicCast($get_1(this$static.list, i1), 218);
            instanceOf(action, 378) && action.apply_0(context);
        }
        state = 'set-attribute';
        for (i_0 = 0; i_0 < this$static.list.array.length; i_0++) {
            action = dynamicCast($get_1(this$static.list, i_0), 218);
            instanceOf(action, 379) && action.apply_0(context);
        }
        this$static.list = new ArrayList;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            e = $e0;
            $severe_0(this$static.logger, 'Error on DOM write action: ' + state + ' ' + e.getMessage());
            throw new XPathException_5(e);
        }
        else 
            throw unwrap($e0);
    }
}

function PendingUpdateList(){
    this.list = new ArrayList;
    this.logger = (new LoggerImplRegular , $ensureLogger(getLogManager(), 'PendingUpdateList'));
}

defineClass(579, 1, {}, PendingUpdateList);
var Lclient_net_sf_saxon_ce_trans_update_PendingUpdateList_2_classLit = createForClass('client.net.sf.saxon.ce.trans.update', 'PendingUpdateList', 579, Ljava_lang_Object_2_classLit);
function SetAttributeAction(element, uri_0, localNname, value_0){
    this.targetNode = element;
    this.uri_0 = uri_0;
    this.localName_0 = localNname;
    this.value_0 = value_0;
}

defineClass(379, 218, {218:1, 379:1}, SetAttributeAction);
_.apply_0 = function apply_2(context){
    var name_0;
    if (this.value_0 == null) {
        $removeAttribute(this.targetNode, this.localName_0);
    }
    else if ($equals_5('http://saxonica.com/ns/html-property', this.uri_0)) {
        $setPropertyString(this.targetNode, this.localName_0, this.value_0);
    }
    else if ($equals_5('http://saxonica.com/ns/html-style-property', this.uri_0)) {
        this.localName_0.length > 1 && this.localName_0.charCodeAt(0) == 95 && this.localName_0.charCodeAt(1) == 45?(name_0 = $substring_0(this.localName_0, 1)):(name_0 = this.localName_0);
        name_0 = getCamelCaseName(name_0);
        $setPropertyImpl(this.targetNode.style, name_0, this.value_0);
    }
    else {
        if (this.uri_0.length == 0) {
            $setAttribute(this.targetNode, this.localName_0, this.value_0);
            setAttributeProps(this.targetNode, this.localName_0, this.value_0);
        }
        else {
            setAttribute(this.targetNode.ownerDocument, this.targetNode, this.localName_0, this.uri_0, this.value_0, 2);
        }
        $equals_5(this.localName_0, 'style') && setStyleProperties(this.targetNode, this.value_0);
    }
}
;
var Lclient_net_sf_saxon_ce_trans_update_SetAttributeAction_2_classLit = createForClass('client.net.sf.saxon.ce.trans.update', 'SetAttributeAction', 379, Lclient_net_sf_saxon_ce_trans_update_PendingUpdateAction_2_classLit);
function $isSameNodeInfo(this$static, other){
    return instanceOf(other, 177) && this$static.element.isSameNodeInfo(dynamicCast(other, 177).element) && this$static.nsBinding == dynamicCast(other, 177).nsBinding;
}

function NamespaceNode(element, nscode, position){
    this.element = element;
    this.nsBinding = nscode;
    this.position_0 = position;
    this.qName = null;
}

function makeIterator(element, test_0){
    var bindings, node, node0, nodes, position;
    nodes = new ArrayList;
    bindings = element.getNodeKind() == 1?new NamespaceIterator(element):($clinit_Collections() , $clinit_Collections() , $clinit_Collections$EmptyListIterator() , INSTANCE_0);
    position = 0;
    while (bindings.hasNext()) {
        node0 = new NamespaceNode(element, dynamicCast(bindings.next_2(), 53), position++);
        test_0.matchesItem(node0) && (setCheck(nodes.array, nodes.array.length, node0) , true);
    }
    node = new NamespaceNode(element, ($clinit_NamespaceBinding() , XML), position);
    test_0.matchesItem(node) && (setCheck(nodes.array, nodes.array.length, node) , true);
    return new ListIterator(nodes);
}

defineClass(177, 23, {15:1, 7:1, 14:1, 177:1, 23:1}, NamespaceNode);
_.compareOrder = function compareOrder_2(other){
    var c;
    if (instanceOf(other, 177) && this.element.isSameNodeInfo(dynamicCast(other, 177).element)) {
        c = this.position_0 - dynamicCast(other, 177).position_0;
        if (c == 0) {
            return 0;
        }
        if (c < 0) {
            return -1;
        }
        return 1;
    }
    else 
        return this.element.isSameNodeInfo(other)?1:this.element.compareOrder(other);
}
;
_.copy = function copy_6(out, copyOptions){
    out.namespace_0(this.nsBinding, 32);
}
;
_.equals$ = function equals_37(other){
    return instanceOf(other, 7) && $isSameNodeInfo(this, dynamicCast(other, 7));
}
;
_.generateId = function generateId_3(buffer){
    this.element.generateId(buffer);
    $append_3(buffer, 'n');
    $append_3(buffer, '' + this.position_0);
}
;
_.getBaseURI = function getBaseURI_5(){
    return null;
}
;
_.getDeclaredNamespaces = function getDeclaredNamespaces_3(buffer){
    return null;
}
;
_.getDisplayName = function getDisplayName_2(){
    return this.nsBinding.prefix_0;
}
;
_.getDocumentNumber = function getDocumentNumber_3(){
    return this.element.getDocumentNumber();
}
;
_.getDocumentRoot = function getDocumentRoot_3(){
    return this.element.getDocumentRoot();
}
;
_.getLocalPart = function getLocalPart_2(){
    return this.nsBinding.prefix_0;
}
;
_.getNodeKind = function getNodeKind_8(){
    return 13;
}
;
_.getNodeName = function getNodeName_3(){
    if (!this.qName) {
        if (!this.nsBinding.prefix_0.length) {
            return null;
        }
        else {
            this.qName = new StructuredQName('', '', this.nsBinding.prefix_0);
        }
    }
    return this.qName;
}
;
_.getParent = function getParent_2(){
    return this.element;
}
;
_.getRoot = function getRoot_3(){
    return this.element.getRoot();
}
;
_.getSiblingPosition = function getSiblingPosition_2(){
    return 1;
}
;
_.getStringValue = function getStringValue_3(){
    return this.nsBinding.uri_0;
}
;
_.getSystemId = function getSystemId_8(){
    return this.element.getSystemId();
}
;
_.getTypedValue = function getTypedValue_3(){
    return new StringValue_0(this.nsBinding.uri_0);
}
;
_.getURI = function getURI_2(){
    return '';
}
;
_.hasChildNodes_0 = function hasChildNodes_3(){
    return false;
}
;
_.hashCode$ = function hashCode_40(){
    return this.element.hashCode$() ^ this.position_0 << 13;
}
;
_.isSameNodeInfo = function isSameNodeInfo_3(other){
    return $isSameNodeInfo(this, other);
}
;
_.iterateAxis = function iterateAxis_2(axisNumber, nodeTest){
    switch (axisNumber) {
        case 0:
            return this.element.iterateAxis(1, nodeTest);
        case 1:
            return nodeTest.matchesItem(this)?new PrependIterator(this, this.element.iterateAxis(1, nodeTest)):this.element.iterateAxis(1, nodeTest);
        case 2:
    case 3:
case 4:
    case 5:
case 7:
    case 8:
case 11:
    return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
case 6:
    return newAxisFilter(new Navigator$FollowingEnumeration(this), nodeTest);
case 9:
    return filteredSingleton(this.element, nodeTest);
case 10:
    return newAxisFilter(new Navigator$PrecedingEnumeration(this, false), nodeTest);
case 12:
    return $clinit_Navigator() , nodeTest.matchesItem(this)?new SingletonIterator(this):($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1);
default:throw new IllegalArgumentException_0('Unknown axis number ' + axisNumber);
    }
}
;
_.position_0 = 0;
var Lclient_net_sf_saxon_ce_tree_NamespaceNode_2_classLit = createForClass('client.net.sf.saxon.ce.tree', 'NamespaceNode', 177, Lclient_net_sf_saxon_ce_value_AbstractNode_2_classLit);
function ArrayIterator(nodes){
    this.items = nodes;
    this.index_0 = 0;
}

defineClass(151, 1, $intern_70, ArrayIterator);
_.getAnother = function getAnother_26(){
    return new ArrayIterator(this.items);
}
;
_.getAnother_0 = function getAnother_27(){
    return new ArrayIterator(this.items);
}
;
_.getLastPosition = function getLastPosition_2(){
    return this.items.length;
}
;
_.materialize = function materialize(){
    return new SequenceExtent_1(this.items);
}
;
_.next_0 = function next_22(){
    if (this.index_0 >= this.items.length) {
        this.index_0 = this.items.length + 1;
        return null;
    }
    return this.items[this.index_0++];
}
;
_.index_0 = 0;
var Lclient_net_sf_saxon_ce_tree_iter_ArrayIterator_2_classLit = createForClass('client.net.sf.saxon.ce.tree.iter', 'ArrayIterator', 151, Ljava_lang_Object_2_classLit);
function $clinit_EmptyIterator(){
    $clinit_EmptyIterator = emptyMethod;
    theInstance_1 = new EmptyIterator;
}

function EmptyIterator(){
}

defineClass(316, 1, {105:1, 64:1, 316:1, 185:1, 165:1}, EmptyIterator);
_.getAnother = function getAnother_28(){
    return theInstance_1;
}
;
_.getAnother_0 = function getAnother_29(){
    return theInstance_1;
}
;
_.getLastPosition = function getLastPosition_3(){
    return 0;
}
;
_.materialize = function materialize_0(){
    return $clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10;
}
;
_.next_0 = function next_23(){
    return null;
}
;
var theInstance_1;
var Lclient_net_sf_saxon_ce_tree_iter_EmptyIterator_2_classLit = createForClass('client.net.sf.saxon.ce.tree.iter', 'EmptyIterator', 316, Ljava_lang_Object_2_classLit);
function $last(this$static){
    if (this$static.last == -1) {
        instanceOf(this$static.base, 105) && (this$static.last = dynamicCast(this$static.base, 105).getLastPosition());
        this$static.last == -1 && (this$static.last = count_0(this$static.base.getAnother()));
    }
    return this$static.last;
}

function $next_3(this$static){
    this$static.curr = this$static.base.next_0();
    !this$static.curr?(this$static.pos = -1):++this$static.pos;
    return this$static.curr;
}

function FocusIterator(base){
    this.base = base;
}

defineClass(149, 1, {64:1, 149:1}, FocusIterator);
_.getAnother = function getAnother_30(){
    return new FocusIterator(this.base.getAnother());
}
;
_.next_0 = function next_24(){
    return $next_3(this);
}
;
_.last = -1;
_.pos = 0;
var Lclient_net_sf_saxon_ce_tree_iter_FocusIterator_2_classLit = createForClass('client.net.sf.saxon.ce.tree.iter', 'FocusIterator', 149, Ljava_lang_Object_2_classLit);
function $getObject(index_0, jsa){
    return jsa[index_0];
}

function JsArrayIterator(list, config){
    this.index_0 = 0;
    this.list = list;
    this.length_0 = list.length;
    this.config = config;
}

defineClass(250, 1, {105:1, 14:1, 64:1, 185:1, 250:1, 165:1}, JsArrayIterator);
_.getAnother = function getAnother_31(){
    return new JsArrayIterator(this.list, this.config);
}
;
_.getAnother_0 = function getAnother_32(){
    return new JsArrayIterator(this.list, this.config);
}
;
_.getLastPosition = function getLastPosition_4(){
    return this.length_0;
}
;
_.getLength = function getLength_1(){
    return this.length_0;
}
;
_.itemAt = function itemAt_1(n){
    return convertFromJavaScript($getObject(n, this.list), this.config).next_0();
}
;
_.iterate = function iterate_53(){
    return new JsArrayIterator(this.list, this.config);
}
;
_.materialize = function materialize_1(){
    return this;
}
;
_.next_0 = function next_25(){
    var obj;
    if (this.index_0 >= this.length_0) {
        this.current = null;
        this.index_0 = -1;
        this.length_0 = -1;
        return null;
    }
    obj = $getObject(this.index_0++, this.list);
    this.current = convertFromJavaScript(obj, this.config).next_0();
    return this.current;
}
;
_.current = null;
_.index_0 = 0;
_.length_0 = 0;
_.list = null;
var Lclient_net_sf_saxon_ce_tree_iter_JsArrayIterator_2_classLit = createForClass('client.net.sf.saxon.ce.tree.iter', 'JsArrayIterator', 250, Ljava_lang_Object_2_classLit);
function ListIterator(list){
    this.index_0 = 0;
    this.list = list;
    this.length_0 = list.size_1();
}

defineClass(153, 1, $intern_70, ListIterator);
_.getAnother = function getAnother_33(){
    return new ListIterator(this.list);
}
;
_.getAnother_0 = function getAnother_34(){
    return new ListIterator(this.list);
}
;
_.getLastPosition = function getLastPosition_5(){
    return this.length_0;
}
;
_.materialize = function materialize_2(){
    return this.length_0 == 0?($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10):this.length_0 == 1?dynamicCast(this.list.get_1(0), 14):new SequenceExtent_0(this.list);
}
;
_.next_0 = function next_26(){
    if (this.index_0 >= this.length_0) {
        this.index_0 = -1;
        this.length_0 = -1;
        return null;
    }
    return dynamicCast(this.list.get_1(this.index_0++), 15);
}
;
_.index_0 = 0;
_.length_0 = 0;
_.list = null;
var Lclient_net_sf_saxon_ce_tree_iter_ListIterator_2_classLit = createForClass('client.net.sf.saxon.ce.tree.iter', 'ListIterator', 153, Ljava_lang_Object_2_classLit);
function OneItemGoneIterator(initial, baseIterator){
    this.baseIterator = baseIterator;
    this.initial = initial;
}

defineClass(408, 1, {105:1, 64:1, 185:1}, OneItemGoneIterator);
_.getAnother = function getAnother_35(){
    return this.baseIterator.getAnother();
}
;
_.getLastPosition = function getLastPosition_6(){
    return instanceOf(this.baseIterator, 105)?dynamicCast(this.baseIterator, 105).getLastPosition():-1;
}
;
_.materialize = function materialize_3(){
    return instanceOf(this.baseIterator, 185)?dynamicCast(this.baseIterator, 185).materialize():null;
}
;
_.next_0 = function next_27(){
    var first;
    if (this.initial) {
        first = this.initial;
        this.initial = null;
        return first;
    }
    else {
        return this.baseIterator.next_0();
    }
}
;
var Lclient_net_sf_saxon_ce_tree_iter_OneItemGoneIterator_2_classLit = createForClass('client.net.sf.saxon.ce.tree.iter', 'OneItemGoneIterator', 408, Ljava_lang_Object_2_classLit);
function PrependIterator(start_0, base){
    this.start_0 = start_0;
    this.base = base;
}

defineClass(291, 1, $intern_6, PrependIterator);
_.getAnother = function getAnother_36(){
    return new PrependIterator(this.start_0, this.base.getAnother_0());
}
;
_.getAnother_0 = function getAnother_37(){
    return new PrependIterator(this.start_0, this.base.getAnother_0());
}
;
_.next_0 = function next_28(){
    if (this.position_0 == 0) {
        this.position_0 = 1;
        return this.start_0;
    }
    else {
        return this.base.next_0();
    }
}
;
_.position_0 = 0;
var Lclient_net_sf_saxon_ce_tree_iter_PrependIterator_2_classLit = createForClass('client.net.sf.saxon.ce.tree.iter', 'PrependIterator', 291, Ljava_lang_Object_2_classLit);
function SingletonIterator(value_0){
    this.item_0 = value_0;
}

function makeIterator_0(item_0){
    return !item_0?($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1):new SingletonIterator(item_0);
}

defineClass(70, 1, $intern_70, SingletonIterator);
_.getAnother = function getAnother_38(){
    return new SingletonIterator(this.item_0);
}
;
_.getAnother_0 = function getAnother_39(){
    return new SingletonIterator(this.item_0);
}
;
_.getLastPosition = function getLastPosition_7(){
    return 1;
}
;
_.materialize = function materialize_4(){
    return this.item_0;
}
;
_.next_0 = function next_29(){
    if (this.position_0 == 0) {
        this.position_0 = 1;
        return this.item_0;
    }
    else if (this.position_0 == 1) {
        this.position_0 = -1;
        return null;
    }
    else {
        return null;
    }
}
;
_.position_0 = 0;
var Lclient_net_sf_saxon_ce_tree_iter_SingletonIterator_2_classLit = createForClass('client.net.sf.saxon.ce.tree.iter', 'SingletonIterator', 70, Ljava_lang_Object_2_classLit);
function $advance_0(this$static){
    do {
        this$static.next = this$static.function_$.step_0(this$static.next);
    }
    while (!!this$static.next && !this$static.function_$.conforms(this$static.next));
}

function $next_4(this$static){
    var curr;
    if (!this$static.next) {
        return null;
    }
    else {
        curr = this$static.next;
        $advance_0(this$static);
        return curr;
    }
}

function SteppingIterator(origin, function_$, includeSelf){
    this.origin = origin;
    this.includeSelf = includeSelf;
    this.function_$ = function_$;
    this.next = origin;
    (!includeSelf || !function_$.conforms(origin)) && $advance_0(this);
}

defineClass(169, 1, $intern_6, SteppingIterator);
_.getAnother = function getAnother_40(){
    return new SteppingIterator(this.origin, this.function_$, this.includeSelf);
}
;
_.getAnother_0 = function getAnother_41(){
    return new SteppingIterator(this.origin, this.function_$, this.includeSelf);
}
;
_.next_0 = function next_30(){
    return $next_4(this);
}
;
_.includeSelf = false;
var Lclient_net_sf_saxon_ce_tree_iter_SteppingIterator_2_classLit = createForClass('client.net.sf.saxon.ce.tree.iter', 'SteppingIterator', 169, Ljava_lang_Object_2_classLit);
function $getNodeName_0(this$static){
    if (!this$static.parent_0 || this$static.index_0 == -1) {
        return null;
    }
    return $getStructuredQName($getAttributeList(dynamicCast(this$static.parent_0, 27)), this$static.index_0);
}

function AttributeImpl(element, index_0){
    this.parent_0 = element;
    this.index_0 = index_0;
}

defineClass(242, 10, {15:1, 7:1, 14:1, 242:1, 10:1, 23:1}, AttributeImpl);
_.copy = function copy_7(out, copyOptions){
    var name_0;
    name_0 = $getNodeName_0(this);
    out.attribute(name_0, $getValue($getAttributeList(dynamicCast(this.parent_0, 27)), this.index_0));
}
;
_.generateId = function generateId_4(buffer){
    $getParent_0(this).generateId(buffer);
    $ensureCapacity_0(buffer, 1);
    buffer.array[buffer.used++] = 97;
    $append_3(buffer, '' + this.index_0);
}
;
_.getNextInDocument = function getNextInDocument_0(anchor){
    if (anchor == this)
        return null;
    return $getNextInDocument($getParent_0(this), anchor);
}
;
_.getNextSibling = function getNextSibling_0(){
    return null;
}
;
_.getNodeKind = function getNodeKind_9(){
    return 2;
}
;
_.getNodeName = function getNodeName_4(){
    return $getNodeName_0(this);
}
;
_.getPreviousInDocument = function getPreviousInDocument_0(){
    return $getParent_0(this);
}
;
_.getPreviousSibling = function getPreviousSibling_0(){
    return null;
}
;
_.getSequenceNumber = function getSequenceNumber_1(){
    return initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [this.parent_0.sequence, $intern_14 + this.index_0]);
}
;
_.getStringValue = function getStringValue_4(){
    return $getValue($getAttributeList(dynamicCast(this.parent_0, 27)), this.index_0);
}
;
_.hashCode$ = function hashCode_41(){
    return getHashCode(this.parent_0) ^ this.index_0 << 16;
}
;
_.isSameNodeInfo = function isSameNodeInfo_4(other){
    var otherAtt;
    if (!instanceOf(other, 242)) {
        return false;
    }
    if (this == other) {
        return true;
    }
    otherAtt = dynamicCast(other, 242);
    return this.parent_0 == otherAtt.parent_0 && this.index_0 == otherAtt.index_0;
}
;
var Lclient_net_sf_saxon_ce_tree_linked_AttributeImpl_2_classLit = createForClass('client.net.sf.saxon.ce.tree.linked', 'AttributeImpl', 242, Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit);
function CommentImpl(content_0){
    $clinit_NodeImpl();
    this.comment = content_0;
}

defineClass(686, 10, $intern_67, CommentImpl);
_.copy = function copy_8(out, copyOptions){
    out.comment_0(this.comment);
}
;
_.getNodeKind = function getNodeKind_10(){
    return 8;
}
;
_.getStringValue = function getStringValue_5(){
    return this.comment;
}
;
_.getTypedValue = function getTypedValue_4(){
    return new StringValue_0(this.comment);
}
;
var Lclient_net_sf_saxon_ce_tree_linked_CommentImpl_2_classLit = createForClass('client.net.sf.saxon.ce.tree.linked', 'CommentImpl', 686, Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit);
function $generateId(this$static, buffer){
    $ensureCapacity_0(buffer, 1);
    buffer.array[buffer.used++] = 100;
    $append_3(buffer, '' + toString_77(fromInt(this$static.documentNumber)));
}

function $getAllElements(this$static, name_0){
    var list, next;
    !this$static.elementList && (this$static.elementList = new HashMap_0(100));
    list = dynamicCast($get_0(this$static.elementList, name_0), 88);
    if (!list) {
        list = new ArrayList_0(100);
        next = $getNextInDocument(this$static, this$static);
        while (next) {
            next.getNodeKind() == 1 && $equals_0(next.getNodeName(), name_0) && list.add_3(next);
            next = next.getNextInDocument(this$static);
        }
        $put_0(this$static.elementList, name_0, list);
    }
    return new ListIterator(list);
}

function $getSystemId_0(this$static, seq){
    return $getSystemId_1(this$static.systemIdMap, seq);
}

function $indexIDs(this$static){
    var atts, curr, e, i_0, root;
    if (this$static.idTable) {
        return;
    }
    this$static.idTable = new HashMap_0(256);
    curr = this$static;
    root = curr;
    while (curr) {
        if (curr.getNodeKind() == 1) {
            e = dynamicCast(curr, 27);
            atts = !e.attributeList?($clinit_AttributeCollection() , EMPTY_ATTRIBUTE_COLLECTION):e.attributeList;
            for (i_0 = 0; i_0 < (atts.values == null?0:atts.used); i_0++) {
                $equals_0(($clinit_StructuredQName() , XML_ID), atts.names[i_0]) && isValidNCName(trim_0($getValue(atts, i_0))) && $registerID(this$static, e, trim_0($getValue(atts, i_0)));
            }
        }
        curr = curr.getNextInDocument(root);
    }
}

function $registerID(this$static, e, id_0){
    var old;
    !this$static.idTable && (this$static.idTable = new HashMap_0(256));
    old = $getStringValue_1(this$static.idTable, id_0);
    old == null && $putStringValue(this$static.idTable, id_0, e);
}

function $setBaseURI_3(this$static, uri_0){
    this$static.baseURI = uri_0;
}

function $setConfiguration_2(this$static, config){
    this$static.documentNumber = config.nextDocumentNumber++;
}

function $setDocumentElement(this$static, e){
    this$static.documentElement_0 = e;
}

function $setSystemId_2(this$static, seq, uri_0){
    uri_0 == null && (uri_0 = '');
    $setSystemId_4(this$static.systemIdMap, seq, uri_0);
}

function $setSystemId_3(this$static, uri_0){
    uri_0 == null && (uri_0 = '');
    $setSystemId_4(this$static.systemIdMap, this$static.sequence, uri_0);
}

function DocumentImpl(){
    $clinit_ParentNodeImpl();
    this.systemIdMap = new SystemIdMap;
    this.parent_0 = null;
}

defineClass(148, 31, {109:1, 15:1, 7:1, 14:1, 148:1, 10:1, 31:1, 23:1}, DocumentImpl);
_.copy = function copy_9(out, copyOptions){
    var next;
    out.startDocument();
    next = $getFirstChild(this);
    while (next) {
        next.copy(out, copyOptions);
        next = next.getNextSibling();
    }
    out.endDocument();
}
;
_.generateId = function generateId_5(buffer){
    $generateId(this, buffer);
}
;
_.getBaseURI = function getBaseURI_6(){
    if (this.baseURI != null) {
        return this.baseURI;
    }
    return $getSystemId_1(this.systemIdMap, this.sequence);
}
;
_.getDocumentNumber = function getDocumentNumber_4(){
    return this.documentNumber;
}
;
_.getDocumentRoot = function getDocumentRoot_4(){
    return this;
}
;
_.getNextSibling = function getNextSibling_1(){
    return null;
}
;
_.getNodeKind = function getNodeKind_11(){
    return 9;
}
;
_.getPhysicalRoot = function getPhysicalRoot_0(){
    return this;
}
;
_.getPreviousSibling = function getPreviousSibling_1(){
    return null;
}
;
_.getRoot = function getRoot_4(){
    return this;
}
;
_.getSystemId = function getSystemId_9(){
    return $getSystemId_1(this.systemIdMap, this.sequence);
}
;
_.selectID = function selectID_0(id_0){
    !this.idTable && $indexIDs(this);
    return dynamicCast($getStringValue_1(this.idTable, id_0), 7);
}
;
_.setUserData = function setUserData_0(key, value_0){
    !this.userData && (this.userData = new HashMap_0(4));
    !value_0?$removeStringValue(this.userData, key):$putStringValue(this.userData, key, value_0);
}
;
_.documentNumber = 0;
_.imaginary = false;
var Lclient_net_sf_saxon_ce_tree_linked_DocumentImpl_2_classLit = createForClass('client.net.sf.saxon.ce.tree.linked', 'DocumentImpl', 148, Lclient_net_sf_saxon_ce_tree_linked_ParentNodeImpl_2_classLit);
function $attribute_0(this$static, nameCode, value_0){
    if (this$static.contentStarted) {
        throw new IllegalStateException_0('attribute() called after startContent()');
    }
    !this$static.attributes_0 && (this$static.attributes_0 = new AttributeCollection);
    $addAttribute(this$static.attributes_0, nameCode, toString__Ljava_lang_String___devirtual$_0(value_0));
}

function $close_1(this$static){
    if (!this$static.currentNode) {
        return;
    }
    $compact_0(this$static.currentNode, this$static.size_0[this$static.depth]);
    this$static.currentNode = null;
    this$static.arrays = null;
    this$static.nodeFactory = null;
}

function $endElement_1(this$static){
    if (!this$static.contentStarted) {
        throw new IllegalStateException_0('missing call on startContent()');
    }
    $compact_0(this$static.currentNode, this$static.size_0[this$static.depth]);
    --this$static.depth;
    this$static.currentNode = $getParent_0(this$static.currentNode);
}

function $getCurrentRoot(this$static){
    var physicalRoot;
    physicalRoot = this$static.currentRoot;
    return !!physicalRoot && physicalRoot.imaginary?physicalRoot.documentElement_0:physicalRoot;
}

function $namespace_1(this$static, nsBinding){
    var ns2;
    if (this$static.contentStarted) {
        throw new IllegalStateException_0('namespace() called after startContent()');
    }
    this$static.namespaces == null && (this$static.namespaces = initDim(Lclient_net_sf_saxon_ce_om_NamespaceBinding_2_classLit, $intern_5, 53, 5, 0, 1));
    if (this$static.namespacesUsed == this$static.namespaces.length) {
        ns2 = initDim(Lclient_net_sf_saxon_ce_om_NamespaceBinding_2_classLit, $intern_5, 53, this$static.namespaces.length * 2, 0, 1);
        arraycopy(this$static.namespaces, 0, ns2, 0, this$static.namespacesUsed);
        this$static.namespaces = ns2;
    }
    this$static.namespaces[this$static.namespacesUsed++] = nsBinding;
}

function $startContent_1(this$static){
    var elem, newsize, nslist;
    if (this$static.contentStarted) {
        throw new IllegalStateException_0('startContent() called more than once');
    }
    this$static.contentStarted = true;
    !this$static.attributes_0?(this$static.attributes_0 = ($clinit_AttributeCollection() , EMPTY_ATTRIBUTE_COLLECTION)):$compact(this$static.attributes_0);
    nslist = this$static.namespaces;
    (nslist == null || this$static.namespacesUsed == 0) && (nslist = ($clinit_NamespaceBinding() , EMPTY_ARRAY));
    elem = this$static.nodeFactory.makeElementNode(this$static.currentNode, this$static.elementNameCode, this$static.attributes_0, nslist, this$static.namespacesUsed, this$static.pipe, this$static.systemId, this$static.allocateSequenceNumbers?this$static.nextNodeNumber++:-1);
    this$static.namespacesUsed = 0;
    this$static.attributes_0 = null;
    while (this$static.depth >= this$static.arrays.array.length) {
        $add_16(this$static.arrays, initDim(Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit, $intern_66, 10, 20, 0, 1));
    }
    $setChildren_0(elem, $get_1(this$static.arrays, this$static.depth));
    $addChild(this$static.currentNode, elem, this$static.size_0[this$static.depth]++);
    if (this$static.depth >= this$static.size_0.length - 1) {
        newsize = initDim(I_classLit, $intern_4, 0, this$static.size_0.length * 2, 7, 1);
        arraycopy(this$static.size_0, 0, newsize, 0, this$static.size_0.length);
        this$static.size_0 = newsize;
    }
    this$static.size_0[++this$static.depth] = 0;
    this$static.namespacesUsed = 0;
    instanceOf(this$static.currentNode, 109) && $setDocumentElement(dynamicCast(this$static.currentNode, 148), elem);
    this$static.currentNode = elem;
}

function $startDocument_0(this$static){
    var doc;
    doc = new DocumentImpl;
    this$static.currentRoot = doc;
    $setSystemId_3(doc, this$static.systemId);
    $setBaseURI_3(doc, this$static.baseURI);
    $setConfiguration_2(doc, this$static.config);
    this$static.currentNode = doc;
    this$static.depth = 0;
    this$static.size_0[this$static.depth] = 0;
    doc.sequence = 0;
    this$static.contentStarted = true;
}

function $startElement_1(this$static, qName){
    if (!this$static.currentNode) {
        $startDocument_0(this$static);
        this$static.currentRoot.imaginary = true;
    }
    this$static.elementNameCode = qName;
    this$static.namespacesUsed = 0;
    this$static.attributes_0 = null;
    this$static.contentStarted = false;
}

function LinkedTreeBuilder(){
    this.size_0 = initDim(I_classLit, $intern_4, 0, 100, 7, 1);
    this.arrays = new ArrayList_0(20);
    this.nodeFactory = new LinkedTreeBuilder$DefaultNodeFactory;
}

defineClass(318, 880, {}, LinkedTreeBuilder);
_.attribute = function attribute_7(nameCode, value_0){
    $attribute_0(this, nameCode, value_0);
}
;
_.characters = function characters_7(chars){
    var n, prev;
    if (!this.contentStarted) {
        throw new IllegalStateException_0('missing call on startContent()');
    }
    if (length__I__devirtual$(chars) > 0) {
        prev = $getNthChild(this.currentNode, this.size_0[this.depth] - 1);
        if (instanceOf(prev, 287)) {
            $appendStringValue(dynamicCast(prev, 287), toString__Ljava_lang_String___devirtual$_0(chars));
        }
        else {
            n = new TextImpl(toString__Ljava_lang_String___devirtual$_0(chars));
            $addChild(this.currentNode, n, this.size_0[this.depth]++);
        }
    }
}
;
_.close_0 = function close_7(){
    $close_1(this);
}
;
_.comment_0 = function comment_7(chars){
    var comment;
    if (!this.contentStarted) {
        throw new IllegalStateException_0('missing call on startContent()');
    }
    comment = new CommentImpl(toString__Ljava_lang_String___devirtual$_0(chars));
    $addChild(this.currentNode, comment, this.size_0[this.depth]++);
}
;
_.endDocument = function endDocument_3(){
    $compact_0(this.currentNode, this.size_0[this.depth]);
}
;
_.endElement = function endElement_7(){
    $endElement_1(this);
}
;
_.namespace_0 = function namespace_7(nsBinding, properties){
    $namespace_1(this, nsBinding);
}
;
_.open_1 = function open_9(){
    this.depth = 0;
    this.size_0[this.depth] = 0;
}
;
_.processingInstruction = function processingInstruction_6(name_0, remainder){
    var pi;
    if (!this.contentStarted) {
        throw new IllegalStateException_0('missing call on startContent()');
    }
    pi = new ProcInstImpl(name_0, toString__Ljava_lang_String___devirtual$_0(remainder));
    $addChild(this.currentNode, pi, this.size_0[this.depth]++);
}
;
_.startContent = function startContent_6(){
    $startContent_1(this);
}
;
_.startDocument = function startDocument_4(){
    $startDocument_0(this);
}
;
_.startElement = function startElement_9(qName, properties){
    $startElement_1(this, qName);
}
;
_.allocateSequenceNumbers = true;
_.contentStarted = false;
_.depth = 0;
_.namespacesUsed = 0;
_.nextNodeNumber = 1;
var Lclient_net_sf_saxon_ce_tree_linked_LinkedTreeBuilder_2_classLit = createForClass('client.net.sf.saxon.ce.tree.linked', 'LinkedTreeBuilder', 318, Lclient_net_sf_saxon_ce_event_Builder_2_classLit);
function LinkedTreeBuilder$DefaultNodeFactory(){
}

defineClass(634, 1, {}, LinkedTreeBuilder$DefaultNodeFactory);
_.makeElementNode = function makeElementNode_0(parent_0, nameCode, attlist, namespaces, namespacesUsed, pipe, baseURI, sequenceNumber){
    var e;
    e = new ElementImpl;
    namespacesUsed > 0 && (e.namespaceList = initDim(Lclient_net_sf_saxon_ce_om_NamespaceBinding_2_classLit, $intern_5, 53, namespacesUsed, 0, 1) , arraycopy(namespaces, 0, e.namespaceList, 0, namespacesUsed));
    $initialise(e, nameCode, attlist, parent_0, sequenceNumber);
    $setLocation(e, baseURI);
    return e;
}
;
var Lclient_net_sf_saxon_ce_tree_linked_LinkedTreeBuilder$DefaultNodeFactory_2_classLit = createForClass('client.net.sf.saxon.ce.tree.linked', 'LinkedTreeBuilder/DefaultNodeFactory', 634, Ljava_lang_Object_2_classLit);
function NodeImpl$NextDescendantFunction(anchor, predicate){
    this.anchor = anchor;
    this.predicate = predicate;
}

defineClass(429, 1, {}, NodeImpl$NextDescendantFunction);
_.conforms = function conforms_0(current){
    return this.predicate.matchesItem(current);
}
;
_.step_0 = function step_1(current){
    return dynamicCast(current, 10).getNextInDocument(this.anchor);
}
;
var Lclient_net_sf_saxon_ce_tree_linked_NodeImpl$NextDescendantFunction_2_classLit = createForClass('client.net.sf.saxon.ce.tree.linked', 'NodeImpl/NextDescendantFunction', 429, Ljava_lang_Object_2_classLit);
function NodeImpl$NextSiblingFunction(predicate){
    this.predicate = predicate;
}

defineClass(589, 1, {}, NodeImpl$NextSiblingFunction);
_.conforms = function conforms_1(current){
    return this.predicate.matchesItem(current);
}
;
_.step_0 = function step_2(current){
    return dynamicCast(current, 10).getNextSibling();
}
;
var Lclient_net_sf_saxon_ce_tree_linked_NodeImpl$NextSiblingFunction_2_classLit = createForClass('client.net.sf.saxon.ce.tree.linked', 'NodeImpl/NextSiblingFunction', 589, Ljava_lang_Object_2_classLit);
function NodeImpl$PrecedingSiblingFunction(predicate){
    this.predicate = predicate;
}

defineClass(588, 1, {}, NodeImpl$PrecedingSiblingFunction);
_.conforms = function conforms_2(current){
    return this.predicate.matchesItem(current);
}
;
_.step_0 = function step_3(current){
    return dynamicCast(current, 10).getPreviousSibling();
}
;
var Lclient_net_sf_saxon_ce_tree_linked_NodeImpl$PrecedingSiblingFunction_2_classLit = createForClass('client.net.sf.saxon.ce.tree.linked', 'NodeImpl/PrecedingSiblingFunction', 588, Ljava_lang_Object_2_classLit);
function ProcInstImpl(localName, content_0){
    $clinit_NodeImpl();
    this.localName_0 = localName;
    this.content_0 = content_0;
}

defineClass(687, 10, $intern_67, ProcInstImpl);
_.copy = function copy_10(out, copyOptions){
    out.processingInstruction($getLocalPart_0(this), this.content_0);
}
;
_.getNodeKind = function getNodeKind_12(){
    return 7;
}
;
_.getNodeName = function getNodeName_5(){
    return new StructuredQName('', '', this.localName_0);
}
;
_.getStringValue = function getStringValue_6(){
    return this.content_0;
}
;
_.getTypedValue = function getTypedValue_5(){
    return new StringValue_0(this.content_0);
}
;
var Lclient_net_sf_saxon_ce_tree_linked_ProcInstImpl_2_classLit = createForClass('client.net.sf.saxon.ce.tree.linked', 'ProcInstImpl', 687, Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit);
function $getSystemId_1(this$static, sequence){
    var i_0;
    if (this$static.allocated == 0)
        return null;
    for (i_0 = 1; i_0 < this$static.allocated; i_0++) {
        if (this$static.sequenceNumbers[i_0] > sequence) {
            return this$static.uris[i_0 - 1];
        }
    }
    return this$static.uris[this$static.allocated - 1];
}

function $setSystemId_4(this$static, sequence, uri_0){
    var s, u;
    if (this$static.allocated > 0 && $equals_5(uri_0, this$static.uris[this$static.allocated - 1])) {
        return;
    }
    if (this$static.sequenceNumbers.length <= this$static.allocated + 1) {
        s = initDim(I_classLit, $intern_4, 0, this$static.allocated * 2, 7, 1);
        u = initDim(Ljava_lang_String_2_classLit, $intern_8, 2, this$static.allocated * 2, 4, 1);
        arraycopy(this$static.sequenceNumbers, 0, s, 0, this$static.allocated);
        arraycopy(this$static.uris, 0, u, 0, this$static.allocated);
        this$static.sequenceNumbers = s;
        this$static.uris = u;
    }
    this$static.sequenceNumbers[this$static.allocated] = sequence;
    this$static.uris[this$static.allocated] = uri_0;
    ++this$static.allocated;
}

function SystemIdMap(){
    this.sequenceNumbers = initDim(I_classLit, $intern_4, 0, 4, 7, 1);
    this.uris = initDim(Ljava_lang_String_2_classLit, $intern_8, 2, 4, 4, 1);
    this.allocated = 0;
}

defineClass(688, 1, {}, SystemIdMap);
_.allocated = 0;
var Lclient_net_sf_saxon_ce_tree_linked_SystemIdMap_2_classLit = createForClass('client.net.sf.saxon.ce.tree.linked', 'SystemIdMap', 688, Ljava_lang_Object_2_classLit);
function $appendStringValue(this$static, content_0){
    this$static.content_0 = this$static.content_0 + content_0;
}

function TextImpl(content_0){
    $clinit_NodeImpl();
    this.content_0 = content_0;
}

defineClass(287, 10, {15:1, 7:1, 14:1, 10:1, 287:1, 23:1}, TextImpl);
_.copy = function copy_11(out, copyOptions){
    out.characters(this.content_0);
}
;
_.getNodeKind = function getNodeKind_13(){
    return 3;
}
;
_.getStringValue = function getStringValue_7(){
    return this.content_0;
}
;
var Lclient_net_sf_saxon_ce_tree_linked_TextImpl_2_classLit = createForClass('client.net.sf.saxon.ce.tree.linked', 'TextImpl', 287, Lclient_net_sf_saxon_ce_tree_linked_NodeImpl_2_classLit);
function $append_1(this$static, ch_0){
    $ensureCapacity_0(this$static, 1);
    this$static.array[this$static.used++] = ch_0;
}

function $append_2(this$static, s){
    var len;
    len = length__I__devirtual$(s);
    $ensureCapacity_0(this$static, len);
    isJavaString(s)?$getChars_0(dynamicCastToString(s), len, this$static.array, this$static.used):instanceOf(s, 26)?$getChars(dynamicCast(s, 26), len, this$static.array, this$static.used):$getChars_0(toString__Ljava_lang_String___devirtual$_0(s), len, this$static.array, this$static.used);
    this$static.used += len;
}

function $append_3(this$static, s){
    var len;
    len = s.length;
    $ensureCapacity_0(this$static, len);
    $getChars_0(s, len, this$static.array, this$static.used);
    this$static.used += len;
}

function $append_4(this$static, srcArray, start_0, length_0){
    $ensureCapacity_0(this$static, length_0);
    arraycopy(srcArray, start_0, this$static.array, this$static.used, length_0);
    this$static.used += length_0;
}

function $appendWideChar(this$static, ch_0){
    if (ch_0 > $intern_2) {
        $append_1(this$static, (ch_0 - $intern_34 >> 10) + $intern_48 & $intern_2);
        $append_1(this$static, (ch_0 - $intern_34 & $intern_59) + $intern_50 & $intern_2);
    }
    else {
        $append_1(this$static, ch_0 & $intern_2);
    }
    return this$static;
}

function $charAt(this$static, index_0){
    if (index_0 >= this$static.used) {
        throw new IndexOutOfBoundsException_0('' + index_0);
    }
    return this$static.array[index_0];
}

function $condense(this$static){
    var array2;
    if (this$static.array.length - this$static.used > 256 || this$static.array.length > this$static.used * 2 && this$static.array.length - this$static.used > 20) {
        array2 = initDim(C_classLit, $intern_9, 0, this$static.used, 7, 1);
        arraycopy(this$static.array, 0, array2, 0, this$static.used);
        this$static.array = array2;
    }
    return this$static;
}

function $ensureCapacity_0(this$static, extra){
    var array2, newlen;
    if (this$static.used + extra > this$static.array.length) {
        newlen = this$static.array.length * 2;
        newlen < this$static.used + extra && (newlen = this$static.used + extra * 2);
        array2 = initDim(C_classLit, $intern_9, 0, newlen, 7, 1);
        arraycopy(this$static.array, 0, array2, 0, this$static.used);
        this$static.array = array2;
    }
}

function $getChars(this$static, srcEnd, dst, dstBegin){
    if (srcEnd > this$static.used) {
        throw new StringIndexOutOfBoundsException(srcEnd);
    }
    if (0 > srcEnd) {
        throw new StringIndexOutOfBoundsException(srcEnd);
    }
    arraycopy(this$static.array, 0, dst, dstBegin, srcEnd);
}

function $indexOf_0(this$static){
    var i_0;
    for (i_0 = 0; i_0 < this$static.used; i_0++) {
        if (this$static.array[i_0] == 46) {
            return i_0;
        }
    }
    return -1;
}

function $prepend(this$static, ch_0){
    var a2;
    a2 = initDim(C_classLit, $intern_9, 0, this$static.array.length + 1, 7, 1);
    arraycopy(this$static.array, 0, a2, 1, this$static.used);
    a2[0] = ch_0;
    this$static.used += 1;
    this$static.array = a2;
}

function $prependRepeated(this$static, repeat){
    var a2;
    if (repeat > 0) {
        a2 = initDim(C_classLit, $intern_9, 0, this$static.array.length + repeat, 7, 1);
        arraycopy(this$static.array, 0, a2, repeat, this$static.used);
        fill(a2, repeat);
        this$static.used += repeat;
        this$static.array = a2;
    }
}

function $prependWideChar(this$static, ch_0){
    if (ch_0 > $intern_2) {
        $prepend(this$static, (ch_0 - $intern_34 & $intern_59) + $intern_50 & $intern_2);
        $prepend(this$static, (ch_0 - $intern_34 >> 10) + $intern_48 & $intern_2);
    }
    else {
        $prepend(this$static, ch_0 & $intern_2);
    }
}

function $removeCharAt(this$static){
    if (0 > this$static.used) {
        throw new IndexOutOfBoundsException_0('0');
    }
    --this$static.used;
    arraycopy(this$static.array, 1, this$static.array, 0, this$static.used);
}

function $setLength(this$static, length_0){
    if (length_0 < 0 || length_0 > this$static.used) {
        return;
    }
    this$static.used = length_0;
}

function $toString_0(this$static){
    $condense(this$static);
    return valueOf_3(this$static.array, 0, this$static.used);
}

function FastStringBuffer(initialSize){
    this.array = initDim(C_classLit, $intern_9, 0, initialSize, 7, 1);
}

defineClass(26, 1, {26:1, 415:1}, FastStringBuffer);
_.charAt_0 = function charAt_1(index_0){
    return $charAt(this, index_0);
}
;
_.equals$ = function equals_38(other){
    return instanceOf(other, 415) && $equals_5(($condense(this) , valueOf_3(this.array, 0, this.used)), toString__Ljava_lang_String___devirtual$(other));
}
;
_.hashCode$ = function hashCode_42(){
    var h, i_0;
    h = 0;
    for (i_0 = 0; i_0 < this.used; i_0++) {
        h = 31 * h + this.array[i_0];
    }
    return h;
}
;
_.length_1 = function length_3(){
    return this.used;
}
;
_.subSequence = function subSequence(start_0, end){
    return valueOf_3(this.array, start_0, end - start_0);
}
;
_.toString$ = function toString_60(){
    return $toString_0(this);
}
;
_.used = 0;
var Lclient_net_sf_saxon_ce_tree_util_FastStringBuffer_2_classLit = createForClass('client.net.sf.saxon.ce.tree.util', 'FastStringBuffer', 26, Ljava_lang_Object_2_classLit);
function $advance_1(this$static){
    var ascend, nsCode, prefix, uri_0;
    while (true) {
        ascend = this$static.index_0 >= this$static.localDeclarations.length;
        nsCode = null;
        if (!ascend) {
            nsCode = this$static.localDeclarations[this$static.index_0++];
            ascend = !nsCode;
        }
        if (ascend) {
            this$static.element = this$static.element.getParent();
            if (!!this$static.element && this$static.element.getNodeKind() == 1) {
                this$static.localDeclarations = this$static.element.getDeclaredNamespaces(this$static.localDeclarations);
                this$static.index_0 = 0;
                continue;
            }
            else {
                this$static.next = null;
                return;
            }
        }
        uri_0 = nsCode.uri_0;
        prefix = nsCode.prefix_0;
        if (!uri_0.length) {
            $add_17(this$static.undeclaredPrefixes, prefix);
        }
        else {
            if ($add_17(this$static.undeclaredPrefixes, prefix)) {
                this$static.next = nsCode;
                return;
            }
        }
    }
}

function $hasNext_1(this$static){
    if (!this$static.next && this$static.index_0 != 0) {
        return false;
    }
    $advance_1(this$static);
    return !!this$static.next;
}

function NamespaceIterator(element){
    this.element = element;
    this.undeclaredPrefixes = new HashSet_0(8);
    this.index_0 = 0;
    this.localDeclarations = element.getDeclaredNamespaces(null);
}

function iterateNamespaces(element){
    return element.getNodeKind() == 1?new NamespaceIterator(element):($clinit_Collections() , $clinit_Collections() , $clinit_Collections$EmptyListIterator() , INSTANCE_0);
}

function sendNamespaces(element, receiver){
    var foundDefault, iter, nb;
    if (element.getNodeKind() == 1) {
        foundDefault = false;
        for (iter = element.getNodeKind() == 1?new NamespaceIterator(element):($clinit_Collections() , $clinit_Collections() , $clinit_Collections$EmptyListIterator() , INSTANCE_0); iter.hasNext();) {
            nb = dynamicCast(iter.next_2(), 53);
            !nb.prefix_0.length && (foundDefault = true);
            receiver.namespace_0(nb, 0);
        }
        foundDefault || receiver.namespace_0(($clinit_NamespaceBinding() , DEFAULT_UNDECLARATION), 0);
    }
}

defineClass(247, 1, {}, NamespaceIterator);
_.hasNext = function hasNext_3(){
    return $hasNext_1(this);
}
;
_.next_2 = function next_31(){
    return this.next;
}
;
_.remove = function remove_1(){
    throw new UnsupportedOperationException;
}
;
_.index_0 = 0;
var Lclient_net_sf_saxon_ce_tree_util_NamespaceIterator_2_classLit = createForClass('client.net.sf.saxon.ce.tree.util', 'NamespaceIterator', 247, Ljava_lang_Object_2_classLit);
function $clinit_Navigator(){
    $clinit_Navigator = emptyMethod;
    nodeCategories = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [-1, 3, 2, 3, -1, -1, -1, 3, 3, 0, -1, -1, -1, 1]);
}

function alphaKey(value_0){
    if (value_0 < 1) {
        return 'a';
    }
    if (value_0 < 10) {
        return 'b' + value_0;
    }
    if (value_0 < 100) {
        return 'c' + value_0;
    }
    if (value_0 < $intern_51) {
        return 'd' + value_0;
    }
    if (value_0 < 10000) {
        return 'e' + value_0;
    }
    if (value_0 < $intern_71) {
        return 'f' + value_0;
    }
    if (value_0 < $intern_52) {
        return 'g' + value_0;
    }
    if (value_0 < $intern_72) {
        return 'h' + value_0;
    }
    if (value_0 < $intern_73) {
        return 'i' + value_0;
    }
    if (value_0 < $intern_74) {
        return 'j' + value_0;
    }
    return 'k' + value_0;
}

function appendSequentialKey(node, sb, addDocNr){
    $clinit_Navigator();
    var parent_0;
    if (addDocNr) {
        $ensureCapacity_0(sb, 1);
        sb.array[sb.used++] = 119;
        $append_3(sb, '' + toString_77(fromInt(node.getDocumentNumber())));
    }
    if (node.getNodeKind() != 9) {
        parent_0 = node.getParent();
        !!parent_0 && appendSequentialKey(parent_0, sb, false);
    }
    $append_3(sb, alphaKey(node.getSiblingPosition()));
    switch (node.getNodeKind()) {
        case 2:
            $ensureCapacity_0(sb, 1);
            sb.array[sb.used++] = 65;
            break;
        case 13:
            $ensureCapacity_0(sb, 1);
            sb.array[sb.used++] = 78;
            break;
        case 3:
            $ensureCapacity_0(sb, 1);
            sb.array[sb.used++] = 84;
            break;
        case 8:
            $ensureCapacity_0(sb, 1);
            sb.array[sb.used++] = 67;
            break;
        case 7:
            $ensureCapacity_0(sb, 1);
            sb.array[sb.used++] = 80;
    }
}

function compareOrder_3(first, second){
    $clinit_Navigator();
    var cat1, cat2, depth1, depth2, firstParent, p1, p2, par1, par2, secondParent;
    if (first.isSameNodeInfo(second)) {
        return 0;
    }
    firstParent = $getParent(first);
    if (!firstParent) {
        return -1;
    }
    secondParent = second.getParent();
    if (!secondParent) {
        return 1;
    }
    if (firstParent.isSameNodeInfo(secondParent)) {
        cat1 = nodeCategories[first.nodeKind];
        cat2 = nodeCategories[second.getNodeKind()];
        return cat1 == cat2?$getSiblingPosition(first) - second.getSiblingPosition():cat1 - cat2;
    }
    depth1 = 0;
    depth2 = 0;
    p1 = first;
    p2 = second;
    while (p1) {
        ++depth1;
        p1 = p1.getParent();
    }
    while (p2) {
        ++depth2;
        p2 = p2.getParent();
    }
    p1 = first;
    while (depth1 > depth2) {
        p1 = p1.getParent();
        if (p1.isSameNodeInfo(second)) {
            return 1;
        }
        --depth1;
    }
    p2 = second;
    while (depth2 > depth1) {
        p2 = p2.getParent();
        if (p2.isSameNodeInfo(first)) {
            return -1;
        }
        --depth2;
    }
    while (true) {
        par1 = p1.getParent();
        par2 = p2.getParent();
        if (!par1 || !par2) {
            throw new NullPointerException_0('Node order comparison - internal error');
        }
        if (par1.isSameNodeInfo(par2)) {
            if (p1.getNodeKind() == 2 && p2.getNodeKind() != 2) {
                return -1;
            }
            if (p1.getNodeKind() != 2 && p2.getNodeKind() == 2) {
                return 1;
            }
            return p1.getSiblingPosition() - p2.getSiblingPosition();
        }
        p1 = par1;
        p2 = par2;
    }
}

function copy_12(node, out, copyOptions){
    $clinit_Navigator();
    var att, attributes, child, children, children0, i_0, localNamespaces, ns, value_0;
    switch (node.getNodeKind()) {
        case 9:
            {
                out.startDocument();
                children0 = node.iterateAxis(3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
                while (true) {
                    child = dynamicCast(children0.next_0(), 7);
                    if (!child) {
                        break;
                    }
                    child.copy(out, copyOptions);
                }
                out.endDocument();
                break;
            }

        case 1:
            {
                out.startElement(node.getNodeName(), 0);
                if ((copyOptions & 1) != 0) {
                    localNamespaces = node.getDeclaredNamespaces(null);
                    for (i_0 = 0; i_0 < localNamespaces.length; i_0++) {
                        ns = localNamespaces[i_0];
                        if (!ns) {
                            break;
                        }
                        out.namespace_0(ns, 0);
                    }
                }
                else 
                    (copyOptions & 2) != 0 && sendNamespaces(node, out);
                attributes = node.iterateAxis(2, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
                while (true) {
                    att = dynamicCast(attributes.next_0(), 7);
                    if (!att) {
                        break;
                    }
                    att.copy(out, copyOptions);
                }
                out.startContent();
                children = node.iterateAxis(3, (null , THE_INSTANCE_7));
                while (true) {
                    child = dynamicCast(children.next_0(), 7);
                    if (!child) {
                        break;
                    }
                    child.copy(out, copyOptions);
                }
                out.endElement();
                return;
            }

        case 2:
            {
                out.attribute(node.getNodeName(), node.getStringValue());
                return;
            }

        case 3:
            {
                value_0 = node.getStringValue();
                value_0.length != 0 && out.characters(value_0);
                return;
            }

        case 8:
            {
                out.comment_0(node.getStringValue());
                return;
            }

        case 7:
            {
                out.processingInstruction(node.getLocalPart(), node.getStringValue());
                return;
            }

        case 13:
            {
                out.namespace_0(new NamespaceBinding(node.getLocalPart(), node.getStringValue()), 0);
                return;
            }

    }
}

function filteredSingleton(node, nodeTest){
    $clinit_Navigator();
    return !!node && nodeTest.matchesItem(node)?!node?($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1):new SingletonIterator(node):($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1);
}

function getAncestorIterator(origin, nodeTest, includeSelf){
    $clinit_Navigator();
    return new SteppingIterator(origin, new Navigator$ParentFunction(nodeTest), includeSelf);
}

function getAttributeValue(element, uri_0, local){
    $clinit_Navigator();
    var attribute, iterator, test_0;
    test_0 = new NameTest_0(2, uri_0, local);
    iterator = element.iterateAxis(2, test_0);
    attribute = dynamicCast(iterator.next_0(), 7);
    return !attribute?null:attribute.getStringValue();
}

function getBaseURI_7(node){
    $clinit_Navigator();
    var base, base0, baseURI, parent_0, parent0, parentSystemId, parentSystemId0, resolved, startSystemId, startSystemId0, xmlBase;
    xmlBase = getAttributeValue(node, 'http://www.w3.org/XML/1998/namespace', 'base');
        if (xmlBase != null) {
            try {
                baseURI = new URI_2(xmlBase);
                if (baseURI.m_scheme == null) {
                    parent0 = $getParent_0(node);
                    if (!parent0) {
                        base0 = new URI_1($getSystemId(node));
                        resolved = xmlBase.length == 0?base0:new URI_0(base0, $toString_1(baseURI));
                        return $toString_1(resolved);
                    }
                    startSystemId0 = $getSystemId(node);
                    parentSystemId0 = parent0.getSystemId();
                    base = new URI_1($equals_5(startSystemId0, parentSystemId0)?parent0.getBaseURI():startSystemId0);
                    baseURI = xmlBase.length == 0?base:new URI_0(base, $toString_1(baseURI));
                }
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 51)) {
                    return xmlBase;
                }
                else 
                    throw unwrap($e0);
            }
            return $toString_1(baseURI);
        }
        startSystemId = $getSystemId(node);
        parent_0 = $getParent_0(node);
        if (!parent_0) {
            return startSystemId;
        }
        parentSystemId = parent_0.getSystemId();
        return $equals_5(startSystemId, parentSystemId)?parent_0.getBaseURI():startSystemId;
}

function getNumberAny(inst, node, count, from, context, hasVariablesInPatterns){
    $clinit_Navigator();
    var controller, filter, memo, memoNode, memoNumber, memoise, num, preceding, prev;
    memoNode = null;
    memoNumber = 0;
    controller = context.getController();
    memoise = !hasVariablesInPatterns && !from;
    if (memoise) {
        memo = dynamicCast($getUserData(controller, inst, 'xsl:number'), 5);
        if (memo != null) {
            memoNode = dynamicCast(memo[0], 7);
            memoNumber = dynamicCast(memo[1], 83).value_0;
        }
    }
    num = 0;
    if (!count) {
        !node.getNodeName()?(count = new NodeTestPattern(makeNodeKindTest(node.getNodeKind()))):(count = new NodeTestPattern(new NameTest_1(node)));
        num = 1;
    }
    else 
        count.matches_2(node, context) && (num = 1);
    !from?(filter = count.getNodeTest()):from.getNodeKind() == 1 && count.getNodeKind() == 1?(filter = ($clinit_NodeKindTest() , ELEMENT)):(filter = ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
    if (!!from && from.matches_2(node, context)) {
        return num;
    }
    preceding = new Navigator$PrecedingEnumeration(node, true);
    filter != ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7) && (preceding = newAxisFilter(preceding, filter));
    while (true) {
        prev = dynamicCast(preceding.next_0(), 7);
        if (!prev) {
            break;
        }
        if (count.matches_2(prev, context)) {
            if (num == 1 && !!memoNode && prev.isSameNodeInfo(memoNode)) {
                num = memoNumber + 1;
                break;
            }
            ++num;
        }
        if (!!from && from.matches_2(prev, context)) {
            break;
        }
    }
    if (memoise) {
        memo = initDim(Ljava_lang_Object_2_classLit, $intern_1, 1, 2, 3, 1);
        setCheck(memo, 0, node);
        setCheck(memo, 1, valueOf(num));
        $setUserData(controller, inst, 'xsl:number', memo);
    }
    return num;
}

function getNumberMulti(node, count, from, context){
    $clinit_Navigator();
    var curr, num, v;
    v = new ArrayList_0(5);
    !count && (!node.getNodeName()?(count = new NodeTestPattern(makeNodeKindTest(node.getNodeKind()))):(count = new NodeTestPattern(new NameTest_1(node))));
    curr = node;
    while (true) {
        if (count.matches_2(curr, context)) {
            num = getNumberSingle(curr, count, null, context);
            $add_15(v, 0, valueOf(num));
        }
        curr = curr.getParent();
        if (!curr) {
            break;
        }
        if (!!from && from.matches_2(curr, context)) {
            break;
        }
    }
    return v;
}

function getNumberSimple(node){
    $clinit_Navigator();
    var e, preceding, same;
    !node.getNodeName()?(same = makeNodeKindTest(node.getNodeKind())):(same = new NameTest_1(node));
    preceding = node.iterateAxis(11, same);
    try {
        return count_0(preceding) + 1;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            throw new AssertionError(e);
        }
        else 
            throw unwrap($e0);
    }
}

function getNumberSingle(node, count, from, context){
    $clinit_Navigator();
    var alreadyChecked, i_0, knownToMatch, p_0, preceding, target;
    if (!count && !from) {
        return getNumberSimple(node);
    }
    knownToMatch = false;
    if (!count) {
        !node.getNodeName()?(count = new NodeTestPattern(makeNodeKindTest(node.getNodeKind()))):(count = new NodeTestPattern(new NameTest_1(node)));
        knownToMatch = true;
    }
    target = node;
    while (!(knownToMatch || count.matches_2(target, context))) {
        target = target.getParent();
        if (!target) {
            return 0;
        }
        if (!!from && from.matches_2(target, context)) {
            return 0;
        }
    }
    preceding = target.iterateAxis(11, count.getNodeTest());
    alreadyChecked = instanceOf(count, 92);
    i_0 = 1;
    while (true) {
        p_0 = dynamicCast(preceding.next_0(), 7);
        if (!p_0) {
            return i_0;
        }
        (alreadyChecked || count.matches_2(p_0, context)) && ++i_0;
    }
}

function getPath(node){
    $clinit_Navigator();
    var count, index_0, parent_0, position, pre, sib, siblings, test_0;
    if (!node) {
        return '';
    }
    parent_0 = node.getParent();
    switch (node.getNodeKind()) {
        case 9:
            return '/';
        case 1:
            if (!parent_0) {
                return node.getDisplayName();
            }
            else {
                pre = getPath(parent_0);
                if ($equals_5(pre, '/')) {
                    return '/' + node.getDisplayName();
                }
                else {
                    position = 1;
                    count = 0;
                    siblings = parent_0.iterateAxis(3, new NameTest_1(node));
                    while (true) {
                        sib = dynamicCast(siblings.next_0(), 7);
                        if (!sib) {
                            break;
                        }
                        ++count;
                        sib.isSameNodeInfo(node) && (position = count);
                    }
                    try {
                        index_0 = count == 1?'':'[' + position + ']';
                        return pre + '/' + node.getDisplayName() + index_0;
                    }
                    catch ($e0) {
                        $e0 = wrap_0($e0);
                        if (instanceOf($e0, 50)) {
                            return pre + '/' + node.getDisplayName();
                        }
                        else 
                            throw unwrap($e0);
                    }
                }
            }

        case 2:
            return getPath(parent_0) + '/@' + node.getDisplayName();
        case 3:
            pre = getPath(parent_0);
            return ($equals_5(pre, '/')?'':pre) + '/text()[' + getNumberSimple(node) + ']';
        case 8:
            pre = getPath(parent_0);
            return ($equals_5(pre, '/')?'':pre) + '/comment()[' + getNumberSimple(node) + ']';
        case 7:
            pre = getPath(parent_0);
            return ($equals_5(pre, '/')?'':pre) + '/processing-instruction()[' + getNumberSimple(node) + ']';
        case 13:
            test_0 = node.getLocalPart();
            test_0.length == 0 && (test_0 = '*[not(local-name()]');
            return getPath(parent_0) + '/namespace::' + test_0;
        default:return '';
    }
}

function isAncestorOrSelf(a, d){
    $clinit_Navigator();
    var p_0;
    p_0 = d;
    while (p_0) {
        if (a.isSameNodeInfo(p_0)) {
            return true;
        }
        p_0 = p_0.getParent();
    }
    return false;
}

function newAxisFilter(base, test_0){
    $clinit_Navigator();
    var umf;
    if (test_0 == ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)) {
        return base;
    }
    umf = new Navigator$1(test_0);
    return new UnfailingItemMappingIterator(base, umf);
}

function newEmptyTextFilter(base){
    $clinit_Navigator();
    var umf;
    umf = new Navigator$2;
    return new UnfailingItemMappingIterator(base, umf);
}

var nodeCategories;
function Navigator$1(val$test){
    this.val$test1 = val$test;
}

defineClass(593, 1, {}, Navigator$1);
_.mapItem = function mapItem_19(item_0){
    return this.val$test1.matchesItem(item_0)?item_0:null;
}
;
var Lclient_net_sf_saxon_ce_tree_util_Navigator$1_2_classLit = createForClass('client.net.sf.saxon.ce.tree.util', 'Navigator/1', 593, Ljava_lang_Object_2_classLit);
function Navigator$2(){
}

defineClass(594, 1, {}, Navigator$2);
_.mapItem = function mapItem_20(item_0){
    if (dynamicCast(item_0, 7).getNodeKind() == 3 && $equals_5(item_0.getStringValue(), '')) {
        return null;
    }
    return item_0;
}
;
var Lclient_net_sf_saxon_ce_tree_util_Navigator$2_2_classLit = createForClass('client.net.sf.saxon.ce.tree.util', 'Navigator/2', 594, Ljava_lang_Object_2_classLit);
function $next_5(this$static){
    var e, forwards, n, nextd, reversed;
    if (this$static.descendants) {
        nextd = dynamicCast($next_5(this$static.descendants), 7);
        if (nextd) {
            return nextd;
        }
        else {
            this$static.descendants = null;
        }
    }
    if (this$static.children) {
        n = dynamicCast(this$static.children.next_0(), 7);
        if (n) {
            if (n.hasChildNodes_0()) {
                if (this$static.forwards) {
                    this$static.descendants = new Navigator$DescendantEnumeration(n, false, this$static.forwards);
                    return n;
                }
                else {
                    this$static.descendants = new Navigator$DescendantEnumeration(n, true, this$static.forwards);
                    return $next_5(this$static);
                }
            }
            else {
                return n;
            }
        }
        else {
            if (this$static.forwards || !this$static.includeSelf) {
                return null;
            }
            else {
                this$static.atEnd = true;
                this$static.children = null;
                return this$static.start_0;
            }
        }
    }
    else if (this$static.atEnd) {
        return null;
    }
    else {
        if (this$static.start_0.hasChildNodes_0()) {
            this$static.children = this$static.start_0.iterateAxis(3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
            if (!this$static.forwards) {
                forwards = this$static.start_0.iterateAxis(3, (null , THE_INSTANCE_7));
                try {
                    reversed = makeReversed(forwards);
                }
                catch ($e0) {
                    $e0 = wrap_0($e0);
                    if (instanceOf($e0, 4)) {
                        e = $e0;
                        throw new AssertionError(e);
                    }
                    else 
                        throw unwrap($e0);
                }
                this$static.children = new ArrayIterator(reversed.value_0);
            }
        }
        else {
            this$static.children = ($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1);
        }
        return this$static.forwards && this$static.includeSelf?this$static.start_0:$next_5(this$static);
    }
}

function Navigator$DescendantEnumeration(start_0, includeSelf, forwards){
    this.start_0 = start_0;
    this.includeSelf = includeSelf;
    this.forwards = forwards;
}

defineClass(201, 1, $intern_6, Navigator$DescendantEnumeration);
_.getAnother = function getAnother_42(){
    return new Navigator$DescendantEnumeration(this.start_0, this.includeSelf, this.forwards);
}
;
_.getAnother_0 = function getAnother_43(){
    return new Navigator$DescendantEnumeration(this.start_0, this.includeSelf, this.forwards);
}
;
_.next_0 = function next_32(){
    return $next_5(this);
}
;
_.atEnd = false;
_.children = null;
_.descendants = null;
_.forwards = false;
_.includeSelf = false;
var Lclient_net_sf_saxon_ce_tree_util_Navigator$DescendantEnumeration_2_classLit = createForClass('client.net.sf.saxon.ce.tree.util', 'Navigator/DescendantEnumeration', 201, Ljava_lang_Object_2_classLit);
function $next_6(this$static){
    var nextSib, nexta, nextd;
    if (this$static.descendEnum) {
        nextd = dynamicCast($next_5(this$static.descendEnum), 7);
        if (nextd) {
            return nextd;
        }
        else {
            this$static.descendEnum = null;
        }
    }
    if (this$static.siblingEnum) {
        nextSib = dynamicCast(this$static.siblingEnum.next_0(), 7);
        if (nextSib) {
            nextSib.hasChildNodes_0()?(this$static.descendEnum = new Navigator$DescendantEnumeration(nextSib, false, true)):(this$static.descendEnum = null);
            return nextSib;
        }
        else {
            this$static.descendEnum = null;
            this$static.siblingEnum = null;
        }
    }
    nexta = dynamicCast($next_4(this$static.ancestorEnum), 7);
    if (nexta) {
        nexta.getNodeKind() == 9?(this$static.siblingEnum = ($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1)):(this$static.siblingEnum = nexta.iterateAxis(7, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
        return $next_6(this$static);
    }
    else {
        return null;
    }
}

function Navigator$FollowingEnumeration(start_0){
    var parent_0;
    this.start_0 = start_0;
    this.ancestorEnum = getAncestorIterator(start_0, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7), false);
    switch (start_0.getNodeKind()) {
        case 1:
    case 3:
case 8:
    case 7:
        this.siblingEnum = start_0.iterateAxis(7, (null , THE_INSTANCE_7));
        break;
    case 2:
case 13:
    parent_0 = start_0.getParent();
    !parent_0?(this.siblingEnum = ($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1)):(this.siblingEnum = parent_0.iterateAxis(3, (null , THE_INSTANCE_7)));
    break;
default:this.siblingEnum = ($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1);
    }
}

defineClass(243, 1, $intern_6, Navigator$FollowingEnumeration);
_.getAnother = function getAnother_44(){
    return new Navigator$FollowingEnumeration(this.start_0);
}
;
_.getAnother_0 = function getAnother_45(){
    return new Navigator$FollowingEnumeration(this.start_0);
}
;
_.next_0 = function next_33(){
    return $next_6(this);
}
;
_.ancestorEnum = null;
_.descendEnum = null;
_.siblingEnum = null;
var Lclient_net_sf_saxon_ce_tree_util_Navigator$FollowingEnumeration_2_classLit = createForClass('client.net.sf.saxon.ce.tree.util', 'Navigator/FollowingEnumeration', 243, Ljava_lang_Object_2_classLit);
function Navigator$ParentFunction(predicate){
    this.predicate = predicate;
}

defineClass(368, 1, {}, Navigator$ParentFunction);
_.conforms = function conforms_3(current){
    return this.predicate.matchesItem(current);
}
;
_.step_0 = function step_4(current){
    return dynamicCast(current, 7).getParent();
}
;
var Lclient_net_sf_saxon_ce_tree_util_Navigator$ParentFunction_2_classLit = createForClass('client.net.sf.saxon.ce.tree.util', 'Navigator/ParentFunction', 368, Ljava_lang_Object_2_classLit);
function $next_7(this$static){
    var nextAnc, nextd, nexts;
    if (this$static.descendEnum) {
        nextd = dynamicCast($next_5(this$static.descendEnum), 7);
        if (nextd) {
            return nextd;
        }
        else {
            this$static.descendEnum = null;
        }
    }
    if (this$static.siblingEnum) {
        nexts = dynamicCast(this$static.siblingEnum.next_0(), 7);
        if (nexts) {
            if (nexts.hasChildNodes_0()) {
                this$static.descendEnum = new Navigator$DescendantEnumeration(nexts, true, false);
                return $next_7(this$static);
            }
            else {
                this$static.descendEnum = null;
                return nexts;
            }
        }
        else {
            this$static.descendEnum = null;
            this$static.siblingEnum = null;
        }
    }
    nextAnc = dynamicCast($next_4(this$static.ancestorEnum), 7);
    if (nextAnc) {
        nextAnc.getNodeKind() == 9?(this$static.siblingEnum = ($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1)):(this$static.siblingEnum = nextAnc.iterateAxis(11, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7)));
        return this$static.includeAncestors?nextAnc:$next_7(this$static);
    }
    else {
        return null;
    }
}

function Navigator$PrecedingEnumeration(start_0, includeAncestors){
    this.start_0 = start_0;
    this.includeAncestors = includeAncestors;
    this.ancestorEnum = getAncestorIterator(start_0, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7), false);
    switch (start_0.getNodeKind()) {
        case 1:
    case 3:
case 8:
    case 7:
        this.siblingEnum = start_0.iterateAxis(11, (null , THE_INSTANCE_7));
        break;
    default:this.siblingEnum = ($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1);
    }
}

defineClass(215, 1, $intern_6, Navigator$PrecedingEnumeration);
_.getAnother = function getAnother_46(){
    return new Navigator$PrecedingEnumeration(this.start_0, this.includeAncestors);
}
;
_.getAnother_0 = function getAnother_47(){
    return new Navigator$PrecedingEnumeration(this.start_0, this.includeAncestors);
}
;
_.next_0 = function next_34(){
    return $next_7(this);
}
;
_.ancestorEnum = null;
_.descendEnum = null;
_.includeAncestors = false;
_.siblingEnum = null;
var Lclient_net_sf_saxon_ce_tree_util_Navigator$PrecedingEnumeration_2_classLit = createForClass('client.net.sf.saxon.ce.tree.util', 'Navigator/PrecedingEnumeration', 215, Ljava_lang_Object_2_classLit);
function $generateId_0(this$static, buffer){
    $ensureCapacity_0(buffer, 1);
    buffer.array[buffer.used++] = 81;
    $append_3(buffer, '' + getHashCode(this$static));
}

function $setNodeKind(this$static, kind){
    this$static.kind = kind;
}

function $setNodeName_0(this$static, nameCode){
    this$static.qName = nameCode;
}

function $setStringValue(this$static, stringValue){
    this$static.stringValue = stringValue;
}

function Orphan(){
}

defineClass(183, 23, $intern_75, Orphan);
_.compareOrder = function compareOrder_4(other){
    if (this.isSameNodeInfo(other)) {
        return 0;
    }
    return getHashCode(this) < other.hashCode$()?-1:1;
}
;
_.copy = function copy_13(out, copyOptions){
    copy_12(this, out, copyOptions);
}
;
_.equals$ = function equals_39(other){
    return instanceOf(other, 7) && this.isSameNodeInfo(dynamicCast(other, 7));
}
;
_.generateId = function generateId_6(buffer){
    $generateId_0(this, buffer);
}
;
_.getBaseURI = function getBaseURI_8(){
    return this.kind == 7?this.systemId:null;
}
;
_.getDeclaredNamespaces = function getDeclaredNamespaces_4(buffer){
    return null;
}
;
_.getDisplayName = function getDisplayName_3(){
    return !this.qName?'':$getDisplayName_0(this.qName);
}
;
_.getDocumentNumber = function getDocumentNumber_5(){
    return getHashCode(this) & 16777215;
}
;
_.getDocumentRoot = function getDocumentRoot_5(){
    return null;
}
;
_.getLocalPart = function getLocalPart_3(){
    return !this.qName?'':$getLocalName_1(this.qName);
}
;
_.getNodeKind = function getNodeKind_14(){
    return this.kind;
}
;
_.getNodeName = function getNodeName_6(){
    return this.qName;
}
;
_.getParent = function getParent_3(){
    return null;
}
;
_.getRoot = function getRoot_5(){
    return this;
}
;
_.getSiblingPosition = function getSiblingPosition_3(){
    return 1;
}
;
_.getStringValue = function getStringValue_8(){
    return toString__Ljava_lang_String___devirtual$_0(this.stringValue);
}
;
_.getSystemId = function getSystemId_10(){
    return this.systemId;
}
;
_.getTypedValue = function getTypedValue_6(){
    switch (this.kind) {
        case 8:
    case 7:
        return new StringValue_0(this.stringValue);
    default:return new UntypedAtomicValue(this.stringValue);
    }
}
;
_.getURI = function getURI_3(){
    return !this.qName?'':$getNamespaceURI(this.qName);
}
;
_.hasChildNodes_0 = function hasChildNodes_4(){
    return false;
}
;
_.hashCode$ = function hashCode_43(){
    return getHashCode(this);
}
;
_.isSameNodeInfo = function isSameNodeInfo_5(other){
    return this == other;
}
;
_.iterateAxis = function iterateAxis_3(axisNumber, nodeTest){
    switch (axisNumber) {
        case 1:
    case 5:
case 12:
    return $clinit_Navigator() , nodeTest.matchesItem(this)?new SingletonIterator(this):($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1);
case 0:
    case 2:
case 3:
    case 4:
case 6:
    case 7:
case 8:
    case 9:
case 10:
    case 11:
        return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
    default:throw new IllegalArgumentException_0('Unknown axis number ' + axisNumber);
    }
}
;
_.kind = 0;
_.qName = null;
var Lclient_net_sf_saxon_ce_tree_util_Orphan_2_classLit = createForClass('client.net.sf.saxon.ce.tree.util', 'Orphan', 183, Lclient_net_sf_saxon_ce_value_AbstractNode_2_classLit);
function $clinit_URI(){
    $clinit_URI = emptyMethod;
    var $tmp, i_0, i0, i1, i2, i3, i4, i5;
    fgLookupTable = initDim(B_classLit, $intern_9, 0, 128, 7, 1);
    for (i0 = 48; i0 <= 57; ++i0) {
        fgLookupTable[i0] = narrow_byte(fgLookupTable[i0] | 96);
    }
    for (i1 = 65; i1 <= 70; ++i1) {
        fgLookupTable[i1] = narrow_byte(fgLookupTable[i1] | 80);
        fgLookupTable[i1 + 32] = narrow_byte(fgLookupTable[i1 + 32] | 80);
    }
    for (i2 = 71; i2 <= 90; ++i2) {
        fgLookupTable[i2] = narrow_byte(fgLookupTable[i2] | 16);
        fgLookupTable[i2 + 32] = narrow_byte(fgLookupTable[i2 + 32] | 16);
    }
    for (i3 = 0; i3 < 12; i3++) {
        $tmp = ';/?:@&=+$,[]'.charCodeAt(i3);
        fgLookupTable[$tmp] = narrow_byte(fgLookupTable[$tmp] | 1);
    }
    for (i4 = 0; i4 < 9; i4++) {
        $tmp = "-_.!~*'()".charCodeAt(i4);
        fgLookupTable[$tmp] = narrow_byte(fgLookupTable[$tmp] | 2);
    }
    fgLookupTable[43] = narrow_byte(fgLookupTable[43] | 4);
    fgLookupTable[45] = narrow_byte(fgLookupTable[45] | 4);
    fgLookupTable[46] = narrow_byte(fgLookupTable[46] | 4);
    for (i5 = 0; i5 < 7; i5++) {
        $tmp = ';:&=+$,'.charCodeAt(i5);
        fgLookupTable[$tmp] = narrow_byte(fgLookupTable[$tmp] | 8);
    }
    for (i_0 = 0; i_0 < 9; i_0++) {
        $tmp = ';/:@&=+$,'.charCodeAt(i_0);
        fgLookupTable[$tmp] = narrow_byte(fgLookupTable[$tmp] | 128);
    }
}

function $absolutize(this$static, p_base){
    var basePath, index_0, lastSlash, path, segIndex, tempString;
    if (this$static.m_path.length == 0 && this$static.m_scheme == null && this$static.m_host == null && this$static.m_regAuthority == null) {
        this$static.m_scheme = p_base.m_scheme;
        this$static.m_userinfo = p_base.m_userinfo;
        this$static.m_host = p_base.m_host;
        this$static.m_port = p_base.m_port;
        this$static.m_regAuthority = p_base.m_regAuthority;
        this$static.m_path = p_base.m_path;
        if (this$static.m_queryString == null) {
            this$static.m_queryString = p_base.m_queryString;
            this$static.m_fragment == null && (this$static.m_fragment = p_base.m_fragment);
        }
        return;
    }
    if (this$static.m_scheme == null) {
        this$static.m_scheme = p_base.m_scheme;
    }
    else {
        return;
    }
    if (this$static.m_host == null && this$static.m_regAuthority == null) {
        this$static.m_userinfo = p_base.m_userinfo;
        this$static.m_host = p_base.m_host;
        this$static.m_port = p_base.m_port;
        this$static.m_regAuthority = p_base.m_regAuthority;
    }
    else {
        return;
    }
    if (this$static.m_path.length > 0 && $startsWith(this$static.m_path, '/')) {
        return;
    }
    path = '';
    basePath = p_base.m_path;
    if (basePath != null && basePath.length > 0) {
        lastSlash = $lastIndexOf(basePath, fromCodePoint(47));
        lastSlash != -1 && (path = basePath.substr(0, lastSlash + 1));
    }
    else 
        this$static.m_path.length > 0 && (path = '/');
    path = path + this$static.m_path;
    while ((index_0 = path.indexOf('/./')) != -1) {
        path = path.substr(0, index_0 + 1) + __substr(path, index_0 + 3, path.length - (index_0 + 3));
    }
    $endsWith(path, '/.') && (path = $substring_1(path, 0, path.length - 1));
    index_0 = 1;
    while ((index_0 = path.indexOf('/../', index_0)) > 0) {
        tempString = $substring_1(path, 0, path.indexOf('/../'));
        segIndex = $lastIndexOf(tempString, fromCodePoint(47));
        if (segIndex != -1) {
            if ($equals_5(__substr(tempString, segIndex, tempString.length - segIndex), '..')) {
                index_0 += 4;
            }
            else {
                path = path.substr(0, segIndex + 1) + __substr(path, index_0 + 4, path.length - (index_0 + 4));
                index_0 = segIndex;
            }
        }
        else {
            index_0 += 4;
        }
    }
    if ($endsWith(path, '/..')) {
        tempString = $substring_1(path, 0, path.length - 3);
        segIndex = $lastIndexOf(tempString, fromCodePoint(47));
        segIndex != -1 && (path = path.substr(0, segIndex + 1));
    }
    this$static.m_path = path;
}

function $getSchemeSpecificPart(this$static){
    var schemespec;
    schemespec = new StringBuffer;
    if (this$static.m_host != null || this$static.m_regAuthority != null) {
        schemespec.string += '//';
        if (this$static.m_host != null) {
            if (this$static.m_userinfo != null) {
                $append_7(schemespec, this$static.m_userinfo);
                schemespec.string += '@';
            }
            $append_7(schemespec, this$static.m_host);
            if (this$static.m_port != -1) {
                schemespec.string += ':';
                $append_6(schemespec, this$static.m_port);
            }
        }
        else {
            $append_7(schemespec, this$static.m_regAuthority);
        }
    }
    this$static.m_path != null && $append_7(schemespec, this$static.m_path);
    if (this$static.m_queryString != null) {
        schemespec.string += '?';
        $append_7(schemespec, this$static.m_queryString);
    }
    if (this$static.m_fragment != null) {
        schemespec.string += '#';
        $append_7(schemespec, this$static.m_fragment);
    }
    return schemespec.string;
}

function $initialize(this$static, p_other){
    this$static.m_scheme = p_other.m_scheme;
    this$static.m_userinfo = p_other.m_userinfo;
    this$static.m_host = p_other.m_host;
    this$static.m_port = p_other.m_port;
    this$static.m_regAuthority = p_other.m_regAuthority;
    this$static.m_path = p_other.m_path;
    this$static.m_queryString = p_other.m_queryString;
    this$static.m_fragment = p_other.m_fragment;
}

function $initialize_0(this$static, p_base, p_uriSpec){
    var colonIdx, fragmentIdx, index_0, queryIdx, searchFrom, slashIdx, startPos, testChar, uriSpecLen;
    uriSpecLen = p_uriSpec != null?p_uriSpec.length:0;
    if (!p_base && uriSpecLen == 0) {
        throw new URI$URISyntaxException('Cannot initialize URI with empty parameters.');
    }
    if (uriSpecLen == 0) {
        $initialize(this$static, p_base);
        return;
    }
    index_0 = 0;
    colonIdx = $indexOf_3(p_uriSpec, fromCodePoint(58));
    if (colonIdx != -1) {
        searchFrom = colonIdx - 1;
        slashIdx = $lastIndexOf_0(p_uriSpec, fromCodePoint(47), searchFrom);
        queryIdx = $lastIndexOf_0(p_uriSpec, fromCodePoint(63), searchFrom);
        fragmentIdx = $lastIndexOf_0(p_uriSpec, fromCodePoint(35), searchFrom);
        if (colonIdx == 0 || slashIdx != -1 || queryIdx != -1 || fragmentIdx != -1) {
            if (colonIdx == 0 || !p_base && fragmentIdx != 0) {
                throw new URI$URISyntaxException('No scheme found in URI.');
            }
        }
        else {
            $initializeScheme(this$static, p_uriSpec);
            index_0 = this$static.m_scheme.length + 1;
            if (colonIdx == uriSpecLen - 1 || p_uriSpec.charCodeAt(colonIdx + 1) == 35) {
                throw new URI$URISyntaxException('Scheme specific part cannot be empty.');
            }
        }
    }
    else if (!p_base && $indexOf_3(p_uriSpec, fromCodePoint(35)) != 0) {
        throw new URI$URISyntaxException('No scheme found in URI.');
    }
    if (index_0 + 1 < uriSpecLen && p_uriSpec.charCodeAt(index_0) == 47 && p_uriSpec.charCodeAt(index_0 + 1) == 47) {
        index_0 += 2;
        startPos = index_0;
        while (index_0 < uriSpecLen) {
            testChar = p_uriSpec.charCodeAt(index_0);
            if (testChar == 47 || testChar == 63 || testChar == 35) {
                break;
            }
            ++index_0;
        }
        index_0 > startPos?$initializeAuthority(this$static, p_uriSpec.substr(startPos, index_0 - startPos)) || (index_0 = startPos - 2):(this$static.m_host = '');
    }
    $initializePath(this$static, p_uriSpec, index_0);
    !!p_base && $absolutize(this$static, p_base);
}

function $initialize_1(this$static, p_uriSpec, allowNonAbsoluteURI){
    var colonIdx, fragmentIdx, index_0, queryIdx, searchFrom, slashIdx, startPos, testChar, uriSpecLen;
    uriSpecLen = p_uriSpec != null?p_uriSpec.length:0;
    if (uriSpecLen == 0) {
        if (allowNonAbsoluteURI) {
            this$static.m_path = '';
            return;
        }
        throw new URI$URISyntaxException('Cannot initialize URI with empty parameters.');
    }
    if (uriSpecLen == 0) {
        $initialize(this$static, null);
        return;
    }
    index_0 = 0;
    colonIdx = $indexOf_3(p_uriSpec, fromCodePoint(58));
    if (colonIdx != -1) {
        searchFrom = colonIdx - 1;
        slashIdx = $lastIndexOf_0(p_uriSpec, fromCodePoint(47), searchFrom);
        queryIdx = $lastIndexOf_0(p_uriSpec, fromCodePoint(63), searchFrom);
        fragmentIdx = $lastIndexOf_0(p_uriSpec, fromCodePoint(35), searchFrom);
        if (colonIdx == 0 || slashIdx != -1 || queryIdx != -1 || fragmentIdx != -1) {
            if (colonIdx == 0 || fragmentIdx != 0 && !allowNonAbsoluteURI) {
                throw new URI$URISyntaxException('No scheme found in URI.');
            }
        }
        else {
            $initializeScheme(this$static, p_uriSpec);
            index_0 = this$static.m_scheme.length + 1;
            if (colonIdx == uriSpecLen - 1 || p_uriSpec.charCodeAt(colonIdx + 1) == 35) {
                throw new URI$URISyntaxException('Scheme specific part cannot be empty.');
            }
        }
    }
    else if ($indexOf_3(p_uriSpec, fromCodePoint(35)) != 0 && !allowNonAbsoluteURI) {
        throw new URI$URISyntaxException('No scheme found in URI.');
    }
    if (index_0 + 1 < uriSpecLen && p_uriSpec.charCodeAt(index_0) == 47 && p_uriSpec.charCodeAt(index_0 + 1) == 47) {
        index_0 += 2;
        startPos = index_0;
        while (index_0 < uriSpecLen) {
            testChar = p_uriSpec.charCodeAt(index_0);
            if (testChar == 47 || testChar == 63 || testChar == 35) {
                break;
            }
            ++index_0;
        }
        index_0 > startPos?$initializeAuthority(this$static, p_uriSpec.substr(startPos, index_0 - startPos)) || (index_0 = startPos - 2):(this$static.m_host = '');
    }
    $initializePath(this$static, p_uriSpec, index_0);
}

function $initializeAuthority(this$static, p_uriSpec){
    var bracketIndex, colonIndex, end, hasPort, host, index_0, port, portStr, start_0, testChar, userinfo;
    index_0 = 0;
    end = p_uriSpec.length;
    userinfo = null;
    if ($indexOf_4(p_uriSpec, fromCodePoint(64), 0) != -1) {
        while (index_0 < end) {
            testChar = p_uriSpec.charCodeAt(index_0);
            if (testChar == 64) {
                break;
            }
            ++index_0;
        }
        userinfo = p_uriSpec.substr(0, index_0);
        ++index_0;
    }
    host = null;
    start_0 = index_0;
    hasPort = false;
    if (index_0 < end) {
        if (p_uriSpec.charCodeAt(index_0) == 91) {
            bracketIndex = $indexOf_4(p_uriSpec, fromCodePoint(93), index_0);
            index_0 = bracketIndex != -1?bracketIndex:end;
            if (index_0 + 1 < end && p_uriSpec.charCodeAt(index_0 + 1) == 58) {
                ++index_0;
                hasPort = true;
            }
            else {
                index_0 = end;
            }
        }
        else {
            colonIndex = $lastIndexOf_0(p_uriSpec, fromCodePoint(58), end);
            index_0 = colonIndex > index_0?colonIndex:end;
            hasPort = index_0 != end;
        }
    }
    host = p_uriSpec.substr(start_0, index_0 - start_0);
    port = -1;
    if (host.length > 0) {
        if (hasPort) {
            ++index_0;
            start_0 = index_0;
            while (index_0 < end) {
                ++index_0;
            }
            portStr = p_uriSpec.substr(start_0, index_0 - start_0);
            if (portStr.length > 0) {
                try {
                    port = __parseAndValidateInt(portStr, 10);
                    port == -1 && --port;
                }
                catch ($e0) {
                    $e0 = wrap_0($e0);
                    if (instanceOf($e0, 57)) {
                        port = -2;
                    }
                    else 
                        throw unwrap($e0);
                }
            }
        }
    }
    if ($isValidServerBasedAuthority(host, port, userinfo)) {
        this$static.m_host = host;
        this$static.m_port = port;
        this$static.m_userinfo = userinfo;
        return true;
    }
    else if ($isValidRegistryBasedAuthority(p_uriSpec)) {
        this$static.m_regAuthority = p_uriSpec;
        return true;
    }
    return false;
}

function $initializePath(this$static, p_uriSpec, p_nStartIndex){
    var end, index_0, start_0, testChar;
    if (p_uriSpec == null) {
        throw new URI$URISyntaxException('Cannot initialize path from null string!');
    }
    index_0 = p_nStartIndex;
    end = p_uriSpec.length;
    testChar = 0;
    if (p_nStartIndex < end) {
        if (this$static.m_scheme == null || p_uriSpec.charCodeAt(p_nStartIndex) == 47) {
            while (index_0 < end) {
                testChar = p_uriSpec.charCodeAt(index_0);
                if (testChar == 37) {
                    if (index_0 + 2 >= end || !isHex(p_uriSpec.charCodeAt(index_0 + 1)) || !isHex(p_uriSpec.charCodeAt(index_0 + 2))) {
                        throw new URI$URISyntaxException('Path contains invalid escape sequence!');
                    }
                    index_0 += 2;
                }
                else if (!(testChar <= 126 && (fgLookupTable[testChar] & 178) != 0)) {
                    if (testChar == 63 || testChar == 35) {
                        break;
                    }
                    throw new URI$URISyntaxException('Path contains invalid character: ' + charToString(testChar));
                }
                ++index_0;
            }
        }
        else {
            while (index_0 < end) {
                testChar = p_uriSpec.charCodeAt(index_0);
                if (testChar == 63 || testChar == 35) {
                    break;
                }
                if (testChar == 37) {
                    if (index_0 + 2 >= end || !isHex(p_uriSpec.charCodeAt(index_0 + 1)) || !isHex(p_uriSpec.charCodeAt(index_0 + 2))) {
                        throw new URI$URISyntaxException('Opaque part contains invalid escape sequence!');
                    }
                    index_0 += 2;
                }
                else if (!(testChar <= 126 && (fgLookupTable[testChar] & 51) != 0)) {
                    throw new URI$URISyntaxException('Opaque part contains invalid character: ' + charToString(testChar));
                }
                ++index_0;
            }
        }
    }
    this$static.m_path = p_uriSpec.substr(p_nStartIndex, index_0 - p_nStartIndex);
    if (testChar == 63) {
        ++index_0;
        start_0 = index_0;
        while (index_0 < end) {
            testChar = p_uriSpec.charCodeAt(index_0);
            if (testChar == 35) {
                break;
            }
            if (testChar == 37) {
                if (index_0 + 2 >= end || !isHex(p_uriSpec.charCodeAt(index_0 + 1)) || !isHex(p_uriSpec.charCodeAt(index_0 + 2))) {
                    throw new URI$URISyntaxException('Query string contains invalid escape sequence!');
                }
                index_0 += 2;
            }
            else if (!(testChar <= 126 && (fgLookupTable[testChar] & 51) != 0)) {
                throw new URI$URISyntaxException('Query string contains invalid character: ' + charToString(testChar));
            }
            ++index_0;
        }
        this$static.m_queryString = p_uriSpec.substr(start_0, index_0 - start_0);
    }
    if (testChar == 35) {
        ++index_0;
        start_0 = index_0;
        while (index_0 < end) {
            testChar = p_uriSpec.charCodeAt(index_0);
            if (testChar == 37) {
                if (index_0 + 2 >= end || !isHex(p_uriSpec.charCodeAt(index_0 + 1)) || !isHex(p_uriSpec.charCodeAt(index_0 + 2))) {
                    throw new URI$URISyntaxException('Fragment contains invalid escape sequence!');
                }
                index_0 += 2;
            }
            else if (!(testChar <= 126 && (fgLookupTable[testChar] & 51) != 0)) {
                throw new URI$URISyntaxException('Fragment contains invalid character: ' + charToString(testChar));
            }
            ++index_0;
        }
        this$static.m_fragment = p_uriSpec.substr(start_0, index_0 - start_0);
    }
}

function $initializeScheme(this$static, p_uriSpec){
    var index_0, scheme, testChar, uriSpecLen;
    uriSpecLen = p_uriSpec.length;
    index_0 = 0;
    while (index_0 < uriSpecLen) {
        testChar = p_uriSpec.charCodeAt(index_0);
        if (testChar == 58 || testChar == 47 || testChar == 63 || testChar == 35) {
            break;
        }
        ++index_0;
    }
    scheme = p_uriSpec.substr(0, index_0);
    if (scheme.length == 0) {
        throw new URI$URISyntaxException('No scheme found in URI.');
    }
    else {
        $setScheme(this$static, scheme);
    }
}

function $isValidRegistryBasedAuthority(authority){
    var end, index_0, testChar;
    index_0 = 0;
    end = authority.length;
    while (index_0 < end) {
        testChar = authority.charCodeAt(index_0);
        if (testChar == 37) {
            if (index_0 + 2 >= end || !isHex(authority.charCodeAt(index_0 + 1)) || !isHex(authority.charCodeAt(index_0 + 2))) {
                return false;
            }
            index_0 += 2;
        }
        else if (!(testChar <= 126 && (fgLookupTable[testChar] & 178) != 0)) {
            return false;
        }
        ++index_0;
    }
    return true;
}

function $isValidServerBasedAuthority(host, port, userinfo){
    var end, index_0, testChar;
    if (!isWellFormedAddress(host)) {
        return false;
    }
    if (port < -1 || port > $intern_2) {
        return false;
    }
    if (userinfo != null) {
        index_0 = 0;
        end = userinfo.length;
        while (index_0 < end) {
            testChar = userinfo.charCodeAt(index_0);
            if (testChar == 37) {
                if (index_0 + 2 >= end || !isHex(userinfo.charCodeAt(index_0 + 1)) || !isHex(userinfo.charCodeAt(index_0 + 2))) {
                    return false;
                }
                index_0 += 2;
            }
            else if (!(testChar <= 122 && (fgLookupTable[testChar] & 58) != 0)) {
                return false;
            }
            ++index_0;
        }
    }
    return true;
}

function $setScheme(this$static, p_scheme){
    if (p_scheme == null) {
        throw new URI$URISyntaxException('Cannot set scheme from null string!');
    }
    if (!isConformantSchemeName(p_scheme)) {
        throw new URI$URISyntaxException('The scheme is not conformant.');
    }
    this$static.m_scheme = p_scheme.toLowerCase();
}

function $toString_1(this$static){
    var uriSpecString;
    uriSpecString = new StringBuffer;
    if (this$static.m_scheme != null) {
        $append_7(uriSpecString, this$static.m_scheme);
        uriSpecString.string += ':';
    }
    $append_7(uriSpecString, $getSchemeSpecificPart(this$static));
    return uriSpecString.string;
}

function URI_0(p_base, p_uriSpec){
    $clinit_URI();
    $initialize_0(this, p_base, p_uriSpec);
}

function URI_1(p_uriSpec){
    $clinit_URI();
    URI_0.call(this, null, p_uriSpec);
}

function URI_2(p_uriSpec){
    $clinit_URI();
    $initialize_1(this, p_uriSpec, true);
}

function isAlpha(p_char){
    return p_char >= 97 && p_char <= 122 || p_char >= 65 && p_char <= 90;
}

function isAlphanum(p_char){
    return p_char <= 122 && (fgLookupTable[p_char] & 48) != 0;
}

function isConformantSchemeName(p_scheme){
    var i_0, schemeLength, testChar;
    if (p_scheme == null || $trim(p_scheme).length == 0) {
        return false;
    }
    if (!isAlpha(p_scheme.charCodeAt(0))) {
        return false;
    }
    schemeLength = p_scheme.length;
    for (i_0 = 1; i_0 < schemeLength; ++i_0) {
        testChar = p_scheme.charCodeAt(i_0);
        if (!(testChar <= 122 && (fgLookupTable[testChar] & 52) != 0)) {
            return false;
        }
    }
    return true;
}

function isDigit(p_char){
    return p_char >= 48 && p_char <= 57;
}

function isHex(p_char){
    return p_char <= 102 && (fgLookupTable[p_char] & 64) != 0;
}

function isWellFormedAddress(address){
    var addrLength, i_0, index_0, labelCharCount, testChar;
    if (address == null) {
        return false;
    }
    addrLength = address.length;
    if (addrLength == 0) {
        return false;
    }
    if ($equals_5(address.substr(0, 1), '[')) {
        return isWellFormedIPv6Reference(address);
    }
    if ($equals_5(address.substr(0, 1), '.') || $equals_5(address.substr(0, 1), '-') || $endsWith(address, '-')) {
        return false;
    }
    index_0 = $lastIndexOf(address, fromCodePoint(46));
    $endsWith(address, '.') && (index_0 = $lastIndexOf(address.substr(0, index_0), fromCodePoint(46)));
    if (index_0 + 1 < addrLength && isDigit(address.charCodeAt(index_0 + 1))) {
        return isWellFormedIPv4Address(address);
    }
    else {
        if (addrLength > 255) {
            return false;
        }
        labelCharCount = 0;
        for (i_0 = 0; i_0 < addrLength; i_0++) {
            testChar = address.charCodeAt(i_0);
            if (testChar == 46) {
                if (!isAlphanum(address.charCodeAt(i_0 - 1))) {
                    return false;
                }
                if (i_0 + 1 < addrLength && !isAlphanum(address.charCodeAt(i_0 + 1))) {
                    return false;
                }
                labelCharCount = 0;
            }
            else if (!(testChar <= 122 && (fgLookupTable[testChar] & 48) != 0) && testChar != 45) {
                return false;
            }
            else if (++labelCharCount > 63) {
                return false;
            }
        }
    }
    return true;
}

function isWellFormedIPv4Address(address){
    var addrLength, first, i_0, numDigits, numDots, second, testChar;
    addrLength = address.length;
    numDots = 0;
    numDigits = 0;
    for (i_0 = 0; i_0 < addrLength; i_0++) {
        testChar = address.charCodeAt(i_0);
        if (testChar == 46) {
            if (i_0 > 0 && !isDigit(address.charCodeAt(i_0 - 1)) || i_0 + 1 < addrLength && !isDigit(address.charCodeAt(i_0 + 1))) {
                return false;
            }
            numDigits = 0;
            if (++numDots > 3) {
                return false;
            }
        }
        else if (testChar >= 48 && testChar <= 57) {
            if (++numDigits > 3) {
                return false;
            }
            else if (numDigits == 3) {
                first = address.charCodeAt(i_0 - 2);
                second = address.charCodeAt(i_0 - 1);
                if (!(first < 50 || first == 50 && (second < 53 || second == 53 && testChar <= 53))) {
                    return false;
                }
            }
        }
        else {
            return false;
        }
    }
    return numDots == 3;
}

function isWellFormedIPv6Reference(address){
    var addrLength, counter, end, index_0, prevCount;
    addrLength = address.length;
    end = addrLength - 1;
    if (!(addrLength > 2 && address.charCodeAt(0) == 91 && address.charCodeAt(end) == 93)) {
        return false;
    }
    counter = initDim(I_classLit, $intern_4, 0, 1, 7, 1);
    index_0 = scanHexSequence(address, 1, end, counter);
    if (index_0 == -1) {
        return false;
    }
    else if (index_0 == end) {
        return counter[0] == 8;
    }
    if (index_0 + 1 < end && address.charCodeAt(index_0) == 58) {
        if (address.charCodeAt(index_0 + 1) == 58) {
            if (++counter[0] > 8) {
                return false;
            }
            index_0 += 2;
            if (index_0 == end) {
                return true;
            }
        }
        else {
            return counter[0] == 6 && isWellFormedIPv4Address(address.substr(index_0 + 1, end - (index_0 + 1)));
        }
    }
    else {
        return false;
    }
    prevCount = counter[0];
    index_0 = scanHexSequence(address, index_0, end, counter);
    return index_0 == end || index_0 != -1 && isWellFormedIPv4Address($substring_1(address, counter[0] > prevCount?index_0 + 1:index_0, end));
}

function scanHexSequence(address, index_0, end, counter){
    var back_0, numDigits, start_0, testChar;
    numDigits = 0;
    start_0 = index_0;
    for (; index_0 < end; ++index_0) {
        testChar = address.charCodeAt(index_0);
        if (testChar == 58) {
            if (numDigits > 0 && ++counter[0] > 8) {
                return -1;
            }
            if (numDigits == 0 || index_0 + 1 < end && address.charCodeAt(index_0 + 1) == 58) {
                return index_0;
            }
            numDigits = 0;
        }
        else if (testChar <= 102 && (fgLookupTable[testChar] & 64) != 0) {
            if (++numDigits > 4) {
                return -1;
            }
        }
        else {
            if (testChar == 46 && numDigits < 4 && numDigits > 0 && counter[0] <= 6) {
                back_0 = index_0 - numDigits - 1;
                return back_0 >= start_0?back_0:back_0 + 1;
            }
            return -1;
        }
    }
    return numDigits > 0 && ++counter[0] <= 8?end:-1;
}

defineClass(45, 1, {45:1, 3:1}, URI_0, URI_1, URI_2);
_.equals$ = function equals_40(p_test){
    var testURI;
    if (instanceOf(p_test, 45)) {
        testURI = dynamicCast(p_test, 45);
        if ((this.m_scheme == null && testURI.m_scheme == null || this.m_scheme != null && testURI.m_scheme != null && $equals_5(this.m_scheme, testURI.m_scheme)) && (this.m_userinfo == null && testURI.m_userinfo == null || this.m_userinfo != null && testURI.m_userinfo != null && $equals_5(this.m_userinfo, testURI.m_userinfo)) && (this.m_host == null && testURI.m_host == null || this.m_host != null && testURI.m_host != null && $equals_5(this.m_host, testURI.m_host)) && this.m_port == testURI.m_port && (this.m_path == null && testURI.m_path == null || this.m_path != null && testURI.m_path != null && $equals_5(this.m_path, testURI.m_path)) && (this.m_queryString == null && testURI.m_queryString == null || this.m_queryString != null && testURI.m_queryString != null && $equals_5(this.m_queryString, testURI.m_queryString)) && (this.m_fragment == null && testURI.m_fragment == null || this.m_fragment != null && testURI.m_fragment != null && $equals_5(this.m_fragment, testURI.m_fragment))) {
            return true;
        }
    }
    return false;
}
;
_.toString$ = function toString_61(){
    return $toString_1(this);
}
;
_.m_fragment = null;
_.m_host = null;
_.m_path = null;
_.m_port = -1;
_.m_queryString = null;
_.m_regAuthority = null;
_.m_scheme = null;
_.m_userinfo = null;
var fgLookupTable;
var Lclient_net_sf_saxon_ce_tree_util_URI_2_classLit = createForClass('client.net.sf.saxon.ce.tree.util', 'URI', 45, Ljava_lang_Object_2_classLit);
defineClass(570, 19, $intern_10);
var Ljava_io_IOException_2_classLit = createForClass('java.io', 'IOException', 570, Ljava_lang_Exception_2_classLit);
function URI$URISyntaxException(p_msg){
    Exception_0.call(this, p_msg);
}

defineClass(51, 570, {51:1, 3:1, 19:1, 37:1}, URI$URISyntaxException);
var Lclient_net_sf_saxon_ce_tree_util_URI$URISyntaxException_2_classLit = createForClass('client.net.sf.saxon.ce.tree.util', 'URI/URISyntaxException', 51, Ljava_io_IOException_2_classLit);
function isHighSurrogate(ch_0){
    return $intern_48 <= ch_0 && ch_0 <= $intern_49;
}

function getUTF8Encoding(in_$, in2, out){
    var i_0, j, uuuuu, xxxxxx, yyyyyy, zzzz;
    i_0 = in_$;
    if (i_0 <= 127) {
        out[0] = narrow_byte(i_0);
        return 1;
    }
    else if (i_0 <= 2047) {
        out[0] = narrow_byte(192 | in_$ >> 6 & 31);
        out[1] = narrow_byte(128 | in_$ & 63);
        return 2;
    }
    else if (i_0 >= $intern_48 && i_0 <= $intern_49) {
        j = in2;
        if (!(j >= $intern_50 && j <= 57343)) {
            throw new IllegalArgumentException_0('Malformed Unicode Surrogate Pair (' + i_0 + ',' + j + ')');
        }
        xxxxxx = narrow_byte(j & 63);
        yyyyyy = ((i_0 & 3) << 4 | j >> 6 & 15) << 24 >> 24;
        zzzz = narrow_byte(i_0 >> 2 & 15);
        uuuuu = narrow_byte((i_0 >> 6 & 15) + 1);
        out[0] = narrow_byte(240 | uuuuu >> 2 & 7);
        out[1] = (128 | (uuuuu & 3) << 4 | zzzz) << 24 >> 24;
        out[2] = narrow_byte(128 | yyyyyy);
        out[3] = narrow_byte(128 | xxxxxx);
        return 4;
    }
    else if (i_0 >= $intern_50 && i_0 <= 57343) {
        return 0;
    }
    else {
        out[0] = narrow_byte(224 | in_$ >> 12 & 15);
        out[1] = narrow_byte(128 | in_$ >> 6 & 63);
        out[2] = narrow_byte(128 | in_$ & 63);
        return 3;
    }
}

function $clinit_AnyItemType(){
    $clinit_AnyItemType = emptyMethod;
    theInstance_2 = new AnyItemType;
}

function AnyItemType(){
}

defineClass(159, 1, {159:1, 166:1}, AnyItemType);
_.getAtomizedItemType = function getAtomizedItemType_4(){
    return $clinit_AtomicType() , ANY_ATOMIC;
}
;
_.getSuperType = function getSuperType_5(){
    return null;
}
;
_.hashCode$ = function hashCode_44(){
    return getHashCode_0('AnyItemType');
}
;
_.matchesItem = function matchesItem_2(item_0){
    return true;
}
;
_.toString$ = function toString_62(){
    return 'item()';
}
;
var theInstance_2;
var Lclient_net_sf_saxon_ce_type_AnyItemType_2_classLit = createForClass('client.net.sf.saxon.ce.type', 'AnyItemType', 159, Ljava_lang_Object_2_classLit);
function $clinit_AtomicType(){
    $clinit_AtomicType = emptyMethod;
    lookup = new HashMap_0(20);
    ANY_ATOMIC = makeAtomicType('anyAtomicType', ($clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2), true);
    NUMERIC = makeAtomicType('numeric', ANY_ATOMIC, true);
    STRING = makeAtomicType('string', ANY_ATOMIC, true);
    BOOLEAN = makeAtomicType('boolean', ANY_ATOMIC, true);
    DURATION = makeAtomicType('duration', ANY_ATOMIC, false);
    DATE_TIME = makeAtomicType('dateTime', ANY_ATOMIC, true);
    DATE = makeAtomicType('date', ANY_ATOMIC, true);
    TIME = makeAtomicType('time', ANY_ATOMIC, true);
    G_YEAR_MONTH = makeAtomicType('gYearMonth', ANY_ATOMIC, false);
    G_MONTH = makeAtomicType('gMonth', ANY_ATOMIC, false);
    G_MONTH_DAY = makeAtomicType('gMonthDay', ANY_ATOMIC, false);
    G_YEAR = makeAtomicType('gYear', ANY_ATOMIC, false);
    G_DAY = makeAtomicType('gDay', ANY_ATOMIC, false);
    HEX_BINARY = makeAtomicType('hexBinary', ANY_ATOMIC, false);
    BASE64_BINARY = makeAtomicType('base64Binary', ANY_ATOMIC, false);
    ANY_URI = makeAtomicType('anyURI', ANY_ATOMIC, true);
    QNAME = makeAtomicType('QName', ANY_ATOMIC, false);
    UNTYPED_ATOMIC = makeAtomicType('untypedAtomic', ANY_ATOMIC, true);
    DECIMAL = makeAtomicType('decimal', NUMERIC, true);
    FLOAT = makeAtomicType('float', NUMERIC, true);
    DOUBLE = makeAtomicType('double', NUMERIC, true);
    INTEGER = makeAtomicType('integer', DECIMAL, true);
    YEAR_MONTH_DURATION = makeAtomicType('yearMonthDuration', DURATION, true);
    DAY_TIME_DURATION = makeAtomicType('dayTimeDuration', DURATION, true);
}

function AtomicType(localName){
    this.localName_0 = localName;
}

function getSchemaType(localName){
    $clinit_AtomicType();
    var st;
    st = dynamicCast($getStringValue_1(lookup, localName), 43);
    !st && (st = dynamicCast($getStringValue_1(lookup, localName), 43));
    return st;
}

function isRecognizedName(localName){
    $clinit_AtomicType();
    return !!getSchemaType(localName) || $equals_5('anyType', localName) || $equals_5('untyped', localName) || $equals_5('anySimpleType', localName);
}

function makeAtomicType(localName, baseType, ordered){
    var t;
    t = new AtomicType(localName);
    t.baseType = baseType;
    t.ordered = ordered;
    $putStringValue(lookup, localName, t);
    return t;
}

defineClass(43, 1, {43:1, 166:1}, AtomicType);
_.getAtomizedItemType = function getAtomizedItemType_5(){
    return this;
}
;
_.getSuperType = function getSuperType_6(){
    return this.baseType;
}
;
_.matchesItem = function matchesItem_3(item_0){
    var type_0;
    if (instanceOf(item_0, 13)) {
        type_0 = dynamicCast(item_0, 13).getItemType_0();
        do {
            if (type_0 == this) {
                return true;
            }
            type_0 = type_0.getSuperType();
        }
        while (type_0);
    }
    return false;
}
;
_.toString$ = function toString_63(){
    return 'xs:' + this.localName_0;
}
;
_.ordered = false;
var ANY_ATOMIC, ANY_URI, BASE64_BINARY, BOOLEAN, DATE, DATE_TIME, DAY_TIME_DURATION, DECIMAL, DOUBLE, DURATION, FLOAT, G_DAY, G_MONTH, G_MONTH_DAY, G_YEAR, G_YEAR_MONTH, HEX_BINARY, INTEGER, NUMERIC, QNAME, STRING, TIME, UNTYPED_ATOMIC, YEAR_MONTH_DURATION, lookup;
var Lclient_net_sf_saxon_ce_type_AtomicType_2_classLit = createForClass('client.net.sf.saxon.ce.type', 'AtomicType', 43, Ljava_lang_Object_2_classLit);
function stringToNumber(s){
    var c, containsDisallowedChars, containsWhitespace, i_0, n;
    containsDisallowedChars = false;
    containsWhitespace = false;
    for (i_0 = 0; i_0 < length__I__devirtual$(s); i_0++) {
        c = charAt_I_C__devirtual$(s, i_0);
        switch (c) {
            case 32:
        case 10:
    case 9:
case 13:
    containsWhitespace = true;
    break;
case 120:
      case 88:
  case 102:
      case 70:
  case 100:
      case 68:
  case 110:
      case 78:
          containsDisallowedChars = true;
        }
    }
    n = containsWhitespace?toString__Ljava_lang_String___devirtual$_0(trimWhitespace(s)):toString__Ljava_lang_String___devirtual$_0(s);
    if ($equals_5('INF', n)) {
        return Infinity;
    }
    else if ($equals_5('-INF', n)) {
        return -Infinity;
    }
    else if ($equals_5('NaN', n)) {
        return NaN;
    }
    else if (containsDisallowedChars) {
        throw new NumberFormatException('invalid floating point value: ' + s);
    }
    else {
        return __parseAndValidateDouble(n);
    }
}

function $clinit_Type(){
    $clinit_Type = emptyMethod;
    NODE_TYPE = ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7);
    ITEM_TYPE = ($clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2);
}

function displayTypeName(item_0){
    $clinit_Type();
    var node;
    if (instanceOf(item_0, 7)) {
        node = dynamicCast(item_0, 7);
        switch (node.getNodeKind()) {
            case 9:
                return 'document-node()';
            case 1:
                return 'element(' + dynamicCast(item_0, 7).getDisplayName() + ')';
            case 2:
                return 'attribute(' + dynamicCast(item_0, 7).getDisplayName() + ')';
            case 3:
                return 'text()';
            case 8:
                return 'comment()';
            case 7:
                return 'processing-instruction()';
            case 13:
                return 'namespace()';
            default:return '';
        }
    }
    else {
        return 'xs:' + dynamicCast(item_0, 13).getItemType_0().localName_0;
    }
}

function getCommonSuperType(t1, t2){
    $clinit_Type();
    var r, th;
    if (instanceOf(t1, 123)) {
        return t2;
    }
    if (instanceOf(t2, 123)) {
        return t1;
    }
    th = ($clinit_TypeHierarchy() , $clinit_TypeHierarchy() , THE_INSTANCE_9);
    r = $relationship(th, t1, t2);
    return r == 0?t1:r == 2?t2:r == 1?t1:getCommonSuperType(t2.getSuperType(), t1);
}

function isComparable(t1, t2, ordered){
    $clinit_Type();
    if (t1 == t2) {
        return true;
    }
    if (t1 == ($clinit_AtomicType() , ANY_ATOMIC) || t2 == ANY_ATOMIC) {
        return true;
    }
    t1 == UNTYPED_ATOMIC && (t1 = STRING);
    t2 == UNTYPED_ATOMIC && (t2 = STRING);
    t1 == ANY_URI && (t1 = STRING);
    t2 == ANY_URI && (t2 = STRING);
    (t1 == NUMERIC || t1 == INTEGER || t1.baseType == NUMERIC) && (t1 = NUMERIC);
    (t2 == NUMERIC || t2 == INTEGER || t2.baseType == NUMERIC) && (t2 = NUMERIC);
    if (!ordered) {
        t1 == DAY_TIME_DURATION && (t1 = DURATION);
        t2 == DAY_TIME_DURATION && (t2 = DURATION);
        t1 == YEAR_MONTH_DURATION && (t1 = DURATION);
        t2 == YEAR_MONTH_DURATION && (t2 = DURATION);
    }
    return t1 == t2;
}

var ITEM_TYPE, NODE_TYPE;
function $clinit_TypeHierarchy(){
    $clinit_TypeHierarchy = emptyMethod;
    THE_INSTANCE_9 = new TypeHierarchy;
}

function $computeRelationship(t1, t2){
    var m1, m2, n1, n2, nodeKindRelationship, nodeNameRelationship, t;
    if (t1 == t2) {
        return 0;
    }
    if (instanceOf(t1, 159)) {
        return instanceOf(t2, 159)?0:1;
    }
    else if (instanceOf(t2, 159)) {
        return 2;
    }
    else if (instanceOf(t1, 43)) {
        if (instanceOf(t2, 67)) {
            return 4;
        }
        else {
            t = t2;
            while (instanceOf(t, 43)) {
                if (t1 == t) {
                    return 1;
                }
                t = t.getSuperType();
            }
            t = t1;
            while (instanceOf(t, 43)) {
                if (t == t2) {
                    return 2;
                }
                t = t.getSuperType();
            }
            return 4;
        }
    }
    else if (instanceOf(t1, 67)) {
        if (instanceOf(t2, 43)) {
            return 4;
        }
        else {
            if (instanceOf(t1, 176)) {
                return instanceOf(t2, 176)?0:1;
            }
            else if (instanceOf(t2, 176)) {
                return 2;
            }
            else if (instanceOf(t1, 123)) {
                return 4;
            }
            else if (instanceOf(t2, 123)) {
                return 4;
            }
            else {
                m1 = dynamicCast(t1, 67).getNodeKindMask();
                m2 = dynamicCast(t2, 67).getNodeKindMask();
                if ((m1 & m2) == 0) {
                    return 4;
                }
                else 
                    m1 == m2?(nodeKindRelationship = 0):(m1 & m2) == m1?(nodeKindRelationship = 2):(m1 & m2) == m2?(nodeKindRelationship = 1):(nodeKindRelationship = 3);
                n1 = null;
                n2 = null;
                instanceOf(t1, 60) && (n1 = dynamicCast(t1, 60).qName);
                instanceOf(t2, 60) && (n2 = dynamicCast(t2, 60).qName);
                !n1?(nodeNameRelationship = !n2?0:1):!n2?(nodeNameRelationship = 2):(nodeNameRelationship = $equals_0(n1, n2)?0:4);
                return nodeKindRelationship == 0 && nodeNameRelationship == 0?0:(nodeKindRelationship == 0 || nodeKindRelationship == 1) && (nodeNameRelationship == 0 || nodeNameRelationship == 1)?1:(nodeKindRelationship == 0 || nodeKindRelationship == 2) && (nodeNameRelationship == 0 || nodeNameRelationship == 2)?2:nodeNameRelationship == 4?4:3;
            }
        }
    }
    else {
        return 4;
    }
}

function $isSubType(this$static, subtype, supertype){
    var relation;
    relation = $relationship(this$static, subtype, supertype);
    return relation == 0 || relation == 2;
}

function $relationship(this$static, t1, t2){
    var pair, result;
    if (!t1) {
        throw new NullPointerException;
    }
    if (t1.equals$(t2)) {
        return 0;
    }
    pair = new TypeHierarchy$ItemTypePair(t1, t2);
    result = dynamicCast($get_0(this$static.map_0, pair), 83);
    if (!result) {
        result = valueOf($computeRelationship(t1, t2));
        $put_0(this$static.map_0, pair, result);
    }
    return result.value_0;
}

function TypeHierarchy(){
    this.map_0 = new HashMap;
}

defineClass(691, 1, {}, TypeHierarchy);
var THE_INSTANCE_9;
var Lclient_net_sf_saxon_ce_type_TypeHierarchy_2_classLit = createForClass('client.net.sf.saxon.ce.type', 'TypeHierarchy', 691, Ljava_lang_Object_2_classLit);
function TypeHierarchy$ItemTypePair(s, t){
    this.s = s;
    this.t = t;
}

defineClass(329, 1, {329:1}, TypeHierarchy$ItemTypePair);
_.equals$ = function equals_41(obj){
    var pair;
    if (instanceOf(obj, 329)) {
        pair = dynamicCast(obj, 329);
        return this.s.equals$(pair.s) && this.t.equals$(pair.t);
    }
    else {
        return false;
    }
}
;
_.hashCode$ = function hashCode_45(){
    return this.s.hashCode$() ^ this.t.hashCode$();
}
;
var Lclient_net_sf_saxon_ce_type_TypeHierarchy$ItemTypePair_2_classLit = createForClass('client.net.sf.saxon.ce.type', 'TypeHierarchy/ItemTypePair', 329, Ljava_lang_Object_2_classLit);
function $setErrorCodeQName_0(this$static, errorCode){
    this$static.errorCode = errorCode;
}

function ValidationFailure(message){
    this.message_0 = message;
}

function ValidationFailure_0(message, errorCode){
    this.message_0 = message;
    this.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', errorCode);
}

defineClass(29, 1, {81:1, 29:1}, ValidationFailure, ValidationFailure_0);
_.asAtomic = function asAtomic(){
    var ve;
    ve = new XPathException_0(this.message_0);
    !this.errorCode?(ve.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FORG0001')):$setErrorCodeQName(ve, this.errorCode);
        throw ve;
}
;
_.toString$ = function toString_64(){
    return 'ValidationException' + (this.message_0 == null?'':': ' + this.message_0);
}
;
var Lclient_net_sf_saxon_ce_type_ValidationFailure_2_classLit = createForClass('client.net.sf.saxon.ce.type', 'ValidationFailure', 29, Ljava_lang_Object_2_classLit);
defineClass(13, 1, {15:1, 14:1, 81:1, 13:1});
_.asAtomic = function asAtomic_0(){
    return this;
}
;
_.effectiveBooleanValue_0 = function effectiveBooleanValue_15(){
    var err;
    err = new XPathException_2('Effective boolean value is not defined for an atomic value of type ' + displayTypeName(this), 'FORG0006');
    err.isTypeError = true;
    throw err;
}
;
_.getComponent = function getComponent(component){
    throw new UnsupportedOperationException_0('Data type does not support component extraction');
}
;
_.getLength = function getLength_2(){
    return 1;
}
;
_.getStringValue = function getStringValue_9(){
    return toString__Ljava_lang_String___devirtual$_0(this.getPrimitiveStringValue());
}
;
_.getTypedValue = function getTypedValue_7(){
    return this;
}
;
_.isNaN_0 = function isNaN_0(){
    return false;
}
;
_.itemAt = function itemAt_2(n){
    return n == 0?this:null;
}
;
_.iterate = function iterate_54(){
    return new SingletonIterator(this);
}
;
_.toString$ = function toString_65(){
    return 'xs:' + this.getItemType_0().localName_0 + ' ("' + toString__Ljava_lang_String___devirtual$_0(this.getPrimitiveStringValue()) + '")';
}
;
var Lclient_net_sf_saxon_ce_value_AtomicValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'AtomicValue', 13, Ljava_lang_Object_2_classLit);
function $clinit_StringValue(){
    $clinit_StringValue = emptyMethod;
    EMPTY_STRING = new StringValue_0('');
    SINGLE_SPACE = new StringValue_0(' ');
    TRUE = new StringValue_0('true');
    FALSE = new StringValue_0('false');
}

function $convert(this$static, requiredType){
    if (requiredType == ($clinit_AtomicType() , STRING) || requiredType == ANY_ATOMIC) {
        return this$static;
    }
    return convertStringToBuiltInType(this$static.value_0, requiredType);
}

function $getPrimitiveStringValue(this$static){
    return dynamicCastToString(this$static.value_0 = toString__Ljava_lang_String___devirtual$_0(this$static.value_0));
}

function $getPrimitiveStringValue_0(this$static){
    return dynamicCastToString(this$static.value_0 = toString__Ljava_lang_String___devirtual$_0(this$static.value_0));
}

function $getStringLength(this$static){
    var len;
    if (this$static.noSurrogates) {
        return length__I__devirtual$(this$static.value_0);
    }
    else {
        len = getStringLength(this$static.value_0);
        len == length__I__devirtual$(this$static.value_0) && (this$static.noSurrogates = true);
        return len;
    }
}

function StringValue(){
    $clinit_StringValue();
    this.value_0 = '';
}

function StringValue_0(value_0){
    $clinit_StringValue();
    this.value_0 = value_0 == null?'':value_0;
}

function contract(codes, used){
    $clinit_StringValue();
    var i_0, sb;
    sb = new FastStringBuffer(codes.length);
    for (i_0 = 0; i_0 < used; i_0++) {
        if (codes[i_0] < $intern_34) {
            $append_1(sb, codes[i_0] & $intern_2);
        }
        else {
            $append_1(sb, (codes[i_0] - $intern_34 >> 10) + $intern_48 & $intern_2);
            $append_1(sb, (codes[i_0] - $intern_34 & $intern_59) + $intern_50 & $intern_2);
        }
    }
    return sb;
}

function convertStringToBuiltInType(value_0, requiredType){
    var dbl, err, flt, vf;
    try {
        if (requiredType == ($clinit_AtomicType() , BOOLEAN)) {
            return fromString(value_0);
        }
        else if (requiredType == NUMERIC || requiredType == DOUBLE) {
            try {
                dbl = stringToNumber(value_0);
                return new DoubleValue(dbl);
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 57)) {
                    return new ValidationFailure_0('Cannot convert string to double: ' + toString__Ljava_lang_String___devirtual$_0(value_0), 'FORG0001');
                }
                else 
                    throw unwrap($e0);
            }
        }
        else if (requiredType == INTEGER) {
            return stringToInteger(value_0);
        }
        else if (requiredType == DECIMAL) {
            return makeDecimalValue(value_0);
        }
        else if (requiredType == FLOAT) {
            try {
                flt = stringToNumber(value_0);
                return new FloatValue(flt);
            }
            catch ($e1) {
                $e1 = wrap_0($e1);
                if (instanceOf($e1, 57)) {
                    return new ValidationFailure_0('Cannot convert string to float: ' + toString__Ljava_lang_String___devirtual$_0(value_0), 'FORG0001');
                }
                else 
                    throw unwrap($e1);
            }
        }
        else 
            return requiredType == DATE?($clinit_GDateValue() , setLexicalValue(new DateValue, value_0)):requiredType == DATE_TIME?makeDateTimeValue_0(value_0):requiredType == TIME?makeTimeValue(value_0):requiredType == G_YEAR?makeGYearValue(value_0):requiredType == G_YEAR_MONTH?makeGYearMonthValue(value_0):requiredType == G_MONTH?makeGMonthValue(value_0):requiredType == G_MONTH_DAY?makeGMonthDayValue(value_0):requiredType == G_DAY?makeGDayValue(value_0):requiredType == DURATION?($clinit_DurationValue() , makeDuration(value_0, durationPattern1)):requiredType == YEAR_MONTH_DURATION?makeYearMonthDurationValue(value_0):requiredType == DAY_TIME_DURATION?makeDayTimeDurationValue(value_0):requiredType == UNTYPED_ATOMIC || requiredType == ANY_ATOMIC?new UntypedAtomicValue(value_0):requiredType == STRING?value_0 == null || length__I__devirtual$(value_0) == 0?EMPTY_STRING:new StringValue_0(value_0):requiredType == ANY_URI?new AnyURIValue(value_0):requiredType == HEX_BINARY?new HexBinaryValue(value_0):requiredType == BASE64_BINARY?new Base64BinaryValue(value_0):new ValidationFailure_0('Cannot convert string to type ' + wrap('xs:' + requiredType.localName_0, 6), 'XPTY0004');
    }
    catch ($e2) {
        $e2 = wrap_0($e2);
        if (instanceOf($e2, 4)) {
            err = $e2;
            vf = new ValidationFailure(err.message_0);
            $setErrorCodeQName_0(vf, err.errorCode);
            !vf.errorCode && (vf.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FORG0001'));
                return vf;
        }
        else 
            throw unwrap($e2);
    }
}

function expand_0(s){
    $clinit_StringValue();
    var array, c, charval, i_0, o;
    array = initDim(I_classLit, $intern_4, 0, getStringLength(s), 7, 1);
    o = 0;
    for (i_0 = 0; i_0 < length__I__devirtual$(s); i_0++) {
        c = charAt_I_C__devirtual$(s, i_0);
        if (c >= $intern_48 && c <= $intern_49) {
            charval = (c - $intern_48) * $intern_40 + (charAt_I_C__devirtual$(s, i_0 + 1) - $intern_50) + $intern_34;
            ++i_0;
        }
        else {
            charval = c;
        }
        array[o++] = charval;
    }
    return array;
}

function getStringLength(s){
    $clinit_StringValue();
    var c, i_0, n;
    n = 0;
    for (i_0 = 0; i_0 < length__I__devirtual$(s); i_0++) {
        c = charAt_I_C__devirtual$(s, i_0);
        (c < $intern_48 || c > $intern_49) && ++n;
    }
    return n;
}

function makeStringValue(value_0){
    $clinit_StringValue();
    return value_0 == null || length__I__devirtual$(value_0) == 0?EMPTY_STRING:new StringValue_0(value_0);
}

defineClass(12, 13, {15:1, 14:1, 81:1, 13:1, 12:1}, StringValue_0);
_.convert = function convert_0(requiredType){
    return $convert(this, requiredType);
}
;
_.effectiveBooleanValue_0 = function effectiveBooleanValue_16(){
    return length__I__devirtual$(this.value_0) > 0;
}
;
_.equals$ = function equals_42(other){
    throw new ClassCastException_0('equals on StringValue is not allowed');
}
;
_.getItemType_0 = function getItemType_72(){
    return $clinit_AtomicType() , STRING;
}
;
_.getPrimitiveStringValue = function getPrimitiveStringValue(){
    return $getPrimitiveStringValue(this);
}
;
_.getXPathComparable = function getXPathComparable(ordered, collator, implicitTimezone){
    return collator.getCollationKey(toString__Ljava_lang_String___devirtual$_0(this.value_0));
}
;
_.hashCode$ = function hashCode_46(){
    return hashCode__I__devirtual$(this.value_0);
}
;
_.toString$ = function toString_66(){
    return '"' + this.value_0 + '"';
}
;
_.noSurrogates = false;
var EMPTY_STRING, FALSE, SINGLE_SPACE, TRUE;
var Lclient_net_sf_saxon_ce_value_StringValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'StringValue', 12, Lclient_net_sf_saxon_ce_value_AtomicValue_2_classLit);
function $clinit_AnyURIValue(){
    $clinit_AnyURIValue = emptyMethod;
    $clinit_StringValue();
    EMPTY_URI = new AnyURIValue('');
}

function AnyURIValue(value_0){
    $clinit_AnyURIValue();
    StringValue.call(this);
    this.value_0 = value_0 == null?'':toString__Ljava_lang_String___devirtual$_0(collapseWhitespace(value_0));
}

defineClass(132, 12, {15:1, 14:1, 81:1, 132:1, 13:1, 12:1}, AnyURIValue);
_.convert = function convert_1(requiredType){
    return requiredType == ($clinit_AtomicType() , ANY_ATOMIC) || requiredType == ANY_URI?this:requiredType == UNTYPED_ATOMIC?new UntypedAtomicValue(this.value_0):requiredType == STRING?new StringValue_0(this.value_0):new ValidationFailure_0('Cannot convert anyURI to ' + ('xs:' + requiredType.localName_0), 'XPTY0004');
}
;
_.getItemType_0 = function getItemType_73(){
    return $clinit_AtomicType() , ANY_URI;
}
;
var EMPTY_URI;
var Lclient_net_sf_saxon_ce_value_AnyURIValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'AnyURIValue', 132, Lclient_net_sf_saxon_ce_value_StringValue_2_classLit);
function $getPrimitiveStringValue_1(this$static){
    var encoder;
    encoder = new Base64BinaryValue$Base64Encoder;
    $translate_0(encoder, this$static.binaryValue);
    return _String($getCharArray(encoder));
}

function Base64BinaryValue(s){
    var decoder, e, err, result;
    decoder = new Base64BinaryValue$Base64Decoder;
    try {
        $translate(decoder, s);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 30)) {
            e = $e0;
            err = new XPathException_0(e.detailMessage);
            err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FORG0001');
                throw err;
        }
        else 
            throw unwrap($e0);
    }
    this.binaryValue = ($eof(decoder) , result = initDim(B_classLit, $intern_9, 0, decoder.used, 7, 1) , arraycopy(decoder.out, 0, result, 0, decoder.used) , result);
}

function Base64BinaryValue_0(value_0){
    this.binaryValue = value_0;
}

function byteArrayHashCode(value_0){
    var h, i_0;
    h = {l:0, m:0, h:0};
    for (i_0 = 0; i_0 < min_1(value_0.length, 64); i_0++) {
        h = xor(shl(h, 1), fromInt(value_0[i_0]));
    }
    return toInt(xor(shr(h, 32), h));
}

defineClass(297, 13, {15:1, 14:1, 81:1, 13:1, 297:1}, Base64BinaryValue, Base64BinaryValue_0);
_.convert = function convert_2(requiredType){
    return requiredType == ($clinit_AtomicType() , ANY_ATOMIC) || requiredType == BASE64_BINARY?this:requiredType == UNTYPED_ATOMIC?new UntypedAtomicValue($getPrimitiveStringValue_1(this)):requiredType == STRING?new StringValue_0($getPrimitiveStringValue_1(this)):requiredType == HEX_BINARY?new HexBinaryValue_0(this.binaryValue):new ValidationFailure_0('Cannot convert base64Binary to ' + ('xs:' + requiredType.localName_0), 'XPTY0004');
}
;
_.equals$ = function equals_43(other){
    return instanceOf(other, 297) && equals_67(this.binaryValue, dynamicCast(other, 297).binaryValue);
}
;
_.getItemType_0 = function getItemType_74(){
    return $clinit_AtomicType() , BASE64_BINARY;
}
;
_.getPrimitiveStringValue = function getPrimitiveStringValue_0(){
    return $getPrimitiveStringValue_1(this);
}
;
_.getXPathComparable = function getXPathComparable_0(ordered, collator, implicitTimezone){
    return ordered?null:this;
}
;
_.hashCode$ = function hashCode_47(){
    return byteArrayHashCode(this.binaryValue);
}
;
var Lclient_net_sf_saxon_ce_value_Base64BinaryValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'Base64BinaryValue', 297, Lclient_net_sf_saxon_ce_value_AtomicValue_2_classLit);
function $clinit_Base64BinaryValue$Base64Decoder(){
    $clinit_Base64BinaryValue$Base64Decoder = emptyMethod;
    map_10 = initValues(getClassLiteralForArray(B_classLit, 1), $intern_9, 0, 7, [127, 127, 127, 127, 127, 127, 127, 127, 127, 125, 125, 127, 127, 125, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 125, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 62, 127, 127, 127, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 127, 127, 127, 126, 127, 127, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 127, 127, 127, 127, 127, 127, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127]);
}

function $decode_final_token(this$static){
    var b0, b1, b2, b3, eq_count, num;
    b0 = this$static.token[0];
    b1 = this$static.token[1];
    b2 = this$static.token[2];
    b3 = this$static.token[3];
    eq_count = 0;
    if (b0 == 126) {
        b0 = 0;
        ++eq_count;
    }
    if (b1 == 126) {
        b1 = 0;
        ++eq_count;
    }
    if (b2 == 126) {
        b2 = 0;
        ++eq_count;
    }
    if (b3 == 126) {
        b3 = 0;
        ++eq_count;
    }
    if (eq_count > 2) {
        throw new IllegalArgumentException_0("The number of '=' signs at the end of a base64 value must not exceed 2");
    }
    if (eq_count == 2 && (b1 & 15) != 0) {
        throw new IllegalArgumentException_0("In base64, if the value ends with '==' then the last character must be one of [AQgw]");
    }
    if (eq_count == 1 && (b2 & 3) != 0) {
        throw new IllegalArgumentException_0("In base64, if the value ends with '=' then the last character must be one of [AEIMQUYcgkosw048]");
    }
    num = b0 << 18 | b1 << 12 | b2 << 6 | b3;
    $ensureCapacity_1(this$static, 1);
    this$static.out[this$static.used++] = narrow_byte(num >> 16);
    if (eq_count <= 1) {
        $ensureCapacity_1(this$static, 1);
        this$static.out[this$static.used++] = narrow_byte(num >> 8 & 255);
        if (eq_count == 0) {
            $ensureCapacity_1(this$static, 1);
            this$static.out[this$static.used++] = narrow_byte(num & 255);
        }
    }
}

function $ensureCapacity_1(this$static, size_0){
    var o2;
    if (this$static.used + size_0 >= this$static.out.length) {
        o2 = initDim(B_classLit, $intern_9, 0, this$static.out.length * 2, 7, 1);
        arraycopy(this$static.out, 0, o2, 0, this$static.used);
        this$static.out = o2;
    }
}

function $eof(this$static){
    if (this$static.token_length != 0) {
        while (this$static.token_length < 4) {
            this$static.token[this$static.token_length++] = 126;
        }
        $decode_final_token(this$static);
    }
    this$static.token_length = 0;
    this$static.token = initDim(B_classLit, $intern_9, 0, 4, 7, 1);
    this$static.bytes = initDim(B_classLit, $intern_9, 0, 3, 7, 1);
}

function $translate(this$static, str){
    var c, found_eq, i_0, length_0, lengthAtEOF, t, num;
    length_0 = length__I__devirtual$(str);
    found_eq = 0;
    for (i_0 = 0; i_0 < length_0; i_0++) {
        c = charAt_I_C__devirtual$(str, i_0);
        if (c > 127) {
            throw new IllegalArgumentException_0('non-ASCII character in Base64 value (at offset ' + i_0 + ')');
        }
        t = map_10[c];
        if (t == 127) {
            throw new IllegalArgumentException_0("invalid character '" + charToString(c) + "' in Base64 value (at offset " + i_0 + ')');
        }
        if (found_eq > 0 && t != 126 && t != 125) {
            throw new IllegalArgumentException_0("In Base64, an '=' character can appear only at the end");
        }
        if (t == 126) {
            if (found_eq > 0) {
                ++found_eq;
                if (found_eq > 2) {
                    throw new IllegalArgumentException_0("Base64 value can contain at most two '=' characters");
                }
                this$static.token_length = (this$static.token_length + 1) % 4;
            }
            else {
                found_eq = 1;
                lengthAtEOF = this$static.token_length;
                $eof(this$static);
                this$static.token_length = (lengthAtEOF + 1) % 4;
            }
        }
        else if (t != 125) {
            this$static.token[this$static.token_length++] = t;
            if (this$static.token_length == 4) {
                found_eq == 0 && (num = this$static.token[0] << 18 | this$static.token[1] << 12 | this$static.token[2] << 6 | this$static.token[3] , this$static.bytes[0] = narrow_byte(255 & num >> 16) , this$static.bytes[1] = narrow_byte(255 & num >> 8) , this$static.bytes[2] = narrow_byte(255 & num) , $ensureCapacity_1(this$static, 3) , arraycopy(this$static.bytes, 0, this$static.out, this$static.used, 3) , this$static.used += 3 , undefined);
                this$static.token_length = 0;
            }
        }
    }
    if (this$static.token_length != 0) {
        throw new IllegalArgumentException_0('Base64 input must be a multiple of four characters');
    }
}

function Base64BinaryValue$Base64Decoder(){
    $clinit_Base64BinaryValue$Base64Decoder();
    this.out = initDim(B_classLit, $intern_9, 0, 128, 7, 1);
    this.token = initDim(B_classLit, $intern_9, 0, 4, 7, 1);
    this.bytes = initDim(B_classLit, $intern_9, 0, 3, 7, 1);
}

defineClass(744, 1, {}, Base64BinaryValue$Base64Decoder);
_.token_length = 0;
_.used = 0;
var map_10;
var Lclient_net_sf_saxon_ce_value_Base64BinaryValue$Base64Decoder_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'Base64BinaryValue/Base64Decoder', 744, Ljava_lang_Object_2_classLit);
function $clinit_Base64BinaryValue$Base64Encoder(){
    $clinit_Base64BinaryValue$Base64Encoder = emptyMethod;
    map_11 = initValues(getClassLiteralForArray(C_classLit, 1), $intern_9, 0, 7, [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47]);
}

function $encode_partial_token(this$static){
    var i_0;
    i_0 = this$static.line_length;
    this$static.line[i_0] = map_11[63 & this$static.buf >> 18];
    this$static.line[i_0 + 1] = map_11[63 & this$static.buf >> 12];
    this$static.buf_bytes == 1?(this$static.line[i_0 + 2] = 61):(this$static.line[i_0 + 2] = map_11[63 & this$static.buf >> 6]);
    this$static.buf_bytes <= 2?(this$static.line[i_0 + 3] = 61):(this$static.line[i_0 + 3] = map_11[63 & this$static.buf]);
    this$static.line_length += 4;
    this$static.buf = 0;
    this$static.buf_bytes = 0;
}

function $getCharArray(this$static){
    var ch_0, i_0;
    this$static.buf_bytes != 0 && $encode_partial_token(this$static);
    $append_4(this$static.out, this$static.line, 0, this$static.line_length);
    this$static.line_length = 0;
    for (i_0 = 0; i_0 < this$static.line.length; i_0++)
        this$static.line[i_0] = 0;
    ch_0 = initDim(C_classLit, $intern_9, 0, this$static.out.used, 7, 1);
    this$static.out.used > 0 && $getChars(this$static.out, this$static.out.used, ch_0, 0);
    return ch_0;
}

function $translate_0(this$static, in_$){
    var i_0, i0, in_length, i_1;
    in_length = in_$.length;
    for (i0 = 0; i0 < in_length; i0++) {
        this$static.buf_bytes == 0?(this$static.buf = this$static.buf & $intern_2 | in_$[i0] << 16):this$static.buf_bytes == 1?(this$static.buf = this$static.buf & 16711935 | in_$[i0] << 8 & $intern_2):(this$static.buf = this$static.buf & 16776960 | in_$[i0] & 255);
        if (++this$static.buf_bytes == 3) {
            i_1 = this$static.line_length;
            this$static.line[i_1] = map_11[63 & this$static.buf >> 18];
            this$static.line[i_1 + 1] = map_11[63 & this$static.buf >> 12];
            this$static.line[i_1 + 2] = map_11[63 & this$static.buf >> 6];
            this$static.line[i_1 + 3] = map_11[63 & this$static.buf];
            this$static.line_length += 4;
            this$static.buf = 0;
            this$static.buf_bytes = 0;
            this$static.line_length >= 72 && ($append_4(this$static.out, this$static.line, 0, this$static.line_length) , this$static.line_length = 0);
        }
        if (i0 == in_length - 1) {
            this$static.buf_bytes > 0 && this$static.buf_bytes < 3 && $encode_partial_token(this$static);
            this$static.line_length > 0 && ($append_4(this$static.out, this$static.line, 0, this$static.line_length) , this$static.line_length = 0);
        }
    }
    for (i_0 = 0; i_0 < this$static.line.length; i_0++)
        this$static.line[i_0] = 0;
}

function Base64BinaryValue$Base64Encoder(){
    $clinit_Base64BinaryValue$Base64Encoder();
    this.out = new FastStringBuffer(256);
    this.line = initDim(C_classLit, $intern_9, 0, 74, 7, 1);
}

defineClass(743, 1, {}, Base64BinaryValue$Base64Encoder);
_.buf = 0;
_.buf_bytes = 0;
_.line_length = 0;
var map_11;
var Lclient_net_sf_saxon_ce_value_Base64BinaryValue$Base64Encoder_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'Base64BinaryValue/Base64Encoder', 743, Ljava_lang_Object_2_classLit);
function $clinit_BooleanValue(){
    $clinit_BooleanValue = emptyMethod;
    TRUE_0 = new BooleanValue(true);
    FALSE_0 = new BooleanValue(false);
}

function BooleanValue(value_0){
    this.value_0 = value_0;
}

function fromString(s){
    $clinit_BooleanValue();
    var c, len;
    s = trimWhitespace(s);
    len = length__I__devirtual$(s);
    if (len == 1) {
        c = charAt_I_C__devirtual$(s, 0);
        if (c == 49) {
            return TRUE_0;
        }
        else if (c == 48) {
            return FALSE_0;
        }
    }
    else if (len == 4) {
        if (charAt_I_C__devirtual$(s, 0) == 116 && charAt_I_C__devirtual$(s, 1) == 114 && charAt_I_C__devirtual$(s, 2) == 117 && charAt_I_C__devirtual$(s, 3) == 101) {
            return TRUE_0;
        }
    }
    else if (len == 5) {
        if (charAt_I_C__devirtual$(s, 0) == 102 && charAt_I_C__devirtual$(s, 1) == 97 && charAt_I_C__devirtual$(s, 2) == 108 && charAt_I_C__devirtual$(s, 3) == 115 && charAt_I_C__devirtual$(s, 4) == 101) {
            return FALSE_0;
        }
    }
    return new ValidationFailure_0('The string ' + wrap(s, 4) + ' cannot be cast to a boolean', 'FORG0001');
}

defineClass(90, 13, {15:1, 14:1, 81:1, 13:1, 90:1, 24:1}, BooleanValue);
_.compareTo = function compareTo_1(other){
    if (!instanceOf(other, 90)) {
        throw new ClassCastException_0('Boolean values are not comparable to ' + getClass__Ljava_lang_Class___devirtual$(other));
    }
    if (this.value_0 == dynamicCast(other, 90).value_0)
        return 0;
    if (this.value_0)
        return 1;
    return -1;
}
;
_.convert = function convert_3(requiredType){
    return requiredType == ($clinit_AtomicType() , ANY_ATOMIC) || requiredType == BOOLEAN?this:requiredType == UNTYPED_ATOMIC?new UntypedAtomicValue(this.value_0?'true':'false'):requiredType == STRING?this.value_0?($clinit_StringValue() , TRUE):($clinit_StringValue() , FALSE):requiredType == NUMERIC || requiredType == INTEGER || requiredType == DECIMAL?this.value_0?($clinit_IntegerValue() , PLUS_ONE):($clinit_IntegerValue() , ZERO_2):requiredType == DOUBLE?this.value_0?($clinit_DoubleValue() , ONE):($clinit_DoubleValue() , ZERO_0):requiredType == FLOAT?this.value_0?($clinit_FloatValue() , ONE_0):($clinit_FloatValue() , ZERO_1):new ValidationFailure_0('Cannot convert boolean to ' + ('xs:' + requiredType.localName_0), 'XPTY0004');
}
;
_.effectiveBooleanValue_0 = function effectiveBooleanValue_17(){
    return this.value_0;
}
;
_.equals$ = function equals_44(other){
    return instanceOf(other, 90) && this.value_0 == dynamicCast(other, 90).value_0;
}
;
_.getItemType_0 = function getItemType_75(){
    return $clinit_AtomicType() , BOOLEAN;
}
;
_.getPrimitiveStringValue = function getPrimitiveStringValue_1(){
    return this.value_0?'true':'false';
}
;
_.getXPathComparable = function getXPathComparable_1(ordered, collator, implicitTimezone){
    return this;
}
;
_.hashCode$ = function hashCode_48(){
    return this.value_0?0:1;
}
;
_.toString$ = function toString_67(){
    return (this.value_0?'true':'false') + '()';
}
;
_.value_0 = false;
var FALSE_0, TRUE_0;
var Lclient_net_sf_saxon_ce_value_BooleanValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'BooleanValue', 90, Lclient_net_sf_saxon_ce_value_AtomicValue_2_classLit);
function $clinit_CalendarValue(){
    $clinit_CalendarValue = emptyMethod;
    timezonePattern = new RegExp('[-+]([0-9][0-9]):([0-9][0-9])');
}

function $add_4(this$static, duration){
    throw new XPathException_2('Cannot add an ' + ('xs:' + duration.getItemType_0().localName_0) + ' to an ' + ('xs:' + this$static.getItemType_0().localName_0), 'XPTY0004');
}

function $appendTimezone(this$static, sb){
    var tz;
    if (this$static.tzMinutes != $intern_58) {
        tz = this$static.tzMinutes;
        if (tz == 0) {
            $append_3(sb, 'Z');
        }
        else {
            $append_3(sb, tz > 0?'+':'-');
            tz = tz < 0?-tz:tz;
            $append_1(sb, ~~(~~(tz / 60) / 10) + 48 & $intern_2);
            $append_1(sb, ~~(tz / 60) % 10 + 48 & $intern_2);
            $ensureCapacity_0(sb, 1);
            sb.array[sb.used++] = 58;
            $append_1(sb, ~~(tz % 60 / 10) + 48 & $intern_2);
            $append_1(sb, tz % 60 % 10 + 48 & $intern_2);
        }
    }
}

function $setTimezoneInMinutes(this$static, minutes){
    this$static.tzMinutes = minutes;
}

function $subtract(this$static, other, context){
    var d1, d2, difference, dt1, dt2;
    dt1 = this$static.toDateTime();
    dt2 = other.toDateTime();
    if (dt1.tzMinutes != dt2.tzMinutes) {
        dt1 = $normalize_1(dt1, context);
        dt2 = $normalize_1(dt2, context);
    }
    d1 = $toJulianInstant(dt1);
    d2 = $toJulianInstant(dt2);
    difference = $subtract_0(d1, d2);
    return fromSeconds(difference);
}

function CalendarValue(){
    $clinit_CalendarValue();
}

function appendString(sb, value_0, size_0){
    $clinit_CalendarValue();
    var s;
    s = '000000000' + value_0;
    $append_3(sb, $substring_0(s, s.length - size_0));
}

function appendTwoDigits(sb, value_0){
    $clinit_CalendarValue();
    $append_1(sb, ~~(value_0 / 10) + 48 & $intern_2);
    $append_1(sb, value_0 % 10 + 48 & $intern_2);
}

function parseTimezone(zone){
    $clinit_CalendarValue();
    var h, m, match_0, tz;
    if (zone == null || !zone.length) {
        return $intern_58;
    }
    else if ($equals_5(zone, 'Z')) {
        return 0;
    }
    else {
        match_0 = $exec(timezonePattern, zone);
        if (!match_0) {
            return $intern_0;
        }
        h = simpleInteger(match_0[1]);
        m = simpleInteger(match_0[2]);
        if (h > 14 || h == 14 && m > 0) {
            return $intern_0;
        }
        tz = h * 60 + m;
        zone.charCodeAt(0) == 45 && (tz = -tz);
        return tz;
    }
}

defineClass(73, 13, {15:1, 14:1, 81:1, 13:1, 73:1});
_.add_1 = function add_4(duration){
    return $add_4(this, duration);
}
;
_.getXPathComparable = function getXPathComparable_2(ordered, collator, implicitTimezone){
    if (ordered && !instanceOf(this, 24)) {
        return null;
    }
    return this.tzMinutes != $intern_58?this:this.adjustTimezone(implicitTimezone);
}
;
_.subtract = function subtract(other, context){
    return $subtract(this, other, context);
}
;
_.tzMinutes = $intern_58;
var timezonePattern;
var Lclient_net_sf_saxon_ce_value_CalendarValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'CalendarValue', 73, Lclient_net_sf_saxon_ce_value_AtomicValue_2_classLit);
function multiply(c1, c2){
    if (c1 == $intern_17 || c2 == $intern_17) {
        return $intern_17;
    }
    if (c2 == $intern_21) {
        return c1;
    }
    if (c1 == $intern_21) {
        return c2;
    }
    if (c1 == $intern_20 && c2 == $intern_20) {
        return $intern_20;
    }
    if (c1 == $intern_33 && c2 == $intern_33) {
        return $intern_33;
    }
    return $intern_12;
}

function subsumes(c1, c2){
    return (c1 | c2) == c1;
}

function sum_0(c1, c2){
    var allowsZero;
    if (c1 == $intern_17) {
        return c2;
    }
    if (c2 == $intern_17) {
        return c1;
    }
    allowsZero = (c1 & $intern_17) != 0 && (c2 & $intern_17) != 0;
    return $intern_33 | (allowsZero?$intern_17:0);
}

function toString_68(cardinality){
    switch (cardinality) {
        case $intern_20:
            return 'zero or one';
        case $intern_21:
            return 'exactly one';
        case $intern_14:
    case $intern_12:
        return 'zero or more';
    case $intern_33:
        return 'one or more';
    case $intern_17:
        return 'exactly zero';
    default:return 'code ' + cardinality;
    }
}

function union(c1, c2){
    var r;
    r = c1 | c2;
    r == 40960 && (r = $intern_12);
    return r;
}

function $clinit_DateTimeValue(){
    $clinit_DateTimeValue = emptyMethod;
    $clinit_CalendarValue();
    EPOCH = new DateTimeValue_0(1970, 1, 1, 0, 0, 0, 0, 0);
    dateTimePattern = new RegExp('^\\-?([0-9][0-9][0-9][0-9][0-9]*)-([0-9][0-9])-([0-9][0-9])T([0-2][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]*)?([-+Z].*)?$');
}

function $add_5(this$static, duration){
    var d, dt, julian, m, microseconds, months, seconds, y_0, julianSecond, microseconds_0, js, jd, date, hour, minute;
    if (instanceOf(duration, 102)) {
        microseconds = $getLengthInMicroseconds(dynamicCast(duration, 102));
        seconds = $divide(valueOf_5(microseconds), ($clinit_DecimalValue() , BIG_DECIMAL_ONE_MILLION), 6, valueOf_9(6));
        julian = $toJulianInstant(this$static);
        julian = $add_14(julian, seconds);
        dt = (julianSecond = julian.scale == 0 || julian.bitLength == 0 && julian.smallValue != -1?(!julian.intVal && (julian.intVal = valueOf_7(julian.smallValue)) , julian.intVal):julian.scale < 0?$multiply_0((!julian.intVal && (julian.intVal = valueOf_7(julian.smallValue)) , julian.intVal), powerOf10(-julian.scale)):$divide_0((!julian.intVal && (julian.intVal = valueOf_7(julian.smallValue)) , julian.intVal), powerOf10(julian.scale)) , microseconds_0 = $multiply($subtract_0(julian, new BigDecimal_4(julianSecond)), BIG_DECIMAL_ONE_MILLION) , js = $longValue(julianSecond) , jd = div_0(js, {l:86400, m:0, h:0}) , date = dateFromJulianDayNumber(toInt(jd)) , js = mod(js, {l:86400, m:0, h:0}) , hour = toInt(div_0(js, {l:3600, m:0, h:0})) << 24 >> 24 , js = mod(js, {l:3600, m:0, h:0}) , minute = toInt(div_0(js, {l:60, m:0, h:0})) << 24 >> 24 , js = mod(js, {l:60, m:0, h:0}) , new DateTimeValue_0(date.year, date.month, date.day, hour, minute, narrow_byte(toInt(js)), microseconds_0.scale <= -32 || microseconds_0.scale > (microseconds_0.precision > 0?microseconds_0.precision:floor_4((microseconds_0.bitLength - 1) * $intern_76) + 1)?0:$intValue_1(microseconds_0.scale == 0 || microseconds_0.bitLength == 0 && microseconds_0.smallValue != -1?(!microseconds_0.intVal && (microseconds_0.intVal = valueOf_7(microseconds_0.smallValue)) , microseconds_0.intVal):microseconds_0.scale < 0?$multiply_0((!microseconds_0.intVal && (microseconds_0.intVal = valueOf_7(microseconds_0.smallValue)) , microseconds_0.intVal), powerOf10(-microseconds_0.scale)):$divide_0((!microseconds_0.intVal && (microseconds_0.intVal = valueOf_7(microseconds_0.smallValue)) , microseconds_0.intVal), powerOf10(microseconds_0.scale))), 0));
        $setTimezoneInMinutes(dt, this$static.tzMinutes);
        return dt;
    }
    else if (instanceOf(duration, 137)) {
        months = $getLengthInMonths(dynamicCast(duration, 137));
        m = this$static.month - 1 + months;
        y_0 = this$static.year + ~~(m / 12);
        m = m % 12;
        if (m < 0) {
            m += 12;
            y_0 -= 1;
        }
        ++m;
        d = this$static.day;
        while ($clinit_GDateValue() , !(m > 0 && m <= 12 && d > 0 && d <= daysPerMonth[m - 1] || m == 2 && d == 29 && (y_0 % 4 == 0 && !(y_0 % 100 == 0 && y_0 % 400 != 0)))) {
            d -= 1;
        }
        return new DateTimeValue_0(y_0, narrow_byte(m), narrow_byte(d), this$static.hour, this$static.minute, this$static.second, this$static.microsecond, this$static.tzMinutes);
    }
    else {
        return $add_4(this$static, duration);
    }
}

function $adjustTimezone(this$static, timezone){
    var dt, h, in_$, mi, oldtz, t, tz;
    if (this$static.tzMinutes == $intern_58) {
        in_$ = new DateTimeValue_0(this$static.year, this$static.month, this$static.day, this$static.hour, this$static.minute, this$static.second, this$static.microsecond, this$static.tzMinutes);
        in_$.tzMinutes = timezone;
        return in_$;
    }
    oldtz = this$static.tzMinutes;
    if (oldtz == timezone) {
        return this$static;
    }
    tz = timezone - oldtz;
    h = this$static.hour;
    mi = this$static.minute;
    mi += tz;
    if (mi < 0 || mi > 59) {
        h = round_int(h + Math.floor(mi / 60));
        mi = (mi + 1440) % 60;
    }
    if (h >= 0 && h < 24) {
        return new DateTimeValue_0(this$static.year, this$static.month, this$static.day, narrow_byte(h), narrow_byte(mi), this$static.second, this$static.microsecond, timezone);
    }
    dt = this$static;
    while (h < 0) {
        h += 24;
        t = yesterday(dt.year, dt.month, dt.day);
        dt = new DateTimeValue_0(t.year, t.month, t.day, narrow_byte(h), narrow_byte(mi), this$static.second, this$static.microsecond, timezone);
    }
    if (h > 23) {
        h -= 24;
        t = tomorrow_0(this$static.year, this$static.month, this$static.day);
        return new DateTimeValue_0(t.year, t.month, t.day, narrow_byte(h), narrow_byte(mi), this$static.second, this$static.microsecond, timezone);
    }
    return dt;
}

function $compareTo_1(this$static, other, implicitTimezone){
    var v1, v2;
    if (!instanceOf(other, 66)) {
        throw new ClassCastException_0('DateTime values are not comparable to ' + other.___clazz$);
    }
    v1 = this$static.tzMinutes != $intern_58?this$static:$adjustTimezone(this$static, implicitTimezone);
    v2 = dynamicCast(other, 66);
    v2.tzMinutes != $intern_58 || (v2 = $adjustTimezone(v2, implicitTimezone));
    v1.tzMinutes != v2.tzMinutes && (v1 = $adjustTimezone(v1, v2.tzMinutes));
    if (v1.year != v2.year) {
        return signum_2(v1.year - v2.year);
    }
    if (v1.month != v2.month) {
        return signum_2(v1.month - v2.month);
    }
    if (v1.day != v2.day) {
        return signum_2(v1.day - v2.day);
    }
    if (v1.hour != v2.hour) {
        return signum_2(v1.hour - v2.hour);
    }
    if (v1.minute != v2.minute) {
        return signum_2(v1.minute - v2.minute);
    }
    if (v1.second != v2.second) {
        return signum_2(v1.second - v2.second);
    }
    if (v1.microsecond != v2.microsecond) {
        return signum_2(v1.microsecond - v2.microsecond);
    }
    return 0;
}

function $compareTo_2(this$static, v2){
    try {
        return $compareTo_1(this$static, dynamicCast(v2, 66), 0);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            throw new ClassCastException_0('DateTime comparison requires access to implicit timezone');
        }
        else 
            throw unwrap($e0);
    }
}

function $convert_0(this$static, requiredType){
    return requiredType == ($clinit_AtomicType() , ANY_ATOMIC) || requiredType == DATE_TIME?this$static:requiredType == UNTYPED_ATOMIC?new UntypedAtomicValue($toString_0($getPrimitiveStringValue_2(this$static))):requiredType == STRING?new StringValue_0($toString_0($getPrimitiveStringValue_2(this$static))):requiredType == DATE?new DateValue_1(this$static.year, this$static.month, this$static.day, this$static.tzMinutes):requiredType == TIME?new TimeValue_0(this$static.hour, this$static.minute, this$static.second, this$static.microsecond, this$static.tzMinutes):requiredType == G_YEAR?new GYearValue_0(this$static.year, this$static.tzMinutes):requiredType == G_YEAR_MONTH?new GYearMonthValue_0(this$static.year, this$static.month, this$static.tzMinutes):requiredType == G_MONTH?new GMonthValue_0(this$static.month, this$static.tzMinutes):requiredType == G_MONTH_DAY?new GMonthDayValue_0(this$static.month, this$static.day, this$static.tzMinutes):requiredType == G_DAY?new GDayValue_0(this$static.day, this$static.tzMinutes):new ValidationFailure_0('Cannot convert dateTime to ' + ('xs:' + requiredType.localName_0), 'XPTY0004');
}

function $equals_2(this$static, o){
    return instanceOf(o, 66) && $compareTo_2(this$static, o) == 0;
}

function $getComponent(this$static, component){
    var d, value_0;
    switch (component) {
        case 1:
            value_0 = this$static.year > 0?this$static.year:this$static.year - 1;
            return new IntegerValue(value_0);
        case 2:
            return new IntegerValue(this$static.month);
        case 3:
            return new IntegerValue(this$static.day);
        case 4:
            return new IntegerValue(this$static.hour);
        case 5:
            return new IntegerValue(this$static.minute);
        case 6:
            d = valueOf_5(fromInt(this$static.microsecond));
            d = $divide(d, ($clinit_DecimalValue() , BIG_DECIMAL_ONE_MILLION), 6, valueOf_9(4));
            d = $add_14(d, valueOf_5(fromInt(this$static.second)));
            return new DecimalValue_1(d);
        case 12:
            return new IntegerValue(this$static.second);
        case 11:
            return new IntegerValue(this$static.microsecond);
        case 7:
            return this$static.tzMinutes != $intern_58?fromMilliseconds(mul({l:60000, m:0, h:0}, fromInt(this$static.tzMinutes))):null;
        default:throw new IllegalArgumentException_0('Unknown component for dateTime: ' + component);
    }
}

function $getPrimitiveStringValue_2(this$static){
    var d, div, ms, sb, yr;
    sb = new FastStringBuffer(30);
    yr = this$static.year;
    if (this$static.year <= 0) {
        yr = -yr + 1;
        yr != 0 && ($ensureCapacity_0(sb, 1) , sb.array[sb.used++] = 45);
    }
    appendString(sb, yr, yr > 9999?(yr + '').length:4);
    $ensureCapacity_0(sb, 1);
    sb.array[sb.used++] = 45;
    appendTwoDigits(sb, this$static.month);
    $ensureCapacity_0(sb, 1);
    sb.array[sb.used++] = 45;
    appendTwoDigits(sb, this$static.day);
    $ensureCapacity_0(sb, 1);
    sb.array[sb.used++] = 84;
    appendTwoDigits(sb, this$static.hour);
    $ensureCapacity_0(sb, 1);
    sb.array[sb.used++] = 58;
    appendTwoDigits(sb, this$static.minute);
    $ensureCapacity_0(sb, 1);
    sb.array[sb.used++] = 58;
    appendTwoDigits(sb, this$static.second);
    if (this$static.microsecond != 0) {
        $ensureCapacity_0(sb, 1);
        sb.array[sb.used++] = 46;
        ms = this$static.microsecond;
        div = $intern_71;
        while (ms > 0) {
            d = ~~(ms / div);
            $append_1(sb, d + 48 & $intern_2);
            ms = ms % div;
            div = ~~(div / 10);
        }
    }
    this$static.tzMinutes != $intern_58 && $appendTimezone(this$static, sb);
    return sb;
}

function $normalize_1(this$static, cc){
    var dt;
    if (this$static.tzMinutes != $intern_58) {
        return $adjustTimezone(this$static, 0);
    }
    else {
        dt = new DateTimeValue_0(this$static.year, this$static.month, this$static.day, this$static.hour, this$static.minute, this$static.second, this$static.microsecond, this$static.tzMinutes);
        $setTimezoneInMinutes(dt, cc.getImplicitTimezone());
        return $adjustTimezone(dt, 0);
    }
}

function $toJulianInstant(this$static){
    var j, julianDay, julianSecond;
    julianDay = getJulianDayNumber(this$static.year, this$static.month, this$static.day);
    julianSecond = mul(fromInt(julianDay), {l:86400, m:0, h:0});
    julianSecond = add_11(julianSecond, add_11(mul(add_11(mul(fromInt(this$static.hour), {l:60, m:0, h:0}), fromInt(this$static.minute)), {l:60, m:0, h:0}), fromInt(this$static.second)));
    j = valueOf_5(julianSecond);
    return this$static.microsecond == 0?j:$add_14(j, $divide(valueOf_5(fromInt(this$static.microsecond)), ($clinit_DecimalValue() , BIG_DECIMAL_ONE_MILLION), 6, valueOf_9(6)));
}

function DateTimeValue(){
    CalendarValue.call(this);
}

function DateTimeValue_0(year, month, day, hour, minute, second, microsecond, tz){
    $clinit_DateTimeValue();
    CalendarValue.call(this);
    this.year = year;
    this.month = month;
    this.day = day;
    this.hour = hour;
    this.minute = minute;
    this.second = second;
    this.microsecond = microsecond;
    this.tzMinutes = tz;
}

function fromJavaDate(suppliedDate){
    $clinit_DateTimeValue();
    var millis;
    try {
        millis = fromDouble(suppliedDate.jsdate.getTime());
        return $add_5(EPOCH, fromMilliseconds(millis));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            return EPOCH;
        }
        else 
            throw unwrap($e0);
    }
}

function getCurrentDateTime(context){
    $clinit_DateTimeValue();
    var c;
    return !context || !(c = context.getController())?fromJavaDate(new Date_0):(!c.currentDateTime && (c.currentDateTime = fromJavaDate(new Date_0)) , c.currentDateTime);
}

function hashCode_50(year, month, day, hour, minute, second, microsecond, tzMinutes){
    $clinit_DateTimeValue();
    var h, mi, t, tz;
    tz = -tzMinutes;
    h = hour;
    mi = minute;
    mi += tz;
    if (mi < 0 || mi > 59) {
        h = round_int(h + Math.floor(mi / 60));
        mi = (mi + 1440) % 60;
    }
    while (h < 0) {
        h += 24;
        t = yesterday(year, month, day);
        year = t.year;
        month = t.month;
        day = t.day;
    }
    while (h > 23) {
        h -= 24;
        t = tomorrow_0(year, month, day);
        year = t.year;
        month = t.month;
        day = t.day;
    }
    return year << 4 ^ month << 28 ^ day << 23 ^ h << 18 ^ mi << 13 ^ second ^ microsecond;
}

function makeDateTimeValue(date, time){
    $clinit_DateTimeValue();
    var tz1, tz2, v;
    if (!date || !time) {
        return null;
    }
    tz1 = date.tzMinutes;
    tz2 = time.tzMinutes;
    if (tz1 != $intern_58 && tz2 != $intern_58 && tz1 != tz2) {
        throw new XPathException_2('Supplied date and time are in different timezones', 'FORG0008');
    }
    v = new DateTimeValue_0(date.year, date.month, date.day, 0, 0, 0, 0, date.tzMinutes);
    v.hour = time.hour;
    v.minute = time.minute;
    v.second = time.second;
    v.microsecond = time.microsecond;
    v.tzMinutes = tz1 > tz2?tz1:tz2;
    return v;
}

function makeDateTimeValue_0(s){
    $clinit_DateTimeValue();
    var dt, frac, fractionalSeconds, match_0, str, tomorrow, tz, tzmin;
    str = toString__Ljava_lang_String___devirtual$_0(s);
    match_0 = $exec(dateTimePattern, str);
    if (!match_0) {
        return new ValidationFailure_0('Invalid dateTime value ' + wrap(str, 4) + ' (' + 'wrong format' + ')', 'FORG0001');
    }
    dt = new DateTimeValue;
    dt.year = simpleInteger(match_0[1]);
    if ($equals_5(str.substr(0, 1), '-')) {
        dt.year = dt.year - 1;
        dt.year = -dt.year;
    }
    dt.month = simpleInteger(match_0[2]);
    dt.day = simpleInteger(match_0[3]);
    dt.hour = simpleInteger(match_0[4]);
    dt.minute = simpleInteger(match_0[5]);
    dt.second = simpleInteger(match_0[6]);
    frac = match_0[7];
    if (frac != null && frac.length > 0) {
        fractionalSeconds = __parseAndValidateDouble(frac);
        dt.microsecond = toInt(fromDouble(Math.round(fractionalSeconds * $intern_52)));
    }
    tz = match_0[8];
    tzmin = parseTimezone(tz);
    if (tzmin == $intern_0) {
        return new ValidationFailure_0('Invalid dateTime value ' + wrap(str, 4) + ' (' + 'Invalid timezone' + ')', 'FORG0001');
    }
    dt.tzMinutes = tzmin;
    if (dt.year == 0) {
        return new ValidationFailure_0('Invalid dateTime value ' + wrap(str, 4) + ' (' + 'year zero' + ')', 'FORG0001');
    }
    if (!isValidDate(dt.year, dt.month, dt.day)) {
        return new ValidationFailure_0('Invalid dateTime value ' + wrap(s, 4) + ' (' + 'Non-existent date' + ')', 'FORG0001');
    }
    if (dt.hour == 24) {
        if (dt.minute != 0 || dt.second != 0 || dt.microsecond != 0) {
            return new ValidationFailure_0('Invalid dateTime value ' + wrap(str, 4) + ' (' + 'after midnight' + ')', 'FORG0001');
        }
        else {
            dt.hour = 0;
            tomorrow = tomorrow_0(dt.year, dt.month, dt.day);
            dt.year = tomorrow.year;
            dt.month = tomorrow.month;
            dt.day = tomorrow.day;
        }
    }
    return dt;
}

defineClass(66, 73, {15:1, 14:1, 81:1, 13:1, 73:1, 66:1, 24:1}, DateTimeValue, DateTimeValue_0);
_.add_1 = function add_5(duration){
    return $add_5(this, duration);
}
;
_.adjustTimezone = function adjustTimezone(timezone){
    return $adjustTimezone(this, timezone);
}
;
_.compareTo_0 = function compareTo_2(other, implicitTimezone){
    return $compareTo_1(this, other, implicitTimezone);
}
;
_.compareTo = function compareTo_3(v2){
    return $compareTo_2(this, v2);
}
;
_.convert = function convert_4(requiredType){
    return $convert_0(this, requiredType);
}
;
_.copy_1 = function copy_14(){
    return new DateTimeValue_0(this.year, this.month, this.day, this.hour, this.minute, this.second, this.microsecond, this.tzMinutes);
}
;
_.equals$ = function equals_45(o){
    return $equals_2(this, o);
}
;
_.getComponent = function getComponent_0(component){
    return $getComponent(this, component);
}
;
_.getItemType_0 = function getItemType_76(){
    return $clinit_AtomicType() , DATE_TIME;
}
;
_.getPrimitiveStringValue = function getPrimitiveStringValue_2(){
    return $getPrimitiveStringValue_2(this);
}
;
_.hashCode$ = function hashCode_49(){
    return hashCode_50(this.year, this.month, this.day, this.hour, this.minute, this.second, this.microsecond, this.tzMinutes);
}
;
_.subtract = function subtract_0(other, context){
    if (!instanceOf(other, 66)) {
        throw new XPathException_2("First operand of '-' is a dateTime, but the second is not", 'XPTY0004');
    }
    return $subtract(this, other, context);
}
;
_.toDateTime = function toDateTime(){
    return this;
}
;
_.day = 0;
_.hour = 0;
_.microsecond = 0;
_.minute = 0;
_.month = 0;
_.second = 0;
_.year = 0;
var EPOCH, dateTimePattern;
var Lclient_net_sf_saxon_ce_value_DateTimeValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'DateTimeValue', 66, Lclient_net_sf_saxon_ce_value_CalendarValue_2_classLit);
function $clinit_GDateValue(){
    $clinit_GDateValue = emptyMethod;
    $clinit_CalendarValue();
    daysPerMonth = initValues(getClassLiteralForArray(B_classLit, 1), $intern_9, 0, 7, [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]);
    monthData = initValues(getClassLiteralForArray(S_classLit, 1), $intern_9, 0, 7, [306, 337, 0, 31, 61, 92, 122, 153, 184, 214, 245, 275]);
    datePattern = new RegExp('\\-?([0-9]+)-([0-9][0-9])-([0-9][0-9])([-+Z].*)?');
}

function GDateValue(){
    $clinit_GDateValue();
    CalendarValue.call(this);
}

function isValidDate(year, month, day){
    $clinit_GDateValue();
    return month > 0 && month <= 12 && day > 0 && day <= daysPerMonth[month - 1] || month == 2 && day == 29 && year % 4 == 0 && !(year % 100 == 0 && year % 400 != 0);
}

function setLexicalValue(dt, s){
    $clinit_GDateValue();
    var match_0, str, tz, tzmin;
    str = toString__Ljava_lang_String___devirtual$_0(s);
    match_0 = $exec(datePattern, str);
    if (!match_0) {
        return new ValidationFailure_0('Invalid date ' + wrap(str, 4) + ' (' + 'wrong format' + ')', 'FORG0001');
    }
    dt.year = simpleInteger(match_0[1]);
    if ($equals_5(str.substr(0, 1), '-')) {
        dt.year = dt.year - 1;
        dt.year = -dt.year;
    }
    dt.month = simpleInteger(match_0[2]);
    dt.day = simpleInteger(match_0[3]);
    tz = match_0[4];
    tzmin = parseTimezone(tz);
    if (tzmin == $intern_0) {
        return new ValidationFailure_0('Invalid date ' + wrap(str, 4) + ' (' + 'invalid timezone' + ')', 'FORG0001');
    }
    dt.tzMinutes = tzmin;
    if (dt.year == 0) {
        return new ValidationFailure_0('Invalid date ' + wrap(str, 4) + ' (' + 'year zero' + ')', 'FORG0001');
    }
    if (!isValidDate(dt.year, dt.month, dt.day)) {
        return new ValidationFailure_0('Invalid date ' + wrap(s, 4) + ' (' + 'non-existent date' + ')', 'FORG0001');
    }
    return dt;
}

defineClass(95, 73, $intern_77);
_.adjustTimezone = function adjustTimezone_0(tz){
    return dynamicCast($convert_0($adjustTimezone(new DateTimeValue_0(this.year, this.month, this.day, 0, 0, 0, 0, this.tzMinutes), tz), this.getItemType_0()), 66);
}
;
_.compareTo_0 = function compareTo_4(other, implicitTimezone){
    if (this.getItemType_0() != other.getItemType_0()) {
        throw new ClassCastException_0('Cannot compare dates of different types');
    }
    return $compareTo_1(new DateTimeValue_0(this.year, this.month, this.day, 0, 0, 0, 0, this.tzMinutes), other.toDateTime(), implicitTimezone);
}
;
_.equals$ = function equals_46(o){
    var gdv;
    if (instanceOf(o, 95)) {
        gdv = dynamicCast(o, 95);
        return this.getItemType_0() == gdv.getItemType_0() && $equals_2(new DateTimeValue_0(this.year, this.month, this.day, 0, 0, 0, 0, this.tzMinutes), new DateTimeValue_0(gdv.year, gdv.month, gdv.day, 0, 0, 0, 0, gdv.tzMinutes));
    }
    else {
        return false;
    }
}
;
_.getComponent = function getComponent_1(component){
    var value_0;
    switch (component) {
        case 1:
            value_0 = this.year > 0?this.year:this.year - 1;
            return new IntegerValue(value_0);
        case 2:
            return new IntegerValue(this.month);
        case 3:
            return new IntegerValue(this.day);
        case 7:
            return this.tzMinutes != $intern_58?fromMilliseconds(mul({l:60000, m:0, h:0}, fromInt(this.tzMinutes))):null;
        default:throw new IllegalArgumentException_0('Unknown component for date: ' + component);
    }
}
;
_.hashCode$ = function hashCode_51(){
    return hashCode_50(this.year, this.month, this.day, 12, 0, 0, 0, this.tzMinutes);
}
;
_.toDateTime = function toDateTime_0(){
    return new DateTimeValue_0(this.year, this.month, this.day, 0, 0, 0, 0, this.tzMinutes);
}
;
_.day = 0;
_.month = 0;
_.year = 0;
var datePattern, daysPerMonth, monthData;
var Lclient_net_sf_saxon_ce_value_GDateValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'GDateValue', 95, Lclient_net_sf_saxon_ce_value_CalendarValue_2_classLit);
function $add_6(this$static, duration){
    var d, days, julian, m, microseconds, months, negative, partDay, y_0;
    if (instanceOf(duration, 102)) {
        microseconds = $getLengthInMicroseconds(dynamicCast(duration, 102));
        negative = lt(microseconds, {l:0, m:0, h:0});
        microseconds = lt(microseconds, {l:0, m:0, h:0})?neg(microseconds):microseconds;
        days = round_int(floor_4(toDouble(microseconds) / 86400000000));
        partDay = gt(mod(microseconds, {l:1531904, m:20599, h:0}), {l:0, m:0, h:0});
        julian = getJulianDayNumber(this$static.year, this$static.month, this$static.day);
        d = dateFromJulianDayNumber(julian + (negative?-days:days));
        partDay && negative && (d = yesterday(d.year, d.month, d.day));
        $setTimezoneInMinutes(d, this$static.tzMinutes);
        return d;
    }
    else if (instanceOf(duration, 137)) {
        months = $getLengthInMonths(dynamicCast(duration, 137));
        m = this$static.month - 1 + months;
        y_0 = this$static.year + ~~(m / 12);
        m = m % 12;
        if (m < 0) {
            m += 12;
            y_0 -= 1;
        }
        ++m;
        d = this$static.day;
        while (!(m > 0 && m <= 12 && d > 0 && d <= daysPerMonth[m - 1] || m == 2 && d == 29 && y_0 % 4 == 0 && !(y_0 % 100 == 0 && y_0 % 400 != 0))) {
            d -= 1;
        }
        return new DateValue_1(y_0, narrow_byte(m), narrow_byte(d), this$static.tzMinutes);
    }
    else {
        return $add_4(this$static, duration);
    }
}

function $compareTo_3(this$static, v2){
    try {
        return $compareTo_3(this$static, dynamicCast(v2, 150));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 19)) {
            throw new ClassCastException_0('DateTime comparison requires access to implicit timezone');
        }
        else 
            throw unwrap($e0);
    }
}

function $getPrimitiveStringValue_3(this$static){
    var err;
    try {
        return formatDate(this$static, '[Y0001]-[M01]-[D01][Z]', 'en');
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            throw new AssertionError(err);
        }
        else 
            throw unwrap($e0);
    }
}

function DateValue(){
    $clinit_GDateValue();
    GDateValue.call(this);
}

function DateValue_0(year, month, day){
    GDateValue.call(this);
    this.year = year;
    this.month = month;
    this.day = day;
}

function DateValue_1(year, month, day, tz){
    $clinit_GDateValue();
    GDateValue.call(this);
    this.year = year;
    this.month = month;
    this.day = day;
    this.tzMinutes = tz;
}

function dateFromJulianDayNumber(julianDayNumber){
    $clinit_GDateValue();
    var L, d, dt, i_0, j, m, n, y_0;
    if (julianDayNumber >= 0) {
        L = julianDayNumber + 68569 + 1;
        n = ~~(4 * L / 146097);
        L = L - ~~((146097 * n + 3) / 4);
        i_0 = ~~(4000 * (L + 1) / 1461001);
        L = L - ~~(1461 * i_0 / 4) + 31;
        j = ~~(80 * L / 2447);
        d = L - ~~(2447 * j / 80);
        L = ~~(j / 11);
        m = j + 2 - 12 * L;
        y_0 = 100 * (n - 49) + i_0 + L;
        return new DateValue_0(y_0, narrow_byte(m), narrow_byte(d));
    }
    else {
        dt = dateFromJulianDayNumber(julianDayNumber + 4382910);
        dt.year -= 12000;
        return dt;
    }
}

function getDayOfWeek(year, month, day){
    $clinit_GDateValue();
    var d;
    d = getJulianDayNumber(year, month, day);
    d -= 2378500;
    while (d <= 0) {
        d += 70000000;
    }
    return (d - 1) % 7 + 1;
}

function getDayWithinYear(year, month, day){
    $clinit_GDateValue();
    var j, k_0;
    j = getJulianDayNumber(year, month, day);
    k_0 = getJulianDayNumber(year, 1, 1);
    return j - k_0 + 1;
}

function getJulianDayNumber(year, month, day){
    $clinit_GDateValue();
    var f, j, z_0;
    z_0 = year - (month < 3?1:0);
    f = monthData[month - 1];
    if (z_0 >= 0) {
        return day + f + 365 * z_0 + ~~(z_0 / 4) - ~~(z_0 / 100) + ~~(z_0 / 400) + 1721118;
    }
    else {
        z_0 += 12000;
        j = day + f + 365 * z_0 + ~~(z_0 / 4) - ~~(z_0 / 100) + ~~(z_0 / 400) + 1721118;
        return j - 4382910;
    }
}

function getWeekNumber(year, month, day){
    $clinit_GDateValue();
    var d, firstDay, inc;
    d = getDayWithinYear(year, month, day);
    firstDay = getDayOfWeek(year, 1, 1);
    if (firstDay > 4 && firstDay + d <= 8) {
        return getWeekNumber(year - 1, 12, 31);
    }
    inc = firstDay < 5?1:0;
    return ~~((d + firstDay - 2) / 7) + inc;
}

function getWeekNumberWithinMonth(year, month, day){
    $clinit_GDateValue();
    var firstDay, inc;
    firstDay = getDayOfWeek(year, month, 1);
    inc = firstDay < 5?1:0;
    return ~~((day + firstDay - 2) / 7) + inc;
}

function tomorrow_0(year, month, day){
    $clinit_GDateValue();
    var e;
    try {
        return $add_6(new DateValue_0(year, month, day), ($clinit_DayTimeDurationValue() , ONE_DAY));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            throw new AssertionError(e);
        }
        else 
            throw unwrap($e0);
    }
}

function yesterday(year, month, day){
    $clinit_GDateValue();
    var e;
    try {
        return $add_6(new DateValue_0(year, month, day), ($clinit_DayTimeDurationValue() , MINUS_ONE_DAY));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            e = $e0;
            throw new AssertionError(e);
        }
        else 
            throw unwrap($e0);
    }
}

defineClass(150, 95, {15:1, 14:1, 81:1, 13:1, 73:1, 150:1, 95:1, 24:1}, DateValue, DateValue_0, DateValue_1);
_.add_1 = function add_6(duration){
    return $add_6(this, duration);
}
;
_.compareTo = function compareTo_5(v2){
    return $compareTo_3(this, v2);
}
;
_.convert = function convert_5(requiredType){
    return requiredType == ($clinit_AtomicType() , ANY_ATOMIC) || requiredType == DATE?this:requiredType == UNTYPED_ATOMIC?new UntypedAtomicValue($toString_0($getPrimitiveStringValue_3(this))):requiredType == STRING?new StringValue_0($toString_0($getPrimitiveStringValue_3(this))):requiredType == DATE_TIME?new DateTimeValue_0(this.year, this.month, this.day, 0, 0, 0, 0, this.tzMinutes):requiredType == G_YEAR?new GYearValue_0(this.year, this.tzMinutes):requiredType == G_YEAR_MONTH?new GYearMonthValue_0(this.year, this.month, this.tzMinutes):requiredType == G_MONTH?new GMonthValue_0(this.month, this.tzMinutes):requiredType == G_MONTH_DAY?new GMonthDayValue_0(this.month, this.day, this.tzMinutes):requiredType == G_DAY?new GDayValue_0(this.day, this.tzMinutes):new ValidationFailure_0('Cannot convert date to ' + ('xs:' + requiredType.localName_0), 'XPTY0004');
}
;
_.copy_1 = function copy_15(){
    return new DateValue_1(this.year, this.month, this.day, this.tzMinutes);
}
;
_.getItemType_0 = function getItemType_77(){
    return $clinit_AtomicType() , DATE;
}
;
_.getPrimitiveStringValue = function getPrimitiveStringValue_3(){
    return $getPrimitiveStringValue_3(this);
}
;
_.subtract = function subtract_1(other, context){
    if (!instanceOf(other, 150)) {
        throw new XPathException_2("First operand of '-' is a date, but the second is not", 'XPTY0004');
    }
    return $subtract(this, other, context);
}
;
var Lclient_net_sf_saxon_ce_value_DateValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'DateValue', 150, Lclient_net_sf_saxon_ce_value_GDateValue_2_classLit);
function $clinit_DurationValue(){
    $clinit_DurationValue = emptyMethod;
    durationPattern1 = make_2('-?P([0-9]+Y)?([0-9]+M)?([0-9]+D)?(T([0-9]+H)?([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?)?');
    durationPattern2 = make_2('[YMDHS]');
}

function $$init_7(this$static){
}

function $convert_1(this$static, requiredType){
    return requiredType == ($clinit_AtomicType() , ANY_ATOMIC) || requiredType == DURATION?this$static:requiredType == UNTYPED_ATOMIC?new UntypedAtomicValue(toString__Ljava_lang_String___devirtual$_0(this$static.getPrimitiveStringValue())):requiredType == STRING?new StringValue_0(toString__Ljava_lang_String___devirtual$_0(this$static.getPrimitiveStringValue())):requiredType == YEAR_MONTH_DURATION?fromMonths(this$static.months * (this$static.negative?-1:1)):requiredType == DAY_TIME_DURATION?new DayTimeDurationValue_0(this$static.negative?-1:1, 0, this$static.seconds, this$static.microseconds):new ValidationFailure_0('Cannot convert duration to ' + ('xs:' + requiredType.localName_0), 'XPTY0004');
}

function DurationValue(){
    $clinit_DurationValue();
    $$init_7(this);
}

function DurationValue_0(positive, years, months, days, hours, minutes, seconds, microseconds){
    var h, m;
    $$init_7(this);
    this.negative = !positive;
    if (years < 0 || months < 0 || days < 0 || hours < 0 || minutes < 0 || lt(seconds, {l:0, m:0, h:0}) || microseconds < 0) {
        throw new IllegalArgumentException_0('Negative component value');
    }
    if (years * 12 + months > $intern_0) {
        throw new IllegalArgumentException_0('Duration months limit exceeded');
    }
    if (days * 86400 + hours * 3600 + minutes * 60 + toDouble(seconds) > $intern_78) {
        throw new IllegalArgumentException_0('Duration seconds limit exceeded');
    }
    this.months = years * 12 + months;
    h = fromInt(days * 24 + hours);
    m = add_11(mul(h, {l:60, m:0, h:0}), fromInt(minutes));
    this.seconds = add_11(mul(m, {l:60, m:0, h:0}), seconds);
    this.microseconds = microseconds;
    this.months == 0 && eq(this.seconds, {l:0, m:0, h:0}) && this.microseconds == 0 && (this.negative = false);
}

function makeDuration(s, constrainingPattern){
    $clinit_DurationValue();
    var c, day, err, fraction, hour, i_0, inTimePart, micro, minute, month, negative, part, positionOfDot, second, year;
    s = trimWhitespace(s);
    $matches_0(constrainingPattern, s) || new ValidationFailure_0("Invalid duration value '" + s + "' (" + 'Incorrect format' + ')', 'FORG0001');
    $containsMatch(durationPattern2, s) || new ValidationFailure_0("Invalid duration value '" + s + "' (" + 'No components present' + ')', 'FORG0001');
    charAt_I_C__devirtual$(s, length__I__devirtual$(s) - 1) == 84 && new ValidationFailure_0("Invalid duration value '" + s + "' (" + "No component present after 'T'" + ')', 'FORG0001');
    negative = charAt_I_C__devirtual$(s, 0) == 45;
    inTimePart = false;
    positionOfDot = -1;
    year = 0;
    month = 0;
    day = 0;
    hour = 0;
    minute = 0;
    second = 0;
    micro = 0;
    part = 0;
    for (i_0 = 0; i_0 < length__I__devirtual$(s); i_0++) {
        c = charAt_I_C__devirtual$(s, i_0);
        switch (c) {
            case 48:
        case 49:
    case 50:
case 51:
      case 52:
  case 53:
      case 54:
  case 55:
      case 56:
  case 57:
      part = part * 10 + (c - 48);
      break;
  case 84:
      inTimePart = true;
      break;
  case 89:
      year = part;
      part = 0;
      break;
  case 77:
      inTimePart?(minute = part):(month = part);
      part = 0;
      break;
  case 68:
      day = part;
      part = 0;
      break;
  case 72:
      hour = part;
      part = 0;
      break;
  case 83:
      if (positionOfDot >= 0) {
          fraction = $substring_1(subSequence_II_Ljava_lang_CharSequence___devirtual$(s, positionOfDot + 1, i_0) + '000000', 0, 6);
          micro = __parseAndValidateInt(fraction, 10);
      }
      else {
          second = part;
      }

      part = 0;
      break;
  case 46:
      second = part;
      part = 0;
      positionOfDot = i_0;
        }
    }
    try {
        return new DurationValue_0(!negative, year, month, day, hour, minute, fromInt(second), micro);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 30)) {
            err = $e0;
            return new ValidationFailure(err.detailMessage);
        }
        else 
            throw unwrap($e0);
    }
}

function simpleInteger(s){
    $clinit_DurationValue();
    var c, i_0, len, result;
    result = {l:0, m:0, h:0};
    if (s == null) {
        return -1;
    }
    len = s.length;
    if (len == 0) {
        return -1;
    }
    for (i_0 = 0; i_0 < len; i_0++) {
        c = s.charCodeAt(i_0);
        if (c >= 48 && c <= 57) {
            result = add_11(mul(result, {l:10, m:0, h:0}), fromInt(c - 48));
            if (gt(result, {l:$intern_46, m:511, h:0})) {
                return -1;
            }
        }
        else {
            return -1;
        }
    }
    return toInt(result);
}

defineClass(74, 13, {15:1, 14:1, 81:1, 13:1, 74:1}, DurationValue_0);
_.add_2 = function add_7(other){
    throw new XPathException_2('Only subtypes of xs:duration can be added', 'XPTY0004');
}
;
_.convert = function convert_6(requiredType){
    return $convert_1(this, requiredType);
}
;
_.divide = function divide(other){
    throw new XPathException_2('Only subtypes of xs:duration can be divided by another duration', 'XPTY0004');
}
;
_.equals$ = function equals_47(other){
    var d1, d2;
    if (instanceOf(other, 74)) {
        d1 = this;
        d2 = dynamicCast(other, 74);
        return d1.negative == d2.negative && d1.months == d2.months && eq(d1.seconds, d2.seconds) && d1.microseconds == d2.microseconds;
    }
    else {
        return false;
    }
}
;
_.getComponent = function getComponent_2(component){
    var ms, sb, value_0, value1, value2, value3, value4, value5;
    switch (component) {
        case 1:
            value5 = this.negative?-~~(this.months / 12):~~(this.months / 12);
            return new IntegerValue(value5);
        case 2:
            value4 = this.negative?-(this.months % 12):this.months % 12;
            return new IntegerValue(value4);
        case 3:
            value3 = this.negative?-toInt(div_0(this.seconds, {l:86400, m:0, h:0})):toInt(div_0(this.seconds, {l:86400, m:0, h:0}));
            return new IntegerValue(value3);
        case 4:
            value2 = this.negative?-toInt(div_0(mod(this.seconds, {l:86400, m:0, h:0}), {l:3600, m:0, h:0})):toInt(div_0(mod(this.seconds, {l:86400, m:0, h:0}), {l:3600, m:0, h:0}));
            return new IntegerValue(value2);
        case 5:
            value1 = this.negative?-toInt(div_0(mod(this.seconds, {l:3600, m:0, h:0}), {l:60, m:0, h:0})):toInt(div_0(mod(this.seconds, {l:3600, m:0, h:0}), {l:60, m:0, h:0}));
            return new IntegerValue(value1);
        case 6:
            sb = new FastStringBuffer(16);
            ms = '000000' + this.microseconds;
            ms = $substring_0(ms, ms.length - 6);
            $append_3(sb, (this.negative?'-':'') + toInt(mod(this.seconds, {l:60, m:0, h:0})) + '.' + ms);
            return dynamicCast(makeDecimalValue(sb), 13);
        case 12:
            return new IntegerValue_0(new BigDecimal_1(this.negative?neg(this.seconds):this.seconds));
        case 11:
            value_0 = this.negative?-this.microseconds:this.microseconds;
            return new IntegerValue(value_0);
        default:throw new IllegalArgumentException_0('Unknown component for duration: ' + component);
    }
}
;
_.getItemType_0 = function getItemType_78(){
    return $clinit_AtomicType() , DURATION;
}
;
_.getLengthInSeconds = function getLengthInSeconds(){
    var a;
    a = this.months * 30.43684991666667 * 24 * 60 * 60 + toDouble(this.seconds) + this.microseconds / $intern_52;
    return this.negative?-a:a;
}
;
_.getPrimitiveStringValue = function getPrimitiveStringValue_4(){
    var days, hours, lastSigDigit, minutes, months, ms, mss, sb, seconds, years;
    if (this.months == 0 && eq(this.seconds, {l:0, m:0, h:0}) && this.microseconds == 0) {
        return 'PT0S';
    }
    sb = new FastStringBuffer(32);
    this.negative && ($ensureCapacity_0(sb, 1) , sb.array[sb.used++] = 45);
    years = ~~(this.months / 12);
    months = this.months % 12;
    days = toInt(div_0(this.seconds, {l:86400, m:0, h:0}));
    hours = toInt(div_0(mod(this.seconds, {l:86400, m:0, h:0}), {l:3600, m:0, h:0}));
    minutes = toInt(div_0(mod(this.seconds, {l:3600, m:0, h:0}), {l:60, m:0, h:0}));
    seconds = toInt(mod(this.seconds, {l:60, m:0, h:0}));
    $append_3(sb, 'P');
    years != 0 && $append_3(sb, years + 'Y');
    months != 0 && $append_3(sb, months + 'M');
    days != 0 && $append_3(sb, days + 'D');
    (hours != 0 || minutes != 0 || seconds != 0 || this.microseconds != 0) && $append_3(sb, 'T');
    hours != 0 && $append_3(sb, hours + 'H');
    minutes != 0 && $append_3(sb, minutes + 'M');
    if (seconds != 0 || this.microseconds != 0) {
        if (seconds != 0 && this.microseconds == 0) {
            $append_3(sb, seconds + 'S');
        }
        else {
            ms = fromInt(seconds * $intern_52 + this.microseconds);
            mss = toString_77(ms) + '';
            if (seconds == 0) {
                mss = '0000000' + mss;
                mss = $substring_0(mss, mss.length - 7);
            }
            $append_3(sb, $substring_1(mss, 0, mss.length - 6));
            $ensureCapacity_0(sb, 1);
            sb.array[sb.used++] = 46;
            lastSigDigit = mss.length - 1;
            while (mss.charCodeAt(lastSigDigit) == 48) {
                --lastSigDigit;
            }
            $append_3(sb, $substring_1(mss, mss.length - 6, lastSigDigit + 1));
            $ensureCapacity_0(sb, 1);
            sb.array[sb.used++] = 83;
        }
    }
    return sb;
}
;
_.getXPathComparable = function getXPathComparable_3(ordered, collator, implicitTimezone){
    return ordered?null:this;
}
;
_.hashCode$ = function hashCode_52(){
    return round_int((new Double(this.getLengthInSeconds())).value_0);
}
;
_.multiply = function multiply_0(factor){
    throw new XPathException_2('Only subtypes of xs:duration can be multiplied by a number', 'XPTY0004');
}
;
_.negate = function negate(){
    return new DurationValue_0(this.negative, 0, this.months, 0, 0, 0, this.seconds, this.microseconds);
}
;
_.microseconds = 0;
_.months = 0;
_.negative = false;
_.seconds = {l:0, m:0, h:0};
var durationPattern1, durationPattern2;
var Lclient_net_sf_saxon_ce_value_DurationValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'DurationValue', 74, Lclient_net_sf_saxon_ce_value_AtomicValue_2_classLit);
function $clinit_DayTimeDurationValue(){
    $clinit_DayTimeDurationValue = emptyMethod;
    $clinit_DurationValue();
    ONE_DAY = new DayTimeDurationValue_0(1, 1, {l:0, m:0, h:0}, 0);
    MINUS_ONE_DAY = new DayTimeDurationValue_0(-1, 1, {l:0, m:0, h:0}, 0);
    DTDdurationPattern = make_2('-?P([0-9]+D)?(T([0-9]+H)?([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?)?');
}

function $getLengthInMicroseconds(this$static){
    var a;
    a = add_11(mul(this$static.seconds, {l:$intern_52, m:0, h:0}), fromInt(this$static.microseconds));
    return this$static.negative?neg(a):a;
}

function DayTimeDurationValue(){
    DurationValue.call(this);
}

function DayTimeDurationValue_0(sign, days, seconds, microseconds){
    $clinit_DayTimeDurationValue();
    var h, m, s;
    DurationValue.call(this);
    if (days < 0 || lt(seconds, {l:0, m:0, h:0}) || microseconds < 0) {
        throw new IllegalArgumentException_0('Negative component value');
    }
    if (days * 86400 + toDouble(seconds) > $intern_78) {
        throw new IllegalArgumentException_0('Duration seconds limit exceeded');
    }
    this.negative = sign < 0;
    this.months = 0;
    h = mul(fromInt(days), {l:24, m:0, h:0});
    m = mul(h, {l:60, m:0, h:0});
    s = add_11(mul(m, {l:60, m:0, h:0}), seconds);
    if (microseconds > $intern_52) {
        s = add_11(s, fromInt(~~(microseconds / $intern_52)));
        microseconds %= $intern_52;
    }
    this.seconds = s;
    this.microseconds = microseconds;
    eq(s, {l:0, m:0, h:0}) && microseconds == 0 && (this.negative = false);
}

function fromMicroseconds(microseconds){
    var sign;
    sign = eq(microseconds, {l:0, m:0, h:0})?0:lt(microseconds, {l:0, m:0, h:0})?-1:1;
    sign < 0 && (microseconds = neg(microseconds));
    return new DayTimeDurationValue_0(sign, 0, div_0(microseconds, {l:$intern_52, m:0, h:0}), toInt(mod(microseconds, {l:$intern_52, m:0, h:0})));
}

function fromMilliseconds(milliseconds){
    $clinit_DayTimeDurationValue();
    var sign;
    sign = eq(milliseconds, {l:0, m:0, h:0})?0:lt(milliseconds, {l:0, m:0, h:0})?-1:1;
    sign < 0 && (milliseconds = neg(milliseconds));
    try {
        return new DayTimeDurationValue_0(sign, 0, div_0(milliseconds, {l:$intern_51, m:0, h:0}), toInt(mod(milliseconds, {l:$intern_51, m:0, h:0})) * $intern_51);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 30)) {
            throw new XPathException_0('Duration exceeds limits');
        }
        else 
            throw unwrap($e0);
    }
}

function fromSeconds(seconds){
    $clinit_DayTimeDurationValue();
    var intMicros, microseconds, parts, sdv;
    sdv = new DayTimeDurationValue;
    sdv.negative = $signum(seconds) < 0;
    sdv.negative && (seconds = $negate(seconds));
    microseconds = $multiply(seconds, ($clinit_DecimalValue() , BIG_DECIMAL_ONE_MILLION));
    intMicros = microseconds.scale == 0 || microseconds.bitLength == 0 && microseconds.smallValue != -1?(!microseconds.intVal && (microseconds.intVal = valueOf_7(microseconds.smallValue)) , microseconds.intVal):microseconds.scale < 0?$multiply_0((!microseconds.intVal && (microseconds.intVal = valueOf_7(microseconds.smallValue)) , microseconds.intVal), powerOf10(-microseconds.scale)):$divide_0((!microseconds.intVal && (microseconds.intVal = valueOf_7(microseconds.smallValue)) , microseconds.intVal), powerOf10(microseconds.scale));
    parts = $divideAndRemainder(intMicros, valueOf_8({l:$intern_52, m:0, h:0}));
    sdv.seconds = $longValue(parts[0]);
    sdv.microseconds = $intValue_1(parts[1]);
    return sdv;
}

function makeDayTimeDurationValue(s){
    $clinit_DayTimeDurationValue();
    var d, dv;
    d = makeDuration(s, DTDdurationPattern);
    if (instanceOf(d, 29)) {
        return d;
    }
    dv = dynamicCast(d, 74);
    return $convert_1(dv, ($clinit_AtomicType() , DAY_TIME_DURATION));
}

defineClass(102, 74, {15:1, 14:1, 81:1, 13:1, 102:1, 74:1, 24:1}, DayTimeDurationValue, DayTimeDurationValue_0);
_.add_2 = function add_8(other){
    if (instanceOf(other, 102)) {
        try {
            return fromMicroseconds(add_11($getLengthInMicroseconds(this), $getLengthInMicroseconds(dynamicCast(other, 102))));
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 30)) {
                throw new XPathException_2('Overflow when adding two durations', 'FODT0002');
            }
            else 
                throw unwrap($e0);
        }
    }
    else {
        throw new XPathException_2('Cannot add two durations of different type', 'XPTY0004');
    }
}
;
_.compareTo = function compareTo_6(other){
    var diff;
    if (instanceOf(other, 102)) {
        diff = sub_1($getLengthInMicroseconds(this), $getLengthInMicroseconds(dynamicCast(other, 102)));
        return lt(diff, {l:0, m:0, h:0})?-1:gt(diff, {l:0, m:0, h:0})?1:0;
    }
    else {
        throw new ClassCastException_0('Cannot compare a dayTimeDuration to an object of class ' + getClass__Ljava_lang_Class___devirtual$(other));
    }
}
;
_.divide = function divide_0(other){
    var v1, v2;
    if (instanceOf(other, 102)) {
        v1 = valueOf_5($getLengthInMicroseconds(this));
        v2 = valueOf_5($getLengthInMicroseconds(dynamicCast(other, 102)));
        if ($signum(v2) == 0) {
            throw new XPathException_2('Divide by zero (durations)', 'FOAR0001');
        }
        return new DecimalValue_1($divide(v1, v2, 20, valueOf_9(6)));
    }
    else {
        throw new XPathException_2('Cannot divide two durations of different type', 'XPTY0004');
    }
}
;
_.getItemType_0 = function getItemType_79(){
    return $clinit_AtomicType() , DAY_TIME_DURATION;
}
;
_.getLengthInSeconds = function getLengthInSeconds_0(){
    var a;
    a = toDouble(this.seconds) + this.microseconds / $intern_52;
    return this.negative?-a:a;
}
;
_.getPrimitiveStringValue = function getPrimitiveStringValue_5(){
    var days, hours, lastSigDigit, minutes, ms, mss, sb, seconds;
    sb = new FastStringBuffer(32);
    this.negative && ($ensureCapacity_0(sb, 1) , sb.array[sb.used++] = 45);
    days = toInt(div_0(this.seconds, {l:86400, m:0, h:0}));
    hours = toInt(div_0(mod(this.seconds, {l:86400, m:0, h:0}), {l:3600, m:0, h:0}));
    minutes = toInt(div_0(mod(this.seconds, {l:3600, m:0, h:0}), {l:60, m:0, h:0}));
    seconds = toInt(mod(this.seconds, {l:60, m:0, h:0}));
    $ensureCapacity_0(sb, 1);
    sb.array[sb.used++] = 80;
    days != 0 && $append_3(sb, days + 'D');
    (days == 0 || hours != 0 || minutes != 0 || seconds != 0 || this.microseconds != 0) && ($ensureCapacity_0(sb, 1) , sb.array[sb.used++] = 84);
    hours != 0 && $append_3(sb, hours + 'H');
    minutes != 0 && $append_3(sb, minutes + 'M');
    if (seconds != 0 || this.microseconds != 0 || days == 0 && minutes == 0 && hours == 0) {
        if (this.microseconds == 0) {
            $append_3(sb, seconds + 'S');
        }
        else {
            ms = fromInt(seconds * $intern_52 + this.microseconds);
            mss = toString_77(ms) + '';
            if (seconds == 0) {
                mss = '0000000' + mss;
                mss = $substring_0(mss, mss.length - 7);
            }
            $append_3(sb, $substring_1(mss, 0, mss.length - 6));
            $ensureCapacity_0(sb, 1);
            sb.array[sb.used++] = 46;
            lastSigDigit = mss.length - 1;
            while (mss.charCodeAt(lastSigDigit) == 48) {
                --lastSigDigit;
            }
            $append_3(sb, $substring_1(mss, mss.length - 6, lastSigDigit + 1));
            $ensureCapacity_0(sb, 1);
            sb.array[sb.used++] = 83;
        }
    }
    return sb;
}
;
_.getXPathComparable = function getXPathComparable_4(ordered, collator, implicitTimezone){
    return this;
}
;
_.multiply = function multiply_1(n){
    var err, m, product;
    if (isNaN(n)) {
        throw new XPathException_2('Cannot multiply/divide a duration by NaN', 'FOCA0005');
    }
    m = toDouble($getLengthInMicroseconds(this));
    product = n * m;
    if (isInfinite(product) || isNaN(product) || product > $intern_78 || product < $intern_79) {
        throw new XPathException_2('Overflow when multiplying/dividing a duration by a number', 'FODT0002');
    }
    try {
        return fromMicroseconds(fromDouble(product));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 30)) {
            err = $e0;
            if (instanceOf(err.cause, 4)) {
                throw dynamicCast(err.cause, 4);
            }
            else {
                throw new XPathException_2('Overflow when multiplying/dividing a duration by a number', 'FODT0002');
            }
        }
        else 
            throw unwrap($e0);
    }
}
;
_.negate = function negate_0(){
    return fromMicroseconds(neg($getLengthInMicroseconds(this)));
}
;
var DTDdurationPattern, MINUS_ONE_DAY, ONE_DAY;
var Lclient_net_sf_saxon_ce_value_DayTimeDurationValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'DayTimeDurationValue', 102, Lclient_net_sf_saxon_ce_value_DurationValue_2_classLit);
function $compareTo_4(this$static, other){
    var a, b;
    a = this$static.getDoubleValue();
    b = dynamicCast(other, 25).getDoubleValue();
    if (a == b)
        return 0;
    if (a < b)
        return -1;
    return 1;
}

function $getDoubleValue(this$static){
    try {
        return dynamicCast(this$static.convert(($clinit_AtomicType() , DOUBLE)).asAtomic(), 44).value_0;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            return NaN;
        }
        else 
            throw unwrap($e0);
    }
}

function parseNumber(in_$){
    var v;
    if ($indexOf_3(in_$, fromCodePoint(101)) >= 0 || $indexOf_3(in_$, fromCodePoint(69)) >= 0) {
        try {
            return new DoubleValue(__parseAndValidateDouble(in_$));
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 57)) {
                return $clinit_DoubleValue() , NaN_0;
            }
            else 
                throw unwrap($e0);
        }
    }
    else if ($indexOf_3(in_$, fromCodePoint(46)) >= 0) {
        v = makeDecimalValue(in_$);
        return instanceOf(v, 29)?($clinit_DoubleValue() , NaN_0):dynamicCast(v, 25);
    }
    else {
        v = stringToInteger(in_$);
        return instanceOf(v, 29)?($clinit_DoubleValue() , NaN_0):dynamicCast(v, 25);
    }
}

defineClass(25, 13, {15:1, 14:1, 81:1, 13:1, 25:1, 24:1});
_.compareTo = function compareTo_7(other){
    return $compareTo_4(this, other);
}
;
_.equals$ = function equals_48(other){
    return instanceOf(other, 25) && this.compareTo(other) == 0;
}
;
_.getDecimalValue = function getDecimalValue(){
    return dynamicCast(this.convert(($clinit_AtomicType() , DECIMAL)).asAtomic(), 68).value_0;
}
;
_.getDoubleValue = function getDoubleValue(){
    return $getDoubleValue(this);
}
;
_.getFloatValue = function getFloatValue(){
    try {
        return dynamicCast(this.convert(($clinit_AtomicType() , FLOAT)).asAtomic(), 71).value_0;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            return NaN;
        }
        else 
            throw unwrap($e0);
    }
}
;
_.getXPathComparable = function getXPathComparable_5(ordered, collator, implicitTimezone){
    return this;
}
;
_.intValue = function intValue(){
    return $intValue(dynamicCast(this.convert(($clinit_AtomicType() , INTEGER)).asAtomic(), 32));
}
;
_.toString$ = function toString_69(){
    return toString__Ljava_lang_String___devirtual$_0(this.getPrimitiveStringValue());
}
;
var Lclient_net_sf_saxon_ce_value_NumericValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'NumericValue', 25, Lclient_net_sf_saxon_ce_value_AtomicValue_2_classLit);
function $clinit_DecimalValue(){
    $clinit_DecimalValue = emptyMethod;
    BIG_DECIMAL_ONE_MILLION = valueOf_5({l:$intern_52, m:0, h:0});
    BIG_DECIMAL_MAX_INT = valueOf_5({l:$intern_46, m:511, h:0});
    BIG_DECIMAL_MIN_INT = valueOf_5({l:0, m:4193792, h:$intern_47});
    ZERO = new DecimalValue_1(valueOf_5({l:0, m:0, h:0}));
    new DecimalValue_1(valueOf_5({l:1, m:0, h:0}));
    TWO = new DecimalValue_1(valueOf_5({l:2, m:0, h:0}));
    decimalPattern = new RegExp('(\\-|\\+)?((\\.[0-9]+)|([0-9]+(\\.[0-9]*)?))');
}

function $compareTo_5(this$static, other){
    var f;
    if (instanceOf(other, 68)) {
        return $compareTo_13(this$static.value_0, dynamicCast(other, 68).value_0);
    }
    else if (instanceOf(other, 71)) {
        try {
            f = dynamicCast($convert_2(this$static, ($clinit_AtomicType() , FLOAT)).asAtomic(), 71);
            return $compareTo_6(f, other);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                throw new AssertionError('Conversion of decimal to float should never fail');
            }
            else 
                throw unwrap($e0);
        }
    }
    else {
        return $compareTo_4(this$static, other);
    }
}

function $convert_2(this$static, requiredType){
    return requiredType == ($clinit_AtomicType() , ANY_ATOMIC) || requiredType == NUMERIC || requiredType == DECIMAL?this$static:requiredType == INTEGER?decimalToInteger(this$static.value_0):requiredType == BOOLEAN?($clinit_BooleanValue() , $signum(this$static.value_0) != 0?TRUE_0:FALSE_0):requiredType == DOUBLE?new DoubleValue(__parseAndValidateDouble($toString_2(this$static.value_0))):requiredType == FLOAT?new FloatValue($floatValue(this$static.value_0)):requiredType == STRING?new StringValue_0($toString_0(decimalToString(this$static.value_0, new FastStringBuffer(16)))):requiredType == UNTYPED_ATOMIC?new UntypedAtomicValue($toString_0(decimalToString(this$static.value_0, new FastStringBuffer(16)))):new ValidationFailure_0('Cannot convert decimal to ' + ('xs:' + requiredType.localName_0), 'XPTY0004');
}

function $roundHalfToEven(this$static, scale){
    var scaledValue;
    scaledValue = $setScale(this$static.value_0, scale, valueOf_9(6));
    return new DecimalValue_1(scaledValue);
}

function DecimalValue(in_$){
    $clinit_DecimalValue();
    var d;
    try {
        d = new BigDecimal(in_$);
        this.value_0 = d;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 57)) {
            throw new XPathException_2('Cannot convert double ' + wrap(in_$ + '', 4) + ' to decimal', 'FOCA0002');
        }
        else 
            throw unwrap($e0);
    }
}

function DecimalValue_0(in_$){
    $clinit_DecimalValue();
    this.value_0 = valueOf_5(in_$);
}

function DecimalValue_1(value_0){
    $clinit_DecimalValue();
    this.value_0 = stripTrailingZeros(value_0);
}

function castableAsDecimal(in_$){
    $clinit_DecimalValue();
    var trimmed;
    trimmed = trimWhitespace(in_$);
    return !!$exec(decimalPattern, toString__Ljava_lang_String___devirtual$_0(trimmed));
}

function decimalToString(value_0, fsb){
    $clinit_DecimalValue();
    var i_0, len, s, scale;
    scale = round_int(value_0.scale);
    if (scale == 0) {
        $append_3(fsb, $toString_2(value_0));
        return fsb;
    }
    else if (scale < 0) {
        s = toDecimalScaledString_0($unscaledValue($signum(value_0) < 0?$negate(value_0):value_0), 0);
        if ($equals_5(s, '0')) {
            $ensureCapacity_0(fsb, 1);
            fsb.array[fsb.used++] = 48;
            return fsb;
        }
        $signum(value_0) < 0 && ($ensureCapacity_0(fsb, 1) , fsb.array[fsb.used++] = 45);
        $append_3(fsb, s);
        for (i_0 = 0; i_0 < -scale; i_0++) {
            $ensureCapacity_0(fsb, 1);
            fsb.array[fsb.used++] = 48;
        }
        return fsb;
    }
    else {
        s = toDecimalScaledString_0($unscaledValue($signum(value_0) < 0?$negate(value_0):value_0), 0);
        if ($equals_5(s, '0')) {
            $ensureCapacity_0(fsb, 1);
            fsb.array[fsb.used++] = 48;
            return fsb;
        }
        len = s.length;
        $signum(value_0) < 0 && ($ensureCapacity_0(fsb, 1) , fsb.array[fsb.used++] = 45);
        if (scale >= len) {
            $append_3(fsb, '0.');
            for (i_0 = len; i_0 < scale; i_0++) {
                $ensureCapacity_0(fsb, 1);
                fsb.array[fsb.used++] = 48;
            }
            $append_3(fsb, s);
        }
        else {
            $append_3(fsb, s.substr(0, len - scale));
            $ensureCapacity_0(fsb, 1);
            fsb.array[fsb.used++] = 46;
            $append_3(fsb, __substr(s, len - scale, s.length - (len - scale)));
        }
        return fsb;
    }
}

function makeDecimalValue(in_$){
    $clinit_DecimalValue();
    var bigDec, bigInt, c, digits, err, foundDigit, i_0, len, scale, state;
    try {
        digits = new FastStringBuffer(length__I__devirtual$(in_$));
        scale = 0;
        state = 0;
        foundDigit = false;
        len = length__I__devirtual$(in_$);
        for (i_0 = 0; i_0 < len; i_0++) {
            c = charAt_I_C__devirtual$(in_$, i_0);
            switch (c) {
                case 32:
            case 9:
        case 13:
    case 10:
        state != 0 && (state = 5);
        break;
    case 43:
        if (state != 0) {
            throw new NumberFormatException('unexpected sign');
        }

        state = 1;
        break;
    case 45:
        if (state != 0) {
            throw new NumberFormatException('unexpected sign');
        }

        state = 1;
        $ensureCapacity_0(digits, 1);
        digits.array[digits.used++] = 45;
        break;
    case 48:
case 49:
        case 50:
    case 51:
case 52:
        case 53:
    case 54:
case 55:
        case 56:
    case 57:
        state == 0?(state = 1):state >= 3 && ++scale;
        if (state == 5) {
            throw new NumberFormatException('contains embedded whitespace');
        }

        $ensureCapacity_0(digits, 1);
        digits.array[digits.used++] = c;
        foundDigit = true;
        break;
    case 46:
        if (state == 5) {
            throw new NumberFormatException('contains embedded whitespace');
        }

        if (state >= 3) {
            throw new NumberFormatException('more than one decimal point');
        }

        state = 3;
        break;
    default:throw new NumberFormatException("invalid character '" + charToString(c) + "'");
            }
        }
        if (!foundDigit) {
            throw new NumberFormatException('no digits in value');
        }
        while (scale > 0) {
            if ($charAt(digits, digits.used - 1) == 48) {
                $setLength(digits, digits.used - 1);
                --scale;
            }
            else {
                break;
            }
        }
        if (digits.used == 0 || digits.used == 1 && $charAt(digits, 0) == 45) {
            return ZERO;
        }
        bigInt = new BigInteger_4(($condense(digits) , valueOf_3(digits.array, 0, digits.used)));
        bigDec = new BigDecimal_6(bigInt, scale);
        return new DecimalValue_1(bigDec);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 57)) {
            err = $e0;
            return new ValidationFailure_0('Cannot convert string ' + wrap(trim_0(in_$), 4) + ' to xs:decimal: ' + err.detailMessage, 'FORG0001');
        }
        else 
            throw unwrap($e0);
    }
}

function stripTrailingZeros(value_0){
    var ch_0, dotPos, expPos, i_0, lastZeroPos, str, strippedValue;
    str = $toString_2(value_0);
    dotPos = $indexOf_3(str, fromCodePoint(46));
    if (dotPos < 0) {
        return value_0;
    }
    expPos = $indexOf_3(str, fromCodePoint(69));
    if (expPos > -1) {
        return value_0;
    }
    lastZeroPos = -1;
    for (i_0 = str.length - 1; i_0 > -1; i_0--) {
        ch_0 = str.charCodeAt(i_0);
        if (ch_0 != 48)
            break;
        lastZeroPos = i_0;
    }
    if (lastZeroPos > -1) {
        lastZeroPos - dotPos == 1 && (lastZeroPos = dotPos);
        strippedValue = str.substr(0, lastZeroPos);
        return new BigDecimal_3(strippedValue);
    }
    else {
        return value_0;
    }
}

defineClass(68, 25, {15:1, 14:1, 81:1, 13:1, 68:1, 25:1, 24:1}, DecimalValue, DecimalValue_1);
_.abs_0 = function abs_1(){
    return $signum(this.value_0) > 0?this:new DecimalValue_1($negate(this.value_0));
}
;
_.ceiling = function ceiling(){
    return new DecimalValue_1($setScale(this.value_0, 0, valueOf_9(2)));
}
;
_.compareTo_1 = function compareTo_8(other){
    if (eq(other, {l:0, m:0, h:0})) {
        return $signum(this.value_0);
    }
    return $compareTo_13(this.value_0, valueOf_5(other));
}
;
_.compareTo = function compareTo_9(other){
    return $compareTo_5(this, other);
}
;
_.convert = function convert_7(requiredType){
    return $convert_2(this, requiredType);
}
;
_.effectiveBooleanValue_0 = function effectiveBooleanValue_18(){
    return $signum(this.value_0) != 0;
}
;
_.floor_0 = function floor_0(){
    return new DecimalValue_1($setScale(this.value_0, 0, valueOf_9(3)));
}
;
_.getDecimalValue = function getDecimalValue_0(){
    return this.value_0;
}
;
_.getItemType_0 = function getItemType_80(){
    return $clinit_AtomicType() , DECIMAL;
}
;
_.getPrimitiveStringValue = function getPrimitiveStringValue_6(){
    return decimalToString(this.value_0, new FastStringBuffer(16));
}
;
_.hashCode$ = function hashCode_53(){
    var round_0, value_0;
    round_0 = $setScale(this.value_0, 0, valueOf_9(1));
    value_0 = round_0.scale <= -64 || round_0.scale > (round_0.precision > 0?round_0.precision:floor_4((round_0.bitLength - 1) * $intern_76) + 1)?{l:0, m:0, h:0}:$longValue(round_0.scale == 0 || round_0.bitLength == 0 && round_0.smallValue != -1?(!round_0.intVal && (round_0.intVal = valueOf_7(round_0.smallValue)) , round_0.intVal):round_0.scale < 0?$multiply_0((!round_0.intVal && (round_0.intVal = valueOf_7(round_0.smallValue)) , round_0.intVal), powerOf10(-round_0.scale)):$divide_0((!round_0.intVal && (round_0.intVal = valueOf_7(round_0.smallValue)) , round_0.intVal), powerOf10(round_0.scale)));
    return gt(value_0, {l:0, m:4193792, h:$intern_47}) && lt(value_0, {l:$intern_46, m:511, h:0})?toInt(value_0):round_int((new Double($getDoubleValue(this))).value_0);
}
;
_.isWholeNumber = function isWholeNumber(){
    return round_int(this.value_0.scale) == 0 || $compareTo_13(this.value_0, $setScale(this.value_0, 0, valueOf_9(1))) == 0;
}
;
_.negate_0 = function negate_1(){
    return new DecimalValue_1($negate(this.value_0));
}
;
_.round_0 = function round_1(){
    switch ($signum(this.value_0)) {
        case -1:
            return new DecimalValue_1($setScale(this.value_0, 0, valueOf_9(5)));
        default:case 0:
            return this;
        case 1:
            return new DecimalValue_1($setScale(this.value_0, 0, valueOf_9(4)));
    }
}
;
_.roundHalfToEven = function roundHalfToEven(scale){
    return $roundHalfToEven(this, scale);
}
;
_.signum = function signum(){
    return $signum(this.value_0);
}
;
var BIG_DECIMAL_MAX_INT, BIG_DECIMAL_MIN_INT, BIG_DECIMAL_ONE_MILLION, TWO, ZERO, decimalPattern;
var Lclient_net_sf_saxon_ce_value_DecimalValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'DecimalValue', 68, Lclient_net_sf_saxon_ce_value_NumericValue_2_classLit);
function $clinit_DoubleValue(){
    $clinit_DoubleValue = emptyMethod;
    ZERO_0 = new DoubleValue(0);
    NEGATIVE_ZERO = new DoubleValue(-0.);
    ONE = new DoubleValue(1);
    NaN_0 = new DoubleValue(NaN);
}

function $convert_3(this$static, requiredType){
    var e;
    if (requiredType == ($clinit_AtomicType() , ANY_ATOMIC) || requiredType == NUMERIC || requiredType == DOUBLE) {
        return this$static;
    }
    else if (requiredType == BOOLEAN) {
        return $clinit_BooleanValue() , this$static.value_0 != 0 && !isNaN_3(this$static.value_0)?TRUE_0:FALSE_0;
    }
    else if (requiredType == INTEGER) {
        if (isNaN_3(this$static.value_0)) {
            return new ValidationFailure_0('Cannot convert double NaN to an integer', 'FOCA0002');
        }
        if (isInfinite(this$static.value_0)) {
            return new ValidationFailure_0('Cannot convert double INF to an integer', 'FOCA0002');
        }
        return decimalToInteger(new BigDecimal(this$static.value_0));
    }
    else if (requiredType == DECIMAL) {
        try {
            return new DecimalValue(this$static.value_0);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                e = $e0;
                return new ValidationFailure(e.message_0);
            }
            else 
                throw unwrap($e0);
        }
    }
    else 
        return requiredType == FLOAT?new FloatValue(this$static.value_0):requiredType == STRING?new StringValue_0($getPrimitiveStringValue_4(this$static)):requiredType == UNTYPED_ATOMIC?new UntypedAtomicValue($getPrimitiveStringValue_4(this$static)):new ValidationFailure_0('Cannot convert double to ' + ('xs:' + requiredType.localName_0), 'XPTY0004');
}

function $getPrimitiveStringValue_4(this$static){
    var a, dec;
    if (isNaN_3(this$static.value_0)) {
        return 'NaN';
    }
    else if (isInfinite(this$static.value_0)) {
        return this$static.value_0 > 0?'INF':'-INF';
    }
    a = abs_5(this$static.value_0);
    if (this$static.value_0 == floor_4(this$static.value_0) && !isInfinite(this$static.value_0) && a < $intern_52) {
        if ($equals_4(new Double(this$static.value_0), NEGATIVE_ZERO)) {
            return '-0';
        }
        return '' + toString_77(fromDouble(this$static.value_0));
    }
    else {
        if (a < $intern_52) {
            if (a >= 0.001) {
                return '' + this$static.value_0;
            }
            else if (a >= 1.0E-6) {
                return $toPlainString(valueOf_4(this$static.value_0));
            }
            else {
                dec = valueOf_4(this$static.value_0);
                return $toString_2(dec);
            }
        }
        else 
            return a < $intern_72?convertToString(this$static.value_0):'' + this$static.value_0;
    }
}

function $round(this$static){
    if (isNaN_3(this$static.value_0)) {
        return this$static;
    }
    if (isInfinite(this$static.value_0)) {
        return this$static;
    }
    if (this$static.value_0 == 0) {
        return this$static;
    }
    if (this$static.value_0 >= -0.5 && this$static.value_0 < 0) {
        return new DoubleValue(-0.);
    }
    if (this$static.value_0 > $intern_79 && this$static.value_0 < $intern_78) {
        return new DoubleValue(toDouble(fromDouble(round0(this$static.value_0))));
    }
    return this$static;
}

function $roundHalfToEven_0(this$static, scale){
    var d, dec, factor, rem;
    if (isNaN_3(this$static.value_0))
        return this$static;
    if (isInfinite(this$static.value_0))
        return this$static;
    if (this$static.value_0 == 0)
        return this$static;
    factor = Math.pow(10, scale + 1);
    d = abs_5(this$static.value_0 * factor);
    if (isInfinite(d)) {
        dec = new BigDecimal(this$static.value_0);
        dec = $setScale(dec, scale, valueOf_9(6));
        return new DoubleValue(__parseAndValidateDouble($toString_2(dec)));
    }
    rem = d % 10;
    rem > 5?(d += 10 - rem):rem < 5?(d -= rem):d % 20 == 15?(d += 5):(d -= 5);
    d /= factor;
    this$static.value_0 < 0 && (d = -d);
    return new DoubleValue(d);
}

function DoubleValue(value_0){
    $clinit_DoubleValue();
    this.value_0 = value_0;
}

function convertToString(num){
    var notated = num.toExponential().toString();
    var pos = notated.lastIndexOf('e+');
    if (pos > -1) {
        return notated.substring(0, pos) + 'E' + notated.substring(pos + 2);
    }
    else {
        return num;
    }
}

defineClass(44, 25, {15:1, 14:1, 81:1, 13:1, 44:1, 25:1, 24:1}, DoubleValue);
_.abs_0 = function abs_2(){
    return this.value_0 > 0?this:new DoubleValue(abs_5(this.value_0));
}
;
_.ceiling = function ceiling_0(){
    return new DoubleValue(ceil_0(this.value_0));
}
;
_.compareTo_1 = function compareTo_10(other){
    var otherDouble;
    otherDouble = toDouble(other);
    if (this.value_0 == otherDouble)
        return 0;
    if (this.value_0 < otherDouble)
        return -1;
    return 1;
}
;
_.convert = function convert_8(requiredType){
    return $convert_3(this, requiredType);
}
;
_.effectiveBooleanValue_0 = function effectiveBooleanValue_19(){
    return this.value_0 != 0 && !isNaN_3(this.value_0);
}
;
_.floor_0 = function floor_1(){
    return new DoubleValue(floor_4(this.value_0));
}
;
_.getDoubleValue = function getDoubleValue_0(){
    return this.value_0;
}
;
_.getItemType_0 = function getItemType_81(){
    return $clinit_AtomicType() , DOUBLE;
}
;
_.getPrimitiveStringValue = function getPrimitiveStringValue_7(){
    return $getPrimitiveStringValue_4(this);
}
;
_.hashCode$ = function hashCode_54(){
    return this.value_0 > $intern_58 && this.value_0 < $intern_0?round_int(this.value_0):round_int((new Double(this.value_0)).value_0);
}
;
_.isNaN_0 = function isNaN_1(){
    return isNaN_3(this.value_0);
}
;
_.isWholeNumber = function isWholeNumber_0(){
    return this.value_0 == floor_4(this.value_0) && !isInfinite(this.value_0);
}
;
_.negate_0 = function negate_2(){
    return new DoubleValue(-this.value_0);
}
;
_.round_0 = function round_2(){
    return $round(this);
}
;
_.roundHalfToEven = function roundHalfToEven_0(scale){
    return $roundHalfToEven_0(this, scale);
}
;
_.signum = function signum_0(){
    if (isNaN_3(this.value_0)) {
        return this.value_0;
    }
    if (this.value_0 > 0)
        return 1;
    if (this.value_0 == 0)
        return 0;
    return -1;
}
;
_.value_0 = 0;
var NEGATIVE_ZERO, NaN_0, ONE, ZERO_0;
var Lclient_net_sf_saxon_ce_value_DoubleValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'DoubleValue', 44, Lclient_net_sf_saxon_ce_value_NumericValue_2_classLit);
function $clinit_EmptySequence(){
    $clinit_EmptySequence = emptyMethod;
    THE_INSTANCE_10 = new EmptySequence;
}

function EmptySequence(){
}

defineClass(141, 1, {14:1, 141:1}, EmptySequence);
_.equals$ = function equals_49(other){
    if (!instanceOf(other, 141)) {
        throw new ClassCastException_0('Cannot compare ' + getClass__Ljava_lang_Class___devirtual$(other) + ' to empty sequence');
    }
    return true;
}
;
_.getLength = function getLength_3(){
    return 0;
}
;
_.hashCode$ = function hashCode_55(){
    return 42;
}
;
_.itemAt = function itemAt_3(n){
    return null;
}
;
_.iterate = function iterate_55(){
    return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
}
;
_.toString$ = function toString_70(){
    return '()';
}
;
var THE_INSTANCE_10;
var Lclient_net_sf_saxon_ce_value_EmptySequence_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'EmptySequence', 141, Ljava_lang_Object_2_classLit);
function $clinit_FloatValue(){
    $clinit_FloatValue = emptyMethod;
    ZERO_1 = new FloatValue(0);
    new FloatValue(-0.);
    ONE_0 = new FloatValue(1);
    NaN_1 = new FloatValue(NaN);
}

function $compareTo_6(this$static, other){
    var otherFloat;
    if (!instanceOf(other, 25)) {
        throw new ClassCastException_0('Numeric values are not comparable to ' + getClass__Ljava_lang_Class___devirtual$(other));
    }
    if (instanceOf(other, 71)) {
        otherFloat = dynamicCast(other, 71).value_0;
        if (this$static.value_0 == otherFloat)
            return 0;
        if (this$static.value_0 < otherFloat)
            return -1;
        return 1;
    }
    if (instanceOf(other, 44)) {
        return $compareTo_4(this$static, other);
    }
    try {
        return $compareTo_6(this$static, dynamicCast(other, 25).convert(($clinit_AtomicType() , FLOAT)).asAtomic());
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            throw new ClassCastException_0('Operand of comparison cannot be promoted to xs:float');
        }
        else 
            throw unwrap($e0);
    }
}

function $convert_4(this$static, requiredType){
    var e;
    if (requiredType == ($clinit_AtomicType() , ANY_ATOMIC) || requiredType == NUMERIC || requiredType == FLOAT) {
        return this$static;
    }
    else if (requiredType == BOOLEAN) {
        return $clinit_BooleanValue() , this$static.value_0 != 0 && !isNaN_4(this$static.value_0)?TRUE_0:FALSE_0;
    }
    else if (requiredType == INTEGER) {
        if (isNaN_4(this$static.value_0)) {
            return new ValidationFailure_0('Cannot convert float NaN to an integer', 'FOCA0002');
        }
        if (isInfinite_0(this$static.value_0)) {
            return new ValidationFailure_0('Cannot convert float INF to an integer', 'FOCA0002');
        }
        return decimalToInteger(new BigDecimal(this$static.value_0));
    }
    else if (requiredType == DECIMAL) {
        try {
            return new DecimalValue(this$static.value_0);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                e = $e0;
                return new ValidationFailure(e.message_0);
            }
            else 
                throw unwrap($e0);
        }
    }
    else 
        return requiredType == DOUBLE?new DoubleValue(this$static.value_0):requiredType == STRING?new StringValue_0($getPrimitiveStringValue_4(new DoubleValue(this$static.value_0))):requiredType == UNTYPED_ATOMIC?new UntypedAtomicValue($getPrimitiveStringValue_4(new DoubleValue(this$static.value_0))):new ValidationFailure_0('Cannot convert float to ' + ('xs:' + requiredType.localName_0), 'XPTY0004');
}

function FloatValue(value_0){
    $clinit_FloatValue();
    this.value_0 = value_0;
}

defineClass(71, 25, {15:1, 14:1, 81:1, 13:1, 71:1, 25:1, 24:1}, FloatValue);
_.abs_0 = function abs_3(){
    return this.value_0 > 0?this:new FloatValue(abs_5(this.value_0));
}
;
_.ceiling = function ceiling_1(){
    return new FloatValue(ceil_0(this.value_0));
}
;
_.compareTo_1 = function compareTo_11(other){
    var otherFloat;
    otherFloat = toDouble(other);
    if (this.value_0 == otherFloat)
        return 0;
    if (this.value_0 < otherFloat)
        return -1;
    return 1;
}
;
_.compareTo = function compareTo_12(other){
    return $compareTo_6(this, other);
}
;
_.convert = function convert_9(requiredType){
    return $convert_4(this, requiredType);
}
;
_.effectiveBooleanValue_0 = function effectiveBooleanValue_20(){
    return this.value_0 != 0 && !isNaN_4(this.value_0);
}
;
_.floor_0 = function floor_2(){
    return new FloatValue(floor_4(this.value_0));
}
;
_.getDoubleValue = function getDoubleValue_1(){
    return this.value_0;
}
;
_.getFloatValue = function getFloatValue_0(){
    return this.value_0;
}
;
_.getItemType_0 = function getItemType_82(){
    return $clinit_AtomicType() , FLOAT;
}
;
_.getPrimitiveStringValue = function getPrimitiveStringValue_8(){
    return $getPrimitiveStringValue_4(new DoubleValue(this.value_0));
}
;
_.hashCode$ = function hashCode_56(){
    return this.value_0 > $intern_58 && this.value_0 < $intern_0?round_int(this.value_0):round_int((new Double(this.value_0)).value_0);
}
;
_.isNaN_0 = function isNaN_2(){
    return isNaN_4(this.value_0);
}
;
_.isWholeNumber = function isWholeNumber_1(){
    return this.value_0 == floor_4(this.value_0) && !isInfinite_0(this.value_0);
}
;
_.negate_0 = function negate_3(){
    return new FloatValue(-this.value_0);
}
;
_.round_0 = function round_3(){
    if (isNaN_4(this.value_0)) {
        return this;
    }
    if (isInfinite_0(this.value_0)) {
        return this;
    }
    if (this.value_0 == 0) {
        return this;
    }
    if (this.value_0 >= -0.5 && this.value_0 < 0) {
        return new FloatValue(-0.);
    }
    if (this.value_0 > $intern_58 && this.value_0 < $intern_0) {
        return new FloatValue(round_4(this.value_0));
    }
    return this;
}
;
_.roundHalfToEven = function roundHalfToEven_1(scale){
    var err;
    try {
        return dynamicCast($convert_3($roundHalfToEven_0(new DoubleValue(this.value_0), scale), ($clinit_AtomicType() , FLOAT)).asAtomic(), 71);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            throw new AssertionError(err);
        }
        else 
            throw unwrap($e0);
    }
}
;
_.signum = function signum_1(){
    if (isNaN_4(this.value_0)) {
        return this.value_0;
    }
    if (this.value_0 > 0)
        return 1;
    if (this.value_0 == 0)
        return 0;
    return -1;
}
;
_.value_0 = 0;
var NaN_1, ONE_0, ZERO_1;
var Lclient_net_sf_saxon_ce_value_FloatValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'FloatValue', 71, Lclient_net_sf_saxon_ce_value_NumericValue_2_classLit);
function $clinit_GDayValue(){
    $clinit_GDayValue = emptyMethod;
    $clinit_GDateValue();
    regex_0 = new RegExp('---([0-9][0-9])(Z|[+-][0-9][0-9]:[0-9][0-9])?');
}

function $getPrimitiveStringValue_5(this$static){
    var err;
    try {
        return formatDate(this$static, '---[D01][Z]', 'en');
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            throw new AssertionError(err);
        }
        else 
            throw unwrap($e0);
    }
}

function GDayValue(){
    GDateValue.call(this);
}

function GDayValue_0(day, tz){
    $clinit_GDayValue();
    GDateValue.call(this);
    this.year = 2000;
    this.month = 1;
    this.day = day;
    this.tzMinutes = tz;
}

function makeGDayValue(value_0){
    $clinit_GDayValue();
    var base, date, g, m, tz;
    m = $exec(regex_0, toString__Ljava_lang_String___devirtual$_0(trimWhitespace(value_0)));
    if (!m) {
        return new ValidationFailure("Cannot convert '" + value_0 + "' to a gDay");
    }
    g = new GDayValue;
    base = m[1];
    tz = m[2];
    date = '2000-01-' + (base == null?'':base) + (tz == null?'':tz);
    return setLexicalValue(g, date);
}

defineClass(326, 95, $intern_77, GDayValue, GDayValue_0);
_.convert = function convert_10(requiredType){
    return requiredType == ($clinit_AtomicType() , ANY_ATOMIC) || requiredType == G_DAY?this:requiredType == UNTYPED_ATOMIC?new UntypedAtomicValue($toString_0($getPrimitiveStringValue_5(this))):requiredType == STRING?new StringValue_0($toString_0($getPrimitiveStringValue_5(this))):new ValidationFailure_0('Cannot convert gDay to ' + ('xs:' + requiredType.localName_0), 'XPTY0004');
}
;
_.copy_1 = function copy_16(){
    return new GDayValue_0(this.day, this.tzMinutes);
}
;
_.getItemType_0 = function getItemType_83(){
    return $clinit_AtomicType() , G_DAY;
}
;
_.getPrimitiveStringValue = function getPrimitiveStringValue_9(){
    return $getPrimitiveStringValue_5(this);
}
;
var regex_0;
var Lclient_net_sf_saxon_ce_value_GDayValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'GDayValue', 326, Lclient_net_sf_saxon_ce_value_GDateValue_2_classLit);
function $clinit_GMonthDayValue(){
    $clinit_GMonthDayValue = emptyMethod;
    $clinit_GDateValue();
    regex_1 = new RegExp('--([0-9][0-9]-[0-9][0-9])(Z|[+-][0-9][0-9]:[0-9][0-9])?');
}

function $getPrimitiveStringValue_6(this$static){
    var err;
    try {
        return formatDate(this$static, '--[M01]-[D01][Z]', 'en');
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            throw new AssertionError(err);
        }
        else 
            throw unwrap($e0);
    }
}

function GMonthDayValue(){
    GDateValue.call(this);
}

function GMonthDayValue_0(month, day, tz){
    $clinit_GMonthDayValue();
    GDateValue.call(this);
    this.year = 2000;
    this.month = month;
    this.day = day;
    this.tzMinutes = tz;
}

function makeGMonthDayValue(value_0){
    $clinit_GMonthDayValue();
    var base, date, g, m, tz;
    m = $exec(regex_1, toString__Ljava_lang_String___devirtual$_0(trimWhitespace(value_0)));
    if (!m) {
        return new ValidationFailure("Cannot convert '" + value_0 + "' to a gMonthDay");
    }
    g = new GMonthDayValue;
    base = m[1];
    tz = m[2];
    date = '2000-' + (base == null?'':base) + (tz == null?'':tz);
    return setLexicalValue(g, date);
}

defineClass(325, 95, $intern_77, GMonthDayValue, GMonthDayValue_0);
_.convert = function convert_11(requiredType){
    return requiredType == ($clinit_AtomicType() , ANY_ATOMIC) || requiredType == G_MONTH_DAY?this:requiredType == UNTYPED_ATOMIC?new UntypedAtomicValue($toString_0($getPrimitiveStringValue_6(this))):requiredType == STRING?new StringValue_0($toString_0($getPrimitiveStringValue_6(this))):new ValidationFailure_0('Cannot convert gMonthDay to ' + ('xs:' + requiredType.localName_0), 'XPTY0004');
}
;
_.copy_1 = function copy_17(){
    return new GMonthDayValue_0(this.month, this.day, this.tzMinutes);
}
;
_.getItemType_0 = function getItemType_84(){
    return $clinit_AtomicType() , G_MONTH_DAY;
}
;
_.getPrimitiveStringValue = function getPrimitiveStringValue_10(){
    return $getPrimitiveStringValue_6(this);
}
;
var regex_1;
var Lclient_net_sf_saxon_ce_value_GMonthDayValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'GMonthDayValue', 325, Lclient_net_sf_saxon_ce_value_GDateValue_2_classLit);
function $clinit_GMonthValue(){
    $clinit_GMonthValue = emptyMethod;
    $clinit_GDateValue();
    regex_2 = new RegExp('--([0-9][0-9])(Z|[+-][0-9][0-9]:[0-9][0-9])?');
}

function $getPrimitiveStringValue_7(this$static){
    var err;
    try {
        return formatDate(this$static, '--[M01][Z]', 'en');
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            throw new AssertionError(err);
        }
        else 
            throw unwrap($e0);
    }
}

function GMonthValue(){
    GDateValue.call(this);
}

function GMonthValue_0(month, tz){
    $clinit_GMonthValue();
    GDateValue.call(this);
    this.year = 2000;
    this.month = month;
    this.day = 1;
    this.tzMinutes = tz;
}

function makeGMonthValue(value_0){
    $clinit_GMonthValue();
    var base, date, g, m, tz;
    g = new GMonthValue;
    m = $exec(regex_2, toString__Ljava_lang_String___devirtual$_0(trimWhitespace(value_0)));
    if (!m) {
        return new ValidationFailure("Cannot convert '" + value_0 + "' to a gMonth");
    }
    base = m[1];
    tz = m[2];
    date = '2000-' + (base == null?'':base) + '-01' + (tz == null?'':tz);
    return setLexicalValue(g, date);
}

defineClass(324, 95, $intern_77, GMonthValue, GMonthValue_0);
_.convert = function convert_12(requiredType){
    return requiredType == ($clinit_AtomicType() , ANY_ATOMIC) || requiredType == G_MONTH?this:requiredType == UNTYPED_ATOMIC?new UntypedAtomicValue($toString_0($getPrimitiveStringValue_7(this))):requiredType == STRING?new StringValue_0($toString_0($getPrimitiveStringValue_7(this))):new ValidationFailure_0('Cannot convert gMonth to ' + ('xs:' + requiredType.localName_0), 'XPTY0004');
}
;
_.copy_1 = function copy_18(){
    return new GMonthValue_0(this.month, this.tzMinutes);
}
;
_.getItemType_0 = function getItemType_85(){
    return $clinit_AtomicType() , G_MONTH;
}
;
_.getPrimitiveStringValue = function getPrimitiveStringValue_11(){
    return $getPrimitiveStringValue_7(this);
}
;
var regex_2;
var Lclient_net_sf_saxon_ce_value_GMonthValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'GMonthValue', 324, Lclient_net_sf_saxon_ce_value_GDateValue_2_classLit);
function $clinit_GYearMonthValue(){
    $clinit_GYearMonthValue = emptyMethod;
    $clinit_GDateValue();
    regex_3 = new RegExp('(-?[0-9]+-[0-9][0-9])(Z|[+-][0-9][0-9]:[0-9][0-9])?');
}

function $getPrimitiveStringValue_8(this$static){
    var err;
    try {
        return formatDate(this$static, '[Y0001]-[M01][Z]', 'en');
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            throw new AssertionError(err);
        }
        else 
            throw unwrap($e0);
    }
}

function GYearMonthValue(){
    GDateValue.call(this);
}

function GYearMonthValue_0(year, month, tz){
    $clinit_GYearMonthValue();
    GDateValue.call(this);
    this.year = year;
    this.month = month;
    this.day = 1;
    this.tzMinutes = tz;
}

function makeGYearMonthValue(value_0){
    $clinit_GYearMonthValue();
    var base, date, g, m, tz;
    m = $exec(regex_3, toString__Ljava_lang_String___devirtual$_0(trimWhitespace(value_0)));
    if (!m) {
        return new ValidationFailure("Cannot convert '" + value_0 + "' to a gYearMonth");
    }
    g = new GYearMonthValue;
    base = m[1];
    tz = m[2];
    date = (base == null?'':base) + '-01' + (tz == null?'':tz);
    return setLexicalValue(g, date);
}

defineClass(323, 95, $intern_77, GYearMonthValue, GYearMonthValue_0);
_.convert = function convert_13(requiredType){
    return requiredType == ($clinit_AtomicType() , ANY_ATOMIC) || requiredType == G_YEAR_MONTH?this:requiredType == UNTYPED_ATOMIC?new UntypedAtomicValue($toString_0($getPrimitiveStringValue_8(this))):requiredType == STRING?new StringValue_0($toString_0($getPrimitiveStringValue_8(this))):new ValidationFailure_0('Cannot convert gYearMonth to ' + ('xs:' + requiredType.localName_0), 'XPTY0004');
}
;
_.copy_1 = function copy_19(){
    return new GYearMonthValue_0(this.year, this.month, this.tzMinutes);
}
;
_.getItemType_0 = function getItemType_86(){
    return $clinit_AtomicType() , G_YEAR_MONTH;
}
;
_.getPrimitiveStringValue = function getPrimitiveStringValue_12(){
    return $getPrimitiveStringValue_8(this);
}
;
var regex_3;
var Lclient_net_sf_saxon_ce_value_GYearMonthValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'GYearMonthValue', 323, Lclient_net_sf_saxon_ce_value_GDateValue_2_classLit);
function $clinit_GYearValue(){
    $clinit_GYearValue = emptyMethod;
    $clinit_GDateValue();
    regex_4 = new RegExp('(-?[0-9]+)(Z|[+-][0-9][0-9]:[0-9][0-9])?');
}

function $getPrimitiveStringValue_9(this$static){
    var err;
    try {
        return formatDate(this$static, '[Y0001][Z]', 'en');
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 4)) {
            err = $e0;
            throw new AssertionError(err);
        }
        else 
            throw unwrap($e0);
    }
}

function GYearValue(){
    GDateValue.call(this);
}

function GYearValue_0(year, tz){
    $clinit_GYearValue();
    GDateValue.call(this);
    this.year = year;
    this.month = 1;
    this.day = 1;
    this.tzMinutes = tz;
}

function makeGYearValue(value_0){
    $clinit_GYearValue();
    var base, date, g, m, tz;
    g = new GYearValue;
    m = $exec(regex_4, toString__Ljava_lang_String___devirtual$_0(trimWhitespace(value_0)));
    if (!m) {
        return new ValidationFailure("Cannot convert '" + value_0 + "' to a gYear");
    }
    base = m[1];
    tz = m[2];
    date = (base == null?'':base) + '-01-01' + (tz == null?'':tz);
    return setLexicalValue(g, date);
}

defineClass(322, 95, $intern_77, GYearValue, GYearValue_0);
_.convert = function convert_14(requiredType){
    return requiredType == ($clinit_AtomicType() , ANY_ATOMIC) || requiredType == G_YEAR?this:requiredType == UNTYPED_ATOMIC?new UntypedAtomicValue($toString_0($getPrimitiveStringValue_9(this))):requiredType == STRING?new StringValue_0($toString_0($getPrimitiveStringValue_9(this))):new ValidationFailure_0('Cannot convert gYear to ' + ('xs:' + requiredType.localName_0), 'XPTY0004');
}
;
_.copy_1 = function copy_20(){
    return new GYearValue_0(this.year, this.tzMinutes);
}
;
_.getItemType_0 = function getItemType_87(){
    return $clinit_AtomicType() , G_YEAR;
}
;
_.getPrimitiveStringValue = function getPrimitiveStringValue_13(){
    return $getPrimitiveStringValue_9(this);
}
;
var regex_4;
var Lclient_net_sf_saxon_ce_value_GYearValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'GYearValue', 322, Lclient_net_sf_saxon_ce_value_GDateValue_2_classLit);
function $fromHex(c){
    var d, err;
    d = $indexOf_3('0123456789ABCDEFabcdef', fromCodePoint(c));
    d > 15 && (d = d - 6);
    if (d < 0) {
        err = new XPathException_0('Invalid hexadecimal digit');
        err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FORG0001');
            throw err;
    }
    return d;
}

function $getPrimitiveStringValue_10(this$static){
    var i_0, sb;
    sb = new FastStringBuffer(this$static.binaryValue.length * 2);
    for (i_0 = 0; i_0 < this$static.binaryValue.length; i_0++) {
        $append_1(sb, $charAt_1('0123456789ABCDEF', this$static.binaryValue[i_0] >> 4 & 15));
        $append_1(sb, $charAt_1('0123456789ABCDEF', this$static.binaryValue[i_0] & 15));
    }
    return sb;
}

function HexBinaryValue(in_$){
    var err, i_0, s;
    s = trimWhitespace(in_$);
    if ((length__I__devirtual$(s) & 1) != 0) {
        err = new XPathException_0('A hexBinary value must contain an even number of characters');
        err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FORG0001');
            throw err;
    }
    this.binaryValue = initDim(B_classLit, $intern_9, 0, ~~(length__I__devirtual$(s) / 2), 7, 1);
    for (i_0 = 0; i_0 < this.binaryValue.length; i_0++) {
        this.binaryValue[i_0] = ($fromHex(charAt_I_C__devirtual$(s, 2 * i_0)) << 4) + $fromHex(charAt_I_C__devirtual$(s, 2 * i_0 + 1)) << 24 >> 24;
    }
}

function HexBinaryValue_0(value_0){
    this.binaryValue = value_0;
}

defineClass(296, 13, {15:1, 14:1, 81:1, 13:1, 296:1}, HexBinaryValue, HexBinaryValue_0);
_.convert = function convert_15(requiredType){
    return requiredType == ($clinit_AtomicType() , ANY_ATOMIC) || requiredType == HEX_BINARY?this:requiredType == UNTYPED_ATOMIC?new UntypedAtomicValue($toString_0($getPrimitiveStringValue_10(this))):requiredType == STRING?new StringValue_0($toString_0($getPrimitiveStringValue_10(this))):requiredType == BASE64_BINARY?new Base64BinaryValue_0(this.binaryValue):new ValidationFailure_0('Cannot convert gYearMonth to ' + ('xs:' + requiredType.localName_0), 'XPTY0004');
}
;
_.equals$ = function equals_50(other){
    return instanceOf(other, 296) && equals_67(this.binaryValue, dynamicCast(other, 296).binaryValue);
}
;
_.getItemType_0 = function getItemType_88(){
    return $clinit_AtomicType() , HEX_BINARY;
}
;
_.getPrimitiveStringValue = function getPrimitiveStringValue_14(){
    return $getPrimitiveStringValue_10(this);
}
;
_.getXPathComparable = function getXPathComparable_6(ordered, collator, implicitTimezone){
    return ordered?null:this;
}
;
_.hashCode$ = function hashCode_57(){
    return byteArrayHashCode(this.binaryValue);
}
;
var Lclient_net_sf_saxon_ce_value_HexBinaryValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'HexBinaryValue', 296, Lclient_net_sf_saxon_ce_value_AtomicValue_2_classLit);
function $clinit_IntegerValue(){
    $clinit_IntegerValue = emptyMethod;
    $clinit_DecimalValue();
    MINUS_ONE = new IntegerValue(-1);
    ZERO_2 = new IntegerValue(0);
    PLUS_ONE = new IntegerValue(1);
    MAX_LONG = new IntegerValue_0(new BigDecimal_1({l:$intern_46, m:$intern_46, h:524287}));
}

function $intValue(this$static){
    if ($compareTo_13(this$static.value_0, ($clinit_DecimalValue() , BIG_DECIMAL_MIN_INT)) < 0 || $compareTo_13(this$static.value_0, BIG_DECIMAL_MAX_INT) > 0) {
        throw new XPathException_0('int out of range');
    }
    else {
        return $intValue_0(this$static.value_0);
    }
}

function IntegerValue(value_0){
    $clinit_IntegerValue();
    DecimalValue_0.call(this, fromInt(value_0));
}

function IntegerValue_0(value_0){
    $clinit_IntegerValue();
    DecimalValue_1.call(this, value_0);
    if (round_int(value_0.scale) != 0 && $compareTo_13(value_0, $setScale(value_0, 0, valueOf_9(1))) != 0) {
        throw new IllegalArgumentException_0('Non-integral value ' + value_0);
    }
}

function decimalToInteger(value_0){
    $clinit_IntegerValue();
    var setScaleValue;
    setScaleValue = $intValue_0($setScale(value_0, 0, valueOf_9(1)));
    return new IntegerValue(setScaleValue);
}

function signum_2(i_0){
    $clinit_IntegerValue();
    return i_0 >> 31 | -i_0 >>> 31;
}

function stringToInteger(s){
    $clinit_IntegerValue();
    var t;
    try {
        t = toString__Ljava_lang_String___devirtual$_0(trimWhitespace(s));
        $indexOf_3(t, fromCodePoint(46)) >= 0 && (t = '*');
        return new IntegerValue_0(new BigDecimal_3(t));
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 57)) {
            return new ValidationFailure_0("Cannot convert string '" + s + "' to an integer", 'FORG0001');
        }
        else 
            throw unwrap($e0);
    }
}

defineClass(32, 68, {15:1, 14:1, 81:1, 13:1, 68:1, 32:1, 25:1, 24:1}, IntegerValue, IntegerValue_0);
_.abs_0 = function abs_4(){
    return $signum(this.value_0) > 0?this:new IntegerValue_0($negate(this.value_0));
}
;
_.ceiling = function ceiling_2(){
    return this;
}
;
_.floor_0 = function floor_3(){
    return this;
}
;
_.getItemType_0 = function getItemType_89(){
    return $clinit_AtomicType() , INTEGER;
}
;
_.intValue = function intValue_0(){
    return $intValue(this);
}
;
_.isWholeNumber = function isWholeNumber_2(){
    return true;
}
;
_.negate_0 = function negate_4(){
    return new IntegerValue_0($negate(this.value_0));
}
;
var MAX_LONG, MINUS_ONE, PLUS_ONE, ZERO_2;
var Lclient_net_sf_saxon_ce_value_IntegerValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'IntegerValue', 32, Lclient_net_sf_saxon_ce_value_DecimalValue_2_classLit);
function QNameValue(name_0){
    this.qName = name_0;
}

function QNameValue_0(localName){
    this.qName = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', localName);
}

function QNameValue_1(prefix, uri_0, localName){
    var err;
    if (!isValidNCName(localName)) {
        err = new XPathException_0("Malformed local name in QName: '" + localName + "'");
        err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FORG0001');
            throw err;
    }
    prefix = prefix == null?'':prefix;
    uri_0 = $equals_5('', uri_0)?null:uri_0;
    if (uri_0 == null && prefix.length != 0) {
        err = new XPathException_0('QName has null namespace but non-empty prefix');
        err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FOCA0002');
            throw err;
    }
    this.qName = new StructuredQName(prefix, uri_0, localName);
}

defineClass(184, 13, {15:1, 14:1, 81:1, 13:1, 184:1}, QNameValue, QNameValue_0, QNameValue_1);
_.convert = function convert_16(requiredType){
    return requiredType == ($clinit_AtomicType() , ANY_ATOMIC) || requiredType == QNAME?this:requiredType == UNTYPED_ATOMIC?new UntypedAtomicValue($getDisplayName_0(this.qName)):requiredType == STRING?new StringValue_0($getDisplayName_0(this.qName)):new ValidationFailure_0('Cannot convert QName to ' + ('xs:' + requiredType.localName_0), 'XPTY0004');
}
;
_.equals$ = function equals_51(other){
    return instanceOf(other, 184) && $equals_0(this.qName, dynamicCast(other, 184).qName);
}
;
_.getComponent = function getComponent_3(part){
    var prefix;
    if (part == 8) {
        return new StringValue_0($getLocalName_1(this.qName));
    }
    else if (part == 9) {
        return new AnyURIValue($getNamespaceURI(this.qName));
    }
    else if (part == 10) {
        prefix = $getPrefix(this.qName);
        return prefix.length == 0?null:new StringValue_0(prefix);
    }
    else {
        throw new UnsupportedOperationException_0('Component of QName must be URI, Local Name, or Prefix');
    }
}
;
_.getItemType_0 = function getItemType_90(){
    return $clinit_AtomicType() , QNAME;
}
;
_.getPrimitiveStringValue = function getPrimitiveStringValue_15(){
    return $getDisplayName_0(this.qName);
}
;
_.getXPathComparable = function getXPathComparable_7(ordered, collator, implicitTimezone){
    return ordered?null:this;
}
;
_.hashCode$ = function hashCode_58(){
    return $hashCode(this.qName);
}
;
_.toString$ = function toString_71(){
    return 'QName("' + $getNamespaceURI(this.qName) + '", "' + $getLocalName_1(this.qName) + '")';
}
;
var Lclient_net_sf_saxon_ce_value_QNameValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'QNameValue', 184, Lclient_net_sf_saxon_ce_value_AtomicValue_2_classLit);
function $itemAt(this$static, n){
    return n < 0 || n >= this$static.value_0.length?null:this$static.value_0[n];
}

function $swap(this$static, a, b){
    var temp;
    temp = this$static.value_0[a];
    setCheck(this$static.value_0, a, this$static.value_0[b]);
    setCheck(this$static.value_0, b, temp);
}

function SequenceExtent(iter){
    var allocated, array, i_0, it, list;
    allocated = -1;
    instanceOf(iter, 105) && (allocated = dynamicCast(iter, 105).getLastPosition());
    if (allocated == -1) {
        list = new ArrayList_0(20);
        while (true) {
            it = iter.next_0();
            if (!it) {
                break;
            }
            setCheck(list.array, list.array.length, it);
        }
        array = initDim(Lclient_net_sf_saxon_ce_om_Item_2_classLit, $intern_3, 15, list.array.length, 0, 1);
        this.value_0 = dynamicCast($toArray(list, array), 47);
    }
    else {
        this.value_0 = initDim(Lclient_net_sf_saxon_ce_om_Item_2_classLit, $intern_3, 15, allocated, 0, 1);
        i_0 = 0;
        while (true) {
            it = iter.next_0();
            if (!it) {
                break;
            }
            setCheck(this.value_0, i_0++, it);
        }
    }
}

function SequenceExtent_0(list){
    var array;
    array = initDim(Lclient_net_sf_saxon_ce_om_Item_2_classLit, $intern_3, 15, list.size_1(), 0, 1);
    this.value_0 = dynamicCast(list.toArray(array), 47);
}

function SequenceExtent_1(items){
    this.value_0 = items;
}

function makeReversed(iter){
    var item_0, list;
    list = new LinkedList;
    while (true) {
        item_0 = iter.next_0();
        if (!item_0) {
            break;
        }
        $addNode_0(list, item_0, list.header, list.header.next);
    }
    return new SequenceExtent_0(list);
}

function makeSequenceExtent(iter){
    var extent, len, value_0;
    if (instanceOf(iter, 185)) {
        value_0 = dynamicCast(iter, 185).materialize();
        if (value_0) {
            return value_0;
        }
    }
    extent = new SequenceExtent(iter);
    len = extent.value_0.length;
    return len == 0?($clinit_EmptySequence() , $clinit_EmptySequence() , THE_INSTANCE_10):len == 1?0 >= extent.value_0.length?null:extent.value_0[0]:extent;
}

defineClass(219, 1, {14:1}, SequenceExtent, SequenceExtent_0, SequenceExtent_1);
_.getLength = function getLength_4(){
    return this.value_0.length;
}
;
_.itemAt = function itemAt_4(n){
    return $itemAt(this, n);
}
;
_.iterate = function iterate_56(){
    return new ArrayIterator(this.value_0);
}
;
_.toString$ = function toString_72(){
    var fsb, i_0;
    fsb = new FastStringBuffer(64);
    $ensureCapacity_0(fsb, 1);
    fsb.array[fsb.used++] = 40;
    for (i_0 = 0; i_0 < this.value_0.length; i_0++) {
        $append_3(fsb, this.value_0[i_0].toString$());
        i_0 != this.value_0.length - 1 && $append_3(fsb, ', ');
    }
    $ensureCapacity_0(fsb, 1);
    fsb.array[fsb.used++] = 41;
    return $condense(fsb) , valueOf_3(fsb.array, 0, fsb.used);
}
;
var Lclient_net_sf_saxon_ce_value_SequenceExtent_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'SequenceExtent', 219, Ljava_lang_Object_2_classLit);
function asItem(value_0){
    var item_0, iter;
    if (instanceOf(value_0, 15)) {
        return dynamicCast(value_0, 15);
    }
    else {
        iter = value_0.iterate();
        item_0 = iter.next_0();
        if (!item_0) {
            return null;
        }
        else if (iter.next_0()) {
            throw new XPathException_0('Attempting to access a sequence as a singleton item');
        }
        else {
            return item_0;
        }
    }
}

function getItemType_91(item_0){
    var elementType, iter, kind, n, node;
    if (instanceOf(item_0, 7)) {
        node = dynamicCast(item_0, 7);
        switch (node.getNodeKind()) {
            case 9:
                iter = node.iterateAxis(3, ($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7));
                elementType = null;
                while (true) {
                    n = dynamicCast(iter.next_0(), 7);
                    if (!n) {
                        break;
                    }
                    kind = n.getNodeKind();
                    if (kind == 3) {
                        elementType = null;
                        break;
                    }
                    else if (kind == 1) {
                        if (elementType) {
                            elementType = null;
                            break;
                        }
                        elementType = getItemType_91(n);
                    }
                }

                return !elementType?($clinit_NodeKindTest() , DOCUMENT):new DocumentNodeTest(dynamicCast(elementType, 67));
            case 1:
                return new NameTest(1, node.getNodeName());
            case 2:
                return new NameTest(2, node.getNodeName());
            case 3:
                return $clinit_NodeKindTest() , TEXT;
            case 8:
                return $clinit_NodeKindTest() , COMMENT;
            case 7:
                return $clinit_NodeKindTest() , PROCESSING_INSTRUCTION;
            case 13:
                return $clinit_NodeKindTest() , NAMESPACE;
            default:throw new IllegalArgumentException_0('Unknown node kind ' + node.getNodeKind());
        }
    }
    else 
        return instanceOf(item_0, 160)?new JSObjectType:dynamicCast(item_0, 13).getItemType_0();
}

function getItemTypeOfValue(val){
    var item_0, iter, type_0;
    iter = val.iterate();
    item_0 = iter.next_0();
    if (!item_0) {
        return $clinit_EmptySequenceTest() , $clinit_EmptySequenceTest() , THE_INSTANCE_8;
    }
    else {
        type_0 = getItemType_91(item_0);
    }
    while (true) {
        if (type_0 == ($clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2)) {
            return type_0;
        }
        item_0 = iter.next_0();
        if (!item_0) {
            break;
        }
        type_0 = getCommonSuperType(type_0, getItemType_91(item_0));
    }
    return type_0;
}

function process_10(iterator, context){
    var it, out;
    out = context.getReceiver();
    while (true) {
        it = iterator.next_0();
        if (!it)
            break;
        out.append(it, 2);
    }
}

function $clinit_SequenceType(){
    $clinit_SequenceType = emptyMethod;
    ANY_SEQUENCE = new SequenceType(($clinit_AnyItemType() , $clinit_AnyItemType() , theInstance_2), $intern_12);
    SINGLE_ITEM = new SequenceType((null , theInstance_2), $intern_21);
    OPTIONAL_ITEM = new SequenceType((null , theInstance_2), $intern_20);
    SINGLE_ATOMIC = new SequenceType(($clinit_AtomicType() , ANY_ATOMIC), $intern_21);
    OPTIONAL_ATOMIC = new SequenceType(ANY_ATOMIC, $intern_20);
    ATOMIC_SEQUENCE = new SequenceType(ANY_ATOMIC, $intern_12);
    SINGLE_STRING = new SequenceType(STRING, $intern_21);
    SINGLE_UNTYPED_ATOMIC = new SequenceType(UNTYPED_ATOMIC, $intern_21);
    OPTIONAL_INTEGER = new SequenceType(INTEGER, $intern_20);
    SINGLE_INTEGER = new SequenceType(INTEGER, $intern_21);
    OPTIONAL_NUMERIC = new SequenceType(NUMERIC, $intern_20);
    OPTIONAL_NODE = new SequenceType(($clinit_AnyNodeTest() , $clinit_AnyNodeTest() , THE_INSTANCE_7), $intern_20);
    SINGLE_NODE = new SequenceType((null , THE_INSTANCE_7), $intern_21);
    NODE_SEQUENCE = new SequenceType((null , THE_INSTANCE_7), $intern_12);
}

function $equals_3(this$static, obj){
    return instanceOf(obj, 55) && this$static.primaryType.equals$(dynamicCast(obj, 55).primaryType) && this$static.cardinality == dynamicCast(obj, 55).cardinality;
}

function $hashCode_0(this$static){
    return this$static.primaryType.hashCode$() ^ this$static.cardinality;
}

function SequenceType(primaryType, cardinality){
    $clinit_SequenceType();
    this.primaryType = primaryType;
    instanceOf(primaryType, 123)?(this.cardinality = $intern_17):(this.cardinality = cardinality);
}

defineClass(55, 1, {55:1}, SequenceType);
_.equals$ = function equals_52(obj){
    return $equals_3(this, obj);
}
;
_.hashCode$ = function hashCode_59(){
    return $hashCode_0(this);
}
;
_.toString$ = function toString_73(){
    var s;
    s = this.primaryType.toString$();
    this.cardinality == $intern_33?(s = s + '+'):this.cardinality == $intern_12?(s = s + '*'):this.cardinality == $intern_20 && (s = s + '?');
    return s;
}
;
_.cardinality = 0;
var ANY_SEQUENCE, ATOMIC_SEQUENCE, NODE_SEQUENCE, OPTIONAL_ATOMIC, OPTIONAL_INTEGER, OPTIONAL_ITEM, OPTIONAL_NODE, OPTIONAL_NUMERIC, SINGLE_ATOMIC, SINGLE_INTEGER, SINGLE_ITEM, SINGLE_NODE, SINGLE_STRING, SINGLE_UNTYPED_ATOMIC;
var Lclient_net_sf_saxon_ce_value_SequenceType_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'SequenceType', 55, Ljava_lang_Object_2_classLit);
function $getDocumentNumber(this$static){
    this$static.documentNumber == -1 && (this$static.documentNumber = this$static.config.nextDocumentNumber++);
    return this$static.documentNumber;
}

function $setConfiguration_3(this$static, config){
    this$static.config = config;
    this$static.documentNumber = -1;
}

function TextFragmentValue(value_0, baseURI){
    this.kind = 9;
    this.qName = null;
    this.stringValue = value_0;
    this.systemId = baseURI;
}

defineClass(412, 183, {109:1, 15:1, 7:1, 14:1, 23:1, 412:1}, TextFragmentValue);
_.compareOrder = function compareOrder_5(other){
    if (this == other)
        return 0;
    return -1;
}
;
_.copy = function copy_21(out, copyOptions){
    out.characters(toString__Ljava_lang_String___devirtual$_0(this.stringValue));
}
;
_.getDocumentNumber = function getDocumentNumber_6(){
    return $getDocumentNumber(this);
}
;
_.getDocumentRoot = function getDocumentRoot_6(){
    return this;
}
;
_.hasChildNodes_0 = function hasChildNodes_5(){
    return !$equals_5('', toString__Ljava_lang_String___devirtual$_0(this.stringValue));
}
;
_.isSameNodeInfo = function isSameNodeInfo_6(other){
    return this == other;
}
;
_.iterateAxis = function iterateAxis_4(axisNumber, nodeTest){
    var b1, b2, pair, textNode2;
    switch (axisNumber) {
        case 0:
    case 2:
case 6:
    case 7:
case 8:
    case 9:
case 10:
    case 11:
        return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
    case 12:
case 1:
    return $clinit_Navigator() , nodeTest.matchesItem(this)?new SingletonIterator(this):($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1);
case 3:
    case 4:
        return filteredSingleton((!this.textNode && (this.textNode = new TextFragmentValue$TextFragmentTextNode(this, toString__Ljava_lang_String___devirtual$_0(this.stringValue), this.systemId)) , this.textNode), nodeTest);
    case 5:
        b1 = nodeTest.matchesItem(this);
        textNode2 = (!this.textNode && (this.textNode = new TextFragmentValue$TextFragmentTextNode(this, toString__Ljava_lang_String___devirtual$_0(this.stringValue), this.systemId)) , this.textNode);
        b2 = nodeTest.matchesItem(textNode2);
        if (b1) {
            if (b2) {
                pair = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_om_NodeInfo_2_classLit, 1), $intern_3, 7, 0, [this, textNode2]);
                return new ArrayIterator(pair);
            }
            else {
                return new SingletonIterator(this);
            }
        }
        else {
            return b2?!textNode2?($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1):new SingletonIterator(textNode2):($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1);
        }

    default:throw new IllegalArgumentException_0('Unknown axis number ' + axisNumber);
    }
}
;
_.selectID = function selectID_1(id_0){
    return null;
}
;
_.setUserData = function setUserData_1(key, value_0){
    !this.userData && (this.userData = new HashMap_0(4));
    !value_0?$removeStringValue(this.userData, key):$putStringValue(this.userData, key, value_0);
}
;
_.documentNumber = 0;
_.textNode = null;
var Lclient_net_sf_saxon_ce_value_TextFragmentValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'TextFragmentValue', 412, Lclient_net_sf_saxon_ce_tree_util_Orphan_2_classLit);
function TextFragmentValue$TextFragmentTextNode(this$0, value_0, systemId){
    this.this$01 = this$0;
    Orphan.call(this);
    this.stringValue = value_0;
    this.systemId = systemId;
    this.kind = 3;
    this.qName = null;
}

defineClass(505, 183, $intern_75, TextFragmentValue$TextFragmentTextNode);
_.compareOrder = function compareOrder_6(other){
    if (this == other)
        return 0;
    return 1;
}
;
_.copy = function copy_22(out, copyOptions){
    out.characters(toString__Ljava_lang_String___devirtual$_0(this.stringValue));
}
;
_.generateId = function generateId_7(buffer){
    $generateId_0(this.this$01, buffer);
    $append_3(buffer, 't1');
}
;
_.getDocumentNumber = function getDocumentNumber_7(){
    return $getDocumentNumber(this.this$01);
}
;
_.getDocumentRoot = function getDocumentRoot_7(){
    return this.this$01;
}
;
_.getParent = function getParent_4(){
    return this.this$01;
}
;
_.getRoot = function getRoot_6(){
    return this.this$01;
}
;
_.iterateAxis = function iterateAxis_5(axisNumber, nodeTest){
    var matchesDoc, matchesText, nodes;
    switch (axisNumber) {
        case 0:
    case 9:
        return filteredSingleton(this.this$01, nodeTest);
    case 1:
        matchesDoc = nodeTest.matchesItem(this.this$01);
        matchesText = nodeTest.matchesItem(this);
        if (matchesDoc && matchesText) {
            nodes = initValues(getClassLiteralForArray(Lclient_net_sf_saxon_ce_om_NodeInfo_2_classLit, 1), $intern_3, 7, 0, [this, this.this$01]);
            return new ArrayIterator(nodes);
        }
        else 
            return matchesDoc && !matchesText?makeIterator_0(this.this$01):matchesText && !matchesDoc?new SingletonIterator(this):($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1);
        case 2:
    case 3:
case 4:
    case 6:
case 7:
    case 8:
case 10:
    case 11:
        return $clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1;
    case 12:
case 5:
    return $clinit_Navigator() , nodeTest.matchesItem(this)?new SingletonIterator(this):($clinit_EmptyIterator() , $clinit_EmptyIterator() , theInstance_1);
default:throw new IllegalArgumentException_0('Unknown axis number ' + axisNumber);
    }
}
;
var Lclient_net_sf_saxon_ce_value_TextFragmentValue$TextFragmentTextNode_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'TextFragmentValue/TextFragmentTextNode', 505, Lclient_net_sf_saxon_ce_tree_util_Orphan_2_classLit);
function $clinit_TimeValue(){
    $clinit_TimeValue = emptyMethod;
    $clinit_CalendarValue();
    timePattern = new RegExp('([0-9][0-9]):([0-9][0-9]):([0-9][0-9])(\\.[0-9]*)?([-+Z].*)?');
}

function $add_7(this$static, duration){
    var dt;
    if (instanceOf(duration, 102)) {
        dt = $add_5(new DateTimeValue_0(1972, 12, 31, this$static.hour, this$static.minute, this$static.second, this$static.microsecond, this$static.tzMinutes), duration);
        return new TimeValue_0(dt.hour, dt.minute, dt.second, dt.microsecond, this$static.tzMinutes);
    }
    else {
        return $add_4(this$static, duration);
    }
}

function $compareTo_7(this$static, other){
    return $compareTo_2(new DateTimeValue_0(1972, 12, 31, this$static.hour, this$static.minute, this$static.second, this$static.microsecond, this$static.tzMinutes), new DateTimeValue_0(1972, 12, 31, other.hour, other.minute, other.second, other.microsecond, other.tzMinutes));
}

function $getPrimitiveStringValue_11(this$static){
    var d, div, ms, sb;
    sb = new FastStringBuffer(16);
    appendTwoDigits(sb, this$static.hour);
    $ensureCapacity_0(sb, 1);
    sb.array[sb.used++] = 58;
    appendTwoDigits(sb, this$static.minute);
    $ensureCapacity_0(sb, 1);
    sb.array[sb.used++] = 58;
    appendTwoDigits(sb, this$static.second);
    if (this$static.microsecond != 0) {
        $ensureCapacity_0(sb, 1);
        sb.array[sb.used++] = 46;
        ms = this$static.microsecond;
        div = $intern_71;
        while (ms > 0) {
            d = ~~(ms / div);
            $append_1(sb, d + 48 & $intern_2);
            ms = ms % div;
            div = ~~(div / 10);
        }
    }
    this$static.tzMinutes != $intern_58 && $appendTimezone(this$static, sb);
    return sb;
}

function $toDateTime(this$static){
    return new DateTimeValue_0(1972, 12, 31, this$static.hour, this$static.minute, this$static.second, this$static.microsecond, this$static.tzMinutes);
}

function TimeValue(){
    CalendarValue.call(this);
}

function TimeValue_0(hour, minute, second, microsecond, tz){
    $clinit_TimeValue();
    CalendarValue.call(this);
    this.hour = hour;
    this.minute = minute;
    this.second = second;
    this.microsecond = microsecond;
    this.tzMinutes = tz;
}

function makeTimeValue(s){
    $clinit_TimeValue();
    var dt, frac, fractionalSeconds, match_0, str, tz, tzmin;
    str = toString__Ljava_lang_String___devirtual$_0(s);
    match_0 = $exec(timePattern, str);
    if (!match_0) {
        return new ValidationFailure_0('Invalid time ' + wrap(str, 4) + ' (' + 'wrong format' + ')', 'FORG0001');
    }
    dt = new TimeValue;
    dt.hour = simpleInteger(match_0[1]);
    dt.minute = simpleInteger(match_0[2]);
    dt.second = simpleInteger(match_0[3]);
    frac = match_0[4];
    if (frac != null && frac.length > 0) {
        fractionalSeconds = __parseAndValidateDouble(frac);
        dt.microsecond = toInt(fromDouble(Math.round(fractionalSeconds * $intern_52)));
    }
    tz = match_0[5];
    tzmin = parseTimezone(tz);
    if (tzmin == $intern_0) {
        return new ValidationFailure_0('Invalid time ' + wrap(str, 4) + ' (' + 'Invalid timezone' + ')', 'FORG0001');
    }
    dt.tzMinutes = tzmin;
    if (dt.hour == 24) {
        if (dt.minute != 0 || dt.second != 0 || dt.microsecond != 0) {
            return new ValidationFailure_0('Invalid time ' + wrap(str, 4) + ' (' + 'after midnight' + ')', 'FORG0001');
        }
        else {
            dt.hour = 0;
        }
    }
    return dt;
}

defineClass(138, 73, {15:1, 14:1, 81:1, 13:1, 73:1, 138:1, 24:1}, TimeValue, TimeValue_0);
_.add_1 = function add_9(duration){
    return $add_7(this, duration);
}
;
_.adjustTimezone = function adjustTimezone_1(timezone){
    var dt;
    dt = $adjustTimezone(new DateTimeValue_0(1972, 12, 31, this.hour, this.minute, this.second, this.microsecond, this.tzMinutes), timezone);
    return new TimeValue_0(dt.hour, dt.minute, dt.second, dt.microsecond, dt.tzMinutes);
}
;
_.compareTo_0 = function compareTo_13(other, implicitTimezone){
    return $compareTo_1(new DateTimeValue_0(1972, 12, 31, this.hour, this.minute, this.second, this.microsecond, this.tzMinutes), $toDateTime(dynamicCast(other, 138)), implicitTimezone);
}
;
_.compareTo = function compareTo_14(other){
    return $compareTo_7(this, dynamicCast(other, 138));
}
;
_.convert = function convert_17(requiredType){
    return requiredType == ($clinit_AtomicType() , ANY_ATOMIC) || requiredType == TIME?this:requiredType == UNTYPED_ATOMIC?new UntypedAtomicValue($toString_0($getPrimitiveStringValue_11(this))):requiredType == STRING?new StringValue_0($toString_0($getPrimitiveStringValue_11(this))):new ValidationFailure_0('Cannot convert gYear to ' + ('xs:' + requiredType.localName_0), 'XPTY0004');
}
;
_.copy_1 = function copy_23(){
    return new TimeValue_0(this.hour, this.minute, this.second, this.microsecond, this.tzMinutes);
}
;
_.equals$ = function equals_53(other){
    return instanceOf(other, 138) && $compareTo_7(this, dynamicCast(other, 138)) == 0;
}
;
_.getComponent = function getComponent_4(component){
    var d;
    switch (component) {
        case 4:
            return new IntegerValue(this.hour);
        case 5:
            return new IntegerValue(this.minute);
        case 6:
            d = valueOf_5(fromInt(this.microsecond));
            d = $divide(d, ($clinit_DecimalValue() , BIG_DECIMAL_ONE_MILLION), 6, valueOf_9(4));
            d = $add_14(d, valueOf_5(fromInt(this.second)));
            return new DecimalValue_1(d);
        case 12:
            return new IntegerValue(this.second);
        case 11:
            return new IntegerValue(this.microsecond);
        case 7:
            return this.tzMinutes != $intern_58?fromMilliseconds(mul({l:60000, m:0, h:0}, fromInt(this.tzMinutes))):null;
        default:throw new IllegalArgumentException_0('Unknown component for time: ' + component);
    }
}
;
_.getItemType_0 = function getItemType_92(){
    return $clinit_AtomicType() , TIME;
}
;
_.getPrimitiveStringValue = function getPrimitiveStringValue_16(){
    return $getPrimitiveStringValue_11(this);
}
;
_.hashCode$ = function hashCode_60(){
    return hashCode_50(1951, 10, 11, this.hour, this.minute, this.second, this.microsecond, this.tzMinutes);
}
;
_.subtract = function subtract_2(other, context){
    if (!instanceOf(other, 138)) {
        throw new XPathException_2("First operand of '-' is a time, but the second is not", 'XPTY0004');
    }
    return $subtract(this, other, context);
}
;
_.toDateTime = function toDateTime_1(){
    return $toDateTime(this);
}
;
_.hour = 0;
_.microsecond = 0;
_.minute = 0;
_.second = 0;
var timePattern;
var Lclient_net_sf_saxon_ce_value_TimeValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'TimeValue', 138, Lclient_net_sf_saxon_ce_value_CalendarValue_2_classLit);
function $compareTo_8(this$static, other, collator){
    var result;
    if (instanceOf(other, 25)) {
        if (!this$static.doubleValue) {
            try {
                this$static.doubleValue = dynamicCast($convert_5(this$static, ($clinit_AtomicType() , DOUBLE)).asAtomic(), 44);
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 4)) {
                    throw new ClassCastException_0('Cannot convert untyped value "' + dynamicCastToString(this$static.value_0 = toString__Ljava_lang_String___devirtual$_0(this$static.value_0)) + '" to a double');
                }
                else 
                    throw unwrap($e0);
            }
        }
        return $compareTo_4(this$static.doubleValue, other);
    }
    else if (instanceOf(other, 12)) {
        return collator.compareStrings(dynamicCastToString(this$static.value_0 = toString__Ljava_lang_String___devirtual$_0(this$static.value_0)), toString__Ljava_lang_String___devirtual$_0(other.getPrimitiveStringValue()));
    }
    else {
        result = $convert_5(this$static, other.getItemType_0());
        if (instanceOf(result, 29)) {
            throw new ClassCastException_0("Cannot convert untyped atomic value '" + dynamicCastToString(this$static.value_0 = toString__Ljava_lang_String___devirtual$_0(this$static.value_0)) + "' to type " + other.getItemType_0());
        }
        return compareTo_Ljava_lang_Object__I__devirtual$(dynamicCast(result, 24), other);
    }
}

function $convert_5(this$static, requiredType){
    var e;
    if (requiredType == ($clinit_AtomicType() , STRING)) {
        return length__I__devirtual$(this$static.value_0) == 0?EMPTY_STRING:new StringValue_0(this$static.value_0);
    }
    else if (requiredType == UNTYPED_ATOMIC) {
        return this$static;
    }
    else if (requiredType == DOUBLE || requiredType == NUMERIC) {
        try {
            return $toDouble(this$static);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 4)) {
                e = $e0;
                return new ValidationFailure(e.message_0);
            }
            else 
                throw unwrap($e0);
        }
    }
    else {
        return $convert(this$static, requiredType);
    }
}

function $toDouble(this$static){
    var d;
    if (!this$static.doubleValue) {
        try {
            d = stringToNumber(this$static.value_0);
            this$static.doubleValue = new DoubleValue(d);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 57)) {
                throw new XPathException_0('Cannot convert string ' + wrap(this$static.value_0, 6) + ' to a double');
            }
            else 
                throw unwrap($e0);
        }
    }
    return this$static.doubleValue;
}

function UntypedAtomicValue(value_0){
    $clinit_StringValue();
    StringValue.call(this);
    this.value_0 = value_0 == null?'':value_0;
}

defineClass(56, 12, {15:1, 14:1, 81:1, 13:1, 12:1, 56:1}, UntypedAtomicValue);
_.convert = function convert_18(requiredType){
    return $convert_5(this, requiredType);
}
;
_.getItemType_0 = function getItemType_93(){
    return $clinit_AtomicType() , UNTYPED_ATOMIC;
}
;
_.doubleValue = null;
var Lclient_net_sf_saxon_ce_value_UntypedAtomicValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'UntypedAtomicValue', 56, Lclient_net_sf_saxon_ce_value_StringValue_2_classLit);
function $clinit_Whitespace(){
    $clinit_Whitespace = emptyMethod;
    C0WHITE = initValues(getClassLiteralForArray(Z_classLit, 1), $intern_9, 0, 8, [false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true]);
}

function collapseWhitespace(in_$){
    $clinit_Whitespace();
    var c, i_0, inWhitespace, len, nlen, sb;
    len = length__I__devirtual$(in_$);
    if (len == 0 || !containsWhitespace_0(in_$)) {
        return in_$;
    }
    sb = new FastStringBuffer(len);
    inWhitespace = true;
    i_0 = 0;
    for (; i_0 < len; i_0++) {
        c = charAt_I_C__devirtual$(in_$, i_0);
        switch (c) {
            case 10:
        case 13:
    case 9:
case 32:
    if (inWhitespace)
        ;
    else {
        $ensureCapacity_0(sb, 1);
        sb.array[sb.used++] = 32;
        inWhitespace = true;
    }

    break;
default:$ensureCapacity_0(sb, 1);
    sb.array[sb.used++] = c;
    inWhitespace = false;
        }
    }
    nlen = sb.used;
    nlen > 0 && $charAt(sb, nlen - 1) == 32 && $setLength(sb, nlen - 1);
    return sb;
}

function containsWhitespace_0(value_0){
    $clinit_Whitespace();
    var c, i_0, len;
    len = length__I__devirtual$(value_0);
    for (i_0 = 0; i_0 < len;) {
        c = charAt_I_C__devirtual$(value_0, i_0++);
        if (c <= 32 && C0WHITE[c]) {
            return true;
        }
    }
    return false;
}

function isWhite(content_0){
    $clinit_Whitespace();
    var c, i_0, len;
    len = length__I__devirtual$(content_0);
    for (i_0 = 0; i_0 < len;) {
        c = charAt_I_C__devirtual$(content_0, i_0++);
        if (c > 32 || !C0WHITE[c]) {
            return false;
        }
    }
    return true;
}

function isWhitespace_0(ch_0){
    $clinit_Whitespace();
    switch (ch_0) {
        case 9:
    case 10:
case 13:
    case 32:
        return true;
    default:return false;
    }
}

function removeAllWhitespace(value_0){
    $clinit_Whitespace();
    var c, i_0, sb;
    if (containsWhitespace_0(value_0)) {
        sb = new FastStringBuffer(value_0.length);
        for (i_0 = 0; i_0 < value_0.length; i_0++) {
            c = value_0.charCodeAt(i_0);
            (c > 32 || !C0WHITE[c]) && ($ensureCapacity_0(sb, 1) , sb.array[sb.used++] = c);
        }
        return sb;
    }
    else {
        return value_0;
    }
}

function removeLeadingWhitespace(value_0){
    $clinit_Whitespace();
    var c, i_0, len, start_0;
    start_0 = -1;
    len = value_0.length;
    for (i_0 = 0; i_0 < len; i_0++) {
        c = value_0.charCodeAt(i_0);
        if (c > 32 || !C0WHITE[c]) {
            start_0 = i_0;
            break;
        }
    }
    return start_0 == 0?value_0:start_0 < 0 || start_0 == len - 1?'':value_0.substr(start_0, len - start_0);
}

function tokenize(s){
    $clinit_Whitespace();
    var c, fsb, i_0, inTok, list;
    list = new ArrayList_0(8);
    fsb = new FastStringBuffer(16);
    inTok = false;
    for (i_0 = 0; i_0 < s.length; i_0++) {
        c = s.charCodeAt(i_0);
        if (c <= 32 && C0WHITE[c]) {
            if (inTok) {
                $add_16(list, ($condense(fsb) , valueOf_3(fsb.array, 0, fsb.used)));
                $setLength(fsb, 0);
                inTok = false;
            }
        }
        else {
            $ensureCapacity_0(fsb, 1);
            fsb.array[fsb.used++] = c;
            inTok = true;
        }
    }
    inTok && $add_16(list, ($condense(fsb) , valueOf_3(fsb.array, 0, fsb.used)));
    return list;
}

function trim_0(s){
    $clinit_Whitespace();
    if (s == null) {
        return null;
    }
    return toString__Ljava_lang_String___devirtual$_0(trimWhitespace(s));
}

function trimWhitespace(in_$){
    $clinit_Whitespace();
    var first, last, x_0;
    if (length__I__devirtual$(in_$) == 0) {
        return in_$;
    }
    first = 0;
    last = length__I__devirtual$(in_$) - 1;
    while (true) {
        x_0 = charAt_I_C__devirtual$(in_$, first);
        if (x_0 > 32 || !C0WHITE[x_0]) {
            break;
        }
        if (first++ >= last) {
            return '';
        }
    }
    while (true) {
        x_0 = charAt_I_C__devirtual$(in_$, last);
        if (x_0 > 32 || !C0WHITE[x_0]) {
            break;
        }
        --last;
    }
    return first == 0 && last == length__I__devirtual$(in_$) - 1?in_$:subSequence_II_Ljava_lang_CharSequence___devirtual$(in_$, first, last + 1);
}

var C0WHITE;
function $clinit_YearMonthDurationValue(){
    $clinit_YearMonthDurationValue = emptyMethod;
    $clinit_DurationValue();
    YMDdurationPattern = make_2('-?P([0-9]+Y)?([0-9]+M)?([0-9]+D)?');
}

function $getLengthInMonths(this$static){
    return this$static.months * (this$static.negative?-1:1);
}

function YearMonthDurationValue(){
    DurationValue.call(this);
}

function fromMonths(months){
    $clinit_YearMonthDurationValue();
    var mdv;
    mdv = new YearMonthDurationValue;
    mdv.negative = months < 0;
    mdv.months = months < 0?-months:months;
    mdv.seconds = {l:0, m:0, h:0};
    mdv.microseconds = 0;
    return mdv;
}

function makeYearMonthDurationValue(s){
    $clinit_YearMonthDurationValue();
    var d, dv;
    d = makeDuration(s, YMDdurationPattern);
    if (instanceOf(d, 29)) {
        return d;
    }
    dv = dynamicCast(d, 74);
    return fromMonths((~~(dv.months / 12) * 12 + dv.months % 12) * (dv.negative?-1:1));
}

defineClass(137, 74, {15:1, 14:1, 81:1, 13:1, 74:1, 137:1, 24:1}, YearMonthDurationValue);
_.add_2 = function add_10(other){
    var err;
    if (instanceOf(other, 137)) {
        return fromMonths(this.months * (this.negative?-1:1) + $getLengthInMonths(dynamicCast(other, 137)));
    }
    else {
        err = new XPathException_0('Cannot add two durations of different type');
        err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XPTY0004');
            throw err;
    }
}
;
_.compareTo = function compareTo_15(other){
    if (instanceOf(other, 137)) {
        return this.months * (this.negative?-1:1) - $getLengthInMonths(dynamicCast(other, 137));
    }
    else {
        throw new ClassCastException_0('Cannot compare a yearMonthDuration to an object of class ' + getClass__Ljava_lang_Class___devirtual$(other));
    }
}
;
_.divide = function divide_1(other){
    var err, v1, v2;
    if (instanceOf(other, 137)) {
        v1 = valueOf_5(fromInt(this.months * (this.negative?-1:1)));
        v2 = valueOf_5(fromInt($getLengthInMonths(dynamicCast(other, 137))));
        if ($signum(v2) == 0) {
            err = new XPathException_0('Divide by zero (durations)');
            err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'FOAR0001');
                throw err;
        }
        return new DecimalValue_1($divide(v1, v2, 20, valueOf_9(6)));
    }
    else {
        err = new XPathException_0('Cannot divide two durations of different type');
        err.errorCode = new StructuredQName('err', 'http://www.w3.org/2005/xqt-errors', 'XPTY0004');
            throw err;
    }
}
;
_.getItemType_0 = function getItemType_94(){
    return $clinit_AtomicType() , YEAR_MONTH_DURATION;
}
;
_.getPrimitiveStringValue = function getPrimitiveStringValue_17(){
    var m, sb, y_0;
    y_0 = ~~(this.months / 12);
    m = this.months % 12;
    sb = new FastStringBuffer(32);
    this.negative && ($ensureCapacity_0(sb, 1) , sb.array[sb.used++] = 45);
    $ensureCapacity_0(sb, 1);
    sb.array[sb.used++] = 80;
    y_0 != 0 && $append_3(sb, y_0 + 'Y');
    (m != 0 || y_0 == 0) && $append_3(sb, m + 'M');
    return sb;
}
;
_.getXPathComparable = function getXPathComparable_8(ordered, collator, implicitTimezone){
    return this;
}
;
_.multiply = function multiply_2(n){
    var m, product;
    if (isNaN(n)) {
        throw new XPathException_2('Cannot multiply/divide a duration by NaN', 'FOCA0005');
    }
    m = this.months * (this.negative?-1:1);
    product = n * m;
    if (isInfinite(product) || product > $intern_0 || product < $intern_58) {
        throw new XPathException_2('Overflow when multiplying/dividing a duration by a number', 'FODT0002');
    }
    return fromMonths(toInt(fromDouble(round0(product))));
}
;
_.negate = function negate_5(){
    return fromMonths(-(this.months * (this.negative?-1:1)));
}
;
var YMDdurationPattern;
var Lclient_net_sf_saxon_ce_value_YearMonthDurationValue_2_classLit = createForClass('client.net.sf.saxon.ce.value', 'YearMonthDurationValue', 137, Lclient_net_sf_saxon_ce_value_DurationValue_2_classLit);
function $cancel_0(this$static){
    if (!this$static.isRunning) {
        return;
    }
    this$static.wasStarted = this$static.isStarted;
    this$static.element = null;
    this$static.isRunning = false;
    this$static.isStarted = false;
    if (this$static.requestHandle) {
        this$static.requestHandle.cancel();
        this$static.requestHandle = null;
    }
    this$static.wasStarted && $onComplete(this$static);
}

function $update(this$static, curTime){
    var curRunId, finished, progress;
    curRunId = this$static.runId;
    finished = curTime >= this$static.startTime + this$static.duration;
    if (this$static.isStarted && !finished) {
        progress = (curTime - this$static.startTime) / this$static.duration;
        $onUpdate(this$static, (1 + Math.cos($intern_80 + progress * $intern_80)) / 2);
        return this$static.isRunning && this$static.runId == curRunId;
    }
    if (!this$static.isStarted && curTime >= this$static.startTime) {
        this$static.isStarted = true;
        this$static.offsetHeight = $getPropertyInt($getElement(this$static.curPanel), 'offsetHeight');
        this$static.offsetWidth = $getPropertyInt($getElement(this$static.curPanel), 'offsetWidth');
        ($clinit_DOM() , this$static.curPanel.element).style['overflow'] = 'hidden';
        $onUpdate(this$static, (1 + Math.cos($intern_80)) / 2);
        if (!(this$static.isRunning && this$static.runId == curRunId)) {
            return false;
        }
    }
    if (finished) {
        this$static.isRunning = false;
        this$static.isStarted = false;
        $onComplete(this$static);
        return false;
    }
    return true;
}

function Animation(scheduler){
    this.callback = new Animation$1(this);
    this.scheduler = scheduler;
}

defineClass(437, 1, {});
_.duration = -1;
_.isRunning = false;
_.isStarted = false;
_.runId = -1;
_.startTime = -1;
_.wasStarted = false;
var Lcom_google_gwt_animation_client_Animation_2_classLit = createForClass('com.google.gwt.animation.client', 'Animation', 437, Ljava_lang_Object_2_classLit);
function $execute(this$static, timestamp){
    $update(this$static.this$01, timestamp)?(this$static.this$01.requestHandle = this$static.this$01.scheduler.requestAnimationFrame_0(this$static.this$01.callback, this$static.this$01.element)):(this$static.this$01.requestHandle = null);
}

function Animation$1(this$0){
    this.this$01 = this$0;
}

defineClass(680, 1, {}, Animation$1);
_.execute = function execute(timestamp){
    $execute(this, timestamp);
}
;
var Lcom_google_gwt_animation_client_Animation$1_2_classLit = createForClass('com.google.gwt.animation.client', 'Animation/1', 680, Ljava_lang_Object_2_classLit);
defineClass(882, 1, {});
var instance_2;
var Lcom_google_gwt_animation_client_AnimationScheduler_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationScheduler', 882, Ljava_lang_Object_2_classLit);
defineClass(383, 1, {383:1});
var Lcom_google_gwt_animation_client_AnimationScheduler$AnimationHandle_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationScheduler/AnimationHandle', 383, Ljava_lang_Object_2_classLit);
function AnimationSchedulerImplStandard(){
}

function cancelImpl(holder){
    $wnd.cancelAnimationFrame(holder.id);
}

function requestImpl(cb, element){
    var callback = $entry(function(){
        var time = now_1();
        cb.execute(time);
    }
    );
    var handle = $wnd.requestAnimationFrame(callback, element);
    return {id:handle};
}

defineClass(841, 882, {}, AnimationSchedulerImplStandard);
_.requestAnimationFrame_0 = function requestAnimationFrame(callback, element){
    var handle;
    handle = requestImpl(callback, element);
    return new AnimationSchedulerImplStandard$1(handle);
}
;
var Lcom_google_gwt_animation_client_AnimationSchedulerImplStandard_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationSchedulerImplStandard', 841, Lcom_google_gwt_animation_client_AnimationScheduler_2_classLit);
function AnimationSchedulerImplStandard$1(val$handle){
    this.val$handle2 = val$handle;
}

defineClass(842, 383, {383:1}, AnimationSchedulerImplStandard$1);
_.cancel = function cancel(){
    cancelImpl(this.val$handle2);
}
;
var Lcom_google_gwt_animation_client_AnimationSchedulerImplStandard$1_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationSchedulerImplStandard/1', 842, Lcom_google_gwt_animation_client_AnimationScheduler$AnimationHandle_2_classLit);
function $cancelAnimationFrame(this$static, requestId){
    $remove_7(this$static.animationRequests, requestId);
    this$static.animationRequests.array.length == 0 && $cancel(this$static.timer);
}

function $updateAnimations(this$static){
    var curAnimations, duration, requestId, requestId$index, requestId$max;
    curAnimations = initDim(Lcom_google_gwt_animation_client_AnimationSchedulerImplTimer$AnimationHandleImpl_2_classLit, {906:1, 3:1, 5:1}, 414, this$static.animationRequests.array.length, 0, 1);
    curAnimations = dynamicCast($toArray(this$static.animationRequests, curAnimations), 906);
    duration = new Duration;
    for (requestId$index = 0 , requestId$max = curAnimations.length; requestId$index < requestId$max; ++requestId$index) {
        requestId = curAnimations[requestId$index];
        $remove_7(this$static.animationRequests, requestId);
        $execute(requestId.callback, duration.start_0);
    }
    this$static.animationRequests.array.length > 0 && $schedule(this$static.timer, max_1(5, 16 - (now_1() - duration.start_0)));
}

function AnimationSchedulerImplTimer(){
    this.animationRequests = new ArrayList;
    this.timer = new AnimationSchedulerImplTimer$1(this);
}

defineClass(843, 882, {}, AnimationSchedulerImplTimer);
_.requestAnimationFrame_0 = function requestAnimationFrame_0(callback, element){
    var requestId;
    requestId = new AnimationSchedulerImplTimer$AnimationHandleImpl(this, callback);
    $add_16(this.animationRequests, requestId);
    this.animationRequests.array.length == 1 && $schedule(this.timer, 16);
    return requestId;
}
;
var Lcom_google_gwt_animation_client_AnimationSchedulerImplTimer_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationSchedulerImplTimer', 843, Lcom_google_gwt_animation_client_AnimationScheduler_2_classLit);
function AnimationSchedulerImplTimer$1(this$0){
    this.this$01 = this$0;
    Timer.call(this);
}

defineClass(844, 366, {}, AnimationSchedulerImplTimer$1);
_.run_0 = function run_0(){
    $updateAnimations(this.this$01);
}
;
var Lcom_google_gwt_animation_client_AnimationSchedulerImplTimer$1_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationSchedulerImplTimer/1', 844, Lcom_google_gwt_user_client_Timer_2_classLit);
function AnimationSchedulerImplTimer$AnimationHandleImpl(this$0, callback){
    this.this$01 = this$0;
    this.callback = callback;
}

defineClass(414, 383, {383:1, 414:1}, AnimationSchedulerImplTimer$AnimationHandleImpl);
_.cancel = function cancel_0(){
    $cancelAnimationFrame(this.this$01, this);
}
;
var Lcom_google_gwt_animation_client_AnimationSchedulerImplTimer$AnimationHandleImpl_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationSchedulerImplTimer/AnimationHandleImpl', 414, Lcom_google_gwt_animation_client_AnimationScheduler$AnimationHandle_2_classLit);
function $elapsedMillis(this$static){
    return now_1() - this$static.start_0;
}

function Duration(){
    this.start_0 = now_1();
}

defineClass(427, 1, {}, Duration);
_.start_0 = 0;
var Lcom_google_gwt_core_client_Duration_2_classLit = createForClass('com.google.gwt.core.client', 'Duration', 427, Ljava_lang_Object_2_classLit);
function isScript(){
    return true;
}

function setUncaughtExceptionHandler(handler){
    uncaughtExceptionHandler = handler;
}

var uncaughtExceptionHandler = null;
defineClass(533, 35, $intern_63);
var Lcom_google_gwt_core_client_impl_JavaScriptExceptionBase_2_classLit = createForClass('com.google.gwt.core.client.impl', 'JavaScriptExceptionBase', 533, Ljava_lang_RuntimeException_2_classLit);
function $clinit_JavaScriptException(){
    $clinit_JavaScriptException = emptyMethod;
    NOT_SET = new Object_0;
}

function $ensureInit(this$static){
    var exception;
    if (this$static.message_0 == null) {
        exception = maskUndefined(this$static.e) === maskUndefined(NOT_SET)?null:this$static.e;
        this$static.name_0 = exception == null?'null':instanceOfJso(exception)?getExceptionName0(dynamicCastJso(exception)):isJavaString(exception)?'String':$getName(getClass__Ljava_lang_Class___devirtual$(exception));
        this$static.description = this$static.description + ': ' + (instanceOfJso(exception)?getExceptionDescription0(dynamicCastJso(exception)):exception + '');
        this$static.message_0 = '(' + this$static.name_0 + ') ' + this$static.description;
    }
}

function JavaScriptException(e){
    $clinit_JavaScriptException();
    this.cause = null;
    this.detailMessage = null;
    this.description = '';
    this.e = e;
    this.description = '';
}

function getExceptionDescription0(e){
    return e == null?null:e.message;
}

function getExceptionName0(e){
    return e == null?null:e.name;
}

defineClass(119, 533, {119:1, 3:1, 19:1, 35:1, 37:1}, JavaScriptException);
_.getDescription = function getDescription(){
    return $ensureInit(this) , this.description;
}
;
_.getMessage = function getMessage_2(){
    return $ensureInit(this) , this.message_0;
}
;
_.getThrown = function getThrown(){
    return maskUndefined(this.e) === maskUndefined(NOT_SET)?null:this.e;
}
;
var NOT_SET;
var Lcom_google_gwt_core_client_JavaScriptException_2_classLit = createForClass('com.google.gwt.core.client', 'JavaScriptException', 119, Lcom_google_gwt_core_client_impl_JavaScriptExceptionBase_2_classLit);
function create(milliseconds){
    return new Date(milliseconds);
}

function now_1(){
    if (Date.now) {
        return Date.now();
    }
    return (new Date).getTime();
}

defineClass(852, 1, {});
var Lcom_google_gwt_core_client_Scheduler_2_classLit = createForClass('com.google.gwt.core.client', 'Scheduler', 852, Ljava_lang_Object_2_classLit);
function $clinit_ScriptInjector(){
    $clinit_ScriptInjector = emptyMethod;
}

function nativeSetText(element, scriptBody){
    $clinit_ScriptInjector();
    element.text = scriptBody;
}

function ScriptInjector$FromString(scriptBody){
    this.scriptBody = scriptBody;
}

defineClass(832, 1, {}, ScriptInjector$FromString);
_.removeTag = true;
var Lcom_google_gwt_core_client_ScriptInjector$FromString_2_classLit = createForClass('com.google.gwt.core.client', 'ScriptInjector/FromString', 832, Ljava_lang_Object_2_classLit);
function apply_3(jsFunction, thisObj, args){
    return jsFunction.apply(thisObj, args);
    var __0;
}

function enter(){
    var now_0;
    if (entryDepth != 0) {
        now_0 = now_1();
        if (now_0 - watchdogEntryDepthLastScheduled > 2000) {
            watchdogEntryDepthLastScheduled = now_0;
            watchdogEntryDepthTimerId = setTimeout(watchdogEntryDepthRun, 10);
        }
    }
    if (entryDepth++ == 0) {
        $flushEntryCommands(($clinit_SchedulerImpl() , INSTANCE));
        return true;
    }
    return false;
}

function entry_0(jsFunction){
    return function(){
        if (isScript()) {
            return entry0(jsFunction, this, arguments);
        }
        else {
            var __0 = entry0(jsFunction, this, arguments);
            __0 != null && (__0 = __0.val);
            return __0;
        }
    }
    ;
}

function entry0(jsFunction, thisObj, args){
    var initialEntry, t;
    initialEntry = enter();
    try {
        if (uncaughtExceptionHandler) {
            try {
                return apply_3(jsFunction, thisObj, args);
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 37)) {
                    t = $e0;
                    reportUncaughtException(t);
                    return undefined;
                }
                else 
                    throw unwrap($e0);
            }
        }
        else {
            return apply_3(jsFunction, thisObj, args);
        }
    }
    finally {
        exit(initialEntry);
    }
}

function exit(initialEntry){
    initialEntry && $flushFinallyCommands(($clinit_SchedulerImpl() , INSTANCE));
    --entryDepth;
    if (initialEntry) {
        if (watchdogEntryDepthTimerId != -1) {
            watchdogEntryDepthCancel(watchdogEntryDepthTimerId);
            watchdogEntryDepthTimerId = -1;
        }
    }
}

function getHashCode(o){
    return o.$H || (o.$H = ++sNextHashId);
}

function reportToBrowser(e){
    $wnd.setTimeout(function(){
        throw e;
    }
    , 0);
}

function reportUncaughtException(e){
    var handler;
    handler = uncaughtExceptionHandler;
    if (handler) {
        if (handler == uncaughtExceptionHandlerForTest) {
            return;
        }
        $log_2(handler.val$log2, ($clinit_Level() , SEVERE), e.getMessage(), e);
        return;
    }
    reportToBrowser(instanceOf(e, 119)?dynamicCast(e, 119).getThrown():e);
}

function watchdogEntryDepthCancel(timerId){
    clearTimeout(timerId);
}

function watchdogEntryDepthRun(){
    entryDepth != 0 && (entryDepth = 0);
    watchdogEntryDepthTimerId = -1;
}

var entryDepth = 0, sNextHashId = 0, uncaughtExceptionHandlerForTest, watchdogEntryDepthLastScheduled = 0, watchdogEntryDepthTimerId = -1;
function $clinit_SchedulerImpl(){
    $clinit_SchedulerImpl = emptyMethod;
    INSTANCE = new SchedulerImpl;
}

function $flushEntryCommands(this$static){
    var oldQueue, rescheduled;
    if (this$static.entryCommands) {
        rescheduled = null;
        do {
            oldQueue = this$static.entryCommands;
            this$static.entryCommands = null;
            rescheduled = runScheduledTasks(oldQueue, rescheduled);
        }
        while (this$static.entryCommands);
        this$static.entryCommands = rescheduled;
    }
}

function $flushFinallyCommands(this$static){
    var oldQueue, rescheduled;
    if (this$static.finallyCommands) {
        rescheduled = null;
        do {
            oldQueue = this$static.finallyCommands;
            this$static.finallyCommands = null;
            rescheduled = runScheduledTasks(oldQueue, rescheduled);
        }
        while (this$static.finallyCommands);
        this$static.finallyCommands = rescheduled;
    }
}

function SchedulerImpl(){
}

function execute_0(cmd){
    return cmd.execute_0();
}

function push_0(queue, task){
    !queue && (queue = []);
    queue[queue.length] = task;
    return queue;
}

function runScheduledTasks(tasks, rescheduled){
    var e, i_0, j, t;
    for (i_0 = 0 , j = tasks.length; i_0 < j; i_0++) {
        t = tasks[i_0];
        try {
            t[1]?t[0].execute_0() && (rescheduled = push_0(rescheduled, t)):t[0].nullMethod();
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 37)) {
                e = $e0;
                reportUncaughtException(e);
            }
            else 
                throw unwrap($e0);
        }
    }
    return rescheduled;
}

function scheduleFixedDelayImpl(cmd, delayMs){
    $clinit_SchedulerImpl();
    function callback(){
        var ret = $entry(execute_0)(cmd);
        !isScript() && (ret = ret == true);
        ret && $wnd.setTimeout(callback, delayMs);
    }

    $wnd.setTimeout(callback, delayMs);
}

defineClass(578, 852, {}, SchedulerImpl);
var INSTANCE;
var Lcom_google_gwt_core_client_impl_SchedulerImpl_2_classLit = createForClass('com.google.gwt.core.client.impl', 'SchedulerImpl', 578, Lcom_google_gwt_core_client_Scheduler_2_classLit);
function $clinit_StackTraceCreator(){
    $clinit_StackTraceCreator = emptyMethod;
    var c, enforceLegacy;
    enforceLegacy = !(!!Error.stackTraceLimit || 'stack' in new Error);
    c = new StackTraceCreator$CollectorModernNoSourceMap;
    collector = enforceLegacy?new StackTraceCreator$CollectorLegacy:c;
}

function captureStackTrace(throwable, reference){
    $clinit_StackTraceCreator();
    collector.collect(throwable, reference);
}

function dropInternalFrames(stackTrace){
    var dropFrameUntilFnName, i_0, numberOfFrameToSearch;
    dropFrameUntilFnName = 'captureStackTrace';
    numberOfFrameToSearch = min_1(stackTrace.length, 5);
    for (i_0 = 0; i_0 < numberOfFrameToSearch; i_0++) {
        if ($equals_5(stackTrace[i_0].methodName, dropFrameUntilFnName)) {
            return dynamicCast((stackTrace.length >= i_0 + 1 && stackTrace.splice(0, i_0 + 1) , stackTrace), 848);
        }
    }
    return stackTrace;
}

function extractFunctionName(fnName){
    var fnRE = /function(?:\s+([\w$]+))?\s*\(/;
        var match_0 = fnRE.exec(fnName);
        return match_0 && match_0[1] || 'anonymous';
}

function parseInt_0(number){
    $clinit_StackTraceCreator();
    return parseInt(number) || -1;
}

var collector;
defineClass(863, 1, {});
var Lcom_google_gwt_core_client_impl_StackTraceCreator$Collector_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/Collector', 863, Ljava_lang_Object_2_classLit);
function StackTraceCreator$CollectorLegacy(){
}

defineClass(534, 863, {}, StackTraceCreator$CollectorLegacy);
_.collect = function collect(t, thrownIgnored){
    var seen = {}, name_1;
    t.fnStack = [];
    var callee = arguments.callee.caller;
    while (callee) {
        var name_0 = ($clinit_StackTraceCreator() , callee.name || (callee.name = extractFunctionName(callee.toString())));
        t.fnStack.push(name_0);
        var keyName = ':' + name_0;
        var withThisName = seen[keyName];
        if (withThisName) {
            var i_0, j;
            for (i_0 = 0 , j = withThisName.length; i_0 < j; i_0++) {
                if (withThisName[i_0] === callee) {
                    return;
                }
            }
        }
        (withThisName || (seen[keyName] = [])).push(callee);
        callee = callee.caller;
    }
}
;
_.getStackTrace = function getStackTrace(t){
    var i_0, length_0, stack_0, stackTrace;
    stack_0 = ($clinit_StackTraceCreator() , t && t.fnStack && t.fnStack instanceof Array?t.fnStack:[]);
    length_0 = stack_0.length;
    stackTrace = initDim(Ljava_lang_StackTraceElement_2_classLit, $intern_81, 198, length_0, 0, 1);
    for (i_0 = 0; i_0 < length_0; i_0++) {
        stackTrace[i_0] = new StackTraceElement(stack_0[i_0], null, -1);
    }
    return stackTrace;
}
;
var Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorLegacy_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/CollectorLegacy', 534, Lcom_google_gwt_core_client_impl_StackTraceCreator$Collector_2_classLit);
function $clinit_StackTraceCreator$CollectorModern(){
    $clinit_StackTraceCreator$CollectorModern = emptyMethod;
    Error.stackTraceLimit = 64;
}

function $parse_0(this$static, stString){
    var closeParen, col, endFileUrlIndex, fileName, index_0, lastColonIndex, line, location_0, toReturn;
    if (!stString.length) {
        return this$static.createSte('Unknown', 'anonymous', -1, -1);
    }
    toReturn = $trim(stString);
    $equals_5(toReturn.substr(0, 3), 'at ') && (toReturn = __substr(toReturn, 3, toReturn.length - 3));
    toReturn = toReturn.replace(/\[.*?\]/g, '');
    index_0 = toReturn.indexOf('(');
    if (index_0 == -1) {
        index_0 = toReturn.indexOf('@');
        if (index_0 == -1) {
            location_0 = toReturn;
            toReturn = '';
        }
        else {
            location_0 = $trim(__substr(toReturn, index_0 + 1, toReturn.length - (index_0 + 1)));
            toReturn = $trim(toReturn.substr(0, index_0));
        }
    }
    else {
        closeParen = toReturn.indexOf(')', index_0);
        location_0 = toReturn.substr(index_0 + 1, closeParen - (index_0 + 1));
        toReturn = $trim(toReturn.substr(0, index_0));
    }
    index_0 = $indexOf_3(toReturn, fromCodePoint(46));
    index_0 != -1 && (toReturn = __substr(toReturn, index_0 + 1, toReturn.length - (index_0 + 1)));
    (!toReturn.length || $equals_5(toReturn, 'Anonymous function')) && (toReturn = 'anonymous');
    lastColonIndex = $lastIndexOf(location_0, fromCodePoint(58));
    endFileUrlIndex = $lastIndexOf_0(location_0, fromCodePoint(58), lastColonIndex - 1);
    line = -1;
    col = -1;
    fileName = 'Unknown';
    if (lastColonIndex != -1 && endFileUrlIndex != -1) {
        fileName = location_0.substr(0, endFileUrlIndex);
        line = parseInt_0(location_0.substr(endFileUrlIndex + 1, lastColonIndex - (endFileUrlIndex + 1)));
        col = parseInt_0(__substr(location_0, lastColonIndex + 1, location_0.length - (lastColonIndex + 1)));
    }
    return this$static.createSte(fileName, toReturn, line, col);
}

defineClass(864, 863, {});
_.collect = function collect_0(t, jsThrown){
    function fixIE(e){
        if (!('stack' in e)) {
            try {
                throw e;
            }
            catch (ignored) {
            }
        }
        return e;
    }

    var backingJsError;
    typeof jsThrown == 'string'?(backingJsError = fixIE(new Error(jsThrown))):jsThrown instanceof Object && 'stack' in jsThrown?(backingJsError = jsThrown):(backingJsError = fixIE(new Error));
    t.__gwt$backingJsError = backingJsError;
}
;
_.createSte = function createSte(fileName, method, line, col){
    return new StackTraceElement(method, fileName + '@' + col, line < 0?-1:line);
}
;
_.getStackTrace = function getStackTrace_0(t){
    var addIndex, i_0, length_0, stack_0, stackTrace, ste, e;
    stack_0 = ($clinit_StackTraceCreator() , e = t.__gwt$backingJsError , e && e.stack?e.stack.split('\n'):[]);
    stackTrace = initDim(Ljava_lang_StackTraceElement_2_classLit, $intern_81, 198, 0, 0, 1);
    addIndex = 0;
    length_0 = stack_0.length;
    if (length_0 == 0) {
        return stackTrace;
    }
    ste = $parse_0(this, stack_0[0]);
    $equals_5(ste.methodName, 'anonymous') || (stackTrace[addIndex++] = ste);
    for (i_0 = 1; i_0 < length_0; i_0++) {
        stackTrace[addIndex++] = $parse_0(this, stack_0[i_0]);
    }
    return stackTrace;
}
;
var Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorModern_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/CollectorModern', 864, Lcom_google_gwt_core_client_impl_StackTraceCreator$Collector_2_classLit);
function StackTraceCreator$CollectorModernNoSourceMap(){
    $clinit_StackTraceCreator$CollectorModern();
}

defineClass(535, 864, {}, StackTraceCreator$CollectorModernNoSourceMap);
_.createSte = function createSte_0(fileName, method, line, col){
    return new StackTraceElement(method, fileName, -1);
}
;
var Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorModernNoSourceMap_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/CollectorModernNoSourceMap', 535, Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorModern_2_classLit);
function checkArrayType(expression, errorMessage){
    if (!expression) {
        throw new ArrayStoreException_0('' + errorMessage);
    }
}

function checkCriticalArgument(expression, errorMessage){
    if (!expression) {
        throw new IllegalArgumentException_0('' + errorMessage);
    }
}

function checkCriticalElement(expression){
    if (!expression) {
        throw new NoSuchElementException;
    }
}

function checkElementIndex(index_0, size_0){
    if (index_0 < 0 || index_0 >= size_0) {
        throw new IndexOutOfBoundsException_0('Index: ' + index_0 + ', Size: ' + size_0);
    }
}

function checkNotNull(reference){
    if (reference == null) {
        throw new NullPointerException;
    }
    return reference;
}

function checkNotNull_0(reference, errorMessage){
    if (reference == null) {
        throw new NullPointerException_0('' + errorMessage);
    }
}

function checkPositionIndex(index_0, size_0){
    if (index_0 < 0 || index_0 > size_0) {
        throw new IndexOutOfBoundsException_0('Index: ' + index_0 + ', Size: ' + size_0);
    }
}

function checkState(expression){
    if (!expression) {
        throw new IllegalStateException;
    }
}

function checkState_0(expression){
    if (!expression) {
        throw new IllegalStateException_0("Can't overwrite cause");
    }
}

function $appendChild_0(this$static, newChild){
    return this$static.appendChild(newChild);
}

function $getChild(this$static, index_0){
    return this$static.childNodes[index_0];
}

function $insertAfter(this$static, newChild, refChild){
    var next;
    next = !refChild?null:refChild.nextSibling;
    return !next?this$static.appendChild(newChild):this$static.insertBefore(newChild, next);
}

function $insertBefore(this$static, newChild, refChild){
    return this$static.insertBefore(newChild, refChild);
}

function $insertFirst(this$static, child){
    return $insertBefore(this$static, child, this$static.firstChild);
}

function $removeChild(this$static, oldChild){
    return this$static.removeChild(oldChild);
}

function is(o){
    try {
        return !!o && !!o.nodeType;
    }
    catch (e) {
        return false;
    }
}

function $getPropertyInt(this$static, name_0){
    return parseInt(this$static[name_0]) | 0;
}

function $getPropertyString(this$static, name_0){
    return this$static[name_0] == null?null:String(this$static[name_0]);
}

function $getSubPixelScrollWidth(this$static){
    return this$static.scrollWidth || 0;
}

function $removeAttribute(this$static, name_0){
    this$static.removeAttribute(name_0);
}

function $setAttribute(this$static, name_0, value_0){
    this$static.setAttribute(name_0, value_0);
}

function $setClassName(this$static, className){
    this$static.className = className || '';
}

function $setInnerHTML(this$static, html){
    this$static.innerHTML = html || '';
}

function $setPropertyString(this$static, name_0, value_0){
    this$static[name_0] = value_0;
}

function $setScrollTop(this$static, scrollTop){
    this$static.scrollTop = scrollTop;
}

function is_0(o){
    if (is(o)) {
        return !!o && o.nodeType == 1;
    }
    return false;
}

function $createElement(doc, tag){
    return doc.createElement(tag);
}

function $eventGetAltKey(evt){
    return !!evt.altKey;
}

function $eventGetCtrlKey(evt){
    return !!evt.ctrlKey;
}

function $eventGetKeyCode(evt){
    return evt.keyCode | 0;
}

function $eventGetMetaKey(evt){
    return !!evt.metaKey;
}

function $eventGetShiftKey(evt){
    return !!evt.shiftKey;
}

function $eventGetSubPixelClientX(evt){
    return evt.clientX || 0;
}

function $eventGetSubPixelClientY(evt){
    return evt.clientY || 0;
}

function $eventStopPropagation(evt){
    evt.stopPropagation();
}

function $getAttribute_0(elem, name_0){
    return elem.getAttribute(name_0) || '';
}

function $getFirstChildElement(elem){
    var child = elem.firstChild;
    while (child && child.nodeType != 1)
        child = child.nextSibling;
    return child;
}

function $getParentElement(node){
    var parent_0 = node.parentNode;
    (!parent_0 || parent_0.nodeType != 1) && (parent_0 = null);
    return parent_0;
}

function $getSubPixelScrollLeft(elem){
    return elem.scrollLeft || 0;
}

function $touchGetSubPixelPageX(touch){
    return touch.pageX || 0;
}

function $touchGetSubPixelPageY(touch){
    return touch.pageY || 0;
}

function $eventPreventDefault(evt){
    evt.preventDefault();
}

function $isOrHasChild(parent_0, child){
    return parent_0.contains(child);
}

function $setInnerText(elem, text_0){
    elem.textContent = text_0 || '';
}

function $eventGetCurrentTarget(event_0){
    return event_0.currentTarget || $wnd;
}

function $getAbsoluteLeft(elem){
    var left, rect;
    rect = getBoundingClientRect(elem);
    left = rect?rect.left + $getScrollLeft(elem.ownerDocument.body):getAbsoluteLeftUsingOffsets(elem);
    return left | 0;
}

function $getAbsoluteTop(elem){
    var rect, top_0, top_1;
    rect = getBoundingClientRect(elem);
    top_0 = rect?rect.top + ((elem.ownerDocument.body.scrollTop || 0) | 0):getAbsoluteTopUsingOffsets(elem);
    return top_0 | 0;
}

function $getScrollLeft(elem){
    if (!$equalsIgnoreCase('body', elem.tagName) && $isRTL(elem)) {
        return ($getSubPixelScrollLeft(elem) | 0) - (($getSubPixelScrollWidth(elem) | 0) - (elem.clientWidth | 0));
    }
    return $getSubPixelScrollLeft(elem) | 0;
}

function $getTabIndex(elem){
    return typeof elem.tabIndex != 'undefined'?elem.tabIndex:-1;
}

function $isRTL(elem){
    return elem.ownerDocument.defaultView.getComputedStyle(elem, '').direction == 'rtl';
}

function $setScrollLeft(elem, left){
    !$equalsIgnoreCase('body', elem.tagName) && $isRTL(elem) && (left += ($getSubPixelScrollWidth(elem) | 0) - (elem.clientWidth | 0));
    elem.scrollLeft = left;
}

function getAbsoluteLeftUsingOffsets(elem){
    if (elem.offsetLeft == null) {
        return 0;
    }
    var left = 0;
    var doc = elem.ownerDocument;
    var curr = elem.parentNode;
    if (curr) {
        while (curr.offsetParent) {
            left -= curr.scrollLeft;
            doc.defaultView.getComputedStyle(curr, '').getPropertyValue('direction') == 'rtl' && (left += curr.scrollWidth - curr.clientWidth);
            curr = curr.parentNode;
        }
    }
    while (elem) {
        left += elem.offsetLeft;
        if (doc.defaultView.getComputedStyle(elem, '')['position'] == 'fixed') {
            left += doc.body.scrollLeft;
            return left;
        }
        var parent_0 = elem.offsetParent;
        parent_0 && $wnd.devicePixelRatio && (left += parseInt(doc.defaultView.getComputedStyle(parent_0, '').getPropertyValue('border-left-width')));
        if (parent_0 && parent_0.tagName == 'BODY' && elem.style.position == 'absolute') {
            break;
        }
        elem = parent_0;
    }
    return left;
}

function getAbsoluteTopUsingOffsets(elem){
    if (elem.offsetTop == null) {
        return 0;
    }
    var top_0 = 0;
    var doc = elem.ownerDocument;
    var curr = elem.parentNode;
    if (curr) {
        while (curr.offsetParent) {
            top_0 -= curr.scrollTop;
            curr = curr.parentNode;
        }
    }
    while (elem) {
        top_0 += elem.offsetTop;
        if (doc.defaultView.getComputedStyle(elem, '')['position'] == 'fixed') {
            top_0 += doc.body.scrollTop;
            return top_0;
        }
        var parent_0 = elem.offsetParent;
        parent_0 && $wnd.devicePixelRatio && (top_0 += parseInt(doc.defaultView.getComputedStyle(parent_0, '').getPropertyValue('border-top-width')));
        if (parent_0 && parent_0.tagName == 'BODY' && elem.style.position == 'absolute') {
            break;
        }
        elem = parent_0;
    }
    return top_0;
}

function getBoundingClientRect(element){
    return element.getBoundingClientRect && element.getBoundingClientRect();
}

function $eventGetTarget(evt){
    var target = evt.target;
    target && target.nodeType == 3 && (target = target.parentNode);
    return target;
}

function $createTextNode(this$static, data_0){
    return this$static.createTextNode(data_0);
}

function $getClientHeight(this$static){
    return ($equals_5(this$static.compatMode, 'CSS1Compat')?this$static.documentElement:this$static.body).clientHeight | 0;
}

function $getClientWidth(this$static){
    return ($equals_5(this$static.compatMode, 'CSS1Compat')?this$static.documentElement:this$static.body).clientWidth | 0;
}

function $getElementById(this$static, elementId){
    return this$static.getElementById(elementId);
}

function $getElementsByTagName(this$static, tagName){
    return this$static.getElementsByTagName(tagName);
}

function $getScrollHeight(this$static){
    return (($equals_5(this$static.compatMode, 'CSS1Compat')?this$static.documentElement:this$static.body).scrollHeight || 0) | 0;
}

function $getScrollWidth(this$static){
    return (($equals_5(this$static.compatMode, 'CSS1Compat')?this$static.documentElement:this$static.body).scrollWidth || 0) | 0;
}

function $setPropertyImpl(this$static, name_0, value_0){
    this$static[name_0] = value_0;
}

function $clinit_Style$Display(){
    $clinit_Style$Display = emptyMethod;
    NONE_0 = new Style$Display$1;
    BLOCK = new Style$Display$2;
    INLINE = new Style$Display$3;
    INLINE_BLOCK = new Style$Display$4;
    INLINE_TABLE = new Style$Display$5;
    LIST_ITEM = new Style$Display$6;
    RUN_IN = new Style$Display$7;
    TABLE = new Style$Display$8;
    TABLE_CAPTION = new Style$Display$9;
    TABLE_COLUMN_GROUP = new Style$Display$10;
    TABLE_HEADER_GROUP = new Style$Display$11;
    TABLE_FOOTER_GROUP = new Style$Display$12;
    TABLE_ROW_GROUP = new Style$Display$13;
    TABLE_CELL = new Style$Display$14;
    TABLE_COLUMN = new Style$Display$15;
    TABLE_ROW = new Style$Display$16;
    INITIAL = new Style$Display$17;
}

function Style$Display(enum$name, enum$ordinal){
    Enum.call(this, enum$name, enum$ordinal);
}

function values_1(){
    $clinit_Style$Display();
    return initValues(getClassLiteralForArray(Lcom_google_gwt_dom_client_Style$Display_2_classLit, 1), $intern_1, 59, 0, [NONE_0, BLOCK, INLINE, INLINE_BLOCK, INLINE_TABLE, LIST_ITEM, RUN_IN, TABLE, TABLE_CAPTION, TABLE_COLUMN_GROUP, TABLE_HEADER_GROUP, TABLE_FOOTER_GROUP, TABLE_ROW_GROUP, TABLE_CELL, TABLE_COLUMN, TABLE_ROW, INITIAL]);
}

defineClass(59, 40, $intern_82);
var BLOCK, INITIAL, INLINE, INLINE_BLOCK, INLINE_TABLE, LIST_ITEM, NONE_0, RUN_IN, TABLE, TABLE_CAPTION, TABLE_CELL, TABLE_COLUMN, TABLE_COLUMN_GROUP, TABLE_FOOTER_GROUP, TABLE_HEADER_GROUP, TABLE_ROW, TABLE_ROW_GROUP;
var Lcom_google_gwt_dom_client_Style$Display_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display', 59, Ljava_lang_Enum_2_classLit, values_1);
function Style$Display$1(){
    Style$Display.call(this, 'NONE', 0);
}

defineClass(604, 59, $intern_82, Style$Display$1);
var Lcom_google_gwt_dom_client_Style$Display$1_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/1', 604, Lcom_google_gwt_dom_client_Style$Display_2_classLit, null);
function Style$Display$10(){
    Style$Display.call(this, 'TABLE_COLUMN_GROUP', 9);
}

defineClass(613, 59, $intern_82, Style$Display$10);
var Lcom_google_gwt_dom_client_Style$Display$10_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/10', 613, Lcom_google_gwt_dom_client_Style$Display_2_classLit, null);
function Style$Display$11(){
    Style$Display.call(this, 'TABLE_HEADER_GROUP', 10);
}

defineClass(614, 59, $intern_82, Style$Display$11);
var Lcom_google_gwt_dom_client_Style$Display$11_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/11', 614, Lcom_google_gwt_dom_client_Style$Display_2_classLit, null);
function Style$Display$12(){
    Style$Display.call(this, 'TABLE_FOOTER_GROUP', 11);
}

defineClass(615, 59, $intern_82, Style$Display$12);
var Lcom_google_gwt_dom_client_Style$Display$12_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/12', 615, Lcom_google_gwt_dom_client_Style$Display_2_classLit, null);
function Style$Display$13(){
    Style$Display.call(this, 'TABLE_ROW_GROUP', 12);
}

defineClass(616, 59, $intern_82, Style$Display$13);
var Lcom_google_gwt_dom_client_Style$Display$13_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/13', 616, Lcom_google_gwt_dom_client_Style$Display_2_classLit, null);
function Style$Display$14(){
    Style$Display.call(this, 'TABLE_CELL', 13);
}

defineClass(617, 59, $intern_82, Style$Display$14);
var Lcom_google_gwt_dom_client_Style$Display$14_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/14', 617, Lcom_google_gwt_dom_client_Style$Display_2_classLit, null);
function Style$Display$15(){
    Style$Display.call(this, 'TABLE_COLUMN', 14);
}

defineClass(618, 59, $intern_82, Style$Display$15);
var Lcom_google_gwt_dom_client_Style$Display$15_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/15', 618, Lcom_google_gwt_dom_client_Style$Display_2_classLit, null);
function Style$Display$16(){
    Style$Display.call(this, 'TABLE_ROW', 15);
}

defineClass(619, 59, $intern_82, Style$Display$16);
var Lcom_google_gwt_dom_client_Style$Display$16_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/16', 619, Lcom_google_gwt_dom_client_Style$Display_2_classLit, null);
function Style$Display$17(){
    Style$Display.call(this, 'INITIAL', 16);
}

defineClass(620, 59, $intern_82, Style$Display$17);
var Lcom_google_gwt_dom_client_Style$Display$17_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/17', 620, Lcom_google_gwt_dom_client_Style$Display_2_classLit, null);
function Style$Display$2(){
    Style$Display.call(this, 'BLOCK', 1);
}

defineClass(605, 59, $intern_82, Style$Display$2);
var Lcom_google_gwt_dom_client_Style$Display$2_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/2', 605, Lcom_google_gwt_dom_client_Style$Display_2_classLit, null);
function Style$Display$3(){
    Style$Display.call(this, 'INLINE', 2);
}

defineClass(606, 59, $intern_82, Style$Display$3);
var Lcom_google_gwt_dom_client_Style$Display$3_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/3', 606, Lcom_google_gwt_dom_client_Style$Display_2_classLit, null);
function Style$Display$4(){
    Style$Display.call(this, 'INLINE_BLOCK', 3);
}

defineClass(607, 59, $intern_82, Style$Display$4);
var Lcom_google_gwt_dom_client_Style$Display$4_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/4', 607, Lcom_google_gwt_dom_client_Style$Display_2_classLit, null);
function Style$Display$5(){
    Style$Display.call(this, 'INLINE_TABLE', 4);
}

defineClass(608, 59, $intern_82, Style$Display$5);
var Lcom_google_gwt_dom_client_Style$Display$5_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/5', 608, Lcom_google_gwt_dom_client_Style$Display_2_classLit, null);
function Style$Display$6(){
    Style$Display.call(this, 'LIST_ITEM', 5);
}

defineClass(609, 59, $intern_82, Style$Display$6);
var Lcom_google_gwt_dom_client_Style$Display$6_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/6', 609, Lcom_google_gwt_dom_client_Style$Display_2_classLit, null);
function Style$Display$7(){
    Style$Display.call(this, 'RUN_IN', 6);
}

defineClass(610, 59, $intern_82, Style$Display$7);
var Lcom_google_gwt_dom_client_Style$Display$7_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/7', 610, Lcom_google_gwt_dom_client_Style$Display_2_classLit, null);
function Style$Display$8(){
    Style$Display.call(this, 'TABLE', 7);
}

defineClass(611, 59, $intern_82, Style$Display$8);
var Lcom_google_gwt_dom_client_Style$Display$8_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/8', 611, Lcom_google_gwt_dom_client_Style$Display_2_classLit, null);
function Style$Display$9(){
    Style$Display.call(this, 'TABLE_CAPTION', 8);
}

defineClass(612, 59, $intern_82, Style$Display$9);
var Lcom_google_gwt_dom_client_Style$Display$9_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/9', 612, Lcom_google_gwt_dom_client_Style$Display_2_classLit, null);
function $clinit_Style$Overflow(){
    $clinit_Style$Overflow = emptyMethod;
    VISIBLE = new Style$Overflow$1;
    HIDDEN = new Style$Overflow$2;
    SCROLL = new Style$Overflow$3;
    AUTO = new Style$Overflow$4;
}

function Style$Overflow(enum$name, enum$ordinal){
    Enum.call(this, enum$name, enum$ordinal);
}

function values_2(){
    $clinit_Style$Overflow();
    return initValues(getClassLiteralForArray(Lcom_google_gwt_dom_client_Style$Overflow_2_classLit, 1), $intern_1, 170, 0, [VISIBLE, HIDDEN, SCROLL, AUTO]);
}

defineClass(170, 40, $intern_83);
var AUTO, HIDDEN, SCROLL, VISIBLE;
var Lcom_google_gwt_dom_client_Style$Overflow_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Overflow', 170, Ljava_lang_Enum_2_classLit, values_2);
function Style$Overflow$1(){
    Style$Overflow.call(this, 'VISIBLE', 0);
}

defineClass(621, 170, $intern_83, Style$Overflow$1);
var Lcom_google_gwt_dom_client_Style$Overflow$1_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Overflow/1', 621, Lcom_google_gwt_dom_client_Style$Overflow_2_classLit, null);
function Style$Overflow$2(){
    Style$Overflow.call(this, 'HIDDEN', 1);
}

defineClass(622, 170, $intern_83, Style$Overflow$2);
var Lcom_google_gwt_dom_client_Style$Overflow$2_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Overflow/2', 622, Lcom_google_gwt_dom_client_Style$Overflow_2_classLit, null);
function Style$Overflow$3(){
    Style$Overflow.call(this, 'SCROLL', 2);
}

defineClass(623, 170, $intern_83, Style$Overflow$3);
var Lcom_google_gwt_dom_client_Style$Overflow$3_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Overflow/3', 623, Lcom_google_gwt_dom_client_Style$Overflow_2_classLit, null);
function Style$Overflow$4(){
    Style$Overflow.call(this, 'AUTO', 3);
}

defineClass(624, 170, $intern_83, Style$Overflow$4);
var Lcom_google_gwt_dom_client_Style$Overflow$4_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Overflow/4', 624, Lcom_google_gwt_dom_client_Style$Overflow_2_classLit, null);
function $clinit_Style$Position(){
    $clinit_Style$Position = emptyMethod;
    STATIC = new Style$Position$1;
    RELATIVE = new Style$Position$2;
    ABSOLUTE = new Style$Position$3;
    FIXED = new Style$Position$4;
}

function Style$Position(enum$name, enum$ordinal){
    Enum.call(this, enum$name, enum$ordinal);
}

function values_3(){
    $clinit_Style$Position();
    return initValues(getClassLiteralForArray(Lcom_google_gwt_dom_client_Style$Position_2_classLit, 1), $intern_1, 171, 0, [STATIC, RELATIVE, ABSOLUTE, FIXED]);
}

defineClass(171, 40, $intern_84);
var ABSOLUTE, FIXED, RELATIVE, STATIC;
var Lcom_google_gwt_dom_client_Style$Position_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Position', 171, Ljava_lang_Enum_2_classLit, values_3);
function Style$Position$1(){
    Style$Position.call(this, 'STATIC', 0);
}

defineClass(625, 171, $intern_84, Style$Position$1);
var Lcom_google_gwt_dom_client_Style$Position$1_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Position/1', 625, Lcom_google_gwt_dom_client_Style$Position_2_classLit, null);
function Style$Position$2(){
    Style$Position.call(this, 'RELATIVE', 1);
}

defineClass(626, 171, $intern_84, Style$Position$2);
var Lcom_google_gwt_dom_client_Style$Position$2_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Position/2', 626, Lcom_google_gwt_dom_client_Style$Position_2_classLit, null);
function Style$Position$3(){
    Style$Position.call(this, 'ABSOLUTE', 2);
}

defineClass(627, 171, $intern_84, Style$Position$3);
var Lcom_google_gwt_dom_client_Style$Position$3_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Position/3', 627, Lcom_google_gwt_dom_client_Style$Position_2_classLit, null);
function Style$Position$4(){
    Style$Position.call(this, 'FIXED', 3);
}

defineClass(628, 171, $intern_84, Style$Position$4);
var Lcom_google_gwt_dom_client_Style$Position$4_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Position/4', 628, Lcom_google_gwt_dom_client_Style$Position_2_classLit, null);
function $clinit_Style$TextAlign(){
    $clinit_Style$TextAlign = emptyMethod;
    CENTER = new Style$TextAlign$1;
    JUSTIFY = new Style$TextAlign$2;
    LEFT = new Style$TextAlign$3;
    RIGHT = new Style$TextAlign$4;
}

function Style$TextAlign(enum$name, enum$ordinal){
    Enum.call(this, enum$name, enum$ordinal);
}

function values_4(){
    $clinit_Style$TextAlign();
    return initValues(getClassLiteralForArray(Lcom_google_gwt_dom_client_Style$TextAlign_2_classLit, 1), $intern_1, 172, 0, [CENTER, JUSTIFY, LEFT, RIGHT]);
}

defineClass(172, 40, $intern_85);
var CENTER, JUSTIFY, LEFT, RIGHT;
var Lcom_google_gwt_dom_client_Style$TextAlign_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/TextAlign', 172, Ljava_lang_Enum_2_classLit, values_4);
function Style$TextAlign$1(){
    Style$TextAlign.call(this, 'CENTER', 0);
}

defineClass(629, 172, $intern_85, Style$TextAlign$1);
var Lcom_google_gwt_dom_client_Style$TextAlign$1_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/TextAlign/1', 629, Lcom_google_gwt_dom_client_Style$TextAlign_2_classLit, null);
function Style$TextAlign$2(){
    Style$TextAlign.call(this, 'JUSTIFY', 1);
}

defineClass(630, 172, $intern_85, Style$TextAlign$2);
var Lcom_google_gwt_dom_client_Style$TextAlign$2_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/TextAlign/2', 630, Lcom_google_gwt_dom_client_Style$TextAlign_2_classLit, null);
function Style$TextAlign$3(){
    Style$TextAlign.call(this, 'LEFT', 2);
}

defineClass(631, 172, $intern_85, Style$TextAlign$3);
var Lcom_google_gwt_dom_client_Style$TextAlign$3_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/TextAlign/3', 631, Lcom_google_gwt_dom_client_Style$TextAlign_2_classLit, null);
function Style$TextAlign$4(){
    Style$TextAlign.call(this, 'RIGHT', 3);
}

defineClass(632, 172, $intern_85, Style$TextAlign$4);
var Lcom_google_gwt_dom_client_Style$TextAlign$4_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/TextAlign/4', 632, Lcom_google_gwt_dom_client_Style$TextAlign_2_classLit, null);
function $clinit_Style$Unit(){
    $clinit_Style$Unit = emptyMethod;
    PX = new Style$Unit$1;
    PCT = new Style$Unit$2;
    EM = new Style$Unit$3;
    EX = new Style$Unit$4;
    PT = new Style$Unit$5;
    PC = new Style$Unit$6;
    IN = new Style$Unit$7;
    CM = new Style$Unit$8;
    MM = new Style$Unit$9;
}

function Style$Unit(enum$name, enum$ordinal){
    Enum.call(this, enum$name, enum$ordinal);
}

function values_5(){
    $clinit_Style$Unit();
    return initValues(getClassLiteralForArray(Lcom_google_gwt_dom_client_Style$Unit_2_classLit, 1), $intern_1, 103, 0, [PX, PCT, EM, EX, PT, PC, IN, CM, MM]);
}

defineClass(103, 40, $intern_86);
var CM, EM, EX, IN, MM, PC, PCT, PT, PX;
var Lcom_google_gwt_dom_client_Style$Unit_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit', 103, Ljava_lang_Enum_2_classLit, values_5);
function Style$Unit$1(){
    Style$Unit.call(this, 'PX', 0);
}

defineClass(595, 103, $intern_86, Style$Unit$1);
var Lcom_google_gwt_dom_client_Style$Unit$1_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit/1', 595, Lcom_google_gwt_dom_client_Style$Unit_2_classLit, null);
function Style$Unit$2(){
    Style$Unit.call(this, 'PCT', 1);
}

defineClass(596, 103, $intern_86, Style$Unit$2);
var Lcom_google_gwt_dom_client_Style$Unit$2_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit/2', 596, Lcom_google_gwt_dom_client_Style$Unit_2_classLit, null);
function Style$Unit$3(){
    Style$Unit.call(this, 'EM', 2);
}

defineClass(597, 103, $intern_86, Style$Unit$3);
var Lcom_google_gwt_dom_client_Style$Unit$3_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit/3', 597, Lcom_google_gwt_dom_client_Style$Unit_2_classLit, null);
function Style$Unit$4(){
    Style$Unit.call(this, 'EX', 3);
}

defineClass(598, 103, $intern_86, Style$Unit$4);
var Lcom_google_gwt_dom_client_Style$Unit$4_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit/4', 598, Lcom_google_gwt_dom_client_Style$Unit_2_classLit, null);
function Style$Unit$5(){
    Style$Unit.call(this, 'PT', 4);
}

defineClass(599, 103, $intern_86, Style$Unit$5);
var Lcom_google_gwt_dom_client_Style$Unit$5_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit/5', 599, Lcom_google_gwt_dom_client_Style$Unit_2_classLit, null);
function Style$Unit$6(){
    Style$Unit.call(this, 'PC', 5);
}

defineClass(600, 103, $intern_86, Style$Unit$6);
var Lcom_google_gwt_dom_client_Style$Unit$6_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit/6', 600, Lcom_google_gwt_dom_client_Style$Unit_2_classLit, null);
function Style$Unit$7(){
    Style$Unit.call(this, 'IN', 6);
}

defineClass(601, 103, $intern_86, Style$Unit$7);
var Lcom_google_gwt_dom_client_Style$Unit$7_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit/7', 601, Lcom_google_gwt_dom_client_Style$Unit_2_classLit, null);
function Style$Unit$8(){
    Style$Unit.call(this, 'CM', 7);
}

defineClass(602, 103, $intern_86, Style$Unit$8);
var Lcom_google_gwt_dom_client_Style$Unit$8_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit/8', 602, Lcom_google_gwt_dom_client_Style$Unit_2_classLit, null);
function Style$Unit$9(){
    Style$Unit.call(this, 'MM', 8);
}

defineClass(603, 103, $intern_86, Style$Unit$9);
var Lcom_google_gwt_dom_client_Style$Unit$9_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit/9', 603, Lcom_google_gwt_dom_client_Style$Unit_2_classLit, null);
defineClass(869, 1, {});
_.toString$ = function toString_74(){
    return 'An event type';
}
;
var Lcom_google_web_bindery_event_shared_Event_2_classLit = createForClass('com.google.web.bindery.event.shared', 'Event', 869, Ljava_lang_Object_2_classLit);
function $overrideSource(this$static, source){
    this$static.source = source;
}

defineClass(870, 869, {});
_.revive = function revive(){
    this.dead = false;
    this.source = null;
}
;
_.dead = false;
var Lcom_google_gwt_event_shared_GwtEvent_2_classLit = createForClass('com.google.gwt.event.shared', 'GwtEvent', 870, Lcom_google_web_bindery_event_shared_Event_2_classLit);
function $setNativeEvent(this$static, nativeEvent){
    this$static.nativeEvent = nativeEvent;
}

function $setRelativeElement(this$static, relativeElem){
    this$static.relativeElem = relativeElem;
}

function fireNativeEvent(nativeEvent, handlerSource, relativeElem){
    var currentNative, currentRelativeElem, type_0, type$iterator, types;
    if (registered) {
        types = dynamicCast($unsafeGet(registered, nativeEvent.type), 88);
        if (types) {
            for (type$iterator = types.iterator_1(); type$iterator.hasNext();) {
                type_0 = dynamicCast(type$iterator.next_2(), 182);
                currentNative = type_0.flyweight.nativeEvent;
                currentRelativeElem = type_0.flyweight.relativeElem;
                $setNativeEvent(type_0.flyweight, nativeEvent);
                $setRelativeElement(type_0.flyweight, relativeElem);
                $fireEvent_0(handlerSource, type_0.flyweight);
                $setNativeEvent(type_0.flyweight, currentNative);
                $setRelativeElement(type_0.flyweight, currentRelativeElem);
            }
        }
    }
}

defineClass(885, 870, {});
_.getAssociatedType = function getAssociatedType(){
    return this.getAssociatedType_0();
}
;
var registered;
var Lcom_google_gwt_event_dom_client_DomEvent_2_classLit = createForClass('com.google.gwt.event.dom.client', 'DomEvent', 885, Lcom_google_gwt_event_shared_GwtEvent_2_classLit);
defineClass(886, 885, {});
var Lcom_google_gwt_event_dom_client_HumanInputEvent_2_classLit = createForClass('com.google.gwt.event.dom.client', 'HumanInputEvent', 886, Lcom_google_gwt_event_dom_client_DomEvent_2_classLit);
defineClass(887, 886, {});
var Lcom_google_gwt_event_dom_client_MouseEvent_2_classLit = createForClass('com.google.gwt.event.dom.client', 'MouseEvent', 887, Lcom_google_gwt_event_dom_client_HumanInputEvent_2_classLit);
function $clinit_ClickEvent(){
    $clinit_ClickEvent = emptyMethod;
    TYPE = new DomEvent$Type('click', new ClickEvent);
}

function ClickEvent(){
}

defineClass(736, 887, {}, ClickEvent);
_.dispatch = function dispatch(handler){
    $onClick(dynamicCast(handler, 899));
}
;
_.getAssociatedType_0 = function getAssociatedType_0(){
    return TYPE;
}
;
var TYPE;
var Lcom_google_gwt_event_dom_client_ClickEvent_2_classLit = createForClass('com.google.gwt.event.dom.client', 'ClickEvent', 736, Lcom_google_gwt_event_dom_client_MouseEvent_2_classLit);
defineClass(549, 1, {});
_.hashCode$ = function hashCode_61(){
    return this.index_0;
}
;
_.toString$ = function toString_75(){
    return 'Event type';
}
;
_.index_0 = 0;
var nextHashCode = 0;
var Lcom_google_web_bindery_event_shared_Event$Type_2_classLit = createForClass('com.google.web.bindery.event.shared', 'Event/Type', 549, Ljava_lang_Object_2_classLit);
function GwtEvent$Type(){
    this.index_0 = ++nextHashCode;
}

defineClass(214, 549, {}, GwtEvent$Type);
var Lcom_google_gwt_event_shared_GwtEvent$Type_2_classLit = createForClass('com.google.gwt.event.shared', 'GwtEvent/Type', 214, Lcom_google_web_bindery_event_shared_Event$Type_2_classLit);
function DomEvent$Type(eventName, flyweight){
    var types;
    GwtEvent$Type.call(this);
    this.flyweight = flyweight;
    !registered && (registered = new PrivateMap);
    types = dynamicCast($unsafeGet(registered, eventName), 88);
    if (!types) {
        types = new ArrayList;
        $unsafePut(registered, eventName, types);
    }
    types.add_3(this);
    this.name_0 = eventName;
}

defineClass(182, 214, {182:1}, DomEvent$Type);
var Lcom_google_gwt_event_dom_client_DomEvent$Type_2_classLit = createForClass('com.google.gwt.event.dom.client', 'DomEvent/Type', 182, Lcom_google_gwt_event_shared_GwtEvent$Type_2_classLit);
function $clinit_MouseDownEvent(){
    $clinit_MouseDownEvent = emptyMethod;
    TYPE_0 = new DomEvent$Type('mousedown', new MouseDownEvent);
}

function MouseDownEvent(){
}

defineClass(776, 887, {}, MouseDownEvent);
_.dispatch = function dispatch_0(handler){
    dynamicCast(handler, 524).onMouseDown(this);
}
;
_.getAssociatedType_0 = function getAssociatedType_1(){
    return TYPE_0;
}
;
var TYPE_0;
var Lcom_google_gwt_event_dom_client_MouseDownEvent_2_classLit = createForClass('com.google.gwt.event.dom.client', 'MouseDownEvent', 776, Lcom_google_gwt_event_dom_client_MouseEvent_2_classLit);
function $clinit_MouseMoveEvent(){
    $clinit_MouseMoveEvent = emptyMethod;
    TYPE_1 = new DomEvent$Type('mousemove', new MouseMoveEvent);
}

function MouseMoveEvent(){
}

defineClass(778, 887, {}, MouseMoveEvent);
_.dispatch = function dispatch_1(handler){
    dynamicCast(handler, 522).onMouseMove(this);
}
;
_.getAssociatedType_0 = function getAssociatedType_2(){
    return TYPE_1;
}
;
var TYPE_1;
var Lcom_google_gwt_event_dom_client_MouseMoveEvent_2_classLit = createForClass('com.google.gwt.event.dom.client', 'MouseMoveEvent', 778, Lcom_google_gwt_event_dom_client_MouseEvent_2_classLit);
function $clinit_MouseUpEvent(){
    $clinit_MouseUpEvent = emptyMethod;
    TYPE_2 = new DomEvent$Type('mouseup', new MouseUpEvent);
}

function MouseUpEvent(){
}

defineClass(777, 887, {}, MouseUpEvent);
_.dispatch = function dispatch_2(handler){
    dynamicCast(handler, 523).onMouseUp(this);
}
;
_.getAssociatedType_0 = function getAssociatedType_3(){
    return TYPE_2;
}
;
var TYPE_2;
var Lcom_google_gwt_event_dom_client_MouseUpEvent_2_classLit = createForClass('com.google.gwt.event.dom.client', 'MouseUpEvent', 777, Lcom_google_gwt_event_dom_client_MouseEvent_2_classLit);
function $unsafeGet(this$static, key){
    return this$static.map_0[key];
}

function $unsafePut(this$static, key, value_0){
    this$static.map_0[key] = value_0;
}

function PrivateMap(){
    this.map_0 = {};
}

defineClass(779, 1, {}, PrivateMap);
var Lcom_google_gwt_event_dom_client_PrivateMap_2_classLit = createForClass('com.google.gwt.event.dom.client', 'PrivateMap', 779, Ljava_lang_Object_2_classLit);
defineClass(892, 886, {});
var impl;
var Lcom_google_gwt_event_dom_client_TouchEvent_2_classLit = createForClass('com.google.gwt.event.dom.client', 'TouchEvent', 892, Lcom_google_gwt_event_dom_client_HumanInputEvent_2_classLit);
function $clinit_TouchCancelEvent(){
    $clinit_TouchCancelEvent = emptyMethod;
    TYPE_3 = new DomEvent$Type('touchcancel', new TouchCancelEvent);
}

function TouchCancelEvent(){
}

defineClass(818, 892, {}, TouchCancelEvent);
_.dispatch = function dispatch_3(handler){
    $onTouchEnd(dynamicCast(handler, 905).this$01);
}
;
_.getAssociatedType_0 = function getAssociatedType_4(){
    return TYPE_3;
}
;
var TYPE_3;
var Lcom_google_gwt_event_dom_client_TouchCancelEvent_2_classLit = createForClass('com.google.gwt.event.dom.client', 'TouchCancelEvent', 818, Lcom_google_gwt_event_dom_client_TouchEvent_2_classLit);
function $clinit_TouchEndEvent(){
    $clinit_TouchEndEvent = emptyMethod;
    TYPE_4 = new DomEvent$Type('touchend', new TouchEndEvent);
}

function TouchEndEvent(){
}

defineClass(817, 892, {}, TouchEndEvent);
_.dispatch = function dispatch_4(handler){
    $onTouchEnd(dynamicCast(handler, 904).this$01);
}
;
_.getAssociatedType_0 = function getAssociatedType_5(){
    return TYPE_4;
}
;
var TYPE_4;
var Lcom_google_gwt_event_dom_client_TouchEndEvent_2_classLit = createForClass('com.google.gwt.event.dom.client', 'TouchEndEvent', 817, Lcom_google_gwt_event_dom_client_TouchEvent_2_classLit);
function TouchEvent$TouchSupportDetector(){
    var elem;
    this.isSupported = (elem = document.createElement('div') , elem.setAttribute('ontouchstart', 'return;') , typeof elem.ontouchstart == 'function');
}

defineClass(815, 1, {}, TouchEvent$TouchSupportDetector);
_.isSupported = false;
var Lcom_google_gwt_event_dom_client_TouchEvent$TouchSupportDetector_2_classLit = createForClass('com.google.gwt.event.dom.client', 'TouchEvent/TouchSupportDetector', 815, Ljava_lang_Object_2_classLit);
function $clinit_TouchMoveEvent(){
    $clinit_TouchMoveEvent = emptyMethod;
    TYPE_5 = new DomEvent$Type('touchmove', new TouchMoveEvent);
}

function $dispatch(this$static, handler){
    $onTouchMove(handler.this$01, this$static);
}

function TouchMoveEvent(){
}

defineClass(816, 892, {}, TouchMoveEvent);
_.dispatch = function dispatch_5(handler){
    $dispatch(this, dynamicCast(handler, 903));
}
;
_.getAssociatedType_0 = function getAssociatedType_6(){
    return TYPE_5;
}
;
var TYPE_5;
var Lcom_google_gwt_event_dom_client_TouchMoveEvent_2_classLit = createForClass('com.google.gwt.event.dom.client', 'TouchMoveEvent', 816, Lcom_google_gwt_event_dom_client_TouchEvent_2_classLit);
function $clinit_TouchStartEvent(){
    $clinit_TouchStartEvent = emptyMethod;
    TYPE_6 = new DomEvent$Type('touchstart', new TouchStartEvent);
}

function $dispatch_0(this$static, handler){
    $onTouchStart(handler.this$01, this$static);
}

function TouchStartEvent(){
}

defineClass(814, 892, {}, TouchStartEvent);
_.dispatch = function dispatch_6(handler){
    $dispatch_0(this, dynamicCast(handler, 902));
}
;
_.getAssociatedType_0 = function getAssociatedType_7(){
    return TYPE_6;
}
;
var TYPE_6;
var Lcom_google_gwt_event_dom_client_TouchStartEvent_2_classLit = createForClass('com.google.gwt.event.dom.client', 'TouchStartEvent', 814, Lcom_google_gwt_event_dom_client_TouchEvent_2_classLit);
function $dispatch_1(this$static, handler){
    this$static.attached?$setupBustClickHandler(handler.this$01):$removeBustClickHandler(handler.this$01);
}

function AttachEvent(attached){
    this.attached = attached;
}

function fire_0(source, attached){
    var event_0;
    if (TYPE_7) {
        event_0 = new AttachEvent(attached);
        !!source.handlerManager && $fireEvent(source.handlerManager, event_0);
    }
}

defineClass(784, 870, {}, AttachEvent);
_.dispatch = function dispatch_7(handler){
    $dispatch_1(this, dynamicCast(handler, 901));
}
;
_.getAssociatedType = function getAssociatedType_8(){
    return TYPE_7;
}
;
_.attached = false;
var TYPE_7;
var Lcom_google_gwt_event_logical_shared_AttachEvent_2_classLit = createForClass('com.google.gwt.event.logical.shared', 'AttachEvent', 784, Lcom_google_gwt_event_shared_GwtEvent_2_classLit);
function CloseEvent_0(){
}

function fire_1(source){
    var event_0;
    if (TYPE_8) {
        event_0 = new CloseEvent_0;
        source.fireEvent(event_0);
    }
}

defineClass(838, 870, {}, CloseEvent_0);
_.dispatch = function dispatch_8(handler){
    dynamicCast(handler, 896);
    detachWidgets();
}
;
_.getAssociatedType = function getAssociatedType_9(){
    return TYPE_8;
}
;
var TYPE_8;
var Lcom_google_gwt_event_logical_shared_CloseEvent_2_classLit = createForClass('com.google.gwt.event.logical.shared', 'CloseEvent', 838, Lcom_google_gwt_event_shared_GwtEvent_2_classLit);
function ResizeEvent(){
}

function fire_2(source){
    var event_0;
    if (TYPE_9) {
        event_0 = new ResizeEvent;
        $fireEvent(source, event_0);
    }
}

defineClass(783, 870, {}, ResizeEvent);
_.dispatch = function dispatch_9(handler){
    dynamicCast(handler, 850).onResize(this);
}
;
_.getAssociatedType = function getAssociatedType_10(){
    return TYPE_9;
}
;
var TYPE_9;
var Lcom_google_gwt_event_logical_shared_ResizeEvent_2_classLit = createForClass('com.google.gwt.event.logical.shared', 'ResizeEvent', 783, Lcom_google_gwt_event_shared_GwtEvent_2_classLit);
function $dispatch_2(handler){
    handler.this$01.autoHideOnHistoryEvents && $hide(handler.this$01);
}

function ValueChangeEvent(){
}

function fire_3(source){
    var event_0;
    if (TYPE_10) {
        event_0 = new ValueChangeEvent;
        $fireEvent(source.handlers, event_0);
    }
}

defineClass(819, 870, {}, ValueChangeEvent);
_.dispatch = function dispatch_10(handler){
    $dispatch_2(dynamicCast(handler, 898));
}
;
_.getAssociatedType = function getAssociatedType_11(){
    return TYPE_10;
}
;
var TYPE_10;
var Lcom_google_gwt_event_logical_shared_ValueChangeEvent_2_classLit = createForClass('com.google.gwt.event.logical.shared', 'ValueChangeEvent', 819, Lcom_google_gwt_event_shared_GwtEvent_2_classLit);
function $addHandler(this$static, type_0, handler){
    return new LegacyHandlerWrapper($doAdd(this$static.eventBus, type_0, handler));
}

function $fireEvent(this$static, event_0){
    var e, oldSource;
    !event_0.dead || event_0.revive();
    oldSource = event_0.source;
    $overrideSource(event_0, this$static.source);
    try {
        $doFire(this$static.eventBus, event_0);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 253)) {
            e = $e0;
            throw new UmbrellaException_0(e.causes);
        }
        else 
            throw unwrap($e0);
    }
    finally {
        oldSource == null?(event_0.dead = true , event_0.source = null):(event_0.source = oldSource);
    }
}

function $isEventHandled(this$static, e){
    return $isEventHandled_0(this$static.eventBus, e);
}

function HandlerManager(source){
    HandlerManager_0.call(this, source, false);
}

function HandlerManager_0(source, fireInReverseOrder){
    this.eventBus = new HandlerManager$Bus(fireInReverseOrder);
    this.source = source;
}

defineClass(240, 1, {100:1}, HandlerManager, HandlerManager_0);
_.fireEvent = function fireEvent(event_0){
    $fireEvent(this, event_0);
}
;
var Lcom_google_gwt_event_shared_HandlerManager_2_classLit = createForClass('com.google.gwt.event.shared', 'HandlerManager', 240, Ljava_lang_Object_2_classLit);
defineClass(871, 1, {});
var Lcom_google_web_bindery_event_shared_EventBus_2_classLit = createForClass('com.google.web.bindery.event.shared', 'EventBus', 871, Ljava_lang_Object_2_classLit);
function $defer(this$static, command){
    !this$static.deferredDeltas && (this$static.deferredDeltas = new ArrayList);
    $add_16(this$static.deferredDeltas, command);
}

function $doAdd(this$static, type_0, handler){
    if (!type_0) {
        throw new NullPointerException_0('Cannot add a handler with a null type');
    }
    if (!handler) {
        throw new NullPointerException_0('Cannot add a null handler');
    }
    this$static.firingDepth > 0?$defer(this$static, new SimpleEventBus$2(this$static, type_0, handler)):$doAddNow(this$static, type_0, null, handler);
    return new SimpleEventBus$1(this$static, type_0, handler);
}

function $doAddNow(this$static, type_0, source, handler){
    var l;
    l = $ensureHandlerList(this$static, type_0, source);
    l.add_3(handler);
}

function $doFire(this$static, event_0){
    var causes, e, handler, handlers, it;
    if (!event_0) {
        throw new NullPointerException_0('Cannot fire null event');
    }
    try {
        ++this$static.firingDepth;
        handlers = $getDispatchList(this$static, event_0.getAssociatedType());
        causes = null;
        it = this$static.isReverseOrder?handlers.listIterator_0(handlers.size_1()):handlers.listIterator();
        while (this$static.isReverseOrder?it.hasPrevious():it.hasNext()) {
            handler = this$static.isReverseOrder?it.previous():it.next_2();
            try {
                event_0.dispatch(dynamicCast(handler, 135));
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (instanceOf($e0, 37)) {
                    e = $e0;
                    !causes && (causes = new HashSet);
                    $add_17(causes, e);
                }
                else 
                    throw unwrap($e0);
            }
        }
        if (causes) {
            throw new UmbrellaException(causes);
        }
    }
    finally {
        --this$static.firingDepth;
        this$static.firingDepth == 0 && $handleQueuedAddsAndRemoves(this$static);
    }
}

function $doRemoveNow(this$static, type_0, source, handler){
    var l, removed, sourceMap;
    l = $getHandlerList(this$static, type_0, source);
    removed = l.remove_1(handler);
    removed && l.isEmpty() && (sourceMap = dynamicCast($get_0(this$static.map_0, type_0), 236) , dynamicCast(sourceMap.remove_2(source), 88) , sourceMap.isEmpty() && $remove_4(this$static.map_0, type_0) , undefined);
}

function $ensureHandlerList(this$static, type_0, source){
    var handlers, sourceMap;
    sourceMap = dynamicCast($get_0(this$static.map_0, type_0), 236);
    if (!sourceMap) {
        sourceMap = new HashMap;
        $put_0(this$static.map_0, type_0, sourceMap);
    }
    handlers = dynamicCast(sourceMap.get_0(source), 88);
    if (!handlers) {
        handlers = new ArrayList;
        sourceMap.put(source, handlers);
    }
    return handlers;
}

function $getDispatchList(this$static, type_0){
    var directHandlers;
    directHandlers = $getHandlerList(this$static, type_0, null);
    return directHandlers;
}

function $getHandlerList(this$static, type_0, source){
    var handlers, sourceMap;
    sourceMap = dynamicCast($get_0(this$static.map_0, type_0), 236);
    if (!sourceMap) {
        return $clinit_Collections() , $clinit_Collections() , EMPTY_LIST;
    }
    handlers = dynamicCast(sourceMap.get_0(source), 88);
    if (!handlers) {
        return $clinit_Collections() , $clinit_Collections() , EMPTY_LIST;
    }
    return handlers;
}

function $handleQueuedAddsAndRemoves(this$static){
    var c, c$iterator;
    if (this$static.deferredDeltas) {
        try {
            for (c$iterator = new AbstractList$IteratorImpl(this$static.deferredDeltas); c$iterator.i < c$iterator.this$01_0.size_1();) {
                c = (checkCriticalElement(c$iterator.i < c$iterator.this$01_0.size_1()) , dynamicCast(c$iterator.this$01_0.get_1(c$iterator.last = c$iterator.i++), 849));
                c.execute_2();
            }
        }
        finally {
            this$static.deferredDeltas = null;
        }
    }
}

function $isEventHandled_0(this$static, eventKey){
    return $containsKey(this$static.map_0, eventKey);
}

defineClass(550, 871, {});
_.firingDepth = 0;
_.isReverseOrder = false;
var Lcom_google_web_bindery_event_shared_SimpleEventBus_2_classLit = createForClass('com.google.web.bindery.event.shared', 'SimpleEventBus', 550, Lcom_google_web_bindery_event_shared_EventBus_2_classLit);
function $doRemove(this$static, type_0, source, handler){
    this$static.firingDepth > 0?$defer(this$static, new SimpleEventBus$3(this$static, type_0, source, handler)):$doRemoveNow(this$static, type_0, source, handler);
}

function HandlerManager$Bus(fireInReverseOrder){
    this.map_0 = new HashMap;
    this.isReverseOrder = fireInReverseOrder;
}

defineClass(551, 550, {}, HandlerManager$Bus);
var Lcom_google_gwt_event_shared_HandlerManager$Bus_2_classLit = createForClass('com.google.gwt.event.shared', 'HandlerManager/Bus', 551, Lcom_google_web_bindery_event_shared_SimpleEventBus_2_classLit);
function LegacyHandlerWrapper(real){
    this.real = real;
}

defineClass(780, 1, {900:1}, LegacyHandlerWrapper);
var Lcom_google_gwt_event_shared_LegacyHandlerWrapper_2_classLit = createForClass('com.google.gwt.event.shared', 'LegacyHandlerWrapper', 780, Ljava_lang_Object_2_classLit);
function UmbrellaException(causes){
    RuntimeException_1.call(this, makeMessage(causes), makeCause(causes));
    this.causes = causes;
}

function makeCause(causes){
    var iterator;
    iterator = causes.iterator_1();
    if (!iterator.hasNext()) {
        return null;
    }
    return dynamicCast(iterator.next_2(), 37);
}

function makeMessage(causes){
    var b, count, first, t, t$iterator;
    count = causes.size_1();
    if (count == 0) {
        return null;
    }
    b = new StringBuilder_1(count == 1?'Exception caught: ':count + ' exceptions caught: ');
    first = true;
    for (t$iterator = causes.iterator_1(); t$iterator.hasNext();) {
        t = dynamicCast(t$iterator.next_2(), 37);
        first?(first = false):(b.string += '; ' , b);
        $append_10(b, t.getMessage());
    }
    return b.string;
}

defineClass(253, 35, $intern_87, UmbrellaException);
var Lcom_google_web_bindery_event_shared_UmbrellaException_2_classLit = createForClass('com.google.web.bindery.event.shared', 'UmbrellaException', 253, Ljava_lang_RuntimeException_2_classLit);
function UmbrellaException_0(causes){
    UmbrellaException.call(this, causes);
}

defineClass(448, 253, $intern_87, UmbrellaException_0);
var Lcom_google_gwt_event_shared_UmbrellaException_2_classLit = createForClass('com.google.gwt.event.shared', 'UmbrellaException', 448, Lcom_google_web_bindery_event_shared_UmbrellaException_2_classLit);
function $cancel_1(this$static){
    var xhr;
    if (!this$static.xmlHttpRequest) {
        return;
    }
    $cancel(this$static.timer);
    xhr = this$static.xmlHttpRequest;
    this$static.xmlHttpRequest = null;
    $clearOnReadyStateChange(xhr);
    xhr.abort();
}

function $fireOnResponseReceived(this$static, callback){
    var response, xhr;
    if (!this$static.xmlHttpRequest) {
        return;
    }
    $cancel(this$static.timer);
    xhr = this$static.xmlHttpRequest;
    this$static.xmlHttpRequest = null;
    response = new ResponseImpl(xhr);
    callback.onResponseReceived(this$static, response);
}

function $fireOnTimeout(this$static){
    if (!this$static.xmlHttpRequest) {
        return;
    }
    $cancel_1(this$static);
    this$static.callback.onError(this$static, new RequestTimeoutException(this$static.timeoutMillis));
}

function Request(xmlHttpRequest, timeoutMillis, callback){
    this.timer = new Request$1(this);
    if (!xmlHttpRequest) {
        throw new NullPointerException;
    }
    if (timeoutMillis < 0) {
        throw new IllegalArgumentException;
    }
    this.callback = callback;
    this.timeoutMillis = timeoutMillis;
    this.xmlHttpRequest = xmlHttpRequest;
    timeoutMillis > 0 && $schedule(this.timer, timeoutMillis);
}

defineClass(584, 1, {}, Request);
_.timeoutMillis = 0;
var Lcom_google_gwt_http_client_Request_2_classLit = createForClass('com.google.gwt.http.client', 'Request', 584, Ljava_lang_Object_2_classLit);
function Request$1(this$0){
    this.this$01 = this$0;
    Timer.call(this);
}

defineClass(585, 366, {}, Request$1);
_.run_0 = function run_1(){
    $fireOnTimeout(this.this$01);
}
;
var Lcom_google_gwt_http_client_Request$1_2_classLit = createForClass('com.google.gwt.http.client', 'Request/1', 585, Lcom_google_gwt_user_client_Timer_2_classLit);
function $clinit_RequestBuilder(){
    $clinit_RequestBuilder = emptyMethod;
    new RequestBuilder$Method('DELETE');
    GET = new RequestBuilder$Method('GET');
    new RequestBuilder$Method('HEAD');
    new RequestBuilder$Method('POST');
    new RequestBuilder$Method('PUT');
}

function $doSend(this$static, callback){
    var e, request, requestPermissionException, xmlHttpRequest;
    xmlHttpRequest = new $wnd.XMLHttpRequest;
    try {
        $open_2(xmlHttpRequest, this$static.httpMethod, this$static.url_0);
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 119)) {
            e = $e0;
            requestPermissionException = new RequestPermissionException(this$static.url_0);
            $initCause(requestPermissionException, new RequestException(e.getMessage()));
            throw requestPermissionException;
        }
        else 
            throw unwrap($e0);
    }
    xmlHttpRequest.setRequestHeader('Content-Type', 'text/plain; charset=utf-8');
    this$static.includeCredentials && (xmlHttpRequest.withCredentials = true , undefined);
    request = new Request(xmlHttpRequest, this$static.timeoutMillis, callback);
    $setOnReadyStateChange(xmlHttpRequest, new RequestBuilder$1(request, callback));
    try {
        xmlHttpRequest.send(null);
    }
    catch ($e1) {
        $e1 = wrap_0($e1);
        if (instanceOf($e1, 119)) {
            e = $e1;
            throw new RequestException(e.getMessage());
        }
        else 
            throw unwrap($e1);
    }
    return request;
}

function RequestBuilder(httpMethod, url_0){
    $clinit_RequestBuilder();
    RequestBuilder_0.call(this, !httpMethod?null:httpMethod.name_0, url_0);
}

function RequestBuilder_0(httpMethod, url_0){
    throwIfEmptyOrNull('httpMethod', httpMethod);
    throwIfEmptyOrNull('url', url_0);
    this.httpMethod = httpMethod;
    this.url_0 = url_0;
}

defineClass(428, 1, {}, RequestBuilder);
_.includeCredentials = false;
_.timeoutMillis = 0;
var GET;
var Lcom_google_gwt_http_client_RequestBuilder_2_classLit = createForClass('com.google.gwt.http.client', 'RequestBuilder', 428, Ljava_lang_Object_2_classLit);
function RequestBuilder$1(val$request, val$callback){
    this.val$request2 = val$request;
    this.val$callback3 = val$callback;
}

defineClass(583, 1, {}, RequestBuilder$1);
_.onReadyStateChange = function onReadyStateChange(xhr){
    if (xhr.readyState == 4) {
        $clearOnReadyStateChange(xhr);
        $fireOnResponseReceived(this.val$request2, this.val$callback3);
    }
}
;
var Lcom_google_gwt_http_client_RequestBuilder$1_2_classLit = createForClass('com.google.gwt.http.client', 'RequestBuilder/1', 583, Ljava_lang_Object_2_classLit);
function RequestBuilder$Method(name_0){
    this.name_0 = name_0;
}

defineClass(281, 1, {}, RequestBuilder$Method);
_.toString$ = function toString_76(){
    return this.name_0;
}
;
var Lcom_google_gwt_http_client_RequestBuilder$Method_2_classLit = createForClass('com.google.gwt.http.client', 'RequestBuilder/Method', 281, Ljava_lang_Object_2_classLit);
function RequestException(message){
    Exception_0.call(this, message);
}

defineClass(200, 19, $intern_88, RequestException);
var Lcom_google_gwt_http_client_RequestException_2_classLit = createForClass('com.google.gwt.http.client', 'RequestException', 200, Ljava_lang_Exception_2_classLit);
function RequestPermissionException(url_0){
    RequestException.call(this, 'The URL ' + url_0 + ' is invalid or violates the same-origin security restriction');
}

defineClass(648, 200, $intern_88, RequestPermissionException);
var Lcom_google_gwt_http_client_RequestPermissionException_2_classLit = createForClass('com.google.gwt.http.client', 'RequestPermissionException', 648, Lcom_google_gwt_http_client_RequestException_2_classLit);
function RequestTimeoutException(timeoutMillis){
    RequestException.call(this, 'A request timeout has expired after ' + timeoutMillis + ' ms');
}

defineClass(786, 200, $intern_88, RequestTimeoutException);
var Lcom_google_gwt_http_client_RequestTimeoutException_2_classLit = createForClass('com.google.gwt.http.client', 'RequestTimeoutException', 786, Lcom_google_gwt_http_client_RequestException_2_classLit);
defineClass(877, 1, {});
var Lcom_google_gwt_http_client_Response_2_classLit = createForClass('com.google.gwt.http.client', 'Response', 877, Ljava_lang_Object_2_classLit);
function ResponseImpl(xmlHttpRequest){
    this.xmlHttpRequest = xmlHttpRequest;
}

defineClass(586, 877, {}, ResponseImpl);
var Lcom_google_gwt_http_client_ResponseImpl_2_classLit = createForClass('com.google.gwt.http.client', 'ResponseImpl', 586, Lcom_google_gwt_http_client_Response_2_classLit);
function throwIfEmptyOrNull(name_0, value_0){
    throwIfNull(name_0, value_0);
    if (0 == $trim(value_0).length) {
        throw new IllegalArgumentException_0(name_0 + ' cannot be empty');
    }
}

function throwIfNull(name_0, value_0){
    if (null == value_0) {
        throw new NullPointerException_0(name_0 + ' cannot be null');
    }
}

function getDirectionOnElement(elem){
    var dirPropertyValue;
    dirPropertyValue = $getPropertyString(elem, 'dir');
    if ($equalsIgnoreCase('rtl', dirPropertyValue)) {
        return $clinit_HasDirection$Direction() , RTL;
    }
    else if ($equalsIgnoreCase('ltr', dirPropertyValue)) {
        return $clinit_HasDirection$Direction() , LTR;
    }
    return $clinit_HasDirection$Direction() , DEFAULT;
}

function setDirectionOnElement(elem, direction){
    switch (direction.ordinal) {
        case 0:
            {
                $setPropertyString(elem, 'dir', 'rtl');
                break;
            }

        case 1:
            {
                $setPropertyString(elem, 'dir', 'ltr');
                break;
            }

        case 2:
            {
                getDirectionOnElement(elem) != ($clinit_HasDirection$Direction() , DEFAULT) && $setPropertyString(elem, 'dir', '');
                break;
            }

    }
}

function $clinit_DateTimeFormat(){
    $clinit_DateTimeFormat = emptyMethod;
    new HashMap;
}

function $addPart(this$static, buf, count){
    if (buf.string.length > 0) {
        $add_16(this$static.patternParts, new DateTimeFormat$PatternPart(buf.string, count));
        $setLength_0(buf, 0);
    }
}

function $format_3(this$static, date, timeZone){
    var ch_0, diff, i_0, j, keepDate, keepTime, n, toAppendTo, trailQuote;
    !timeZone && (timeZone = createTimeZone(date.jsdate.getTimezoneOffset()));
    diff = (date.jsdate.getTimezoneOffset() - timeZone.standardOffset) * 60000;
    keepDate = new Date_1(add_11(fromDouble(date.jsdate.getTime()), fromInt(diff)));
    keepTime = keepDate;
    if (keepDate.jsdate.getTimezoneOffset() != date.jsdate.getTimezoneOffset()) {
        diff > 0?(diff -= 86400000):(diff += 86400000);
        keepTime = new Date_1(add_11(fromDouble(date.jsdate.getTime()), fromInt(diff)));
    }
    toAppendTo = new StringBuilder_0;
    n = this$static.pattern.length;
    for (i_0 = 0; i_0 < n;) {
        ch_0 = $charAt_1(this$static.pattern, i_0);
        if (ch_0 >= 97 && ch_0 <= 122 || ch_0 >= 65 && ch_0 <= 90) {
            for (j = i_0 + 1; j < n && $charAt_1(this$static.pattern, j) == ch_0; ++j)
                ;
            $subFormat(toAppendTo, ch_0, j - i_0, keepDate, keepTime, timeZone);
            i_0 = j;
        }
        else if (ch_0 == 39) {
            ++i_0;
            if (i_0 < n && $charAt_1(this$static.pattern, i_0) == 39) {
                toAppendTo.string += "'";
                ++i_0;
                continue;
            }
            trailQuote = false;
            while (!trailQuote) {
                j = i_0;
                while (j < n && $charAt_1(this$static.pattern, j) != 39) {
                    ++j;
                }
                if (j >= n) {
                    throw new IllegalArgumentException_0("Missing trailing '");
                }
                j + 1 < n && $charAt_1(this$static.pattern, j + 1) == 39?++j:(trailQuote = true);
                $append_10(toAppendTo, $substring_1(this$static.pattern, i_0, j));
                i_0 = j + 1;
            }
        }
        else {
            toAppendTo.string += charToString(ch_0);
            ++i_0;
        }
    }
    return toAppendTo.string;
}

function $formatFractionalSeconds(buf, count, date){
    var time, value_0;
    time = fromDouble(date.jsdate.getTime());
    if (lt(time, {l:0, m:0, h:0})) {
        value_0 = $intern_51 - toInt(mod(neg(time), {l:$intern_51, m:0, h:0}));
        value_0 == $intern_51 && (value_0 = 0);
    }
    else {
        value_0 = toInt(mod(time, {l:$intern_51, m:0, h:0}));
    }
    if (count == 1) {
        value_0 = ~~((value_0 + 50) / 100) < 9?~~((value_0 + 50) / 100):9;
        $append_9(buf, 48 + value_0 & $intern_2);
    }
    else if (count == 2) {
        value_0 = ~~((value_0 + 5) / 10) < 99?~~((value_0 + 5) / 10):99;
        $zeroPaddingNumber(buf, value_0, 2);
    }
    else {
        $zeroPaddingNumber(buf, value_0, 3);
        count > 3 && $zeroPaddingNumber(buf, 0, count - 3);
    }
}

function $formatMonth(buf, count, date){
    var value_0;
    value_0 = date.jsdate.getMonth();
    switch (count) {
        case 5:
            $append_10(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'])[value_0]);
            break;
        case 4:
            $append_10(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])[value_0]);
            break;
        case 3:
            $append_10(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])[value_0]);
            break;
        default:$zeroPaddingNumber(buf, value_0 + 1, count);
    }
}

function $formatYear(buf, count, date){
    var value_0;
    value_0 = date.jsdate.getFullYear() - 1900 + 1900;
    value_0 < 0 && (value_0 = -value_0);
    switch (count) {
        case 1:
            buf.string += value_0;
            break;
        case 2:
            $zeroPaddingNumber(buf, value_0 % 100, 2);
            break;
        default:$zeroPaddingNumber(buf, value_0, count);
    }
}

function $getNextCharCountInPattern(start_0){
    var ch_0, next;
    ch_0 = 'HH:mm:ss.SSS'.charCodeAt(start_0);
    next = start_0 + 1;
    while (next < 12 && 'HH:mm:ss.SSS'.charCodeAt(next) == ch_0) {
        ++next;
    }
    return next - start_0;
}

function $identifyAbutStart(this$static){
    var abut, i_0, len;
    abut = false;
    len = this$static.patternParts.array.length;
    for (i_0 = 0; i_0 < len; i_0++) {
        if ($isNumeric(dynamicCast($get_1(this$static.patternParts, i_0), 305))) {
            if (!abut && i_0 + 1 < len && $isNumeric(dynamicCast($get_1(this$static.patternParts, i_0 + 1), 305))) {
                abut = true;
                dynamicCast($get_1(this$static.patternParts, i_0), 305).abutStart = true;
            }
        }
        else {
            abut = false;
        }
    }
}

function $isNumeric(part){
    var i_0;
    if (part.count <= 0) {
        return false;
    }
    i_0 = $indexOf_3('MLydhHmsSDkK', fromCodePoint(part.text_0.charCodeAt(0)));
    return i_0 > 1 || i_0 >= 0 && part.count < 3;
}

function $parsePattern(this$static){
    var buf, ch_0, count, i_0, inQuote;
    buf = new StringBuilder_0;
    inQuote = false;
    for (i_0 = 0; i_0 < 12; i_0++) {
        ch_0 = 'HH:mm:ss.SSS'.charCodeAt(i_0);
        if (ch_0 == 32) {
            $addPart(this$static, buf, 0);
            buf.string += ' ';
            $addPart(this$static, buf, 0);
            while (i_0 + 1 < 12 && 'HH:mm:ss.SSS'.charCodeAt(i_0 + 1) == 32) {
                ++i_0;
            }
            continue;
        }
        if (inQuote) {
            if (ch_0 == 39) {
                if (i_0 + 1 < 12 && 'HH:mm:ss.SSS'.charCodeAt(i_0 + 1) == 39) {
                    buf.string += "'";
                    ++i_0;
                }
                else {
                    inQuote = false;
                }
            }
            else {
                buf.string += charToString(ch_0);
            }
            continue;
        }
        if ($indexOf_3('GyMLdkHmsSEcDahKzZv', fromCodePoint(ch_0)) > 0) {
            $addPart(this$static, buf, 0);
            buf.string += charToString(ch_0);
            count = $getNextCharCountInPattern(i_0);
            $addPart(this$static, buf, count);
            i_0 += count - 1;
            continue;
        }
        if (ch_0 == 39) {
            if (i_0 + 1 < 12 && 'HH:mm:ss.SSS'.charCodeAt(i_0 + 1) == 39) {
                buf.string += "'";
                ++i_0;
            }
            else {
                inQuote = true;
            }
        }
        else {
            buf.string += charToString(ch_0);
        }
    }
    $addPart(this$static, buf, 0);
    $identifyAbutStart(this$static);
}

function $subFormat(buf, ch_0, count, adjustedDate, adjustedTime, timezone){
    var value_0, value_1, value_2, value_3, value_4, value_5, value_6, value_7, value_8, value_9, value_10, value_11;
    switch (ch_0) {
        case 71:
            value_0 = adjustedDate.jsdate.getFullYear() - 1900 >= -1900?1:0;
            count >= 4?$append_10(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['Before Christ', 'Anno Domini'])[value_0]):$append_10(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['BC', 'AD'])[value_0]);
            break;
        case 121:
            $formatYear(buf, count, adjustedDate);
            break;
        case 77:
            $formatMonth(buf, count, adjustedDate);
            break;
        case 107:
            value_1 = adjustedTime.jsdate.getHours();
            value_1 == 0?$zeroPaddingNumber(buf, 24, count):$zeroPaddingNumber(buf, value_1, count);
            break;
        case 83:
            $formatFractionalSeconds(buf, count, adjustedTime);
            break;
        case 69:
            value_2 = adjustedDate.jsdate.getDay();
            count == 5?$append_10(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['S', 'M', 'T', 'W', 'T', 'F', 'S'])[value_2]):count == 4?$append_10(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'])[value_2]):$append_10(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'])[value_2]);
            break;
        case 97:
            adjustedTime.jsdate.getHours() >= 12 && adjustedTime.jsdate.getHours() < 24?$append_10(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['AM', 'PM'])[1]):$append_10(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['AM', 'PM'])[0]);
            break;
        case 104:
            value_3 = adjustedTime.jsdate.getHours() % 12;
            value_3 == 0?$zeroPaddingNumber(buf, 12, count):$zeroPaddingNumber(buf, value_3, count);
            break;
        case 75:
            value_4 = adjustedTime.jsdate.getHours() % 12;
            $zeroPaddingNumber(buf, value_4, count);
            break;
        case 72:
            value_5 = adjustedTime.jsdate.getHours();
            $zeroPaddingNumber(buf, value_5, count);
            break;
        case 99:
            value_6 = adjustedDate.jsdate.getDay();
            count == 5?$append_10(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['S', 'M', 'T', 'W', 'T', 'F', 'S'])[value_6]):count == 4?$append_10(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'])[value_6]):count == 3?$append_10(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'])[value_6]):$zeroPaddingNumber(buf, value_6, 1);
            break;
        case 76:
            value_7 = adjustedDate.jsdate.getMonth();
            count == 5?$append_10(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'])[value_7]):count == 4?$append_10(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])[value_7]):count == 3?$append_10(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])[value_7]):$zeroPaddingNumber(buf, value_7 + 1, count);
            break;
        case 81:
            value_8 = ~~(adjustedDate.jsdate.getMonth() / 3);
            count < 4?$append_10(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['Q1', 'Q2', 'Q3', 'Q4'])[value_8]):$append_10(buf, initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'])[value_8]);
            break;
        case 100:
            value_9 = adjustedDate.jsdate.getDate();
            $zeroPaddingNumber(buf, value_9, count);
            break;
        case 109:
            value_10 = adjustedTime.jsdate.getMinutes();
            $zeroPaddingNumber(buf, value_10, count);
            break;
        case 115:
            value_11 = adjustedTime.jsdate.getSeconds();
            $zeroPaddingNumber(buf, value_11, count);
            break;
        case 122:
            count < 4?$append_10(buf, timezone.tzNames[0]):$append_10(buf, timezone.tzNames[1]);
            break;
        case 118:
            $append_10(buf, timezone.timezoneID);
            break;
        case 90:
            count < 3?$append_10(buf, $getRFCTimeZoneString(timezone)):count == 3?$append_10(buf, $getISOTimeZoneString(timezone)):$append_10(buf, composeGMTString(timezone.standardOffset));
            break;
        default:return false;
    }
    return true;
}

function $zeroPaddingNumber(buf, value_0, minWidth){
    var b, i_0;
    b = 10;
    for (i_0 = 0; i_0 < minWidth - 1; i_0++) {
        value_0 < b && (buf.string += '0' , buf);
        b *= 10;
    }
    buf.string += value_0;
}

defineClass(748, 1, {});
var Lcom_google_gwt_i18n_shared_DateTimeFormat_2_classLit = createForClass('com.google.gwt.i18n.shared', 'DateTimeFormat', 748, Ljava_lang_Object_2_classLit);
function $clinit_DateTimeFormat_0(){
    $clinit_DateTimeFormat_0 = emptyMethod;
    $clinit_DateTimeFormat();
    cache = new HashMap;
}

function DateTimeFormat(){
    $clinit_DateTimeFormat();
    this.patternParts = new ArrayList;
    this.pattern = 'HH:mm:ss.SSS';
    $parsePattern(this);
}

function getFormat(dtfi){
    $clinit_DateTimeFormat_0();
    var defaultDtfi, dtf;
    defaultDtfi = $getDateTimeFormatInfo(($clinit_LocaleInfo() , $clinit_LocaleInfo() , instance_3));
    dtf = null;
    dtfi == defaultDtfi && (dtf = dynamicCast($getStringValue_1(cache, 'HH:mm:ss.SSS'), 405));
    if (!dtf) {
        dtf = new DateTimeFormat;
        dtfi == defaultDtfi && $putStringValue(cache, 'HH:mm:ss.SSS', dtf);
    }
    return dtf;
}

defineClass(405, 748, {405:1}, DateTimeFormat);
var cache;
var Lcom_google_gwt_i18n_client_DateTimeFormat_2_classLit = createForClass('com.google.gwt.i18n.client', 'DateTimeFormat', 405, Lcom_google_gwt_i18n_shared_DateTimeFormat_2_classLit);
defineClass(890, 1, {});
var Lcom_google_gwt_i18n_shared_DefaultDateTimeFormatInfo_2_classLit = createForClass('com.google.gwt.i18n.shared', 'DefaultDateTimeFormatInfo', 890, Ljava_lang_Object_2_classLit);
defineClass(891, 890, {});
var Lcom_google_gwt_i18n_client_DefaultDateTimeFormatInfo_2_classLit = createForClass('com.google.gwt.i18n.client', 'DefaultDateTimeFormatInfo', 891, Lcom_google_gwt_i18n_shared_DefaultDateTimeFormatInfo_2_classLit);
function $clinit_HasDirection$Direction(){
    $clinit_HasDirection$Direction = emptyMethod;
    RTL = new HasDirection$Direction('RTL', 0);
    LTR = new HasDirection$Direction('LTR', 1);
    DEFAULT = new HasDirection$Direction('DEFAULT', 2);
}

function HasDirection$Direction(enum$name, enum$ordinal){
    Enum.call(this, enum$name, enum$ordinal);
}

function values_6(){
    $clinit_HasDirection$Direction();
    return initValues(getClassLiteralForArray(Lcom_google_gwt_i18n_client_HasDirection$Direction_2_classLit, 1), $intern_1, 292, 0, [RTL, LTR, DEFAULT]);
}

defineClass(292, 40, {292:1, 3:1, 24:1, 40:1}, HasDirection$Direction);
var DEFAULT, LTR, RTL;
var Lcom_google_gwt_i18n_client_HasDirection$Direction_2_classLit = createForEnum('com.google.gwt.i18n.client', 'HasDirection/Direction', 292, Ljava_lang_Enum_2_classLit, values_6);
function $clinit_LocaleInfo(){
    $clinit_LocaleInfo = emptyMethod;
    instance_3 = new LocaleInfo;
}

function $getDateTimeFormatInfo(this$static){
    !this$static.dateTimeFormatInfo && (this$static.dateTimeFormatInfo = new DateTimeFormatInfoImpl);
    return this$static.dateTimeFormatInfo;
}

function LocaleInfo(){
}

defineClass(737, 1, {}, LocaleInfo);
var instance_3;
var Lcom_google_gwt_i18n_client_LocaleInfo_2_classLit = createForClass('com.google.gwt.i18n.client', 'LocaleInfo', 737, Ljava_lang_Object_2_classLit);
function $getISOTimeZoneString(this$static){
    var data_0, offset;
    offset = -this$static.standardOffset;
    data_0 = initValues(getClassLiteralForArray(C_classLit, 1), $intern_9, 0, 7, [43, 48, 48, 58, 48, 48]);
    if (offset < 0) {
        data_0[0] = 45;
        offset = -offset;
    }
    data_0[1] = data_0[1] + ~~(~~(offset / 60) / 10) & $intern_2;
    data_0[2] = data_0[2] + ~~(offset / 60) % 10 & $intern_2;
    data_0[4] = data_0[4] + ~~(offset % 60 / 10) & $intern_2;
    data_0[5] = data_0[5] + offset % 10 & $intern_2;
    return __valueOf(data_0, 0, data_0.length);
}

function $getRFCTimeZoneString(this$static){
    var data_0, offset;
    offset = -this$static.standardOffset;
    data_0 = initValues(getClassLiteralForArray(C_classLit, 1), $intern_9, 0, 7, [43, 48, 48, 48, 48]);
    if (offset < 0) {
        data_0[0] = 45;
        offset = -offset;
    }
    data_0[1] = data_0[1] + ~~(~~(offset / 60) / 10) & $intern_2;
    data_0[2] = data_0[2] + ~~(offset / 60) % 10 & $intern_2;
    data_0[3] = data_0[3] + ~~(offset % 60 / 10) & $intern_2;
    data_0[4] = data_0[4] + offset % 10 & $intern_2;
    return __valueOf(data_0, 0, data_0.length);
}

function TimeZone(){
}

function composeGMTString(offset){
    var data_0;
    data_0 = initValues(getClassLiteralForArray(C_classLit, 1), $intern_9, 0, 7, [71, 77, 84, 45, 48, 48, 58, 48, 48]);
    if (offset <= 0) {
        data_0[3] = 43;
        offset = -offset;
    }
    data_0[4] = data_0[4] + ~~(~~(offset / 60) / 10) & $intern_2;
    data_0[5] = data_0[5] + ~~(offset / 60) % 10 & $intern_2;
    data_0[7] = data_0[7] + ~~(offset % 60 / 10) & $intern_2;
    data_0[8] = data_0[8] + offset % 10 & $intern_2;
    return __valueOf(data_0, 0, data_0.length);
}

function composePOSIXTimeZoneID(offset){
    var str;
    if (offset == 0) {
        return 'Etc/GMT';
    }
    if (offset < 0) {
        offset = -offset;
        str = 'Etc/GMT-';
    }
    else {
        str = 'Etc/GMT+';
    }
    return str + offsetDisplay(offset);
}

function composeUTCString(offset){
    var str;
    if (offset == 0) {
        return 'UTC';
    }
    if (offset < 0) {
        offset = -offset;
        str = 'UTC+';
    }
    else {
        str = 'UTC-';
    }
    return str + offsetDisplay(offset);
}

function createTimeZone(timeZoneOffsetInMinutes){
    var tz;
    tz = new TimeZone;
    tz.standardOffset = timeZoneOffsetInMinutes;
    tz.timezoneID = composePOSIXTimeZoneID(timeZoneOffsetInMinutes);
    tz.tzNames = initDim(Ljava_lang_String_2_classLit, $intern_8, 2, 2, 4, 1);
    tz.tzNames[0] = composeUTCString(timeZoneOffsetInMinutes);
    tz.tzNames[1] = composeUTCString(timeZoneOffsetInMinutes);
    return tz;
}

function offsetDisplay(offset){
    var hour, mins;
    hour = ~~(offset / 60);
    mins = offset % 60;
    if (mins == 0) {
        return '' + hour;
    }
    return '' + hour + ':' + ('' + mins);
}

defineClass(837, 1, {}, TimeZone);
_.standardOffset = 0;
var Lcom_google_gwt_i18n_client_TimeZone_2_classLit = createForClass('com.google.gwt.i18n.client', 'TimeZone', 837, Ljava_lang_Object_2_classLit);
function DateTimeFormatInfoImpl(){
}

defineClass(813, 891, {}, DateTimeFormatInfoImpl);
var Lcom_google_gwt_i18n_client_impl_cldr_DateTimeFormatInfoImpl_2_classLit = createForClass('com.google.gwt.i18n.client.impl.cldr', 'DateTimeFormatInfoImpl', 813, Lcom_google_gwt_i18n_client_DefaultDateTimeFormatInfo_2_classLit);
function DateTimeFormat$PatternPart(txt, cnt){
    this.text_0 = txt;
    this.count = cnt;
    this.abutStart = false;
}

defineClass(305, 1, {305:1}, DateTimeFormat$PatternPart);
_.abutStart = false;
_.count = 0;
var Lcom_google_gwt_i18n_shared_DateTimeFormat$PatternPart_2_classLit = createForClass('com.google.gwt.i18n.shared', 'DateTimeFormat/PatternPart', 305, Ljava_lang_Object_2_classLit);
function clone(array){
    return cloneSubrange(array, array.length);
}

function cloneSubrange(array, toIndex){
    var result;
    result = array.slice(0, toIndex);
    initValues(getClass__Ljava_lang_Class___devirtual$(array), array.castableTypeMap$, array.__elementTypeId$, array.__elementTypeCategory$, result);
    return result;
}

function createFrom(array, length_0){
    var result;
    result = initializeArrayElementsWithDefaults(0, length_0);
    initValues(getClass__Ljava_lang_Class___devirtual$(array), array.castableTypeMap$, array.__elementTypeId$, array.__elementTypeCategory$, result);
    return result;
}

function getClassLiteralForArray(clazz, dimensions){
    return getClassLiteralForArray_0(clazz, dimensions);
}

function initDim(leafClassLiteral, castableTypeMap, elementTypeId, length_0, elementTypeCategory, dimensions){
    var result;
    result = initializeArrayElementsWithDefaults(elementTypeCategory, length_0);
    initValues(getClassLiteralForArray(leafClassLiteral, dimensions), castableTypeMap, elementTypeId, elementTypeCategory, result);
    return result;
}

function initValues(arrayClass, castableTypeMap, elementTypeId, elementTypeCategory, array){
    array.___clazz$ = arrayClass;
    array.castableTypeMap$ = castableTypeMap;
    array.typeMarker$ = typeMarkerFn;
    array.__elementTypeId$ = elementTypeId;
    array.__elementTypeCategory$ = elementTypeCategory;
    return array;
}

function initializeArrayElementsWithDefaults(elementTypeCategory, length_0){
    var array = new Array(length_0);
    var initValue;
    switch (elementTypeCategory) {
        case 6:
            initValue = {l:0, m:0, h:0};
            break;
        case 7:
            initValue = 0;
            break;
        case 8:
            initValue = false;
            break;
        default:return array;
    }
    for (var i_0 = 0; i_0 < length_0; ++i_0) {
        array[i_0] = initValue;
    }
    return array;
}

function nativeArraySplice(src_0, srcOfs, dest, destOfs, len, overwrite){
    if (src_0 === dest) {
        src_0 = src_0.slice(srcOfs, srcOfs + len);
        srcOfs = 0;
    }
    for (var batchStart = srcOfs, end = srcOfs + len; batchStart < end;) {
        var batchEnd = Math.min(batchStart + 10000, end);
        len = batchEnd - batchStart;
        Array.prototype.splice.apply(dest, [destOfs, overwrite?len:0].concat(src_0.slice(batchStart, batchEnd)));
        batchStart = batchEnd;
        destOfs += len;
    }
}

function setCheck(array, index_0, value_0){
    var elementTypeId;
    if (value_0 != null) {
        switch (array.__elementTypeCategory$) {
            case 4:
                if (!isJavaString(value_0)) {
                    throw new ArrayStoreException;
                }

                break;
            case 0:
                {
                    elementTypeId = array.__elementTypeId$;
                    if (!canCast(value_0, elementTypeId)) {
                        throw new ArrayStoreException;
                    }
                    break;
                }

            case 2:
                if (!(!isJavaString(value_0) && !hasTypeMarker(value_0))) {
                    throw new ArrayStoreException;
                }

                break;
            case 1:
                {
                    elementTypeId = array.__elementTypeId$;
                    if (!(!isJavaString(value_0) && !hasTypeMarker(value_0)) && !canCast(value_0, elementTypeId)) {
                        throw new ArrayStoreException;
                    }
                    break;
                }

        }
    }
    return array[index_0] = value_0;
}

function cacheJavaScriptException(e, jse){
    if (e && typeof e == 'object') {
        try {
            e.__gwt$exception = jse;
        }
        catch (ignored) {
        }
    }
}

function unwrap(e){
    var jse;
    if (instanceOf(e, 119)) {
        jse = dynamicCast(e, 119);
        if (maskUndefined(jse.e) !== maskUndefined(($clinit_JavaScriptException() , NOT_SET))) {
            return maskUndefined(jse.e) === maskUndefined(NOT_SET)?null:jse.e;
        }
    }
    return e;
}

function wrap_0(e){
    var jse;
    if (instanceOf(e, 37)) {
        return e;
    }
    jse = e && e.__gwt$exception;
    if (!jse) {
        jse = new JavaScriptException(e);
        captureStackTrace(jse, e);
        cacheJavaScriptException(e, jse);
    }
    return jse;
}

function create_0(value_0){
    var a0, a1, a2;
    a0 = value_0 & $intern_46;
    a1 = value_0 >> 22 & $intern_46;
    a2 = value_0 < 0?$intern_47:0;
    return create0(a0, a1, a2);
}

function create_1(a){
    return create0(a.l, a.m, a.h);
}

function create0(l, m, h){
    return {l:l, m:m, h:h};
}

function divMod(a, b, computeRemainder){
    var aIsCopy, aIsMinValue, aIsNegative, bpower, c, negative;
    if (b.l == 0 && b.m == 0 && b.h == 0) {
        throw new ArithmeticException('divide by zero');
    }
    if (a.l == 0 && a.m == 0 && a.h == 0) {
        computeRemainder && (remainder_0 = create0(0, 0, 0));
        return create0(0, 0, 0);
    }
    if (b.h == $intern_27 && b.m == 0 && b.l == 0) {
        return divModByMinValue(a, computeRemainder);
    }
    negative = false;
    if (b.h >> 19 != 0) {
        b = neg(b);
        negative = true;
    }
    bpower = powerOfTwo_0(b);
    aIsNegative = false;
    aIsMinValue = false;
    aIsCopy = false;
    if (a.h == $intern_27 && a.m == 0 && a.l == 0) {
        aIsMinValue = true;
        aIsNegative = true;
        if (bpower == -1) {
            a = create_1(($clinit_LongLib$Const() , MAX_VALUE));
            aIsCopy = true;
            negative = !negative;
        }
        else {
            c = shr(a, bpower);
            negative && negate_6(c);
            computeRemainder && (remainder_0 = create0(0, 0, 0));
            return c;
        }
    }
    else if (a.h >> 19 != 0) {
        aIsNegative = true;
        a = neg(a);
        aIsCopy = true;
        negative = !negative;
    }
    if (bpower != -1) {
        return divModByShift(a, bpower, negative, aIsNegative, computeRemainder);
    }
    if (!gte_0(a, b)) {
        computeRemainder && (aIsNegative?(remainder_0 = neg(a)):(remainder_0 = create0(a.l, a.m, a.h)));
        return create0(0, 0, 0);
    }
    return divModHelper(aIsCopy?a:create0(a.l, a.m, a.h), b, negative, aIsNegative, aIsMinValue, computeRemainder);
}

function divModByMinValue(a, computeRemainder){
    if (a.h == $intern_27 && a.m == 0 && a.l == 0) {
        computeRemainder && (remainder_0 = create0(0, 0, 0));
        return create_1(($clinit_LongLib$Const() , ONE_1));
    }
    computeRemainder && (remainder_0 = create0(a.l, a.m, a.h));
    return create0(0, 0, 0);
}

function divModByShift(a, bpower, negative, aIsNegative, computeRemainder){
    var c;
    c = shr(a, bpower);
    negative && negate_6(c);
    if (computeRemainder) {
        a = maskRight(a, bpower);
        aIsNegative?(remainder_0 = neg(a)):(remainder_0 = create0(a.l, a.m, a.h));
    }
    return c;
}

function divModHelper(a, b, negative, aIsNegative, aIsMinValue, computeRemainder){
    var bshift, gte, quotient, shift_0, a1, a2, a0;
    shift_0 = numberOfLeadingZeros(b) - numberOfLeadingZeros(a);
    bshift = shl(b, shift_0);
    quotient = create0(0, 0, 0);
    while (shift_0 >= 0) {
        gte = trialSubtract(a, bshift);
        if (gte) {
            shift_0 < 22?(quotient.l |= 1 << shift_0 , undefined):shift_0 < 44?(quotient.m |= 1 << shift_0 - 22 , undefined):(quotient.h |= 1 << shift_0 - 44 , undefined);
            if (a.l == 0 && a.m == 0 && a.h == 0) {
                break;
            }
        }
        a1 = bshift.m;
        a2 = bshift.h;
        a0 = bshift.l;
        setH(bshift, a2 >>> 1);
        bshift.m = a1 >>> 1 | (a2 & 1) << 21;
        bshift.l = a0 >>> 1 | (a1 & 1) << 21;
        --shift_0;
    }
    negative && negate_6(quotient);
    if (computeRemainder) {
        if (aIsNegative) {
            remainder_0 = neg(a);
            aIsMinValue && (remainder_0 = sub_1(remainder_0, ($clinit_LongLib$Const() , ONE_1)));
        }
        else {
            remainder_0 = create0(a.l, a.m, a.h);
        }
    }
    return quotient;
}

function maskRight(a, bits){
    var b0, b1, b2;
    if (bits <= 22) {
        b0 = a.l & (1 << bits) - 1;
        b1 = b2 = 0;
    }
    else if (bits <= 44) {
        b0 = a.l;
        b1 = a.m & (1 << bits - 22) - 1;
        b2 = 0;
    }
    else {
        b0 = a.l;
        b1 = a.m;
        b2 = a.h & (1 << bits - 44) - 1;
    }
    return create0(b0, b1, b2);
}

function negate_6(a){
    var neg0, neg1, neg2;
    neg0 = ~a.l + 1 & $intern_46;
    neg1 = ~a.m + (neg0 == 0?1:0) & $intern_46;
    neg2 = ~a.h + (neg0 == 0 && neg1 == 0?1:0) & $intern_47;
    setL(a, neg0);
    setM(a, neg1);
    setH(a, neg2);
}

function numberOfLeadingZeros(a){
    var b1, b2;
    b2 = numberOfLeadingZeros_0(a.h);
    if (b2 == 32) {
        b1 = numberOfLeadingZeros_0(a.m);
        return b1 == 32?numberOfLeadingZeros_0(a.l) + 32:b1 + 20 - 10;
    }
    else {
        return b2 - 12;
    }
}

function powerOfTwo_0(a){
    var h, l, m;
    l = a.l;
    if ((l & l - 1) != 0) {
        return -1;
    }
    m = a.m;
    if ((m & m - 1) != 0) {
        return -1;
    }
    h = a.h;
    if ((h & h - 1) != 0) {
        return -1;
    }
    if (h == 0 && m == 0 && l == 0) {
        return -1;
    }
    if (h == 0 && m == 0 && l != 0) {
        return numberOfTrailingZeros(l);
    }
    if (h == 0 && m != 0 && l == 0) {
        return numberOfTrailingZeros(m) + 22;
    }
    if (h != 0 && m == 0 && l == 0) {
        return numberOfTrailingZeros(h) + 44;
    }
    return -1;
}

function setH(a, x_0){
    a.h = x_0;
}

function setL(a, x_0){
    a.l = x_0;
}

function setM(a, x_0){
    a.m = x_0;
}

function toDoubleHelper(a){
    return a.l + a.m * $intern_22 + a.h * $intern_89;
}

function trialSubtract(a, b){
    var sum0, sum1, sum2;
    sum2 = a.h - b.h;
    if (sum2 < 0) {
        return false;
    }
    sum0 = a.l - b.l;
    sum1 = a.m - b.m + (sum0 >> 22);
    sum2 += sum1 >> 22;
    if (sum2 < 0) {
        return false;
    }
    setL(a, sum0 & $intern_46);
    setM(a, sum1 & $intern_46);
    setH(a, sum2 & $intern_47);
    return true;
}

var remainder_0;
function add_11(a, b){
    var sum0, sum1, sum2;
    sum0 = a.l + b.l;
    sum1 = a.m + b.m + (sum0 >> 22);
    sum2 = a.h + b.h + (sum1 >> 22);
    return {l:sum0 & $intern_46, m:sum1 & $intern_46, h:sum2 & $intern_47};
}

function and(a, b){
    return {l:a.l & b.l, m:a.m & b.m, h:a.h & b.h};
}

function div_0(a, b){
    return divMod(a, b, false);
}

function eq(a, b){
    return a.l == b.l && a.m == b.m && a.h == b.h;
}

function fromDouble(value_0){
    var a0, a1, a2, negative, result;
    if (isNaN(value_0)) {
        return $clinit_LongLib$Const() , ZERO_3;
    }
    if (value_0 < $intern_79) {
        return $clinit_LongLib$Const() , MIN_VALUE;
    }
    if (value_0 >= $intern_78) {
        return $clinit_LongLib$Const() , MAX_VALUE;
    }
    negative = false;
    if (value_0 < 0) {
        negative = true;
        value_0 = -value_0;
    }
    a2 = 0;
    if (value_0 >= $intern_89) {
        a2 = round_int(value_0 / $intern_89);
        value_0 -= a2 * $intern_89;
    }
    a1 = 0;
    if (value_0 >= $intern_22) {
        a1 = round_int(value_0 / $intern_22);
        value_0 -= a1 * $intern_22;
    }
    a0 = round_int(value_0);
    result = create0(a0, a1, a2);
    negative && negate_6(result);
    return result;
}

function fromInt(value_0){
    var rebase, result;
    if (value_0 > -129 && value_0 < 128) {
        rebase = value_0 + 128;
        boxedValues == null && (boxedValues = initDim(Lcom_google_gwt_lang_LongLibBase$LongEmul_2_classLit, $intern_1, 912, 256, 0, 1));
        result = boxedValues[rebase];
        !result && (result = boxedValues[rebase] = create_0(value_0));
        return result;
    }
    return create_0(value_0);
}

function gt(a, b){
    var signa, signb;
    signa = a.h >> 19;
    signb = b.h >> 19;
    return signa == 0?signb != 0 || a.h > b.h || a.h == b.h && a.m > b.m || a.h == b.h && a.m == b.m && a.l > b.l:!(signb == 0 || a.h < b.h || a.h == b.h && a.m < b.m || a.h == b.h && a.m == b.m && a.l <= b.l);
}

function gte_0(a, b){
    var signa, signb;
    signa = a.h >> 19;
    signb = b.h >> 19;
    return signa == 0?signb != 0 || a.h > b.h || a.h == b.h && a.m > b.m || a.h == b.h && a.m == b.m && a.l >= b.l:!(signb == 0 || a.h < b.h || a.h == b.h && a.m < b.m || a.h == b.h && a.m == b.m && a.l < b.l);
}

function lt(a, b){
    return !gte_0(a, b);
}

function lte(a, b){
    return !gt(a, b);
}

function mod(a, b){
    divMod(a, b, true);
    return remainder_0;
}

function mul(a, b){
    var a0, a1, a2, a3, a4, b0, b1, b2, b3, b4, c0, c00, c01, c1, c10, c11, c12, c13, c2, c22, c23, c24, p0, p1, p2, p3, p4;
    a0 = a.l & 8191;
    a1 = a.l >> 13 | (a.m & 15) << 9;
    a2 = a.m >> 4 & 8191;
    a3 = a.m >> 17 | (a.h & 255) << 5;
    a4 = (a.h & 1048320) >> 8;
    b0 = b.l & 8191;
    b1 = b.l >> 13 | (b.m & 15) << 9;
    b2 = b.m >> 4 & 8191;
    b3 = b.m >> 17 | (b.h & 255) << 5;
    b4 = (b.h & 1048320) >> 8;
    p0 = a0 * b0;
    p1 = a1 * b0;
    p2 = a2 * b0;
    p3 = a3 * b0;
    p4 = a4 * b0;
    if (b1 != 0) {
        p1 += a0 * b1;
        p2 += a1 * b1;
        p3 += a2 * b1;
        p4 += a3 * b1;
    }
    if (b2 != 0) {
        p2 += a0 * b2;
        p3 += a1 * b2;
        p4 += a2 * b2;
    }
    if (b3 != 0) {
        p3 += a0 * b3;
        p4 += a1 * b3;
    }
    b4 != 0 && (p4 += a0 * b4);
    c00 = p0 & $intern_46;
    c01 = (p1 & 511) << 13;
    c0 = c00 + c01;
    c10 = p0 >> 22;
    c11 = p1 >> 9;
    c12 = (p2 & 262143) << 4;
    c13 = (p3 & 31) << 17;
    c1 = c10 + c11 + c12 + c13;
    c22 = p2 >> 18;
    c23 = p3 >> 5;
    c24 = (p4 & 4095) << 8;
    c2 = c22 + c23 + c24;
    c1 += c0 >> 22;
    c0 &= $intern_46;
    c2 += c1 >> 22;
    c1 &= $intern_46;
    c2 &= $intern_47;
    return create0(c0, c1, c2);
}

function neg(a){
    var neg0, neg1, neg2;
    neg0 = ~a.l + 1 & $intern_46;
    neg1 = ~a.m + (neg0 == 0?1:0) & $intern_46;
    neg2 = ~a.h + (neg0 == 0 && neg1 == 0?1:0) & $intern_47;
    return create0(neg0, neg1, neg2);
}

function neq(a, b){
    return a.l != b.l || a.m != b.m || a.h != b.h;
}

function or(a, b){
    return {l:a.l | b.l, m:a.m | b.m, h:a.h | b.h};
}

function shl(a, n){
    var res0, res1, res2;
    n &= 63;
    if (n < 22) {
        res0 = a.l << n;
        res1 = a.m << n | a.l >> 22 - n;
        res2 = a.h << n | a.m >> 22 - n;
    }
    else if (n < 44) {
        res0 = 0;
        res1 = a.l << n - 22;
        res2 = a.m << n - 22 | a.l >> 44 - n;
    }
    else {
        res0 = 0;
        res1 = 0;
        res2 = a.l << n - 44;
    }
    return {l:res0 & $intern_46, m:res1 & $intern_46, h:res2 & $intern_47};
}

function shr(a, n){
    var a2, negative, res0, res1, res2;
    n &= 63;
    a2 = a.h;
    negative = (a2 & $intern_27) != 0;
    negative && (a2 |= -1048576);
    if (n < 22) {
        res2 = a2 >> n;
        res1 = a.m >> n | a2 << 22 - n;
        res0 = a.l >> n | a.m << 22 - n;
    }
    else if (n < 44) {
        res2 = negative?$intern_47:0;
        res1 = a2 >> n - 22;
        res0 = a.m >> n - 22 | a2 << 44 - n;
    }
    else {
        res2 = negative?$intern_47:0;
        res1 = negative?$intern_46:0;
        res0 = a2 >> n - 44;
    }
    return {l:res0 & $intern_46, m:res1 & $intern_46, h:res2 & $intern_47};
}

function shru(a, n){
    var a2, res0, res1, res2;
    n &= 63;
    a2 = a.h & $intern_47;
    if (n < 22) {
        res2 = a2 >>> n;
        res1 = a.m >> n | a2 << 22 - n;
        res0 = a.l >> n | a.m << 22 - n;
    }
    else if (n < 44) {
        res2 = 0;
        res1 = a2 >>> n - 22;
        res0 = a.m >> n - 22 | a.h << 44 - n;
    }
    else {
        res2 = 0;
        res1 = 0;
        res0 = a2 >>> n - 44;
    }
    return {l:res0 & $intern_46, m:res1 & $intern_46, h:res2 & $intern_47};
}

function sub_1(a, b){
    var sum0, sum1, sum2;
    sum0 = a.l - b.l;
    sum1 = a.m - b.m + (sum0 >> 22);
    sum2 = a.h - b.h + (sum1 >> 22);
    return {l:sum0 & $intern_46, m:sum1 & $intern_46, h:sum2 & $intern_47};
}

function toDouble(a){
    if (eq(a, ($clinit_LongLib$Const() , MIN_VALUE))) {
        return $intern_79;
    }
    if (!gte_0(a, ZERO_3)) {
        return -toDoubleHelper(neg(a));
    }
    return a.l + a.m * $intern_22 + a.h * $intern_89;
}

function toInt(a){
    return a.l | a.m << 22;
}

function toString_77(a){
    var digits, rem, res, tenPowerLong, zeroesNeeded;
    if (a.l == 0 && a.m == 0 && a.h == 0) {
        return '0';
    }
    if (a.h == $intern_27 && a.m == 0 && a.l == 0) {
        return '-9223372036854775808';
    }
    if (a.h >> 19 != 0) {
        return '-' + toString_77(neg(a));
    }
    rem = a;
    res = '';
    while (!(rem.l == 0 && rem.m == 0 && rem.h == 0)) {
        tenPowerLong = fromInt($intern_74);
        rem = divMod(rem, tenPowerLong, true);
        digits = '' + toInt(remainder_0);
        if (!(rem.l == 0 && rem.m == 0 && rem.h == 0)) {
            zeroesNeeded = 9 - digits.length;
            for (; zeroesNeeded > 0; zeroesNeeded--) {
                digits = '0' + digits;
            }
        }
        res = digits + res;
    }
    return res;
}

function xor(a, b){
    return {l:a.l ^ b.l, m:a.m ^ b.m, h:a.h ^ b.h};
}

var boxedValues;
function $clinit_LongLib$Const(){
    $clinit_LongLib$Const = emptyMethod;
    MAX_VALUE = create0($intern_46, $intern_46, 524287);
    MIN_VALUE = create0(0, 0, $intern_27);
    ONE_1 = fromInt(1);
    fromInt(2);
    ZERO_3 = fromInt(0);
}

var MAX_VALUE, MIN_VALUE, ONE_1, ZERO_3;
function init(){
    $wnd.setTimeout($entry(assertCompileTimeUserAgent));
    $onModuleLoad_1();
    $onModuleLoad_0($clinit_LogConfiguration());
    $onModuleLoad(new Xslt20ProcessorImpl);
}

function hasTypeMarker(o){
    return o.typeMarker$ === typeMarkerFn;
}

function DevelopmentModeLogHandler(){
    $setFormatter(this, new TextLogFormatter);
    $setLevel(this, ($clinit_Level() , ALL));
}

defineClass(580, 199, $intern_62, DevelopmentModeLogHandler);
_.publish = function publish_2(record){
    return;
}
;
var Lcom_google_gwt_logging_client_DevelopmentModeLogHandler_2_classLit = createForClass('com.google.gwt.logging.client', 'DevelopmentModeLogHandler', 580, Ljava_util_logging_Handler_2_classLit);
function $publish_1(this$static, record){
    var formatter, msg;
    $getLevel(this$static);
    if ($intern_58 > record.level_0.intValue()) {
        return;
    }
    formatter = this$static.formatter;
    msg = formatter.format_0(record);
    instanceOf(formatter, 393)?$add_8(this$static.widgetContainer, new HTML(msg)):$add_8(this$static.widgetContainer, new Label_0(msg));
}

function HasWidgetsLogHandler(container){
    this.widgetContainer = container;
    $setFormatter(this, new HtmlLogFormatter);
    $setLevel(this, ($clinit_Level() , ALL));
}

defineClass(668, 199, $intern_62, HasWidgetsLogHandler);
_.publish = function publish_3(record){
    $publish_1(this, record);
}
;
var Lcom_google_gwt_logging_client_HasWidgetsLogHandler_2_classLit = createForClass('com.google.gwt.logging.client', 'HasWidgetsLogHandler', 668, Ljava_util_logging_Handler_2_classLit);
function $getColor(logLevel){
    if (logLevel == ($clinit_Level() , $intern_0)) {
        return '#000';
    }
    if (logLevel >= $intern_51) {
        return '#F00';
    }
    if (logLevel >= 900) {
        return '#E56717';
    }
    if (logLevel >= 800) {
        return '#20b000';
    }
    if (logLevel >= 700) {
        return '#2B60DE';
    }
    if (logLevel >= 500) {
        return '#F0F';
    }
    if (logLevel >= 400) {
        return '#F0F';
    }
    if (logLevel >= 300) {
        return '#F0F';
    }
    return '#000';
}

function $getEscaped(text_0){
    text_0 = $replaceAll(text_0, '<', '&lt;');
    text_0 = $replaceAll(text_0, '>', '&gt;');
    text_0 = $replaceAll(text_0, '\t', '&nbsp;&nbsp;&nbsp;');
    return text_0;
}

function HtmlLogFormatter(){
    this.showStackTraces = true;
}

defineClass(393, 879, {393:1}, HtmlLogFormatter);
_.format_0 = function format_1(event_0){
    var html, prefix;
    html = new StringBuilder;
    $append_10(html, (prefix = new StringBuilder , prefix.string += "<span style='color:" , $append_10(prefix, $getColor(event_0.level_0.intValue())) , prefix.string += "'>" , prefix.string += '<code>' , prefix.string));
    $append_10(html, $getRecordInfo(event_0, ' '));
    $append_10(html, $getEscaped(event_0.msg));
    this.showStackTraces && !!event_0.thrown && $printStackTrace(event_0.thrown, new HtmlLogFormatter$1(html, html));
    html.string += '<\/code><\/span>';
    return html.string;
}
;
_.showStackTraces = false;
var Lcom_google_gwt_logging_client_HtmlLogFormatter_2_classLit = createForClass('com.google.gwt.logging.client', 'HtmlLogFormatter', 393, Lcom_google_gwt_logging_impl_FormatterImpl_2_classLit);
defineClass(875, 1, {});
var Ljava_io_OutputStream_2_classLit = createForClass('java.io', 'OutputStream', 875, Ljava_lang_Object_2_classLit);
defineClass(876, 875, {});
var Ljava_io_FilterOutputStream_2_classLit = createForClass('java.io', 'FilterOutputStream', 876, Ljava_io_OutputStream_2_classLit);
function PrintStream(){
}

defineClass(577, 876, {}, PrintStream);
_.print_0 = function print_0(s){
}
;
_.println = function println(x_0){
}
;
_.println_0 = function println_0(s){
}
;
var Ljava_io_PrintStream_2_classLit = createForClass('java.io', 'PrintStream', 577, Ljava_io_FilterOutputStream_2_classLit);
function StackTracePrintStream(builder){
    this.builder = builder;
}

defineClass(367, 577, {}, StackTracePrintStream);
_.append_0 = function append_2(text_0){
    $append_10(this.builder, text_0);
}
;
_.newLine = function newLine(){
    $append_10(this.builder, '\n');
}
;
_.print_0 = function print_1(str){
    this.append_0(str);
}
;
_.println = function println_1(obj){
    this.append_0('' + obj);
    this.newLine();
}
;
_.println_0 = function println_2(str){
    this.append_0(str);
    this.newLine();
}
;
var Lcom_google_gwt_logging_impl_StackTracePrintStream_2_classLit = createForClass('com.google.gwt.logging.impl', 'StackTracePrintStream', 367, Ljava_io_PrintStream_2_classLit);
function HtmlLogFormatter$1($anonymous0, val$html){
    this.val$html3 = val$html;
    StackTracePrintStream.call(this, $anonymous0);
}

defineClass(704, 367, {}, HtmlLogFormatter$1);
_.append_0 = function append_3(str){
    $append_10(this.val$html3, $getEscaped(str));
}
;
_.newLine = function newLine_0(){
    $append_10(this.val$html3, '<br>');
}
;
var Lcom_google_gwt_logging_client_HtmlLogFormatter$1_2_classLit = createForClass('com.google.gwt.logging.client', 'HtmlLogFormatter/1', 704, Lcom_google_gwt_logging_impl_StackTracePrintStream_2_classLit);
function $clinit_LogConfiguration(){
    $clinit_LogConfiguration = emptyMethod;
    impl_0 = new LogConfiguration$LogConfigurationImplRegular;
}

function $onModuleLoad_0(){
    var log_0;
    $configureClientSideLogging(impl_0);
    if (!uncaughtExceptionHandler) {
        log_0 = getLogger(($ensureNamesAreInitialized(Lcom_google_gwt_logging_client_LogConfiguration_2_classLit) , Lcom_google_gwt_logging_client_LogConfiguration_2_classLit.typeName));
        setUncaughtExceptionHandler(new LogConfiguration$1(log_0));
    }
}

function loggingIsEnabled(){
    $clinit_LogConfiguration();
    if (!impl_0) {
        return true;
    }
    return true;
}

var impl_0;
var Lcom_google_gwt_logging_client_LogConfiguration_2_classLit = createForClass('com.google.gwt.logging.client', 'LogConfiguration', null, Ljava_lang_Object_2_classLit);
function LogConfiguration$1(val$log){
    this.val$log2 = val$log;
}

defineClass(531, 1, {}, LogConfiguration$1);
var Lcom_google_gwt_logging_client_LogConfiguration$1_2_classLit = createForClass('com.google.gwt.logging.client', 'LogConfiguration/1', 531, Ljava_lang_Object_2_classLit);
function $configureClientSideLogging(this$static){
    this$static.root = (new LoggerImplRegular , $ensureLogger(getLogManager(), ''));
    this$static.root.impl.useParentHandlers = false;
    $setLevels(this$static.root);
    $setDefaultHandlers(this$static.root);
}

function $setDefaultHandlers(l){
    var dev;
    dev = new DevelopmentModeLogHandler;
    $addHandler_1(l.impl, dev);
}

function $setLevels(l){
    var level, levelParam;
    levelParam = getParameter_0();
    level = levelParam == null?null:($clinit_Level() , $parse_1(levelParam));
    level?$setLevel_0(l.impl, level):$setLevel_1(l, ($clinit_Level() , SEVERE));
}

function LogConfiguration$LogConfigurationImplRegular(){
}

defineClass(530, 1, {}, LogConfiguration$LogConfigurationImplRegular);
var Lcom_google_gwt_logging_client_LogConfiguration$LogConfigurationImplRegular_2_classLit = createForClass('com.google.gwt.logging.client', 'LogConfiguration/LogConfigurationImplRegular', 530, Ljava_lang_Object_2_classLit);
function $getElement(this$static){
    return $clinit_DOM() , this$static.element;
}

function $setElement(this$static, elem){
    $setElement_0(this$static, ($clinit_DOM() , elem));
}

function $setElement_0(this$static, elem){
    this$static.element = elem;
}

function $setPixelSize(this$static, width_0, height){
    width_0 >= 0 && (($clinit_DOM() , this$static.element).style['width'] = width_0 + 'px' , undefined);
    height >= 0 && (($clinit_DOM() , this$static.element).style['height'] = height + 'px' , undefined);
}

function $setVisible(this$static, visible){
    setVisible(($clinit_DOM() , this$static.element), visible);
}

function $sinkBitlessEvent(this$static, eventTypeName){
    sinkBitlessEvent(($clinit_DOM() , this$static.element), eventTypeName);
}

function setVisible(elem, visible){
    elem.style.display = visible?'':'none';
    visible?elem.removeAttribute('aria-hidden'):elem.setAttribute('aria-hidden', 'true');
}

defineClass(98, 1, {107:1, 98:1});
_.toString$ = function toString_78(){
    if (!this.element) {
        return '(null handle)';
    }
    return ($clinit_DOM() , this.element).outerHTML;
}
;
var Lcom_google_gwt_user_client_ui_UIObject_2_classLit = createForClass('com.google.gwt.user.client.ui', 'UIObject', 98, Ljava_lang_Object_2_classLit);
function $addDomHandler(this$static, handler, type_0){
    var typeInt;
    typeInt = getTypeInt(type_0.name_0);
    typeInt == -1?$sinkBitlessEvent(this$static, type_0.name_0):this$static.eventsToSink == -1?sinkEvents(($clinit_DOM() , this$static.element), typeInt | (this$static.element.__eventBits || 0)):(this$static.eventsToSink |= typeInt);
    return $addHandler(!this$static.handlerManager?(this$static.handlerManager = new HandlerManager(this$static)):this$static.handlerManager, type_0, handler);
}

function $addHandler_0(this$static, handler, type_0){
    return $addHandler(!this$static.handlerManager?(this$static.handlerManager = new HandlerManager(this$static)):this$static.handlerManager, type_0, handler);
}

function $fireEvent_0(this$static, event_0){
    !!this$static.handlerManager && $fireEvent(this$static.handlerManager, event_0);
}

function $onAttach(this$static){
    var bitsToAdd;
    if (this$static.attached) {
        throw new IllegalStateException_0("Should only call onAttach when the widget is detached from the browser's document");
    }
    this$static.attached = true;
    $clinit_DOM();
    setEventListener_0(this$static.element, this$static);
    bitsToAdd = this$static.eventsToSink;
    this$static.eventsToSink = -1;
    bitsToAdd > 0 && (this$static.eventsToSink == -1?sinkEvents(this$static.element, bitsToAdd | (this$static.element.__eventBits || 0)):(this$static.eventsToSink |= bitsToAdd));
    this$static.doAttachChildren();
    fire_0(this$static, true);
}

function $onDetach(this$static){
    if (!this$static.attached) {
        throw new IllegalStateException_0("Should only call onDetach when the widget is attached to the browser's document");
    }
    try {
        this$static.onUnload();
        fire_0(this$static, false);
    }
    finally {
        try {
            this$static.doDetachChildren();
        }
        finally {
            $clinit_DOM();
            setEventListener_0(this$static.element, null);
            this$static.attached = false;
        }
    }
}

function $removeFromParent(this$static){
    if (!this$static.parent_0) {
        $clinit_RootPanel();
        $contains_4(widgetsToDetach, this$static) && detachNow(this$static);
    }
    else if (this$static.parent_0) {
        this$static.parent_0.remove_0(this$static);
    }
    else if (this$static.parent_0) {
        throw new IllegalStateException_0("This widget's parent does not implement HasWidgets");
    }
}

function $setParent(this$static, parent_0){
    var oldParent;
    oldParent = this$static.parent_0;
    if (!parent_0) {
        try {
            !!oldParent && oldParent.attached && this$static.onDetach();
        }
        finally {
            this$static.parent_0 = null;
        }
    }
    else {
        if (oldParent) {
            throw new IllegalStateException_0('Cannot set a new parent without first clearing the old parent');
        }
        this$static.parent_0 = parent_0;
        parent_0.attached && this$static.onAttach();
    }
}

defineClass(91, 98, $intern_90);
_.doAttachChildren = function doAttachChildren(){
}
;
_.doDetachChildren = function doDetachChildren(){
}
;
_.fireEvent = function fireEvent_0(event_0){
    $fireEvent_0(this, event_0);
}
;
_.onAttach = function onAttach(){
    $onAttach(this);
}
;
_.onBrowserEvent = function onBrowserEvent_0(event_0){
    var related;
    switch ($clinit_DOM() , $eventGetTypeInt(event_0.type)) {
        case 16:
    case 32:
        related = event_0.relatedTarget;
        if (!!related && $isOrHasChild(this.element, related)) {
            return;
        }

    }
    fireNativeEvent(event_0, this, this.element);
}
;
_.onDetach = function onDetach(){
    $onDetach(this);
}
;
_.onUnload = function onUnload(){
}
;
_.attached = false;
_.eventsToSink = 0;
var Lcom_google_gwt_user_client_ui_Widget_2_classLit = createForClass('com.google.gwt.user.client.ui', 'Widget', 91, Lcom_google_gwt_user_client_ui_UIObject_2_classLit);
defineClass(881, 91, $intern_90);
_.doAttachChildren = function doAttachChildren_0(){
    tryCommand(this, ($clinit_AttachDetachException() , attachCommand));
}
;
_.doDetachChildren = function doDetachChildren_0(){
    tryCommand(this, ($clinit_AttachDetachException() , detachCommand));
}
;
var Lcom_google_gwt_user_client_ui_Panel_2_classLit = createForClass('com.google.gwt.user.client.ui', 'Panel', 881, Lcom_google_gwt_user_client_ui_Widget_2_classLit);
function $remove(this$static, w){
    if (this$static.widget != w) {
        return false;
    }
    try {
        $setParent(w, null);
    }
    finally {
        $removeChild(this$static.getContainerElement(), ($clinit_DOM() , w.element));
        this$static.widget = null;
    }
    return true;
}

function $setWidget(this$static, w){
    if (w == this$static.widget) {
        return;
    }
    !!w && $removeFromParent(w);
    !!this$static.widget && $remove(this$static, this$static.widget);
    this$static.widget = w;
    if (w) {
        $clinit_DOM();
        $appendChild_0(this$static.getContainerElement(), resolve(this$static.widget.element));
        $setParent(w, this$static);
    }
}

function SimplePanel(){
    SimplePanel_0.call(this, ($clinit_DOM() , $doc.createElement('div')));
}

function SimplePanel_0(elem){
    $setElement_0(this, ($clinit_DOM() , elem));
}

defineClass(381, 881, $intern_90);
_.getContainerElement = function getContainerElement(){
    return $clinit_DOM() , this.element;
}
;
_.iterator_1 = function iterator_4(){
    return new SimplePanel$1(this);
}
;
_.remove_0 = function remove_2(w){
    return $remove(this, w);
}
;
var Lcom_google_gwt_user_client_ui_SimplePanel_2_classLit = createForClass('com.google.gwt.user.client.ui', 'SimplePanel', 381, Lcom_google_gwt_user_client_ui_Panel_2_classLit);
function $eventTargetsPopup(this$static, event_0){
    var target;
    target = $eventGetTarget(event_0);
    if (is_0(target)) {
        return $isOrHasChild(($clinit_DOM() , this$static.element), target);
    }
    return false;
}

function $hide(this$static){
    if (!this$static.showing) {
        return;
    }
    $setState(this$static.resizeAnimation, false, false);
    fire_1(this$static);
}

function $previewNativeEvent(this$static, event_0){
    var eventTargetsPopupOrPartner, nativeEvent, target, type_0;
    if (event_0.isCanceled || !this$static.previewAllNativeEvents && event_0.isConsumed) {
        this$static.modal && (event_0.isCanceled = true);
        return;
    }
    event_0.isFirstHandler && (event_0.nativeEvent , false) && (event_0.isCanceled = true);
    if (event_0.isCanceled) {
        return;
    }
    nativeEvent = event_0.nativeEvent;
    eventTargetsPopupOrPartner = $eventTargetsPopup(this$static, nativeEvent);
    eventTargetsPopupOrPartner && (event_0.isConsumed = true);
    this$static.modal && (event_0.isCanceled = true);
    type_0 = ($clinit_DOM() , $eventGetTypeInt(nativeEvent.type));
    switch (type_0) {
        case 512:
    case 256:
case 128:
    {
        $eventGetKeyCode(nativeEvent) & $intern_2;
        ($eventGetShiftKey(nativeEvent)?1:0) | ($eventGetMetaKey(nativeEvent)?8:0) | ($eventGetCtrlKey(nativeEvent)?2:0) | ($eventGetAltKey(nativeEvent)?4:0);
        return;
    }

case 4:
    case $intern_28:
        {
            if (sCaptureElem) {
                event_0.isConsumed = true;
                return;
            }
        }

        if (!eventTargetsPopupOrPartner && this$static.autoHide) {
            $hide(this$static);
            return;
        }

        break;
    case 8:
case 64:
    case 1:
case 2:
    case $intern_22:
        {
            if (sCaptureElem) {
                event_0.isConsumed = true;
                return;
            }
            break;
        }

    case 2048:
        {
            target = $eventGetTarget(nativeEvent);
            if (this$static.modal && !eventTargetsPopupOrPartner && !!target) {
                target.blur && target != $doc.body && target.blur();
                event_0.isCanceled = true;
                return;
            }
            break;
        }

    }
}

function $setPopupPosition(this$static, left, top_0){
    var elem;
    this$static.leftPosition = left;
    this$static.topPosition = top_0;
    left -= 0;
    top_0 -= 0;
    elem = ($clinit_DOM() , this$static.element);
    elem.style['left'] = left + ($clinit_Style$Unit() , 'px');
    elem.style['top'] = top_0 + 'px';
}

function $show(this$static){
    if (this$static.showing) {
        return;
    }
    else 
        this$static.attached && $removeFromParent(this$static);
    $setState(this$static.resizeAnimation, true, false);
}

function $updateHandlers(this$static){
    if (this$static.nativePreviewHandlerRegistration) {
        $removeHandler_0(this$static.nativePreviewHandlerRegistration.real);
        this$static.nativePreviewHandlerRegistration = null;
    }
    if (this$static.historyHandlerRegistration) {
        $removeHandler_0(this$static.historyHandlerRegistration.real);
        this$static.historyHandlerRegistration = null;
    }
    if (this$static.showing) {
        this$static.nativePreviewHandlerRegistration = addNativePreviewHandler(new PopupPanel$3(this$static));
        this$static.historyHandlerRegistration = addValueChangeHandler(new PopupPanel$4(this$static));
    }
}

defineClass(382, 381, $intern_90);
_.getContainerElement = function getContainerElement_0(){
    return $clinit_DOM() , $getFirstChildElement(this.element);
}
;
_.onUnload = function onUnload_0(){
    this.showing && $setState(this.resizeAnimation, false, true);
}
;
_.autoHide = false;
_.autoHideOnHistoryEvents = false;
_.isGlassEnabled = false;
_.leftPosition = 0;
_.modal = false;
_.previewAllNativeEvents = false;
_.showing = false;
_.topPosition = 0;
var Lcom_google_gwt_user_client_ui_PopupPanel_2_classLit = createForClass('com.google.gwt.user.client.ui', 'PopupPanel', 382, Lcom_google_gwt_user_client_ui_SimplePanel_2_classLit);
function $add_8(this$static, w){
    $add_12(this$static.logArea, w);
    $setScrollPosition(this$static.scrollPanel, (($clinit_DOM() , this$static.scrollPanel.element).scrollHeight || 0) | 0);
}

function LoggingPopup(){
    var bottomBar, mainPanel, maxmin, titleBar;
    SimplePanel.call(this);
    this.glassResizer = new PopupPanel$1;
    this.leftPosition = -1;
    this.resizeAnimation = new PopupPanel$ResizeAnimation(this);
    this.topPosition = -1;
    $appendChild_0(($clinit_DOM() , this.element), $doc.createElement('div'));
    $setPopupPosition(this, 0, 0);
    $setClassName($getParentElement($getFirstChildElement(this.element)), 'gwt-PopupPanel');
    $setClassName($getFirstChildElement(this.element), 'popupContent');
    this.autoHide = false;
    this.autoHideOnHistoryEvents = false;
    this.modal = false;
    mainPanel = new VerticalPanel;
    $setPropertyString(mainPanel.table, 'border', '1');
    mainPanel.element.style['backgroundColor'] = 'white';
    titleBar = new HTML('<center><b>Logging<\/b><\/center>');
    $add_12(mainPanel, titleBar);
    new LoggingPopup$WindowMoveHandler(this, titleBar);
    this.scrollPanel = new LoggingPopup$ScrollPanelWithMinSize;
    $add_12(mainPanel, this.scrollPanel);
    this.logArea = new VerticalPanel;
    $setWidget(this.scrollPanel, this.logArea);
    $setPixelSize_0(this.scrollPanel, 300, 200);
    bottomBar = new HorizontalPanel;
    $add_12(mainPanel, bottomBar);
    bottomBar.element.style['width'] = '100%';
    $setVerticalAlignment(bottomBar, ($clinit_HasVerticalAlignment() , ALIGN_BOTTOM));
    maxmin = new Button;
    $add_11(bottomBar, maxmin);
    $addDomHandler(maxmin, new LoggingPopup$1(this, maxmin), ($clinit_ClickEvent() , $clinit_ClickEvent() , TYPE));
    this.resizeIcon = new HTML("<div style='font-size:200%; line-height:75%'>\u21F2<\/div>");
    $setAutoHorizontalAlignment(this.resizeIcon, ($clinit_HasHorizontalAlignment() , ALIGN_RIGHT));
    $add_11(bottomBar, this.resizeIcon);
    new LoggingPopup$WindowResizeHandler(this, this.resizeIcon);
    $setWidget(this, mainPanel);
    $show(this);
}

defineClass(669, 382, $intern_90, LoggingPopup);
var Lcom_google_gwt_logging_client_LoggingPopup_2_classLit = createForClass('com.google.gwt.logging.client', 'LoggingPopup', 669, Lcom_google_gwt_user_client_ui_PopupPanel_2_classLit);
function $onClick(this$static){
    if ($equals_5($getElement(this$static.val$maxmin2).textContent, 'Minimize')) {
        $setText(this$static.val$maxmin2, 'Maximize');
        $setVisible(this$static.this$01.scrollPanel, false);
        $setVisible(this$static.this$01.resizeIcon, false);
    }
    else {
        $setVisible(this$static.this$01.scrollPanel, true);
        $setVisible(this$static.this$01.resizeIcon, true);
        $setText(this$static.val$maxmin2, 'Minimize');
    }
}

function LoggingPopup$1(this$0, val$maxmin){
    this.this$01 = this$0;
    this.val$maxmin2 = val$maxmin;
}

defineClass(674, 1, {899:1, 135:1}, LoggingPopup$1);
var Lcom_google_gwt_logging_client_LoggingPopup$1_2_classLit = createForClass('com.google.gwt.logging.client', 'LoggingPopup/1', 674, Ljava_lang_Object_2_classLit);
function LoggingPopup$MouseDragHandler(dragHandle){
    this.dragHandle = dragHandle;
    $addDomHandler(dragHandle, this, ($clinit_MouseDownEvent() , $clinit_MouseDownEvent() , TYPE_0));
    $addDomHandler(dragHandle, this, ($clinit_MouseUpEvent() , $clinit_MouseUpEvent() , TYPE_2));
    $addDomHandler(dragHandle, this, ($clinit_MouseMoveEvent() , $clinit_MouseMoveEvent() , TYPE_1));
}

defineClass(436, 1, $intern_91);
_.onMouseDown = function onMouseDown(event_0){
    this.dragging = true;
    setCapture(($clinit_DOM() , this.dragHandle.element));
    this.dragStartX = $eventGetSubPixelClientX(event_0.nativeEvent) | 0;
    this.dragStartY = $eventGetSubPixelClientY(event_0.nativeEvent) | 0;
    $eventPreventDefault((null , currentEvent));
}
;
_.onMouseMove = function onMouseMove(event_0){
    if (this.dragging) {
        this.handleDrag(($eventGetSubPixelClientX(event_0.nativeEvent) | 0) - this.dragStartX, ($eventGetSubPixelClientY(event_0.nativeEvent) | 0) - this.dragStartY);
        this.dragStartX = $eventGetSubPixelClientX(event_0.nativeEvent) | 0;
        this.dragStartY = $eventGetSubPixelClientY(event_0.nativeEvent) | 0;
    }
}
;
_.onMouseUp = function onMouseUp(event_0){
    this.dragging = false;
    releaseCapture(($clinit_DOM() , this.dragHandle.element));
}
;
_.dragStartX = 0;
_.dragStartY = 0;
_.dragging = false;
var Lcom_google_gwt_logging_client_LoggingPopup$MouseDragHandler_2_classLit = createForClass('com.google.gwt.logging.client', 'LoggingPopup/MouseDragHandler', 436, Ljava_lang_Object_2_classLit);
function $getHorizontalScrollPosition(this$static){
    return $getScrollLeft(($clinit_DOM() , this$static.scrollableElem));
}

function $getMaximumHorizontalScrollPosition(this$static){
    return $getMaximumHorizontalScrollPosition_0((!impl_1 && (impl_1 = new ScrollImpl) , $clinit_DOM() , this$static.scrollableElem));
}

function $getMaximumVerticalScrollPosition(this$static){
    return ((($clinit_DOM() , this$static.scrollableElem).scrollHeight || 0) | 0) - (this$static.scrollableElem.clientHeight | 0);
}

function $getMinimumHorizontalScrollPosition(this$static){
    return $getMinimumHorizontalScrollPosition_0((!impl_1 && (impl_1 = new ScrollImpl) , $clinit_DOM() , this$static.scrollableElem));
}

function $getVerticalScrollPosition(this$static){
    return (($clinit_DOM() , this$static.scrollableElem).scrollTop || 0) | 0;
}

function $setHorizontalScrollPosition(this$static, position){
    $setScrollLeft(($clinit_DOM() , this$static.scrollableElem), position);
}

function $setScrollPosition(this$static, position){
    $setScrollTop(($clinit_DOM() , this$static.scrollableElem), position);
}

function $setTouchScrollingDisabled(this$static){
    var scroller, ua;
    if (this$static.touchScroller) {
        return false;
    }
    this$static.touchScroller = (scroller = (!isSupported && (isSupported = ($clinit_Boolean() , !impl && (impl = new TouchEvent$TouchSupportDetector) , impl.isSupported && !(ua = navigator.userAgent.toLowerCase() , /android ([3-9]+)\.([0-9]+)/.exec(ua) != null)?TRUE_1:FALSE_1)) , isSupported.value_0?new TouchScroller:null) , !!scroller && $setTargetWidget(scroller, this$static) , scroller);
    return !this$static.touchScroller;
}

function $setVerticalScrollPosition(this$static, position){
    $setScrollTop(($clinit_DOM() , this$static.scrollableElem), position);
}

defineClass(670, 381, $intern_90);
_.getContainerElement = function getContainerElement_1(){
    return $clinit_DOM() , this.containerElem;
}
;
_.onAttach = function onAttach_0(){
    $onAttach(this);
    setEventListener(($clinit_DOM() , this.scrollableElem), this);
}
;
_.onDetach = function onDetach_0(){
    setEventListener(($clinit_DOM() , this.scrollableElem), null);
    $onDetach(this);
}
;
var Lcom_google_gwt_user_client_ui_ScrollPanel_2_classLit = createForClass('com.google.gwt.user.client.ui', 'ScrollPanel', 670, Lcom_google_gwt_user_client_ui_SimplePanel_2_classLit);
function $incrementPixelSize(this$static, width_0, height){
    $setPixelSize_0(this$static, this$static.scrollPanelWidth + width_0, this$static.scrollPanelHeight + height);
}

function $setPixelSize_0(this$static, width_0, height){
    $setPixelSize(this$static, this$static.scrollPanelWidth = max_1(width_0, this$static.minScrollPanelWidth), this$static.scrollPanelHeight = max_1(height, this$static.minScrollPanelHeight));
}

function LoggingPopup$ScrollPanelWithMinSize(){
    SimplePanel.call(this);
    this.scrollableElem = ($clinit_DOM() , this.element);
    this.containerElem = $doc.createElement('div');
    $appendChild_0(this.scrollableElem, this.containerElem);
    this.scrollableElem.style['overflow'] = ($clinit_Style$Overflow() , 'auto');
    this.scrollableElem.style['position'] = ($clinit_Style$Position() , 'relative');
    this.containerElem.style['position'] = 'relative';
    $setPropertyImpl(this.scrollableElem.style, 'zoom', '1');
    $setPropertyImpl(this.containerElem.style, 'zoom', '1');
    $setTouchScrollingDisabled(this);
    !impl_1 && (impl_1 = new ScrollImpl);
    this.minScrollPanelHeight = 100;
    this.minScrollPanelWidth = 100;
}

defineClass(671, 670, $intern_90, LoggingPopup$ScrollPanelWithMinSize);
_.minScrollPanelHeight = 0;
_.minScrollPanelWidth = 0;
_.scrollPanelHeight = 0;
_.scrollPanelWidth = 0;
var Lcom_google_gwt_logging_client_LoggingPopup$ScrollPanelWithMinSize_2_classLit = createForClass('com.google.gwt.logging.client', 'LoggingPopup/ScrollPanelWithMinSize', 671, Lcom_google_gwt_user_client_ui_ScrollPanel_2_classLit);
function LoggingPopup$WindowMoveHandler(this$0, dragHandle){
    this.this$01 = this$0;
    LoggingPopup$MouseDragHandler.call(this, dragHandle);
}

defineClass(672, 436, $intern_91, LoggingPopup$WindowMoveHandler);
_.handleDrag = function handleDrag(absX, absY){
    var moveTarget;
    moveTarget = this.this$01;
    $setWidgetPosition(($clinit_RootPanel() , get_0()), moveTarget, $getAbsoluteLeft(($clinit_DOM() , moveTarget.element)) + absX, $getAbsoluteTop(moveTarget.element) + absY);
}
;
var Lcom_google_gwt_logging_client_LoggingPopup$WindowMoveHandler_2_classLit = createForClass('com.google.gwt.logging.client', 'LoggingPopup/WindowMoveHandler', 672, Lcom_google_gwt_logging_client_LoggingPopup$MouseDragHandler_2_classLit);
function LoggingPopup$WindowResizeHandler(this$0, dragHandle){
    this.this$01 = this$0;
    LoggingPopup$MouseDragHandler.call(this, dragHandle);
}

defineClass(673, 436, $intern_91, LoggingPopup$WindowResizeHandler);
_.handleDrag = function handleDrag_0(absX, absY){
    $incrementPixelSize(this.this$01.scrollPanel, absX, absY);
}
;
var Lcom_google_gwt_logging_client_LoggingPopup$WindowResizeHandler_2_classLit = createForClass('com.google.gwt.logging.client', 'LoggingPopup/WindowResizeHandler', 673, Lcom_google_gwt_logging_client_LoggingPopup$MouseDragHandler_2_classLit);
function TextLogFormatter(){
    this.showStackTraces = false;
}

defineClass(591, 879, {}, TextLogFormatter);
_.format_0 = function format_2(event_0){
    var message;
    message = new StringBuilder;
    $append_10(message, $getRecordInfo(event_0, '\n'));
    $append_10(message, event_0.msg);
    this.showStackTraces && !!event_0.thrown && $printStackTrace(event_0.thrown, new StackTracePrintStream(message));
    return message.string;
}
;
_.showStackTraces = false;
var Lcom_google_gwt_logging_client_TextLogFormatter_2_classLit = createForClass('com.google.gwt.logging.client', 'TextLogFormatter', 591, Lcom_google_gwt_logging_impl_FormatterImpl_2_classLit);
function FormatterImpl$1($anonymous0, val$builder){
    this.val$builder3 = val$builder;
    this.val$indent4 = '\t';
    this.val$newline5 = '\n';
    StackTracePrintStream.call(this, $anonymous0);
}

defineClass(592, 367, {}, FormatterImpl$1);
_.append_0 = function append_4(str){
    $append_10(this.val$builder3, $replaceAll(str, '\t', this.val$indent4));
}
;
_.newLine = function newLine_1(){
    $append_10(this.val$builder3, this.val$newline5);
}
;
var Lcom_google_gwt_logging_impl_FormatterImpl$1_2_classLit = createForClass('com.google.gwt.logging.impl', 'FormatterImpl/1', 592, Lcom_google_gwt_logging_impl_StackTracePrintStream_2_classLit);
function $parse_1(name_0){
    name_0 = name_0.toUpperCase();
    if ($equals_5(name_0, 'ALL')) {
        return $clinit_Level() , ALL;
    }
    else if ($equals_5(name_0, 'CONFIG')) {
        return $clinit_Level() , CONFIG;
    }
    else if ($equals_5(name_0, 'FINE')) {
        return $clinit_Level() , FINE;
    }
    else if ($equals_5(name_0, 'FINER')) {
        return $clinit_Level() , FINER;
    }
    else if ($equals_5(name_0, 'FINEST')) {
        return $clinit_Level() , FINEST;
    }
    else if ($equals_5(name_0, 'INFO')) {
        return $clinit_Level() , INFO;
    }
    else if ($equals_5(name_0, 'OFF')) {
        return $clinit_Level() , OFF;
    }
    else if ($equals_5(name_0, 'SEVERE')) {
        return $clinit_Level() , SEVERE;
    }
    else if ($equals_5(name_0, 'WARNING')) {
        return $clinit_Level() , WARNING;
    }
    throw new IllegalArgumentException_0('Invalid level "' + name_0 + '"');
}

function $addHandler_1(this$static, handler){
    $add_16(this$static.handlers, handler);
}

function $fine(this$static, msg){
    $log(this$static, ($clinit_Level() , FINE), msg, null);
}

function $finest(this$static, msg){
    $log(this$static, ($clinit_Level() , FINEST), msg, null);
}

function $getEffectiveLevel(this$static){
    var effectiveLevel, logger;
    if (this$static.level_0) {
        return this$static.level_0;
    }
    logger = this$static.parent_0;
    while (logger) {
        effectiveLevel = logger.impl.level_0;
        if (effectiveLevel) {
            return effectiveLevel;
        }
        logger = logger.impl.parent_0;
    }
    return $clinit_Level() , INFO;
}

function $getHandlers(this$static){
    return dynamicCast($toArray(this$static.handlers, initDim(Ljava_util_logging_Handler_2_classLit, $intern_92, 199, this$static.handlers.array.length, 0, 1)), 521);
}

function $info(this$static, msg){
    $log(this$static, ($clinit_Level() , INFO), msg, null);
}

function $isLoggable(this$static, messageLevel){
    return $getEffectiveLevel(this$static).intValue() <= messageLevel.intValue();
}

function $log(this$static, level, msg, thrown){
    var record;
    if ($getEffectiveLevel(this$static).intValue() <= level.intValue()) {
        record = new LogRecord(level, msg);
        record.thrown = thrown;
        $setLoggerName(record, this$static.name_0);
        $log_0(this$static, record);
    }
}

function $log_0(this$static, record){
    var handler, handler$array, handler$array0, handler$index, handler$index0, handler$max, handler$max0, logger;
    if ($isLoggable(this$static, record.level_0)) {
        for (handler$array0 = dynamicCast($toArray(this$static.handlers, initDim(Ljava_util_logging_Handler_2_classLit, $intern_92, 199, this$static.handlers.array.length, 0, 1)), 521) , handler$index0 = 0 , handler$max0 = handler$array0.length; handler$index0 < handler$max0; ++handler$index0) {
            handler = handler$array0[handler$index0];
            handler.publish(record);
        }
        logger = this$static.useParentHandlers?this$static.parent_0:null;
        while (logger) {
            for (handler$array = $getHandlers(logger.impl) , handler$index = 0 , handler$max = handler$array.length; handler$index < handler$max; ++handler$index) {
                handler = handler$array[handler$index];
                handler.publish(record);
            }
            logger = logger.impl.useParentHandlers?logger.impl.parent_0:null;
        }
    }
}

function $removeHandler(this$static, handler){
    $remove_7(this$static.handlers, handler);
}

function $setLevel_0(this$static, newLevel){
    this$static.level_0 = newLevel;
}

function $setName_0(this$static, newName){
    this$static.name_0 = newName;
}

function $setParent_0(this$static, newParent){
    !!newParent && (this$static.parent_0 = newParent);
}

function $severe(this$static, msg){
    $log(this$static, ($clinit_Level() , SEVERE), msg, null);
}

function $warning(this$static, msg){
    $log(this$static, ($clinit_Level() , WARNING), msg, null);
}

function LoggerImplRegular(){
    this.useParentHandlers = true;
    this.handlers = new ArrayList;
}

defineClass(82, 1, {}, LoggerImplRegular);
_.level_0 = null;
_.useParentHandlers = false;
var Lcom_google_gwt_logging_impl_LoggerImplRegular_2_classLit = createForClass('com.google.gwt.logging.impl', 'LoggerImplRegular', 82, Ljava_lang_Object_2_classLit);
function $exec(this$static, input_0){
    return this$static.exec(input_0);
}

function $test(this$static, input_0){
    return this$static.test(input_0);
}

function $calcNewVelocity(initialVelocity, decelFactor, oldVelocity, minDecel){
    var maxVelocityX, minVelocityX, newVelocity;
    newVelocity = initialVelocity * decelFactor;
    if (oldVelocity >= 0) {
        maxVelocityX = 0 > oldVelocity - minDecel?0:oldVelocity - minDecel;
        newVelocity = newVelocity < maxVelocityX?newVelocity:maxVelocityX;
    }
    else {
        minVelocityX = 0 < oldVelocity + minDecel?0:oldVelocity + minDecel;
        newVelocity = newVelocity > minVelocityX?newVelocity:minVelocityX;
    }
    return newVelocity;
}

function $updateState(state){
    var decelFactor, dist, elapsedMillis, ellapsedMillis, initialVelocity, minDecel, newVelocity, newVelocityX, newVelocityY, oldVelocity, position, totalEllapsedMillis;
    ellapsedMillis = state.elapsedMillis;
    totalEllapsedMillis = state.cumulativeElapsedMillis;
    initialVelocity = state.initialVelocity;
    oldVelocity = state.velocity;
    decelFactor = pow_0(0.9993, totalEllapsedMillis);
    minDecel = ellapsedMillis * 5.0E-4;
    newVelocityX = $calcNewVelocity(initialVelocity.x_0, decelFactor, oldVelocity.x_0, minDecel);
    newVelocityY = $calcNewVelocity(initialVelocity.y_0, decelFactor, oldVelocity.y_0, minDecel);
    newVelocity = new Point(newVelocityX, newVelocityY);
    state.velocity = newVelocity;
    elapsedMillis = state.elapsedMillis;
    dist = $mult(newVelocity, new Point(elapsedMillis, elapsedMillis));
    position = state.position_0;
    $setPosition(state, new Point(position.x_0 + dist.x_0, position.y_0 + dist.y_0));
    if (abs_5(newVelocity.x_0) < 0.02 && abs_5(newVelocity.y_0) < 0.02) {
        return false;
    }
    return true;
}

function DefaultMomentum(){
}

defineClass(845, 1, {}, DefaultMomentum);
var Lcom_google_gwt_touch_client_DefaultMomentum_2_classLit = createForClass('com.google.gwt.touch.client', 'DefaultMomentum', 845, Ljava_lang_Object_2_classLit);
function $setCumulativeElapsedMillis(this$static, cumulativeElapsedMillis){
    this$static.cumulativeElapsedMillis = cumulativeElapsedMillis;
}

function $setElapsedMillis(this$static, elapsedMillis){
    this$static.elapsedMillis = elapsedMillis;
}

function $setPosition(this$static, position){
    this$static.position_0 = position;
}

function Momentum$State(initialPosition, initialVelocity){
    this.initialVelocity = initialVelocity;
    this.position_0 = new Point_0(initialPosition);
    this.velocity = new Point_0(initialVelocity);
}

defineClass(846, 1, {}, Momentum$State);
_.cumulativeElapsedMillis = 0;
_.elapsedMillis = 0;
var Lcom_google_gwt_touch_client_Momentum$State_2_classLit = createForClass('com.google.gwt.touch.client', 'Momentum/State', 846, Ljava_lang_Object_2_classLit);
function $minus(this$static, c){
    return new Point(this$static.x_0 - c.x_0, this$static.y_0 - c.y_0);
}

function $mult(this$static, c){
    return new Point(this$static.x_0 * c.x_0, this$static.y_0 * c.y_0);
}

function $plus(this$static, c){
    return new Point(this$static.x_0 + c.x_0, this$static.y_0 + c.y_0);
}

function Point(x_0, y_0){
    this.x_0 = x_0;
    this.y_0 = y_0;
}

function Point_0(c){
    Point.call(this, c.x_0, c.y_0);
}

defineClass(106, 1, {106:1}, Point, Point_0);
_.equals$ = function equals_54(obj){
    var c;
    if (!instanceOf(obj, 106)) {
        return false;
    }
    c = dynamicCast(obj, 106);
    return this.x_0 == c.x_0 && this.y_0 == c.y_0;
}
;
_.hashCode$ = function hashCode_62(){
    return round_int(this.x_0) ^ round_int(this.y_0);
}
;
_.toString$ = function toString_79(){
    return 'Point(' + this.x_0 + ',' + this.y_0 + ')';
}
;
_.x_0 = 0;
_.y_0 = 0;
var Lcom_google_gwt_touch_client_Point_2_classLit = createForClass('com.google.gwt.touch.client', 'Point', 106, Ljava_lang_Object_2_classLit);
function $calculateEndVelocity(from, to){
    var dist, time;
    time = to.time_0 - from.time_0;
    if (time <= 0) {
        return null;
    }
    dist = $minus(from.point, to.point);
    return new Point(dist.x_0 / time, dist.y_0 / time);
}

function $cancelAll(this$static){
    this$static.touching = false;
    this$static.dragging = false;
    this$static.momentumCommand = null;
}

function $getTouchFromEvent(event_0){
    var touches;
    touches = event_0.nativeEvent.touches;
    return touches.length > 0?touches[0]:null;
}

function $getWidgetScrollPosition(this$static){
    return new Point($getHorizontalScrollPosition(this$static.widget), $getVerticalScrollPosition(this$static.widget));
}

function $hitTest(point1, point2){
    var absDiffX, absDiffY, diff;
    diff = new Point(point1.x_0 - point2.x_0, point1.y_0 - point2.y_0);
    absDiffX = abs_5(diff.x_0);
    absDiffY = abs_5(diff.y_0);
    return absDiffX <= 25 && absDiffY <= 25;
}

function $isClickScrollTriggeringTouch(this$static, clickPoint){
    if (this$static.recentScrollTriggeringTouchPosition.point) {
        return $hitTest(clickPoint, this$static.recentScrollTriggeringTouchPosition.point);
    }
    return false;
}

function $isClickTouchPositionDuringMomentum(this$static, clickPoint){
    var currentTime, point, point$iterator, same;
    currentTime = now_1();
    same = false;
    for (point$iterator = new AbstractList$IteratorImpl(this$static.touchPositionsDuringMomentum); point$iterator.i < point$iterator.this$01_0.size_1();) {
        point = (checkCriticalElement(point$iterator.i < point$iterator.this$01_0.size_1()) , dynamicCast(point$iterator.this$01_0.get_1(point$iterator.last = point$iterator.i++), 211));
        if (currentTime - point.time_0 <= 2500 && $hitTest(clickPoint, point.point)) {
            same = true;
            break;
        }
    }
    return same;
}

function $onDragEnd(this$static){
    var endVelocity;
    if (!this$static.momentum) {
        return;
    }
    endVelocity = $calculateEndVelocity(this$static.recentTouchPosition, this$static.lastTouchPosition);
    if (endVelocity) {
        this$static.momentumCommand = new TouchScroller$MomentumCommand(this$static, endVelocity);
        scheduleFixedDelayImpl(($clinit_SchedulerImpl() , this$static.momentumCommand), 16);
    }
}

function $onTouchEnd(this$static){
    if (!this$static.touching) {
        return;
    }
    this$static.touching = false;
    if (this$static.dragging) {
        this$static.dragging = false;
        $onDragEnd(this$static);
    }
}

function $onTouchMove(this$static, event_0){
    var absDiffX, absDiffY, diff, hMax, hMin, hPosition, touch, touchPoint, touchTime, trackingTime, vMax, vPosition, diff_0, curScrollPosition;
    if (!this$static.touching) {
        return;
    }
    touch = $getTouchFromEvent(event_0);
    touchPoint = new Point($touchGetSubPixelPageX(touch) | 0, $touchGetSubPixelPageY(touch) | 0);
    touchTime = now_1();
    $setTemporalPoint(this$static.lastTouchPosition, touchPoint, touchTime);
    if (!this$static.dragging) {
        diff = $minus(touchPoint, this$static.startTouchPosition);
        absDiffX = abs_5(diff.x_0);
        absDiffY = abs_5(diff.y_0);
        if (absDiffX > 5 || absDiffY > 5) {
            $setTemporalPoint(this$static.recentScrollTriggeringTouchPosition, this$static.recentTouchPosition.point, this$static.recentTouchPosition.time_0);
            if (absDiffX > absDiffY) {
                hPosition = $getHorizontalScrollPosition(this$static.widget);
                hMin = $getMinimumHorizontalScrollPosition(this$static.widget);
                hMax = $getMaximumHorizontalScrollPosition(this$static.widget);
                if (diff.x_0 < 0 && hMax <= hPosition) {
                    $cancelAll(this$static);
                    return;
                }
                else if (diff.x_0 > 0 && hMin >= hPosition) {
                    $cancelAll(this$static);
                    return;
                }
            }
            else {
                vPosition = $getVerticalScrollPosition(this$static.widget);
                vMax = $getMaximumVerticalScrollPosition(this$static.widget);
                if (diff.y_0 < 0 && vMax <= vPosition) {
                    $cancelAll(this$static);
                    return;
                }
                else if (diff.y_0 > 0 && 0 >= vPosition) {
                    $cancelAll(this$static);
                    return;
                }
            }
            this$static.dragging = true;
        }
    }
    $eventPreventDefault(event_0.nativeEvent);
    if (this$static.dragging) {
        diff_0 = $minus(this$static.startTouchPosition, this$static.lastTouchPosition.point);
        curScrollPosition = $plus(this$static.startScrollPosition, diff_0);
        $setHorizontalScrollPosition(this$static.widget, round_int(curScrollPosition.x_0));
        $setVerticalScrollPosition(this$static.widget, round_int(curScrollPosition.y_0));
        trackingTime = touchTime - this$static.recentTouchPosition.time_0;
        if (trackingTime > 200 && !!this$static.recentTouchPositionOnDeck) {
            $setTemporalPoint(this$static.recentTouchPosition, this$static.recentTouchPositionOnDeck.point, this$static.recentTouchPositionOnDeck.time_0);
            this$static.recentTouchPositionOnDeck = null;
        }
        else 
            trackingTime > 100 && !this$static.recentTouchPositionOnDeck && (this$static.recentTouchPositionOnDeck = new TouchScroller$TemporalPoint_0(touchPoint, touchTime));
    }
}

function $onTouchStart(this$static, event_0){
    var startTouchTime, touch;
    $setTemporalPoint(this$static.recentScrollTriggeringTouchPosition, null, 0);
    if (this$static.touching) {
        return;
    }
    touch = $getTouchFromEvent(event_0);
    this$static.startTouchPosition = new Point($touchGetSubPixelPageX(touch) | 0, $touchGetSubPixelPageY(touch) | 0);
    startTouchTime = now_1();
    $setTemporalPoint(this$static.recentTouchPosition, this$static.startTouchPosition, startTouchTime);
    $setTemporalPoint(this$static.lastTouchPosition, this$static.startTouchPosition, startTouchTime);
    this$static.recentTouchPositionOnDeck = null;
    if (this$static.momentumCommand) {
        $add_16(this$static.touchPositionsDuringMomentum, new TouchScroller$TemporalPoint_0(this$static.startTouchPosition, startTouchTime));
        scheduleFixedDelayImpl(($clinit_SchedulerImpl() , this$static.momentumTouchRemovalCommand), 2500);
    }
    this$static.startScrollPosition = new Point($getHorizontalScrollPosition(this$static.widget), $getVerticalScrollPosition(this$static.widget));
    $cancelAll(this$static);
    this$static.touching = true;
}

function $removeAttachHandler(this$static){
    if (this$static.attachHandlerReg) {
        $removeHandler_0(this$static.attachHandlerReg.real);
        this$static.attachHandlerReg = null;
    }
}

function $removeBustClickHandler(this$static){
    if (this$static.bustClickHandlerReg) {
        $removeHandler_0(this$static.bustClickHandlerReg.real);
        this$static.bustClickHandlerReg = null;
    }
}

function $setMomentum(this$static, momentum){
    this$static.momentum = momentum;
}

function $setTargetWidget(this$static, widget){
    var reg, reg$iterator;
    if (this$static.widget == widget) {
        return;
    }
    $cancelAll(this$static);
    for (reg$iterator = new AbstractList$IteratorImpl(this$static.handlerRegs); reg$iterator.i < reg$iterator.this$01_0.size_1();) {
        reg = (checkCriticalElement(reg$iterator.i < reg$iterator.this$01_0.size_1()) , dynamicCast(reg$iterator.this$01_0.get_1(reg$iterator.last = reg$iterator.i++), 900));
        $removeHandler_0(reg.real);
    }
    this$static.handlerRegs.array = initDim(Ljava_lang_Object_2_classLit, $intern_1, 1, 0, 3, 1);
    $removeAttachHandler(this$static);
    $removeBustClickHandler(this$static);
    this$static.widget = widget;
    widget.attached && ($removeBustClickHandler(this$static) , this$static.bustClickHandlerReg = addNativePreviewHandler(new TouchScroller$6(this$static)));
    this$static.attachHandlerReg = $addHandler_0(widget, new TouchScroller$1(this$static), (!TYPE_7 && (TYPE_7 = new GwtEvent$Type) , TYPE_7));
    $add_16(this$static.handlerRegs, $addDomHandler(widget, new TouchScroller$2(this$static), ($clinit_TouchStartEvent() , $clinit_TouchStartEvent() , TYPE_6)));
    $add_16(this$static.handlerRegs, $addDomHandler(widget, new TouchScroller$3(this$static), ($clinit_TouchMoveEvent() , $clinit_TouchMoveEvent() , TYPE_5)));
    $add_16(this$static.handlerRegs, $addDomHandler(widget, new TouchScroller$4(this$static), ($clinit_TouchEndEvent() , $clinit_TouchEndEvent() , TYPE_4)));
    $add_16(this$static.handlerRegs, $addDomHandler(widget, new TouchScroller$5(this$static), ($clinit_TouchCancelEvent() , $clinit_TouchCancelEvent() , TYPE_3)));
}

function $setWidgetScrollPosition(this$static, position){
    $setHorizontalScrollPosition(this$static.widget, round_int(position.x_0));
    $setVerticalScrollPosition(this$static.widget, round_int(position.y_0));
}

function $setupBustClickHandler(this$static){
    $removeBustClickHandler(this$static);
    this$static.bustClickHandlerReg = addNativePreviewHandler(new TouchScroller$6(this$static));
}

function TouchScroller(){
    this.handlerRegs = new ArrayList;
    this.lastTouchPosition = new TouchScroller$TemporalPoint;
    this.recentTouchPosition = new TouchScroller$TemporalPoint;
    this.recentScrollTriggeringTouchPosition = new TouchScroller$TemporalPoint;
    this.touchPositionsDuringMomentum = new ArrayList;
    this.momentumTouchRemovalCommand = new TouchScroller$MomentumTouchRemovalCommand(this);
    $setMomentum(this, new DefaultMomentum);
}

defineClass(794, 1, {}, TouchScroller);
_.dragging = false;
_.touching = false;
var isSupported;
var Lcom_google_gwt_touch_client_TouchScroller_2_classLit = createForClass('com.google.gwt.touch.client', 'TouchScroller', 794, Ljava_lang_Object_2_classLit);
function TouchScroller$1(this$0){
    this.this$01 = this$0;
}

defineClass(798, 1, {901:1, 135:1}, TouchScroller$1);
var Lcom_google_gwt_touch_client_TouchScroller$1_2_classLit = createForClass('com.google.gwt.touch.client', 'TouchScroller/1', 798, Ljava_lang_Object_2_classLit);
function TouchScroller$2(this$0){
    this.this$01 = this$0;
}

defineClass(799, 1, {902:1, 135:1}, TouchScroller$2);
var Lcom_google_gwt_touch_client_TouchScroller$2_2_classLit = createForClass('com.google.gwt.touch.client', 'TouchScroller/2', 799, Ljava_lang_Object_2_classLit);
function TouchScroller$3(this$0){
    this.this$01 = this$0;
}

defineClass(800, 1, {903:1, 135:1}, TouchScroller$3);
var Lcom_google_gwt_touch_client_TouchScroller$3_2_classLit = createForClass('com.google.gwt.touch.client', 'TouchScroller/3', 800, Ljava_lang_Object_2_classLit);
function TouchScroller$4(this$0){
    this.this$01 = this$0;
}

defineClass(801, 1, {904:1, 135:1}, TouchScroller$4);
var Lcom_google_gwt_touch_client_TouchScroller$4_2_classLit = createForClass('com.google.gwt.touch.client', 'TouchScroller/4', 801, Ljava_lang_Object_2_classLit);
function TouchScroller$5(this$0){
    this.this$01 = this$0;
}

defineClass(802, 1, {905:1, 135:1}, TouchScroller$5);
var Lcom_google_gwt_touch_client_TouchScroller$5_2_classLit = createForClass('com.google.gwt.touch.client', 'TouchScroller/5', 802, Ljava_lang_Object_2_classLit);
function TouchScroller$6(this$0){
    this.this$01 = this$0;
}

defineClass(503, 1, $intern_93, TouchScroller$6);
_.onPreviewNativeEvent = function onPreviewNativeEvent(event_0){
    var clickPoint;
    if (1 == $getTypeInt(event_0.nativeEvent)) {
        clickPoint = new Point($eventGetSubPixelClientX(event_0.nativeEvent) | 0, $eventGetSubPixelClientY(event_0.nativeEvent) | 0);
        if ($isClickScrollTriggeringTouch(this.this$01, clickPoint) || $isClickTouchPositionDuringMomentum(this.this$01, clickPoint)) {
            event_0.isCanceled = true;
            $eventStopPropagation(event_0.nativeEvent);
            $eventPreventDefault(event_0.nativeEvent);
        }
    }
}
;
var Lcom_google_gwt_touch_client_TouchScroller$6_2_classLit = createForClass('com.google.gwt.touch.client', 'TouchScroller/6', 503, Ljava_lang_Object_2_classLit);
function $finish(this$static){
    if (this$static.windowResizeHandler) {
        $removeHandler_0(this$static.windowResizeHandler.real);
        this$static.windowResizeHandler = null;
    }
    this$static == this$static.this$01.momentumCommand && (this$static.this$01.momentumCommand = null);
}

function TouchScroller$MomentumCommand(this$0, endVelocity){
    this.this$01 = this$0;
    this.duration = new Duration;
    this.initialPosition = $getWidgetScrollPosition(this.this$01);
    this.state = new Momentum$State(this.initialPosition, endVelocity);
    this.windowResizeHandler = addResizeHandler(new TouchScroller$MomentumCommand$1(this));
}

defineClass(795, 1, {}, TouchScroller$MomentumCommand);
_.execute_0 = function execute_1(){
    var cumulativeElapsedMillis, hMax, hMin, hPos, notDone, vMax, vPos;
    if (this != this.this$01.momentumCommand) {
        $finish(this);
        return false;
    }
    cumulativeElapsedMillis = $elapsedMillis(this.duration);
    $setElapsedMillis(this.state, cumulativeElapsedMillis - this.lastElapsedMillis);
    this.lastElapsedMillis = cumulativeElapsedMillis;
    $setCumulativeElapsedMillis(this.state, cumulativeElapsedMillis);
    notDone = $updateState(this.state);
    notDone || $finish(this);
    $setWidgetScrollPosition(this.this$01, this.state.position_0);
    hPos = round_int(this.state.position_0.x_0);
    hMin = $getMinimumHorizontalScrollPosition(this.this$01.widget);
    hMax = $getMaximumHorizontalScrollPosition(this.this$01.widget);
    vMax = $getMaximumVerticalScrollPosition(this.this$01.widget);
    vPos = round_int(this.state.position_0.y_0);
    if ((vMax <= vPos || 0 >= vPos) && (hMax <= hPos || hMin >= hPos)) {
        $finish(this);
        return false;
    }
    return notDone;
}
;
_.lastElapsedMillis = 0;
var Lcom_google_gwt_touch_client_TouchScroller$MomentumCommand_2_classLit = createForClass('com.google.gwt.touch.client', 'TouchScroller/MomentumCommand', 795, Ljava_lang_Object_2_classLit);
function TouchScroller$MomentumCommand$1(this$1){
    this.this$11 = this$1;
}

defineClass(797, 1, $intern_94, TouchScroller$MomentumCommand$1);
_.onResize = function onResize(event_0){
    $finish(this.this$11);
}
;
var Lcom_google_gwt_touch_client_TouchScroller$MomentumCommand$1_2_classLit = createForClass('com.google.gwt.touch.client', 'TouchScroller/MomentumCommand/1', 797, Ljava_lang_Object_2_classLit);
function TouchScroller$MomentumTouchRemovalCommand(this$0){
    this.this$01 = this$0;
}

defineClass(796, 1, {}, TouchScroller$MomentumTouchRemovalCommand);
_.execute_0 = function execute_2(){
    var currentTime, iter, point;
    currentTime = now_1();
    iter = new AbstractList$IteratorImpl(this.this$01.touchPositionsDuringMomentum);
    while (iter.i < iter.this$01_0.size_1()) {
        point = (checkCriticalElement(iter.i < iter.this$01_0.size_1()) , dynamicCast(iter.this$01_0.get_1(iter.last = iter.i++), 211));
        currentTime - point.time_0 >= 2500 && (checkState(iter.last != -1) , iter.this$01_0.remove_3(iter.last) , iter.i = iter.last , iter.last = -1);
    }
    return this.this$01.touchPositionsDuringMomentum.array.length != 0;
}
;
var Lcom_google_gwt_touch_client_TouchScroller$MomentumTouchRemovalCommand_2_classLit = createForClass('com.google.gwt.touch.client', 'TouchScroller/MomentumTouchRemovalCommand', 796, Ljava_lang_Object_2_classLit);
function $setTemporalPoint(this$static, point, time){
    this$static.point = point;
    this$static.time_0 = time;
}

function TouchScroller$TemporalPoint(){
}

function TouchScroller$TemporalPoint_0(point, time){
    this.point = point;
    this.time_0 = time;
}

defineClass(211, 1, {211:1}, TouchScroller$TemporalPoint, TouchScroller$TemporalPoint_0);
_.time_0 = 0;
var Lcom_google_gwt_touch_client_TouchScroller$TemporalPoint_2_classLit = createForClass('com.google.gwt.touch.client', 'TouchScroller/TemporalPoint', 211, Ljava_lang_Object_2_classLit);
function $clinit_DOM(){
    $clinit_DOM = emptyMethod;
    $clinit_DOMImplStandard();
}

function dispatchEvent_0(evt, elem){
    $clinit_DOM();
    var eventListener;
    eventListener = getEventListener(elem);
    if (!eventListener) {
        return false;
    }
    dispatchEvent_1(evt, elem, eventListener);
    return true;
}

function dispatchEvent_1(evt, elem, listener){
    $clinit_DOM();
    var prevCurrentEvent;
    prevCurrentEvent = currentEvent;
    currentEvent = evt;
    elem == sCaptureElem && $eventGetTypeInt(evt.type) == $intern_17 && (sCaptureElem = null);
    listener.onBrowserEvent(evt);
    currentEvent = prevCurrentEvent;
}

function previewEvent(evt){
    $clinit_DOM();
    var ret;
    ret = fire_4(handlers_0, evt);
    if (!ret && !!evt) {
        $eventStopPropagation(evt);
        $eventPreventDefault(evt);
    }
    return ret;
}

function releaseCapture(elem){
    $clinit_DOM();
    !!sCaptureElem && elem == sCaptureElem && (sCaptureElem = null);
    $maybeInitializeEventSystem();
    ($clinit_DOMImplStandard() , captureElem) == elem && (captureElem = null);
}

function resolve(maybePotential){
    $clinit_DOM();
    return maybePotential.__gwt_resolve?maybePotential.__gwt_resolve():maybePotential;
}

function setCapture(elem){
    $clinit_DOM();
    sCaptureElem = elem;
    $maybeInitializeEventSystem();
    $clinit_DOMImplStandard();
    captureElem = elem;
}

function sinkBitlessEvent(elem, eventTypeName){
    var dispatchMap, dispatcher;
    $clinit_DOM();
    $maybeInitializeEventSystem();
    dispatchMap = bitlessEventDispatchers;
    dispatcher = dispatchMap[eventTypeName] || dispatchMap['_default_'];
    elem.addEventListener(eventTypeName, dispatcher, false);
}

function sinkEvents(elem, eventBits){
    $clinit_DOM();
    $maybeInitializeEventSystem();
    $sinkEventsImpl(elem, eventBits);
}

var currentEvent = null, sCaptureElem;
function $onModuleLoad_1(){
    var allowedModes, currentMode, i_0;
    currentMode = $doc.compatMode;
    allowedModes = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['CSS1Compat']);
    for (i_0 = 0; i_0 < allowedModes.length; i_0++) {
        if ($equals_5(allowedModes[i_0], currentMode)) {
            return;
        }
    }
    allowedModes.length == 1 && $equals_5('CSS1Compat', allowedModes[0]) && $equals_5('BackCompat', currentMode)?"GWT no longer supports Quirks Mode (document.compatMode=' BackCompat').<br>Make sure your application's host HTML page has a Standards Mode (document.compatMode=' CSS1Compat') doctype,<br>e.g. by using &lt;!doctype html&gt; at the start of your application's HTML page.<br><br>To continue using this unsupported rendering mode and risk layout problems, suppress this message by adding<br>the following line to your*.gwt.xml module file:<br>&nbsp;&nbsp;&lt;extend-configuration-property name=\"document.compatMode\" value=\"" + currentMode + '"/&gt;':"Your *.gwt.xml module configuration prohibits the use of the current document rendering mode (document.compatMode=' " + currentMode + "').<br>Modify your application's host HTML page doctype, or update your custom " + "'document.compatMode' configuration property settings.";
}

function $getTypeInt(this$static){
    return $clinit_DOM() , $eventGetTypeInt(this$static.type);
}

function addNativePreviewHandler(handler){
    $clinit_DOM();
    $maybeInitializeEventSystem();
    !TYPE_11 && (TYPE_11 = new GwtEvent$Type);
    if (!handlers_0) {
        handlers_0 = new HandlerManager_0(null, true);
        singleton = new Event$NativePreviewEvent;
    }
    return $addHandler(handlers_0, TYPE_11, handler);
}

function getTypeInt(typeName){
    return $eventGetTypeInt(($clinit_DOM() , typeName));
}

function setEventListener(elem, listener){
    $clinit_DOM();
    setEventListener_0(elem, listener);
}

var handlers_0;
function $revive(this$static){
    this$static.dead = false;
    this$static.source = null;
    this$static.isCanceled = false;
    this$static.isConsumed = false;
    this$static.isFirstHandler = true;
    this$static.nativeEvent = null;
}

function $setNativeEvent_0(this$static, nativeEvent){
    this$static.nativeEvent = nativeEvent;
}

function Event$NativePreviewEvent(){
}

function fire_4(handlers, nativeEvent){
    var lastIsCanceled, lastIsConsumed, lastIsFirstHandler, lastNativeEvent, ret;
    if (!!TYPE_11 && !!handlers && $isEventHandled(handlers, TYPE_11)) {
        lastIsCanceled = singleton.isCanceled;
        lastIsConsumed = singleton.isConsumed;
        lastIsFirstHandler = singleton.isFirstHandler;
        lastNativeEvent = singleton.nativeEvent;
        $revive(singleton);
        $setNativeEvent_0(singleton, nativeEvent);
        $fireEvent(handlers, singleton);
        ret = !(singleton.isCanceled && !singleton.isConsumed);
        singleton.isCanceled = lastIsCanceled;
        singleton.isConsumed = lastIsConsumed;
        singleton.isFirstHandler = lastIsFirstHandler;
        singleton.nativeEvent = lastNativeEvent;
        return ret;
    }
    return true;
}

defineClass(647, 870, {}, Event$NativePreviewEvent);
_.dispatch = function dispatch_11(handler){
    dynamicCast(handler, 851).onPreviewNativeEvent(this);
    singleton.isFirstHandler = false;
}
;
_.getAssociatedType = function getAssociatedType_12(){
    return TYPE_11;
}
;
_.revive = function revive_0(){
    $revive(this);
}
;
_.isCanceled = false;
_.isConsumed = false;
_.isFirstHandler = false;
var TYPE_11, singleton;
var Lcom_google_gwt_user_client_Event$NativePreviewEvent_2_classLit = createForClass('com.google.gwt.user.client', 'Event/NativePreviewEvent', 647, Lcom_google_gwt_event_shared_GwtEvent_2_classLit);
function $clinit_History(){
    $clinit_History = emptyMethod;
    new History$HistoryImpl;
    historyEventSource = new History$HistoryEventSource;
    token = getDecodedHash();
}

function addValueChangeHandler(handler){
    $clinit_History();
    return $addValueChangeHandler(historyEventSource, handler);
}

function getDecodedHash(){
    var hashToken;
    hashToken = $wnd.location.hash;
    if (hashToken == null || !hashToken.length) {
        return '';
    }
    return $decodeHistoryToken(__substr(hashToken, 1, hashToken.length - 1));
}

function onHashChanged(){
    $clinit_History();
    var hashToken;
    hashToken = getDecodedHash();
    if (!$equals_5(hashToken, token)) {
        token = hashToken;
        fire_3(historyEventSource);
    }
}

var historyEventSource, token;
function $addValueChangeHandler(this$static, handler){
    return $addHandler(this$static.handlers, (!TYPE_10 && (TYPE_10 = new GwtEvent$Type) , TYPE_10), handler);
}

function History$HistoryEventSource(){
    this.handlers = new HandlerManager(null);
}

defineClass(781, 1, {100:1}, History$HistoryEventSource);
_.fireEvent = function fireEvent_1(event_0){
    $fireEvent(this.handlers, event_0);
}
;
var Lcom_google_gwt_user_client_History$HistoryEventSource_2_classLit = createForClass('com.google.gwt.user.client', 'History/HistoryEventSource', 781, Ljava_lang_Object_2_classLit);
function $decodeHistoryToken(historyToken){
    return $wnd.decodeURI(historyToken.replace('%23', '#'));
}

function History$HistoryImpl(){
    var handler;
    handler = $entry(onHashChanged);
    $wnd.addEventListener('hashchange', handler, false);
}

defineClass(782, 1, {}, History$HistoryImpl);
var Lcom_google_gwt_user_client_History$HistoryImpl_2_classLit = createForClass('com.google.gwt.user.client', 'History/HistoryImpl', 782, Ljava_lang_Object_2_classLit);
function addCloseHandler(handler){
    maybeInitializeCloseHandlers();
    return addHandler(TYPE_8?TYPE_8:(TYPE_8 = new GwtEvent$Type), handler);
}

function addHandler(type_0, handler){
    return $addHandler((!handlers_1 && (handlers_1 = new Window$WindowHandlers) , handlers_1), type_0, handler);
}

function addResizeHandler(handler){
    maybeInitializeCloseHandlers();
    maybeInitializeResizeHandlers();
    return addHandler((!TYPE_9 && (TYPE_9 = new GwtEvent$Type) , TYPE_9), handler);
}

function maybeInitializeCloseHandlers(){
    if (!closeHandlersInitialized) {
        $initWindowCloseHandler();
        closeHandlersInitialized = true;
    }
}

function maybeInitializeResizeHandlers(){
    if (!resizeHandlersInitialized) {
        $initWindowResizeHandler();
        resizeHandlersInitialized = true;
    }
}

function onClosing(){
    var event_0;
    if (closeHandlersInitialized) {
        event_0 = new Window$ClosingEvent;
        !!handlers_1 && $fireEvent(handlers_1, event_0);
        return null;
    }
    return null;
}

function onResize_0(){
    var height, width_0;
    if (resizeHandlersInitialized) {
        width_0 = $getClientWidth($doc);
        height = $getClientHeight($doc);
        if (lastResizeWidth != width_0 || lastResizeHeight != height) {
            lastResizeWidth = width_0;
            lastResizeHeight = height;
            fire_2((!handlers_1 && (handlers_1 = new Window$WindowHandlers) , handlers_1));
        }
    }
}

var closeHandlersInitialized = false, handlers_1, lastResizeHeight = 0, lastResizeWidth = 0, resizeHandlersInitialized = false;
function $clinit_Window$ClosingEvent(){
    $clinit_Window$ClosingEvent = emptyMethod;
    TYPE_12 = new GwtEvent$Type;
}

function Window$ClosingEvent(){
    $clinit_Window$ClosingEvent();
}

defineClass(548, 870, {}, Window$ClosingEvent);
_.dispatch = function dispatch_12(handler){
    throwClassCastExceptionUnlessNull(handler);
    null.nullMethod();
}
;
_.getAssociatedType = function getAssociatedType_13(){
    return TYPE_12;
}
;
var TYPE_12;
var Lcom_google_gwt_user_client_Window$ClosingEvent_2_classLit = createForClass('com.google.gwt.user.client', 'Window/ClosingEvent', 548, Lcom_google_gwt_event_shared_GwtEvent_2_classLit);
function buildListParamMap(queryString){
    var entry, entry$iterator, key, kv, kvPair, kvPair$array, kvPair$index, kvPair$max, out, qs, val, values, regexp;
    out = new HashMap;
    if (queryString != null && queryString.length > 1) {
        qs = __substr(queryString, 1, queryString.length - 1);
        for (kvPair$array = $split(qs, '&', 0) , kvPair$index = 0 , kvPair$max = kvPair$array.length; kvPair$index < kvPair$max; ++kvPair$index) {
            kvPair = kvPair$array[kvPair$index];
            kv = $split(kvPair, '=', 2);
            key = kv[0];
            if (!key.length) {
                continue;
            }
            val = kv.length > 1?kv[1]:'';
            try {
                val = (throwIfNull('encodedURLComponent', val) , regexp = /\+/g , decodeURIComponent(val.replace(regexp, '%20')));
            }
            catch ($e0) {
                $e0 = wrap_0($e0);
                if (!instanceOf($e0, 119))
                    throw unwrap($e0);
            }
            values = dynamicCast(out.get_0(key), 88);
            if (!values) {
                values = new ArrayList;
                out.put(key, values);
            }
            values.add_3(val);
        }
    }
    for (entry$iterator = out.entrySet_0().iterator_1(); entry$iterator.hasNext();) {
        entry = dynamicCast(entry$iterator.next_2(), 97);
        entry.setValue(unmodifiableList(dynamicCast(entry.getValue(), 88)));
    }
    out = ($clinit_Collections() , new Collections$UnmodifiableMap(out));
    return out;
}

function ensureListParameterMap(){
    var currentQueryString;
    currentQueryString = $wnd.location.search;
    if (!listParamMap || !$equals_5(cachedQueryString, currentQueryString)) {
        listParamMap = buildListParamMap(currentQueryString);
        cachedQueryString = currentQueryString;
    }
}

function getHref(){
    return $wnd.location.href;
}

function getParameter_0(){
    var paramsForName;
    ensureListParameterMap();
    paramsForName = dynamicCast(listParamMap.get_0('logLevel'), 88);
    return !paramsForName?null:dynamicCastToString(paramsForName.get_1(paramsForName.size_1() - 1));
}

var cachedQueryString = '', listParamMap;
function Window$WindowHandlers(){
    HandlerManager.call(this, null);
}

defineClass(363, 240, {100:1}, Window$WindowHandlers);
var Lcom_google_gwt_user_client_Window$WindowHandlers_2_classLit = createForClass('com.google.gwt.user.client', 'Window/WindowHandlers', 363, Lcom_google_gwt_event_shared_HandlerManager_2_classLit);
function $eventGetTypeInt(eventType){
    switch (eventType) {
        case 'blur':
            return 4096;
        case 'change':
            return $intern_40;
        case 'click':
            return 1;
        case 'dblclick':
            return 2;
        case 'focus':
            return 2048;
        case 'keydown':
            return 128;
        case 'keypress':
            return 256;
        case 'keyup':
            return 512;
        case 'load':
            return $intern_14;
        case 'losecapture':
            return $intern_17;
        case 'mousedown':
            return 4;
        case 'mousemove':
            return 64;
        case 'mouseout':
            return 32;
        case 'mouseover':
            return 16;
        case 'mouseup':
            return 8;
        case 'scroll':
            return $intern_21;
        case 'error':
            return $intern_34;
        case 'DOMMouseScroll':
    case 'mousewheel':
        return $intern_25;
    case 'contextmenu':
        return $intern_26;
    case 'paste':
        return $intern_27;
    case 'touchstart':
        return $intern_28;
    case 'touchmove':
        return $intern_29;
    case 'touchend':
        return $intern_22;
    case 'touchcancel':
        return $intern_39;
    case 'gesturestart':
        return $intern_41;
    case 'gesturechange':
        return $intern_23;
    case 'gestureend':
        return $intern_95;
    default:return -1;
    }
}

function $maybeInitializeEventSystem(){
    if (!eventSystemIsInitialized) {
        $initEventSystem();
        eventSystemIsInitialized = true;
    }
}

function getEventListener(elem){
    var maybeListener = elem.__listener;
    return !instanceOfJso(maybeListener) && instanceOf(maybeListener, 101)?maybeListener:null;
}

function setEventListener_0(elem, listener){
    elem.__listener = listener;
}

var eventSystemIsInitialized = false;
function $clinit_DOMImplStandard(){
    $clinit_DOMImplStandard = emptyMethod;
    bitlessEventDispatchers = {_default_:dispatchEvent_3, dragenter:dispatchDragEvent, dragover:dispatchDragEvent};
    captureEventDispatchers = {click:dispatchCapturedMouseEvent, dblclick:dispatchCapturedMouseEvent, mousedown:dispatchCapturedMouseEvent, mouseup:dispatchCapturedMouseEvent, mousemove:dispatchCapturedMouseEvent, mouseover:dispatchCapturedMouseEvent, mouseout:dispatchCapturedMouseEvent, mousewheel:dispatchCapturedMouseEvent, keydown:dispatchCapturedEvent, keyup:dispatchCapturedEvent, keypress:dispatchCapturedEvent, touchstart:dispatchCapturedMouseEvent, touchend:dispatchCapturedMouseEvent, touchmove:dispatchCapturedMouseEvent, touchcancel:dispatchCapturedMouseEvent, gesturestart:dispatchCapturedMouseEvent, gestureend:dispatchCapturedMouseEvent, gesturechange:dispatchCapturedMouseEvent};
}

function $initEventSystem(){
    dispatchEvent_2 = $entry(dispatchEvent_3);
    dispatchUnhandledEvent = $entry(dispatchUnhandledEvent_0);
    var foreach = foreach_0;
    var bitlessEvents = bitlessEventDispatchers;
    foreach(bitlessEvents, function(e, fn){
        bitlessEvents[e] = $entry(fn);
    }
    );
    var captureEvents_0 = captureEventDispatchers;
    foreach(captureEvents_0, function(e, fn){
        captureEvents_0[e] = $entry(fn);
    }
    );
    foreach(captureEvents_0, function(e, fn){
        $wnd.addEventListener(e, fn, true);
    }
    );
}

function $sinkEvents(elem, bits){
    $maybeInitializeEventSystem();
    $sinkEventsImpl(elem, bits);
}

function $sinkEventsImpl(elem, bits){
    var chMask = (elem.__eventBits || 0) ^ bits;
    elem.__eventBits = bits;
    if (!chMask)
        return;
    chMask & 1 && (elem.onclick = bits & 1?dispatchEvent_2:null);
    chMask & 2 && (elem.ondblclick = bits & 2?dispatchEvent_2:null);
    chMask & 4 && (elem.onmousedown = bits & 4?dispatchEvent_2:null);
    chMask & 8 && (elem.onmouseup = bits & 8?dispatchEvent_2:null);
    chMask & 16 && (elem.onmouseover = bits & 16?dispatchEvent_2:null);
    chMask & 32 && (elem.onmouseout = bits & 32?dispatchEvent_2:null);
    chMask & 64 && (elem.onmousemove = bits & 64?dispatchEvent_2:null);
    chMask & 128 && (elem.onkeydown = bits & 128?dispatchEvent_2:null);
    chMask & 256 && (elem.onkeypress = bits & 256?dispatchEvent_2:null);
    chMask & 512 && (elem.onkeyup = bits & 512?dispatchEvent_2:null);
    chMask & $intern_40 && (elem.onchange = bits & $intern_40?dispatchEvent_2:null);
    chMask & 2048 && (elem.onfocus = bits & 2048?dispatchEvent_2:null);
    chMask & 4096 && (elem.onblur = bits & 4096?dispatchEvent_2:null);
    chMask & $intern_17 && (elem.onlosecapture = bits & $intern_17?dispatchEvent_2:null);
    chMask & $intern_21 && (elem.onscroll = bits & $intern_21?dispatchEvent_2:null);
    chMask & $intern_14 && (elem.onload = bits & $intern_14?dispatchUnhandledEvent:null);
    chMask & $intern_34 && (elem.onerror = bits & $intern_34?dispatchEvent_2:null);
    chMask & $intern_25 && (elem.onmousewheel = bits & $intern_25?dispatchEvent_2:null);
    chMask & $intern_26 && (elem.oncontextmenu = bits & $intern_26?dispatchEvent_2:null);
    chMask & $intern_27 && (elem.onpaste = bits & $intern_27?dispatchEvent_2:null);
    chMask & $intern_28 && (elem.ontouchstart = bits & $intern_28?dispatchEvent_2:null);
    chMask & $intern_29 && (elem.ontouchmove = bits & $intern_29?dispatchEvent_2:null);
    chMask & $intern_22 && (elem.ontouchend = bits & $intern_22?dispatchEvent_2:null);
    chMask & $intern_39 && (elem.ontouchcancel = bits & $intern_39?dispatchEvent_2:null);
    chMask & $intern_41 && (elem.ongesturestart = bits & $intern_41?dispatchEvent_2:null);
    chMask & $intern_23 && (elem.ongesturechange = bits & $intern_23?dispatchEvent_2:null);
    chMask & $intern_95 && (elem.ongestureend = bits & $intern_95?dispatchEvent_2:null);
}

function dispatchCapturedEvent(evt){
    previewEvent(evt);
}

function dispatchCapturedMouseEvent(evt){
    var cancelled;
    cancelled = !previewEvent(evt);
    if (cancelled || !captureElem) {
        return;
    }
    dispatchEvent_0(evt, captureElem) && $eventStopPropagation(evt);
}

function dispatchDragEvent(evt){
    $eventPreventDefault(evt);
    dispatchEvent_3(evt);
}

function dispatchEvent_3(evt){
    var element;
    element = getFirstAncestorWithListener(evt);
    if (!element) {
        return;
    }
    dispatchEvent_1(evt, element.nodeType != 1?null:element, getEventListener(element));
}

function dispatchUnhandledEvent_0(evt){
    var element;
    element = $eventGetCurrentTarget(evt);
    $setPropertyString(element, '__gwtLastUnhandledEvent', evt.type);
    dispatchEvent_3(evt);
}

function getFirstAncestorWithListener(evt){
    var curElem;
    curElem = $eventGetCurrentTarget(evt);
    while (!!curElem && !getEventListener(curElem)) {
        curElem = curElem.parentNode;
    }
    return curElem;
}

var bitlessEventDispatchers, captureElem, captureEventDispatchers, dispatchEvent_2, dispatchUnhandledEvent;
function foreach_0(map_0, fn){
    for (var e in map_0) {
        map_0.hasOwnProperty(e) && fn(e, map_0[e]);
    }
}

function $initWindowCloseHandler(){
    var oldOnBeforeUnload = $wnd.onbeforeunload;
    var oldOnUnload = $wnd.onunload;
    $wnd.onbeforeunload = function(evt){
        var ret, oldRet;
        try {
            ret = $entry(onClosing)();
        }
        finally {
            oldRet = oldOnBeforeUnload && oldOnBeforeUnload(evt);
        }
        if (ret != null) {
            return ret;
        }
        if (oldRet != null) {
            return oldRet;
        }
    }
    ;
    $wnd.onunload = $entry(function(evt){
        try {
            closeHandlersInitialized && fire_1((!handlers_1 && (handlers_1 = new Window$WindowHandlers) , handlers_1));
        }
        finally {
            oldOnUnload && oldOnUnload(evt);
            $wnd.onresize = null;
            $wnd.onscroll = null;
            $wnd.onbeforeunload = null;
            $wnd.onunload = null;
        }
    }
    );
}

function $initWindowResizeHandler(){
    var oldOnResize = $wnd.onresize;
    $wnd.onresize = $entry(function(evt){
        try {
            onResize_0();
        }
        finally {
            oldOnResize && oldOnResize(evt);
        }
    }
    );
}

function $add_9(this$static, child, container){
    $removeFromParent(child);
    $add_13(this$static.children, child);
    $clinit_DOM();
    $appendChild_0(container, resolve(child.element));
    $setParent(child, this$static);
}

function $remove_0(this$static, w){
    var elem;
    if (w.parent_0 != this$static) {
        return false;
    }
    try {
        $setParent(w, null);
    }
    finally {
        elem = ($clinit_DOM() , w.element);
        $removeChild($getParentElement(elem), elem);
        $remove_3(this$static.children, w);
    }
    return true;
}

function ComplexPanel(){
    this.children = new WidgetCollection(this);
}

defineClass(445, 881, $intern_90);
_.iterator_1 = function iterator_5(){
    return new WidgetCollection$WidgetIterator(this.children);
}
;
_.remove_0 = function remove_3(w){
    return $remove_0(this, w);
}
;
var Lcom_google_gwt_user_client_ui_ComplexPanel_2_classLit = createForClass('com.google.gwt.user.client.ui', 'ComplexPanel', 445, Lcom_google_gwt_user_client_ui_Panel_2_classLit);
function $add_10(this$static, w){
    $add_9(this$static, w, ($clinit_DOM() , this$static.element));
}

function $checkWidgetParent(this$static, w){
    if (w.parent_0 != this$static) {
        throw new IllegalArgumentException_0('Widget must be a child of this panel.');
    }
}

function $remove_1(this$static, w){
    var removed;
    removed = $remove_0(this$static, w);
    removed && changeToStaticPositioning(($clinit_DOM() , w.element));
    return removed;
}

function $setWidgetPosition(this$static, w, left, top_0){
    $checkWidgetParent(this$static, w);
    this$static.setWidgetPositionImpl(w, left, top_0);
}

function $setWidgetPositionImpl(w, left, top_0){
    var h;
    h = ($clinit_DOM() , w.element);
    if (left == -1 && top_0 == -1) {
        changeToStaticPositioning(h);
    }
    else {
        $setPropertyImpl(h.style, 'position', 'absolute');
        $setPropertyImpl(h.style, 'left', left + 'px');
        $setPropertyImpl(h.style, 'top', top_0 + 'px');
    }
}

function changeToStaticPositioning(elem){
    $setPropertyImpl(elem.style, 'left', '');
    $setPropertyImpl(elem.style, 'top', '');
    $setPropertyImpl(elem.style, 'position', '');
}

defineClass(738, 445, $intern_90);
_.remove_0 = function remove_4(w){
    return $remove_1(this, w);
}
;
_.setWidgetPositionImpl = function setWidgetPositionImpl(w, left, top_0){
    $setWidgetPositionImpl(w, left, top_0);
}
;
var Lcom_google_gwt_user_client_ui_AbsolutePanel_2_classLit = createForClass('com.google.gwt.user.client.ui', 'AbsolutePanel', 738, Lcom_google_gwt_user_client_ui_ComplexPanel_2_classLit);
function $clinit_AttachDetachException(){
    $clinit_AttachDetachException = emptyMethod;
    attachCommand = new AttachDetachException$1;
    detachCommand = new AttachDetachException$2;
}

function AttachDetachException(causes){
    UmbrellaException_0.call(this, causes);
}

function tryCommand(hasWidgets, c){
    $clinit_AttachDetachException();
    var caught, e, w, w$iterator;
    caught = null;
    for (w$iterator = hasWidgets.iterator_1(); w$iterator.hasNext();) {
        w = dynamicCast(w$iterator.next_2(), 91);
        try {
            c.execute_1(w);
        }
        catch ($e0) {
            $e0 = wrap_0($e0);
            if (instanceOf($e0, 37)) {
                e = $e0;
                !caught && (caught = new HashSet);
                $add_17(caught, e);
            }
            else 
                throw unwrap($e0);
        }
    }
    if (caught) {
        throw new AttachDetachException(caught);
    }
}

defineClass(697, 448, $intern_87, AttachDetachException);
var attachCommand, detachCommand;
var Lcom_google_gwt_user_client_ui_AttachDetachException_2_classLit = createForClass('com.google.gwt.user.client.ui', 'AttachDetachException', 697, Lcom_google_gwt_event_shared_UmbrellaException_2_classLit);
function AttachDetachException$1(){
}

defineClass(698, 1, {}, AttachDetachException$1);
_.execute_1 = function execute_3(w){
    w.onAttach();
}
;
var Lcom_google_gwt_user_client_ui_AttachDetachException$1_2_classLit = createForClass('com.google.gwt.user.client.ui', 'AttachDetachException/1', 698, Ljava_lang_Object_2_classLit);
function AttachDetachException$2(){
}

defineClass(699, 1, {}, AttachDetachException$2);
_.execute_1 = function execute_4(w){
    w.onDetach();
}
;
var Lcom_google_gwt_user_client_ui_AttachDetachException$2_2_classLit = createForClass('com.google.gwt.user.client.ui', 'AttachDetachException/2', 699, Ljava_lang_Object_2_classLit);
defineClass(702, 91, $intern_90);
_.onAttach = function onAttach_1(){
    var tabIndex;
    $onAttach(this);
    tabIndex = $getTabIndex(($clinit_DOM() , this.element));
    -1 == tabIndex && (this.element.tabIndex = 0 , undefined);
}
;
var Lcom_google_gwt_user_client_ui_FocusWidget_2_classLit = createForClass('com.google.gwt.user.client.ui', 'FocusWidget', 702, Lcom_google_gwt_user_client_ui_Widget_2_classLit);
function $setText(this$static, text_0){
    $setInnerText(($clinit_DOM() , this$static.element), text_0);
}

function ButtonBase(elem){
    $setElement_0(this, ($clinit_DOM() , elem));
}

defineClass(703, 702, $intern_90);
var Lcom_google_gwt_user_client_ui_ButtonBase_2_classLit = createForClass('com.google.gwt.user.client.ui', 'ButtonBase', 703, Lcom_google_gwt_user_client_ui_FocusWidget_2_classLit);
function Button(){
    var e;
    ButtonBase.call(this, (e = $doc.createElement('BUTTON') , e.setAttribute('type', 'button') , e));
    $setClassName(($clinit_DOM() , this.element), 'gwt-Button');
    $setInnerHTML(this.element, 'Minimize');
}

defineClass(449, 703, $intern_90, Button);
var Lcom_google_gwt_user_client_ui_Button_2_classLit = createForClass('com.google.gwt.user.client.ui', 'Button', 449, Lcom_google_gwt_user_client_ui_ButtonBase_2_classLit);
function $setCellHorizontalAlignment(td, align_0){
    $setPropertyString(($clinit_DOM() , td), 'align', align_0.textAlignString);
}

function $setCellVerticalAlignment(td, align_0){
    $setCellVerticalAlignment_0(($clinit_DOM() , td), align_0);
}

function $setCellVerticalAlignment_0(td, align_0){
    $setPropertyImpl(td.style, 'verticalAlign', align_0.verticalAlignString);
}

function CellPanel(){
    ComplexPanel.call(this);
    this.table = ($clinit_DOM() , $doc.createElement('table'));
    this.body_0 = $doc.createElement('tbody');
    $appendChild_0(this.table, resolve(this.body_0));
    $setElement(this, this.table);
}

defineClass(446, 445, $intern_90);
var Lcom_google_gwt_user_client_ui_CellPanel_2_classLit = createForClass('com.google.gwt.user.client.ui', 'CellPanel', 446, Lcom_google_gwt_user_client_ui_ComplexPanel_2_classLit);
function $setTextOrHtml(this$static, content_0, isHtml){
    isHtml?$setInnerHTML(this$static.element, content_0):$setInnerText(this$static.element, content_0);
    if (this$static.textDir != this$static.initialElementDir) {
        this$static.textDir = this$static.initialElementDir;
        setDirectionOnElement(this$static.element, this$static.initialElementDir);
    }
}

function DirectionalTextHelper(element){
    this.element = element;
    this.initialElementDir = getDirectionOnElement(element);
    this.textDir = this.initialElementDir;
}

defineClass(750, 1, {}, DirectionalTextHelper);
var Lcom_google_gwt_user_client_ui_DirectionalTextHelper_2_classLit = createForClass('com.google.gwt.user.client.ui', 'DirectionalTextHelper', 750, Ljava_lang_Object_2_classLit);
function $setAutoHorizontalAlignment(this$static, autoAlignment){
    this$static.autoHorizontalAlignment = autoAlignment;
    $updateHorizontalAlignment(this$static);
}

function $updateHorizontalAlignment(this$static){
    var align_0;
    !this$static.autoHorizontalAlignment?(align_0 = null):this$static.autoHorizontalAlignment?(align_0 = this$static.autoHorizontalAlignment):(align_0 = this$static.autoHorizontalAlignment == ($clinit_HasAutoHorizontalAlignment() , ALIGN_CONTENT_START)?startOf(this$static.directionalTextHelper.textDir):endOf(this$static.directionalTextHelper.textDir));
    if (align_0 != this$static.horzAlign) {
        this$static.horzAlign = align_0;
        ($clinit_DOM() , this$static.element).style['textAlign'] = !this$static.horzAlign?'':this$static.horzAlign.textAlignString;
    }
}

function LabelBase(element){
    $setElement_0(this, ($clinit_DOM() , element));
    this.directionalTextHelper = new DirectionalTextHelper(this.element);
}

defineClass(332, 91, $intern_90);
var Lcom_google_gwt_user_client_ui_LabelBase_2_classLit = createForClass('com.google.gwt.user.client.ui', 'LabelBase', 332, Lcom_google_gwt_user_client_ui_Widget_2_classLit);
function Label(element){
    LabelBase.call(this, element, $equalsIgnoreCase('span', element.tagName));
}

function Label_0(text_0){
    LabelBase.call(this, $doc.createElement('div'));
    $setClassName(($clinit_DOM() , this.element), 'gwt-Label');
    $setTextOrHtml(this.directionalTextHelper, text_0, false);
    $updateHorizontalAlignment(this);
}

defineClass(392, 332, $intern_90, Label_0);
var Lcom_google_gwt_user_client_ui_Label_2_classLit = createForClass('com.google.gwt.user.client.ui', 'Label', 392, Lcom_google_gwt_user_client_ui_LabelBase_2_classLit);
function HTML(html){
    Label.call(this, $doc.createElement('div'));
    $setClassName(($clinit_DOM() , this.element), 'gwt-HTML');
    $setTextOrHtml(this.directionalTextHelper, html, true);
    $updateHorizontalAlignment(this);
}

defineClass(333, 392, $intern_90, HTML);
var Lcom_google_gwt_user_client_ui_HTML_2_classLit = createForClass('com.google.gwt.user.client.ui', 'HTML', 333, Lcom_google_gwt_user_client_ui_Label_2_classLit);
function $clinit_HasAutoHorizontalAlignment(){
    $clinit_HasAutoHorizontalAlignment = emptyMethod;
    ALIGN_CONTENT_START = new HasHorizontalAlignment$AutoHorizontalAlignmentConstant;
}

var ALIGN_CONTENT_START;
function $clinit_HasHorizontalAlignment(){
    $clinit_HasHorizontalAlignment = emptyMethod;
    new HasHorizontalAlignment$HorizontalAlignmentConstant(($clinit_Style$TextAlign() , 'center'));
    new HasHorizontalAlignment$HorizontalAlignmentConstant('justify');
    ALIGN_LEFT = new HasHorizontalAlignment$HorizontalAlignmentConstant('left');
    ALIGN_RIGHT = new HasHorizontalAlignment$HorizontalAlignmentConstant('right');
    ALIGN_LOCALE_START = ($clinit_LocaleInfo() , ALIGN_LEFT);
    ALIGN_LOCALE_END = ALIGN_RIGHT;
    ALIGN_DEFAULT = ALIGN_LOCALE_START;
}

var ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_LOCALE_END, ALIGN_LOCALE_START, ALIGN_RIGHT;
function HasHorizontalAlignment$AutoHorizontalAlignmentConstant(){
}

defineClass(700, 1, {}, HasHorizontalAlignment$AutoHorizontalAlignmentConstant);
var Lcom_google_gwt_user_client_ui_HasHorizontalAlignment$AutoHorizontalAlignmentConstant_2_classLit = createForClass('com.google.gwt.user.client.ui', 'HasHorizontalAlignment/AutoHorizontalAlignmentConstant', 700, Ljava_lang_Object_2_classLit);
function HasHorizontalAlignment$HorizontalAlignmentConstant(textAlignString){
    this.textAlignString = textAlignString;
}

function endOf(direction){
    return direction == ($clinit_HasDirection$Direction() , LTR)?($clinit_HasHorizontalAlignment() , ALIGN_RIGHT):direction == RTL?($clinit_HasHorizontalAlignment() , ALIGN_LEFT):($clinit_HasHorizontalAlignment() , ALIGN_LOCALE_END);
}

function startOf(direction){
    return direction == ($clinit_HasDirection$Direction() , LTR)?($clinit_HasHorizontalAlignment() , ALIGN_LEFT):direction == RTL?($clinit_HasHorizontalAlignment() , ALIGN_RIGHT):($clinit_HasHorizontalAlignment() , ALIGN_LOCALE_START);
}

defineClass(331, 700, {}, HasHorizontalAlignment$HorizontalAlignmentConstant);
var Lcom_google_gwt_user_client_ui_HasHorizontalAlignment$HorizontalAlignmentConstant_2_classLit = createForClass('com.google.gwt.user.client.ui', 'HasHorizontalAlignment/HorizontalAlignmentConstant', 331, Lcom_google_gwt_user_client_ui_HasHorizontalAlignment$AutoHorizontalAlignmentConstant_2_classLit);
function $clinit_HasVerticalAlignment(){
    $clinit_HasVerticalAlignment = emptyMethod;
    ALIGN_BOTTOM = new HasVerticalAlignment$VerticalAlignmentConstant('bottom');
    new HasVerticalAlignment$VerticalAlignmentConstant('middle');
    ALIGN_TOP = new HasVerticalAlignment$VerticalAlignmentConstant('top');
}

var ALIGN_BOTTOM, ALIGN_TOP;
function HasVerticalAlignment$VerticalAlignmentConstant(verticalAlignString){
    this.verticalAlignString = verticalAlignString;
}

defineClass(391, 1, {}, HasVerticalAlignment$VerticalAlignmentConstant);
var Lcom_google_gwt_user_client_ui_HasVerticalAlignment$VerticalAlignmentConstant_2_classLit = createForClass('com.google.gwt.user.client.ui', 'HasVerticalAlignment/VerticalAlignmentConstant', 391, Ljava_lang_Object_2_classLit);
function $add_11(this$static, w){
    var td, td_0;
    td = (td_0 = ($clinit_DOM() , $doc.createElement('td')) , $setCellHorizontalAlignment(td_0, this$static.horzAlign) , $setCellVerticalAlignment(td_0, this$static.vertAlign) , td_0);
    $appendChild_0(this$static.tableRow, resolve(td));
    $add_9(this$static, w, td);
}

function $setVerticalAlignment(this$static, align_0){
    this$static.vertAlign = align_0;
}

function HorizontalPanel(){
    CellPanel.call(this);
    this.horzAlign = ($clinit_HasHorizontalAlignment() , ALIGN_DEFAULT);
    this.vertAlign = ($clinit_HasVerticalAlignment() , ALIGN_TOP);
    this.tableRow = ($clinit_DOM() , $doc.createElement('tr'));
    $appendChild_0(this.body_0, resolve(this.tableRow));
    $setPropertyString(this.table, 'cellSpacing', '0');
    $setPropertyString(this.table, 'cellPadding', '0');
}

defineClass(701, 446, $intern_90, HorizontalPanel);
_.remove_0 = function remove_5(w){
    var removed, td;
    td = ($clinit_DOM() , $getParentElement(w.element));
    removed = $remove_0(this, w);
    removed && $removeChild(this.tableRow, td);
    return removed;
}
;
var Lcom_google_gwt_user_client_ui_HorizontalPanel_2_classLit = createForClass('com.google.gwt.user.client.ui', 'HorizontalPanel', 701, Lcom_google_gwt_user_client_ui_CellPanel_2_classLit);
function $onResize(){
    var height, width_0, winHeight, winWidth;
    null.nullMethod();
    winWidth = $getClientWidth($doc);
    winHeight = $getClientHeight($doc);
    null.nullMethod($clinit_Style$Display());
    null.nullMethod($clinit_Style$Unit());
    null.nullMethod($clinit_Style$Unit());
    width_0 = $getScrollWidth($doc);
    height = $getScrollHeight($doc);
    null.nullMethod((width_0 > winWidth?width_0:winWidth) + 'px');
    null.nullMethod((height > winHeight?height:winHeight) + 'px');
    null.nullMethod($clinit_Style$Display());
}

function PopupPanel$1(){
}

defineClass(676, 1, $intern_94, PopupPanel$1);
_.onResize = function onResize_1(event_0){
    $onResize();
}
;
var Lcom_google_gwt_user_client_ui_PopupPanel$1_2_classLit = createForClass('com.google.gwt.user.client.ui', 'PopupPanel/1', 676, Ljava_lang_Object_2_classLit);
function PopupPanel$3(this$0){
    this.this$01 = this$0;
}

defineClass(677, 1, $intern_93, PopupPanel$3);
_.onPreviewNativeEvent = function onPreviewNativeEvent_0(event_0){
    $previewNativeEvent(this.this$01, event_0);
}
;
var Lcom_google_gwt_user_client_ui_PopupPanel$3_2_classLit = createForClass('com.google.gwt.user.client.ui', 'PopupPanel/3', 677, Ljava_lang_Object_2_classLit);
function PopupPanel$4(this$0){
    this.this$01 = this$0;
}

defineClass(678, 1, {898:1, 135:1}, PopupPanel$4);
var Lcom_google_gwt_user_client_ui_PopupPanel$4_2_classLit = createForClass('com.google.gwt.user.client.ui', 'PopupPanel/4', 678, Ljava_lang_Object_2_classLit);
function $maybeShowGlass(this$static){
    if (this$static.showing) {
        if (this$static.curPanel.isGlassEnabled) {
            $appendChild_0($doc.body, this$static.curPanel.glass);
            this$static.resizeRegistration = addResizeHandler(this$static.curPanel.glassResizer);
            $onResize();
            this$static.glassShowing = true;
        }
    }
    else if (this$static.glassShowing) {
        $removeChild($doc.body, this$static.curPanel.glass);
        $removeHandler_0(this$static.resizeRegistration.real);
        this$static.resizeRegistration = null;
        this$static.glassShowing = false;
    }
}

function $onComplete(this$static){
    if (!this$static.showing) {
        $maybeShowGlass(this$static);
        this$static.isUnloading || $remove_1(($clinit_RootPanel() , get_0()), this$static.curPanel);
    }
    $setClip(($clinit_DOM() , this$static.curPanel.element), 'rect(auto, auto, auto, auto)');
    this$static.curPanel.element.style['overflow'] = 'visible';
}

function $onInstantaneousRun(this$static){
    $maybeShowGlass(this$static);
    if (this$static.showing) {
        ($clinit_DOM() , this$static.curPanel.element).style['position'] = 'absolute';
        this$static.curPanel.topPosition != -1 && $setPopupPosition(this$static.curPanel, this$static.curPanel.leftPosition, this$static.curPanel.topPosition);
        $add_10(($clinit_RootPanel() , get_0()), this$static.curPanel);
    }
    else {
        this$static.isUnloading || $remove_1(($clinit_RootPanel() , get_0()), this$static.curPanel);
    }
    ($clinit_DOM() , this$static.curPanel.element).style['overflow'] = 'visible';
}

function $onUpdate(this$static, progress){
    var bottom, height, left, right, top_0, width_0;
    this$static.showing || (progress = 1 - progress);
    top_0 = 0;
    left = 0;
    right = 0;
    bottom = 0;
    height = round_int(progress * this$static.offsetHeight);
    width_0 = round_int(progress * this$static.offsetWidth);
    switch (0) {
        case 0:
            top_0 = this$static.offsetHeight - height >> 1;
            left = this$static.offsetWidth - width_0 >> 1;
            right = left + width_0;
            bottom = top_0 + height;
    }
    $setClip(($clinit_DOM() , this$static.curPanel.element), 'rect(' + top_0 + 'px, ' + right + 'px, ' + bottom + 'px, ' + left + 'px)');
}

function $setState(this$static, showing, isUnloading){
    this$static.isUnloading = isUnloading;
    $cancel_0(this$static);
    this$static.curPanel.showing = showing;
    $updateHandlers(this$static.curPanel);
    this$static.showing = showing;
    $onInstantaneousRun(this$static);
}

function PopupPanel$ResizeAnimation(panel){
    Animation.call(this, (!instance_2 && (instance_2 = !!$wnd.requestAnimationFrame && !!$wnd.cancelAnimationFrame?new AnimationSchedulerImplStandard:new AnimationSchedulerImplTimer) , instance_2));
    this.curPanel = panel;
}

defineClass(675, 437, {}, PopupPanel$ResizeAnimation);
_.curPanel = null;
_.glassShowing = false;
_.isUnloading = false;
_.offsetHeight = 0;
_.offsetWidth = -1;
_.showing = false;
var Lcom_google_gwt_user_client_ui_PopupPanel$ResizeAnimation_2_classLit = createForClass('com.google.gwt.user.client.ui', 'PopupPanel/ResizeAnimation', 675, Lcom_google_gwt_animation_client_Animation_2_classLit);
function $clinit_RootPanel(){
    $clinit_RootPanel = emptyMethod;
    maybeDetachCommand = new RootPanel$1;
    rootPanels = new HashMap;
    widgetsToDetach = new HashSet;
}

function RootPanel(elem){
    ComplexPanel.call(this);
    $setElement_0(this, ($clinit_DOM() , elem));
    $onAttach(this);
}

function detachNow(widget){
    $clinit_RootPanel();
    try {
        widget.onDetach();
    }
    finally {
        $remove_8(widgetsToDetach, widget);
    }
}

function detachWidgets(){
    $clinit_RootPanel();
    try {
        tryCommand(widgetsToDetach, maybeDetachCommand);
    }
    finally {
        $reset_0(widgetsToDetach.map_0);
        $reset_0(rootPanels);
    }
}

function get_0(){
    $clinit_RootPanel();
    var rp;
    rp = dynamicCast($get_0(rootPanels, null), 341);
    if (rp) {
        return rp;
    }
    if (rootPanels.size_0 == 0) {
        addCloseHandler(new RootPanel$2);
        $clinit_LocaleInfo();
    }
    rp = new RootPanel$DefaultRootPanel;
    $put_0(rootPanels, null, rp);
    $add_17(widgetsToDetach, rp);
    return rp;
}

defineClass(341, 738, $intern_96);
var maybeDetachCommand, rootPanels, widgetsToDetach;
var Lcom_google_gwt_user_client_ui_RootPanel_2_classLit = createForClass('com.google.gwt.user.client.ui', 'RootPanel', 341, Lcom_google_gwt_user_client_ui_AbsolutePanel_2_classLit);
function RootPanel$1(){
}

defineClass(740, 1, {}, RootPanel$1);
_.execute_1 = function execute_5(w){
    w.attached && w.onDetach();
}
;
var Lcom_google_gwt_user_client_ui_RootPanel$1_2_classLit = createForClass('com.google.gwt.user.client.ui', 'RootPanel/1', 740, Ljava_lang_Object_2_classLit);
function RootPanel$2(){
}

defineClass(741, 1, {896:1, 135:1}, RootPanel$2);
var Lcom_google_gwt_user_client_ui_RootPanel$2_2_classLit = createForClass('com.google.gwt.user.client.ui', 'RootPanel/2', 741, Ljava_lang_Object_2_classLit);
function RootPanel$DefaultRootPanel(){
    RootPanel.call(this, $doc.body);
}

defineClass(739, 341, $intern_96, RootPanel$DefaultRootPanel);
_.setWidgetPositionImpl = function setWidgetPositionImpl_0(w, left, top_0){
    left -= 0;
    top_0 -= 0;
    $setWidgetPositionImpl(w, left, top_0);
}
;
var Lcom_google_gwt_user_client_ui_RootPanel$DefaultRootPanel_2_classLit = createForClass('com.google.gwt.user.client.ui', 'RootPanel/DefaultRootPanel', 739, Lcom_google_gwt_user_client_ui_RootPanel_2_classLit);
function $getMaximumHorizontalScrollPosition_0(scrollable){
    return $isRtl(scrollable)?0:($getSubPixelScrollWidth(scrollable) | 0) - (scrollable.clientWidth | 0);
}

function $getMinimumHorizontalScrollPosition_0(scrollable){
    return $isRtl(scrollable)?(scrollable.clientWidth | 0) - ($getSubPixelScrollWidth(scrollable) | 0):0;
}

function $isRtl(scrollable){
    var computedStyle = $doc.defaultView.getComputedStyle(scrollable, null);
    return computedStyle.getPropertyValue('direction') == 'rtl';
}

function ScrollImpl(){
}

defineClass(409, 1, {}, ScrollImpl);
var impl_1;
var Lcom_google_gwt_user_client_ui_ScrollImpl_2_classLit = createForClass('com.google.gwt.user.client.ui', 'ScrollImpl', 409, Ljava_lang_Object_2_classLit);
function $next_8(this$static){
    if (!this$static.hasElement || !this$static.this$01.widget) {
        throw new NoSuchElementException;
    }
    this$static.hasElement = false;
    return this$static.returned = this$static.this$01.widget;
}

function SimplePanel$1(this$0){
    this.this$01 = this$0;
    this.hasElement = !!this.this$01.widget;
}

defineClass(679, 1, {}, SimplePanel$1);
_.hasNext = function hasNext_4(){
    return this.hasElement;
}
;
_.next_2 = function next_35(){
    return $next_8(this);
}
;
_.remove = function remove_6(){
    !!this.returned && $remove(this.this$01, this.returned);
}
;
_.hasElement = false;
_.returned = null;
var Lcom_google_gwt_user_client_ui_SimplePanel$1_2_classLit = createForClass('com.google.gwt.user.client.ui', 'SimplePanel/1', 679, Ljava_lang_Object_2_classLit);
function $add_12(this$static, w){
    var td, tr, td_0;
    tr = ($clinit_DOM() , $doc.createElement('tr'));
    td = (td_0 = $doc.createElement('td') , $setCellHorizontalAlignment(td_0, this$static.horzAlign) , $setCellVerticalAlignment(td_0, this$static.vertAlign) , td_0);
    $appendChild_0(tr, resolve(td));
    $appendChild_0(this$static.body_0, resolve(tr));
    $add_9(this$static, w, td);
}

function VerticalPanel(){
    CellPanel.call(this);
    this.horzAlign = ($clinit_HasHorizontalAlignment() , ALIGN_DEFAULT);
    this.vertAlign = ($clinit_HasVerticalAlignment() , ALIGN_TOP);
    $setPropertyString(($clinit_DOM() , this.table), 'cellSpacing', '0');
    $setPropertyString(this.table, 'cellPadding', '0');
}

defineClass(447, 446, $intern_90, VerticalPanel);
_.remove_0 = function remove_7(w){
    var removed, td;
    td = ($clinit_DOM() , $getParentElement(w.element));
    removed = $remove_0(this, w);
    removed && $removeChild(this.body_0, $getParentElement(td));
    return removed;
}
;
var Lcom_google_gwt_user_client_ui_VerticalPanel_2_classLit = createForClass('com.google.gwt.user.client.ui', 'VerticalPanel', 447, Lcom_google_gwt_user_client_ui_CellPanel_2_classLit);
function $add_13(this$static, w){
    $insert(this$static, w, this$static.size_0);
}

function $indexOf_1(this$static, w){
    var i_0;
    for (i_0 = 0; i_0 < this$static.size_0; ++i_0) {
        if (this$static.array[i_0] == w) {
            return i_0;
        }
    }
    return -1;
}

function $insert(this$static, w, beforeIndex){
    var i_0, i0, newArray;
    if (beforeIndex < 0 || beforeIndex > this$static.size_0) {
        throw new IndexOutOfBoundsException;
    }
    if (this$static.size_0 == this$static.array.length) {
        newArray = initDim(Lcom_google_gwt_user_client_ui_Widget_2_classLit, $intern_1, 91, this$static.array.length * 2, 0, 1);
        for (i0 = 0; i0 < this$static.array.length; ++i0) {
            setCheck(newArray, i0, this$static.array[i0]);
        }
        this$static.array = newArray;
    }
    ++this$static.size_0;
    for (i_0 = this$static.size_0 - 1; i_0 > beforeIndex; --i_0) {
        setCheck(this$static.array, i_0, this$static.array[i_0 - 1]);
    }
    setCheck(this$static.array, beforeIndex, w);
}

function $remove_2(this$static, index_0){
    var i_0;
    if (index_0 < 0 || index_0 >= this$static.size_0) {
        throw new IndexOutOfBoundsException;
    }
    --this$static.size_0;
    for (i_0 = index_0; i_0 < this$static.size_0; ++i_0) {
        setCheck(this$static.array, i_0, this$static.array[i_0 + 1]);
    }
    setCheck(this$static.array, this$static.size_0, null);
}

function $remove_3(this$static, w){
    var index_0;
    index_0 = $indexOf_1(this$static, w);
    if (index_0 == -1) {
        throw new NoSuchElementException;
    }
    $remove_2(this$static, index_0);
}

function WidgetCollection(parent_0){
    this.parent_0 = parent_0;
    this.array = initDim(Lcom_google_gwt_user_client_ui_Widget_2_classLit, $intern_1, 91, 4, 0, 1);
}

defineClass(749, 1, {}, WidgetCollection);
_.iterator_1 = function iterator_6(){
    return new WidgetCollection$WidgetIterator(this);
}
;
_.size_0 = 0;
var Lcom_google_gwt_user_client_ui_WidgetCollection_2_classLit = createForClass('com.google.gwt.user.client.ui', 'WidgetCollection', 749, Ljava_lang_Object_2_classLit);
function $next_9(this$static){
    if (this$static.index_0 >= this$static.this$01.size_0) {
        throw new NoSuchElementException;
    }
    this$static.currentWidget = this$static.this$01.array[this$static.index_0];
    ++this$static.index_0;
    return this$static.currentWidget;
}

function WidgetCollection$WidgetIterator(this$0){
    this.this$01 = this$0;
}

defineClass(497, 1, {}, WidgetCollection$WidgetIterator);
_.hasNext = function hasNext_5(){
    return this.index_0 < this.this$01.size_0;
}
;
_.next_2 = function next_36(){
    return $next_9(this);
}
;
_.remove = function remove_8(){
    if (!this.currentWidget) {
        throw new IllegalStateException;
    }
    this.this$01.parent_0.remove_0(this.currentWidget);
    --this.index_0;
    this.currentWidget = null;
}
;
_.index_0 = 0;
var Lcom_google_gwt_user_client_ui_WidgetCollection$WidgetIterator_2_classLit = createForClass('com.google.gwt.user.client.ui', 'WidgetCollection/WidgetIterator', 497, Ljava_lang_Object_2_classLit);
function $setClip(popup, rect){
    $setPropertyImpl(popup.style, 'clip', rect);
}

function assertCompileTimeUserAgent(){
    var runtimeValue;
    runtimeValue = $getRuntimeValue();
    if (!$equals_5('safari', runtimeValue)) {
        throw new UserAgentAsserter$UserAgentAssertionError(runtimeValue);
    }
}

function Error_1(message){
    Throwable.call(this, message);
}

function Error_2(message, cause){
    Throwable_0.call(this, message, cause);
}

defineClass(276, 37, {3:1, 37:1}, Error_1);
var Ljava_lang_Error_2_classLit = createForClass('java.lang', 'Error', 276, Ljava_lang_Throwable_2_classLit);
function AssertionError(message){
    Error_2.call(this, '' + message, instanceOf(message, 37)?dynamicCast(message, 37):null);
}

defineClass(48, 276, $intern_97, AssertionError);
var Ljava_lang_AssertionError_2_classLit = createForClass('java.lang', 'AssertionError', 48, Ljava_lang_Error_2_classLit);
function UserAgentAsserter$UserAgentAssertionError(runtimeValue){
    AssertionError.call(this, 'Possible problem with your *.gwt.xml module file.\nThe compile time user.agent value (safari) does not match the runtime user.agent value (' + runtimeValue + ').\n' + 'Expect more errors.');
}

defineClass(532, 48, $intern_97, UserAgentAsserter$UserAgentAssertionError);
var Lcom_google_gwt_useragent_client_UserAgentAsserter$UserAgentAssertionError_2_classLit = createForClass('com.google.gwt.useragent.client', 'UserAgentAsserter/UserAgentAssertionError', 532, Ljava_lang_AssertionError_2_classLit);
function $getRuntimeValue(){
    var ua = navigator.userAgent.toLowerCase();
    var docMode = $doc.documentMode;
    if (function(){
        return ua.indexOf('webkit') != -1;
    }
    ())
    return 'safari';
    if (function(){
        return ua.indexOf('msie') != -1 && docMode >= 10 && docMode < 11;
    }
    ())
    return 'ie10';
    if (function(){
        return ua.indexOf('msie') != -1 && docMode >= 9 && docMode < 11;
    }
    ())
    return 'ie9';
    if (function(){
        return ua.indexOf('msie') != -1 && docMode >= 8 && docMode < 11;
    }
    ())
    return 'ie8';
    if (function(){
        return ua.indexOf('gecko') != -1 || docMode >= 11;
    }
    ())
    return 'gecko1_8';
    return 'unknown';
}

function $clearOnReadyStateChange(this$static){
    this$static.onreadystatechange = function(){
    }
    ;
}

function $open_2(this$static, httpMethod, url_0){
    this$static.open(httpMethod, url_0, true);
}

function $setOnReadyStateChange(this$static, handler){
    var _this = this$static;
    this$static.onreadystatechange = $entry(function(){
        handler.onReadyStateChange(_this);
    }
    );
}

function $removeHandler_0(this$static){
    $doRemove(this$static.this$01, this$static.val$type2, this$static.val$source3, this$static.val$handler4);
}

function SimpleEventBus$1(this$0, val$type, val$handler){
    this.this$01 = this$0;
    this.val$type2 = val$type;
    this.val$source3 = null;
    this.val$handler4 = val$handler;
}

defineClass(552, 1, {}, SimpleEventBus$1);
var Lcom_google_web_bindery_event_shared_SimpleEventBus$1_2_classLit = createForClass('com.google.web.bindery.event.shared', 'SimpleEventBus/1', 552, Ljava_lang_Object_2_classLit);
function SimpleEventBus$2(this$0, val$type, val$handler){
    this.this$01 = this$0;
    this.val$type2 = val$type;
    this.val$source3 = null;
    this.val$handler4 = val$handler;
}

defineClass(553, 1, {849:1}, SimpleEventBus$2);
_.execute_2 = function execute_6(){
    $doAddNow(this.this$01, this.val$type2, this.val$source3, this.val$handler4);
}
;
var Lcom_google_web_bindery_event_shared_SimpleEventBus$2_2_classLit = createForClass('com.google.web.bindery.event.shared', 'SimpleEventBus/2', 553, Ljava_lang_Object_2_classLit);
function SimpleEventBus$3(this$0, val$type, val$source, val$handler){
    this.this$01 = this$0;
    this.val$type2 = val$type;
    this.val$source3 = val$source;
    this.val$handler4 = val$handler;
}

defineClass(554, 1, {849:1}, SimpleEventBus$3);
_.execute_2 = function execute_7(){
    $doRemoveNow(this.this$01, this.val$type2, this.val$source3, this.val$handler4);
}
;
var Lcom_google_web_bindery_event_shared_SimpleEventBus$3_2_classLit = createForClass('com.google.web.bindery.event.shared', 'SimpleEventBus/3', 554, Ljava_lang_Object_2_classLit);
function $append0(this$static, x_0, start_0, end){
    x_0 == null && (x_0 = 'null');
    this$static.string += x_0.substr(start_0, end - start_0);
}

function $charAt_0(this$static, index_0){
    return $charAt_1(this$static.string, index_0);
}

function $replace0(this$static, start_0, end, toInsert){
    this$static.string = $substring_1(this$static.string, 0, start_0) + toInsert + $substring_0(this$static.string, end);
}

function $setCharAt(this$static, index_0, x_0){
    $replace0(this$static, index_0, index_0 + 1, valueOf_1(x_0));
}

function $setLength_0(this$static, newLength){
    var oldLength;
    oldLength = this$static.string.length;
    newLength < oldLength?(this$static.string = $substring_1(this$static.string, 0, newLength)):newLength > oldLength && (this$static.string += valueOf_2(initDim(C_classLit, $intern_9, 0, newLength - oldLength, 7, 1)));
}

function $substring(this$static, end){
    return $substring_1(this$static.string, 0, end);
}

function AbstractStringBuilder(string){
    this.string = string;
}

defineClass(239, 1, {});
_.charAt_0 = function charAt_2(index_0){
    return $charAt_0(this, index_0);
}
;
_.length_1 = function length_4(){
    return this.string.length;
}
;
_.subSequence = function subSequence_0(start_0, end){
    return $substring_1(this.string, start_0, end);
}
;
_.toString$ = function toString_80(){
    return this.string;
}
;
var Ljava_lang_AbstractStringBuilder_2_classLit = createForClass('java.lang', 'AbstractStringBuilder', 239, Ljava_lang_Object_2_classLit);
function ArithmeticException(explanation){
    RuntimeException_0.call(this, explanation);
}

defineClass(130, 35, {3:1, 130:1, 19:1, 35:1, 37:1}, ArithmeticException);
var Ljava_lang_ArithmeticException_2_classLit = createForClass('java.lang', 'ArithmeticException', 130, Ljava_lang_RuntimeException_2_classLit);
function IndexOutOfBoundsException(){
    RuntimeException.call(this);
}

function IndexOutOfBoundsException_0(message){
    RuntimeException_0.call(this, message);
}

defineClass(122, 35, $intern_63, IndexOutOfBoundsException, IndexOutOfBoundsException_0);
var Ljava_lang_IndexOutOfBoundsException_2_classLit = createForClass('java.lang', 'IndexOutOfBoundsException', 122, Ljava_lang_RuntimeException_2_classLit);
function ArrayIndexOutOfBoundsException(){
    IndexOutOfBoundsException.call(this);
}

function ArrayIndexOutOfBoundsException_0(msg){
    IndexOutOfBoundsException_0.call(this, msg);
}

defineClass(295, 122, {3:1, 295:1, 19:1, 35:1, 37:1}, ArrayIndexOutOfBoundsException, ArrayIndexOutOfBoundsException_0);
var Ljava_lang_ArrayIndexOutOfBoundsException_2_classLit = createForClass('java.lang', 'ArrayIndexOutOfBoundsException', 295, Ljava_lang_IndexOutOfBoundsException_2_classLit);
function ArrayStoreException(){
    RuntimeException.call(this);
}

function ArrayStoreException_0(message){
    RuntimeException_0.call(this, message);
}

defineClass(275, 35, $intern_63, ArrayStoreException, ArrayStoreException_0);
var Ljava_lang_ArrayStoreException_2_classLit = createForClass('java.lang', 'ArrayStoreException', 275, Ljava_lang_RuntimeException_2_classLit);
function $clinit_Boolean(){
    $clinit_Boolean = emptyMethod;
    FALSE_1 = new Boolean_0(false);
    TRUE_1 = new Boolean_0(true);
}

function $compareTo_9(this$static, b){
    return compare_5(this$static.value_0, b.value_0);
}

function Boolean_0(value_0){
    this.value_0 = value_0;
}

function compare_5(x_0, y_0){
    return x_0 == y_0?0:x_0?1:-1;
}

defineClass(116, 1, {3:1, 116:1, 24:1}, Boolean_0);
_.compareTo = function compareTo_16(b){
    return $compareTo_9(this, dynamicCast(b, 116));
}
;
_.equals$ = function equals_55(o){
    return instanceOf(o, 116) && dynamicCast(o, 116).value_0 == this.value_0;
}
;
_.hashCode$ = function hashCode_63(){
    return this.value_0?1231:1237;
}
;
_.toString$ = function toString_81(){
    return '' + this.value_0;
}
;
_.value_0 = false;
var FALSE_1, TRUE_1;
var Ljava_lang_Boolean_2_classLit = createForClass('java.lang', 'Boolean', 116, Ljava_lang_Object_2_classLit);
function digit_0(c, radix){
    if (radix < 2 || radix > 36) {
        return -1;
    }
    if (c >= 48 && c < 48 + (radix < 10?radix:10)) {
        return c - 48;
    }
    if (c >= 97 && c < radix + 97 - 10) {
        return c - 97 + 10;
    }
    if (c >= 65 && c < radix + 65 - 10) {
        return c - 65 + 10;
    }
    return -1;
}

function isLetterOrDigit(c){
    return null != String.fromCharCode(c).match(/[A-Z\d]/i);
}

function toUpperCase(c){
    return String.fromCharCode(c).toUpperCase().charCodeAt(0);
}

function ClassCastException(){
    RuntimeException.call(this);
}

function ClassCastException_0(message){
    RuntimeException_0.call(this, message);
}

defineClass(72, 35, {3:1, 72:1, 19:1, 35:1, 37:1}, ClassCastException, ClassCastException_0);
var Ljava_lang_ClassCastException_2_classLit = createForClass('java.lang', 'ClassCastException', 72, Ljava_lang_RuntimeException_2_classLit);
function __parseAndValidateDouble(s){
    var floatRegex;
    if (!(floatRegex = floatRegex_0 , !floatRegex && (floatRegex = floatRegex_0 = /^\s*[+-]?(NaN|Infinity|((\d+\.?\d*)|(\.\d+))([eE][+-]?\d+)?[dDfF]?)\s*$/) , floatRegex.test(s))) {
        throw new NumberFormatException('For input string: "' + s + '"');
    }
    return parseFloat(s);
}

function __parseAndValidateInt(s, radix){
    var i_0, isTooLow, length_0, startIndex, toReturn;
    if (s == null) {
        throw new NumberFormatException('null');
    }
    if (radix < 2 || radix > 36) {
        throw new NumberFormatException('radix ' + radix + ' out of range');
    }
    length_0 = s.length;
    startIndex = length_0 > 0 && (s.charCodeAt(0) == 45 || s.charCodeAt(0) == 43)?1:0;
    for (i_0 = startIndex; i_0 < length_0; i_0++) {
        if (digit_0(s.charCodeAt(i_0), radix) == -1) {
            throw new NumberFormatException('For input string: "' + s + '"');
        }
    }
    toReturn = parseInt(s, radix);
    isTooLow = toReturn < $intern_58;
    if (isNaN(toReturn)) {
        throw new NumberFormatException('For input string: "' + s + '"');
    }
    else if (isTooLow || toReturn > $intern_0) {
        throw new NumberFormatException('For input string: "' + s + '"');
    }
    return toReturn;
}

defineClass(238, 1, {3:1, 238:1});
var floatRegex_0;
var Ljava_lang_Number_2_classLit = createForClass('java.lang', 'Number', 238, Ljava_lang_Object_2_classLit);
function $compareTo_10(this$static, b){
    return compare_6(this$static.value_0, b.value_0);
}

function $equals_4(this$static, o){
    return instanceOf(o, 128) && dynamicCast(o, 128).value_0 == this$static.value_0;
}

function Double(value_0){
    this.value_0 = value_0;
}

function compare_6(x_0, y_0){
    if (x_0 < y_0) {
        return -1;
    }
    if (x_0 > y_0) {
        return 1;
    }
    if (x_0 == y_0) {
        return 0;
    }
    return isNaN(x_0)?isNaN(y_0)?0:1:-1;
}

function isInfinite(x_0){
    return !isFinite(x_0) && !isNaN(x_0);
}

function isNaN_3(x_0){
    return isNaN(x_0);
}

defineClass(128, 238, {3:1, 24:1, 128:1, 238:1}, Double);
_.compareTo = function compareTo_17(b){
    return $compareTo_10(this, dynamicCast(b, 128));
}
;
_.equals$ = function equals_56(o){
    return $equals_4(this, o);
}
;
_.hashCode$ = function hashCode_64(){
    return round_int(this.value_0);
}
;
_.toString$ = function toString_83(){
    return '' + this.value_0;
}
;
_.value_0 = 0;
var Ljava_lang_Double_2_classLit = createForClass('java.lang', 'Double', 128, Ljava_lang_Number_2_classLit);
function isInfinite_0(x_0){
    return !isFinite(x_0) && !isNaN(x_0);
}

function isNaN_4(x_0){
    return isNaN(x_0);
}

function IllegalArgumentException(){
    RuntimeException.call(this);
}

function IllegalArgumentException_0(message){
    RuntimeException_0.call(this, message);
}

function IllegalArgumentException_1(cause){
    Exception_1.call(this, cause);
}

defineClass(30, 35, {3:1, 19:1, 30:1, 35:1, 37:1}, IllegalArgumentException, IllegalArgumentException_0, IllegalArgumentException_1);
var Ljava_lang_IllegalArgumentException_2_classLit = createForClass('java.lang', 'IllegalArgumentException', 30, Ljava_lang_RuntimeException_2_classLit);
function IllegalStateException(){
    RuntimeException.call(this);
}

function IllegalStateException_0(s){
    RuntimeException_0.call(this, s);
}

defineClass(84, 35, $intern_63, IllegalStateException, IllegalStateException_0);
var Ljava_lang_IllegalStateException_2_classLit = createForClass('java.lang', 'IllegalStateException', 84, Ljava_lang_RuntimeException_2_classLit);
function $compareTo_11(this$static, b){
    return compare_7(this$static.value_0, b.value_0);
}

function Integer(value_0){
    this.value_0 = value_0;
}

function compare_7(x_0, y_0){
    return x_0 < y_0?-1:x_0 > y_0?1:0;
}

function numberOfLeadingZeros_0(i_0){
    var m, n, y_0;
    if (i_0 < 0) {
        return 0;
    }
    else if (i_0 == 0) {
        return 32;
    }
    else {
        y_0 = -(i_0 >> 16);
        m = y_0 >> 16 & 16;
        n = 16 - m;
        i_0 = i_0 >> m;
        y_0 = i_0 - 256;
        m = y_0 >> 16 & 8;
        n += m;
        i_0 <<= m;
        y_0 = i_0 - 4096;
        m = y_0 >> 16 & 4;
        n += m;
        i_0 <<= m;
        y_0 = i_0 - $intern_21;
        m = y_0 >> 16 & 2;
        n += m;
        i_0 <<= m;
        y_0 = i_0 >> 14;
        m = y_0 & ~(y_0 >> 1);
        return n + 2 - m;
    }
}

function numberOfTrailingZeros(i_0){
    var r, rtn;
    if (i_0 == 0) {
        return 32;
    }
    else {
        rtn = 0;
        for (r = 1; (r & i_0) == 0; r <<= 1) {
            ++rtn;
        }
        return rtn;
    }
}

function toUnsignedRadixString(value_0, radix){
    return (value_0 >>> 0).toString(radix);
}

function valueOf(i_0){
    var rebase, result;
    if (i_0 > -129 && i_0 < 128) {
        rebase = i_0 + 128;
        result = ($clinit_Integer$BoxedValues() , boxedValues_0)[rebase];
        !result && (result = boxedValues_0[rebase] = new Integer(i_0));
        return result;
    }
    return new Integer(i_0);
}

defineClass(83, 238, {3:1, 24:1, 83:1, 238:1}, Integer);
_.compareTo = function compareTo_18(b){
    return $compareTo_11(this, dynamicCast(b, 83));
}
;
_.equals$ = function equals_57(o){
    return instanceOf(o, 83) && dynamicCast(o, 83).value_0 == this.value_0;
}
;
_.hashCode$ = function hashCode_65(){
    return this.value_0;
}
;
_.toString$ = function toString_84(){
    return '' + this.value_0;
}
;
_.value_0 = 0;
var Ljava_lang_Integer_2_classLit = createForClass('java.lang', 'Integer', 83, Ljava_lang_Number_2_classLit);
function $clinit_Integer$BoxedValues(){
    $clinit_Integer$BoxedValues = emptyMethod;
    boxedValues_0 = initDim(Ljava_lang_Integer_2_classLit, $intern_1, 83, 256, 0, 1);
}

var boxedValues_0;
function $compareTo_12(this$static, b){
    return compare_8(this$static.value_0, b.value_0);
}

function Long(value_0){
    this.value_0 = value_0;
}

function compare_8(x_0, y_0){
    return lt(x_0, y_0)?-1:gt(x_0, y_0)?1:0;
}

function valueOf_0(i_0){
    var rebase, result;
    if (gt(i_0, {l:4194175, m:$intern_46, h:$intern_47}) && lt(i_0, {l:128, m:0, h:0})) {
        rebase = toInt(i_0) + 128;
        result = ($clinit_Long$BoxedValues() , boxedValues_1)[rebase];
        !result && (result = boxedValues_1[rebase] = new Long(i_0));
        return result;
    }
    return new Long(i_0);
}

defineClass(187, 238, {3:1, 24:1, 187:1, 238:1}, Long);
_.compareTo = function compareTo_19(b){
    return $compareTo_12(this, dynamicCast(b, 187));
}
;
_.equals$ = function equals_58(o){
    return instanceOf(o, 187) && eq(dynamicCast(o, 187).value_0, this.value_0);
}
;
_.hashCode$ = function hashCode_66(){
    return toInt(this.value_0);
}
;
_.toString$ = function toString_85(){
    return '' + toString_77(this.value_0);
}
;
_.value_0 = {l:0, m:0, h:0};
var Ljava_lang_Long_2_classLit = createForClass('java.lang', 'Long', 187, Ljava_lang_Number_2_classLit);
function $clinit_Long$BoxedValues(){
    $clinit_Long$BoxedValues = emptyMethod;
    boxedValues_1 = initDim(Ljava_lang_Long_2_classLit, $intern_1, 187, 256, 0, 1);
}

var boxedValues_1;
function abs_5(x_0){
    return x_0 <= 0?0 - x_0:x_0;
}

function abs_6(x_0){
    return x_0 < 0?-x_0:x_0;
}

function ceil_0(x_0){
    return Math.ceil(x_0);
}

function floor_4(x_0){
    return Math.floor(x_0);
}

function max_1(x_0, y_0){
    return x_0 > y_0?x_0:y_0;
}

function min_1(x_0, y_0){
    return x_0 < y_0?x_0:y_0;
}

function pow_0(x_0, exp_0){
    return Math.pow(x_0, exp_0);
}

function round_4(x_0){
    return Math.round(x_0);
}

function round0(x_0){
    return Math.round(x_0);
}

function NullPointerException(){
    RuntimeException.call(this);
}

function NullPointerException_0(message){
    RuntimeException_0.call(this, message);
}

defineClass(108, 35, {3:1, 19:1, 108:1, 35:1, 37:1}, NullPointerException, NullPointerException_0);
var Ljava_lang_NullPointerException_2_classLit = createForClass('java.lang', 'NullPointerException', 108, Ljava_lang_RuntimeException_2_classLit);
function NumberFormatException(message){
    IllegalArgumentException_0.call(this, message);
}

defineClass(57, 30, {3:1, 19:1, 30:1, 57:1, 35:1, 37:1}, NumberFormatException);
var Ljava_lang_NumberFormatException_2_classLit = createForClass('java.lang', 'NumberFormatException', 57, Ljava_lang_IllegalArgumentException_2_classLit);
function StackTraceElement(methodName, fileName, lineNumber){
    this.className_0 = 'Unknown';
    this.methodName = methodName;
    this.fileName = fileName;
    this.lineNumber = lineNumber;
}

defineClass(198, 1, {3:1, 198:1}, StackTraceElement);
_.equals$ = function equals_59(other){
    var st;
    if (instanceOf(other, 198)) {
        st = dynamicCast(other, 198);
        return this.lineNumber == st.lineNumber && equals_75(this.methodName, st.methodName) && equals_75(this.className_0, st.className_0) && equals_75(this.fileName, st.fileName);
    }
    return false;
}
;
_.hashCode$ = function hashCode_67(){
    return hashCode_75(initValues(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_1, 1, 3, [valueOf(this.lineNumber), this.className_0, this.methodName, this.fileName]));
}
;
_.toString$ = function toString_86(){
    return this.className_0 + '.' + this.methodName + '(' + (this.fileName != null?this.fileName:'Unknown Source') + (this.lineNumber >= 0?':' + this.lineNumber:'') + ')';
}
;
_.lineNumber = 0;
var Ljava_lang_StackTraceElement_2_classLit = createForClass('java.lang', 'StackTraceElement', 198, Ljava_lang_Object_2_classLit);
function $charAt_1(this$static, index_0){
    return this$static.charCodeAt(index_0);
}

function $endsWith(this$static, suffix){
    var suffixlength;
    suffixlength = suffix.length;
    return $equals_5(__substr(this$static, this$static.length - suffixlength, suffixlength), suffix);
}

function $equals_5(this$static, other){
    return this$static === other;
}

function $equalsIgnoreCase(this$static, other){
    if (other == null) {
        return false;
    }
    if (this$static == other) {
        return true;
    }
    return this$static.length == other.length && this$static.toLowerCase() == other.toLowerCase();
}

function $getChars_0(this$static, srcEnd, dst, dstBegin){
    var srcIdx;
    for (srcIdx = 0; srcIdx < srcEnd; ++srcIdx) {
        dst[dstBegin++] = this$static.charCodeAt(srcIdx);
    }
}

function $indexOf_2(this$static, codePoint, startIndex){
    return $indexOf_4(this$static, fromCodePoint(codePoint), startIndex);
}

function $indexOf_3(this$static, str){
    return this$static.indexOf(str);
}

function $indexOf_4(this$static, str, startIndex){
    return this$static.indexOf(str, startIndex);
}

function $isEmpty(this$static){
    return !this$static.length;
}

function $lastIndexOf(this$static, str){
    return this$static.lastIndexOf(str);
}

function $lastIndexOf_0(this$static, str, start_0){
    return this$static.lastIndexOf(str, start_0);
}

function $matches_1(this$static, regex){
    return (new RegExp('^(' + regex + ')$')).test(this$static);
}

function $replaceAll(this$static, regex, replace){
    replace = __translateReplaceString(replace);
    return this$static.replace(RegExp(regex, 'g'), replace);
}

function $split(this$static, regex, maxMatch){
    var compiled = new RegExp(regex, 'g');
    var out = [];
    var count = 0;
    var trail = this$static;
    var lastTrail = null;
    while (true) {
        var matchObj = compiled.exec(trail);
        if (matchObj == null || trail == '' || count == maxMatch - 1 && maxMatch > 0) {
            out[count] = trail;
            break;
        }
        else {
            out[count] = trail.substring(0, matchObj.index);
            trail = trail.substring(matchObj.index + matchObj[0].length, trail.length);
            compiled.lastIndex = 0;
            if (lastTrail == trail) {
                out[count] = trail.substring(0, 1);
                trail = trail.substring(1);
            }
            lastTrail = trail;
            count++;
        }
    }
    if (maxMatch == 0 && this$static.length > 0) {
        var lastNonEmpty = out.length;
        while (lastNonEmpty > 0 && out[lastNonEmpty - 1] == '') {
            --lastNonEmpty;
        }
        lastNonEmpty < out.length && out.splice(lastNonEmpty, out.length - lastNonEmpty);
    }
    var jr = __createArray(out.length);
    for (var i_0 = 0; i_0 < out.length; ++i_0) {
        jr[i_0] = out[i_0];
    }
    return jr;
}

function $startsWith(this$static, prefix){
    return $equals_5(__substr(this$static, 0, prefix.length), prefix);
}

function $substring_0(this$static, beginIndex){
    return __substr(this$static, beginIndex, this$static.length - beginIndex);
}

function $substring_1(this$static, beginIndex, endIndex){
    return this$static.substr(beginIndex, endIndex - beginIndex);
}

function $trim(this$static){
    if (this$static.length == 0 || this$static[0] > ' ' && this$static[this$static.length - 1] > ' ') {
        return this$static;
    }
    return this$static.replace(/^[\u0000-\u0020]*|[\u0000-\u0020]*$/g, '');
}

function _String(value_0){
    return __valueOf(value_0, 0, value_0.length);
}

function __checkBounds(legalCount, start_0, end){
    if (start_0 < 0) {
        throw new StringIndexOutOfBoundsException(start_0);
    }
    if (end < start_0) {
        throw new StringIndexOutOfBoundsException(end - start_0);
    }
    if (end > legalCount) {
        throw new StringIndexOutOfBoundsException(end);
    }
}

function __createArray(numElements){
    return initDim(Ljava_lang_String_2_classLit, $intern_8, 2, numElements, 4, 1);
}

function __substr(str, beginIndex, len){
    return str.substr(beginIndex, len);
}

function __translateReplaceString(replaceStr){
    var pos;
    pos = 0;
    while (0 <= (pos = replaceStr.indexOf('\\', pos))) {
        replaceStr.charCodeAt(pos + 1) == 36?(replaceStr = replaceStr.substr(0, pos) + '$' + $substring_0(replaceStr, ++pos)):(replaceStr = replaceStr.substr(0, pos) + $substring_0(replaceStr, ++pos));
    }
    return replaceStr;
}

function __valueOf(x_0, start_0, end){
    var s = '';
    for (var batchStart = start_0; batchStart < end;) {
        var batchEnd = Math.min(batchStart + 10000, end);
        s += String.fromCharCode.apply(null, x_0.slice(batchStart, batchEnd));
        batchStart = batchEnd;
    }
    return s;
}

function charAt_I_C__devirtual$(this$static, index_0){
    return isJavaString(this$static)?this$static.charCodeAt(index_0):this$static.charAt_0(index_0);
}

function compareTo_20(thisStr, otherStr){
    if (thisStr == otherStr) {
        return 0;
    }
    return thisStr < otherStr?-1:1;
}

function compareTo_Ljava_lang_Object__I__devirtual$(this$static, other){
    return isJavaString(this$static)?compareTo_20(this$static, dynamicCastToString(other)):this$static.compareTo(other);
}

function fromCodePoint(codePoint){
    var hiSurrogate, loSurrogate;
    if (codePoint >= $intern_34) {
        hiSurrogate = $intern_48 + (codePoint - $intern_34 >> 10 & $intern_59) & $intern_2;
        loSurrogate = $intern_50 + (codePoint - $intern_34 & $intern_59) & $intern_2;
        return valueOf_1(hiSurrogate) + valueOf_1(loSurrogate);
    }
    else {
        return String.fromCharCode(codePoint & $intern_2);
    }
}

function length__I__devirtual$(this$static){
    return isJavaString(this$static)?this$static.length:this$static.length_1();
}

function subSequence_II_Ljava_lang_CharSequence___devirtual$(this$static, start_0, end){
    return isJavaString(this$static)?this$static.substr(start_0, end - start_0):this$static.subSequence(start_0, end);
}

function toString__Ljava_lang_String___devirtual$_0(this$static){
    return isJavaString(this$static)?this$static:this$static.toString$();
}

function valueOf_1(x_0){
    return String.fromCharCode(x_0);
}

function valueOf_2(x_0){
    return __valueOf(x_0, 0, x_0.length);
}

function valueOf_3(x_0, offset, count){
    var end;
    end = offset + count;
    __checkBounds(x_0.length, offset, end);
    return __valueOf(x_0, offset, end);
}

var Ljava_lang_String_2_classLit = createForClass('java.lang', 'String', 2, Ljava_lang_Object_2_classLit);
function $clinit_String$HashCache(){
    $clinit_String$HashCache = emptyMethod;
    back_1 = {};
    front = {};
}

function compute_0(str){
    var hashCode, i_0, n, nBatch;
    hashCode = 0;
    n = str.length;
    nBatch = n - 4;
    i_0 = 0;
    while (i_0 < nBatch) {
        hashCode = str.charCodeAt(i_0 + 3) + 31 * (str.charCodeAt(i_0 + 2) + 31 * (str.charCodeAt(i_0 + 1) + 31 * (str.charCodeAt(i_0) + 31 * hashCode)));
        hashCode = ~~hashCode;
        i_0 += 4;
    }
    while (i_0 < n) {
        hashCode = hashCode * 31 + $charAt_1(str, i_0++);
    }
    hashCode = ~~hashCode;
    return hashCode;
}

function getHashCode_0(str){
    $clinit_String$HashCache();
    var key = ':' + str;
    var result = front[key];
    if (result != null) {
        return result;
    }
    result = back_1[key];
    result == null && (result = compute_0(str));
    increment_0();
    return front[key] = result;
}

function increment_0(){
    if (count_1 == 256) {
        back_1 = front;
        front = {};
        count_1 = 0;
    }
    ++count_1;
}

var back_1, count_1 = 0, front;
function $append_5(this$static, x_0){
    this$static.string += charToString(x_0);
    return this$static;
}

function $append_6(this$static, x_0){
    this$static.string += x_0;
    return this$static;
}

function $append_7(this$static, x_0){
    this$static.string += x_0;
    return this$static;
}

function $append_8(this$static, x_0){
    this$static.string += x_0;
    return this$static;
}

function $insert_0(this$static, index_0, x_0){
    this$static.string = $substring_1(this$static.string, 0, index_0) + x_0 + $substring_0(this$static.string, index_0);
    return this$static;
}

function StringBuffer(){
    AbstractStringBuilder.call(this, '');
}

function StringBuffer_0(){
    AbstractStringBuilder.call(this, '');
}

function StringBuffer_1(s){
    AbstractStringBuilder.call(this, s);
}

defineClass(168, 239, {415:1}, StringBuffer, StringBuffer_0, StringBuffer_1);
var Ljava_lang_StringBuffer_2_classLit = createForClass('java.lang', 'StringBuffer', 168, Ljava_lang_AbstractStringBuilder_2_classLit);
function $append_9(this$static, x_0){
    this$static.string += charToString(x_0);
    return this$static;
}

function $append_10(this$static, x_0){
    this$static.string += x_0;
    return this$static;
}

function $append_11(this$static, x_0){
    this$static.string += __valueOf(x_0, 0, x_0.length);
    return this$static;
}

function $append_12(this$static, x_0, len){
    this$static.string += valueOf_3(x_0, 0, len);
    return this$static;
}

function $insert_1(this$static, index_0, x_0){
    this$static.string = $substring_1(this$static.string, 0, index_0) + x_0 + $substring_0(this$static.string, index_0);
    return this$static;
}

function StringBuilder(){
    AbstractStringBuilder.call(this, '');
}

function StringBuilder_0(){
    AbstractStringBuilder.call(this, '');
}

function StringBuilder_1(s){
    AbstractStringBuilder.call(this, s);
}

defineClass(89, 239, {415:1}, StringBuilder, StringBuilder_0, StringBuilder_1);
var Ljava_lang_StringBuilder_2_classLit = createForClass('java.lang', 'StringBuilder', 89, Ljava_lang_AbstractStringBuilder_2_classLit);
function StringIndexOutOfBoundsException(index_0){
    IndexOutOfBoundsException_0.call(this, 'String index out of range: ' + index_0);
}

defineClass(286, 122, $intern_63, StringIndexOutOfBoundsException);
var Ljava_lang_StringIndexOutOfBoundsException_2_classLit = createForClass('java.lang', 'StringIndexOutOfBoundsException', 286, Ljava_lang_IndexOutOfBoundsException_2_classLit);
function $clinit_System(){
    $clinit_System = emptyMethod;
    err_0 = new PrintStream;
}

function arraycopy(src_0, srcOfs, dest, destOfs, len){
    $clinit_System();
    var destArray, destComp, destEnd, destType, destlen, srcArray, srcComp, srcType, srclen;
    checkNotNull_0(src_0, 'src');
    checkNotNull_0(dest, 'dest');
    srcType = getClass__Ljava_lang_Class___devirtual$(src_0);
    destType = getClass__Ljava_lang_Class___devirtual$(dest);
    checkArrayType((srcType.modifiers & 4) != 0, 'srcType is not an array');
    checkArrayType((destType.modifiers & 4) != 0, 'destType is not an array');
    srcComp = srcType.componentType;
    destComp = destType.componentType;
    checkArrayType((srcComp.modifiers & 1) != 0?srcComp == destComp:(destComp.modifiers & 1) == 0, "Array types don't match");
    srclen = src_0.length;
    destlen = dest.length;
    if (srcOfs < 0 || destOfs < 0 || len < 0 || srcOfs + len > srclen || destOfs + len > destlen) {
        throw new IndexOutOfBoundsException;
    }
    if (((srcComp.modifiers & 1) == 0 || (srcComp.modifiers & 4) != 0) && srcType != destType) {
        srcArray = dynamicCast(src_0, 5);
        destArray = dynamicCast(dest, 5);
        if (maskUndefined(src_0) === maskUndefined(dest) && srcOfs < destOfs) {
            srcOfs += len;
            for (destEnd = destOfs + len; destEnd-- > destOfs;) {
                setCheck(destArray, destEnd, srcArray[--srcOfs]);
            }
        }
        else {
            for (destEnd = destOfs + len; destOfs < destEnd;) {
                setCheck(destArray, destOfs++, srcArray[srcOfs++]);
            }
        }
    }
    else 
        len > 0 && nativeArraySplice(src_0, srcOfs, dest, destOfs, len, true);
}

var err_0;
function UnsupportedOperationException(){
    RuntimeException.call(this);
}

function UnsupportedOperationException_0(message){
    RuntimeException_0.call(this, message);
}

defineClass(50, 35, {3:1, 19:1, 35:1, 37:1, 50:1}, UnsupportedOperationException, UnsupportedOperationException_0);
var Ljava_lang_UnsupportedOperationException_2_classLit = createForClass('java.lang', 'UnsupportedOperationException', 50, Ljava_lang_RuntimeException_2_classLit);
function $clinit_BigDecimal(){
    $clinit_BigDecimal = emptyMethod;
    var i_0, j, j0;
    new BigDecimal_2({l:1, m:0, h:0}, 0);
    new BigDecimal_2({l:10, m:0, h:0}, 0);
    new BigDecimal_2({l:0, m:0, h:0}, 0);
    BI_SCALED_BY_ZERO = initDim(Ljava_math_BigDecimal_2_classLit, $intern_1, 34, 11, 0, 1);
    CH_ZEROS = initDim(C_classLit, $intern_9, 0, 100, 7, 1);
    DOUBLE_FIVE_POW = initValues(getClassLiteralForArray(D_classLit, 1), $intern_9, 0, 7, [1, 5, 25, 125, 625, 3125, 15625, 78125, 390625, 1953125, 9765625, 48828125, 244140625, 1220703125, 6103515625, 30517578125, 152587890625, 762939453125, 3814697265625, 19073486328125, 95367431640625, 476837158203125, 2384185791015625]);
    DOUBLE_FIVE_POW_BIT_LENGTH = initDim(I_classLit, $intern_4, 0, DOUBLE_FIVE_POW.length, 7, 1);
    DOUBLE_TEN_POW = initValues(getClassLiteralForArray(D_classLit, 1), $intern_9, 0, 7, [1, 10, 100, $intern_51, 10000, $intern_71, $intern_52, $intern_72, $intern_73, $intern_74, 10000000000, 100000000000, 1000000000000, 10000000000000, 100000000000000, 1000000000000000, 10000000000000000]);
    DOUBLE_TEN_POW_BIT_LENGTH = initDim(I_classLit, $intern_4, 0, DOUBLE_TEN_POW.length, 7, 1);
    ZERO_SCALED_BY = initDim(Ljava_math_BigDecimal_2_classLit, $intern_1, 34, 11, 0, 1);
    i_0 = 0;
    for (; i_0 < ZERO_SCALED_BY.length; i_0++) {
        BI_SCALED_BY_ZERO[i_0] = new BigDecimal_2(fromInt(i_0), 0);
        ZERO_SCALED_BY[i_0] = new BigDecimal_2({l:0, m:0, h:0}, i_0);
        CH_ZEROS[i_0] = 48;
    }
    for (; i_0 < CH_ZEROS.length; i_0++) {
        CH_ZEROS[i_0] = 48;
    }
    for (j0 = 0; j0 < DOUBLE_FIVE_POW_BIT_LENGTH.length; j0++) {
        DOUBLE_FIVE_POW_BIT_LENGTH[j0] = bitLength(DOUBLE_FIVE_POW[j0]);
    }
    for (j = 0; j < DOUBLE_TEN_POW_BIT_LENGTH.length; j++) {
        DOUBLE_TEN_POW_BIT_LENGTH[j] = bitLength(DOUBLE_TEN_POW[j]);
    }
    TEN_POW = ($clinit_Multiplication() , bigTenPows);
}

function $add_14(this$static, augend){
    var diffScale;
    diffScale = this$static.scale - augend.scale;
    if (this$static.bitLength == 0 && this$static.smallValue != -1) {
        if (diffScale <= 0) {
            return augend;
        }
        if (augend.bitLength == 0 && augend.smallValue != -1) {
            return this$static;
        }
    }
    else if (augend.bitLength == 0 && augend.smallValue != -1) {
        if (diffScale >= 0) {
            return this$static;
        }
    }
    if (diffScale == 0) {
        if (max_1(this$static.bitLength, augend.bitLength) + 1 < 54) {
            return new BigDecimal_0(this$static.smallValue + augend.smallValue, this$static.scale);
        }
        return new BigDecimal_5(add_12((!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal), (!augend.intVal && (augend.intVal = valueOf_7(augend.smallValue)) , augend.intVal)), this$static.scale);
    }
    else 
        return diffScale > 0?addAndMult10(this$static, augend, diffScale):addAndMult10(augend, this$static, -diffScale);
}

function $compareTo_13(this$static, val){
    var diffPrecision, diffScale, thisSign, thisUnscaled, valUnscaled, valueSign;
    thisSign = $signum(this$static);
    valueSign = $signum(val);
    if (thisSign == valueSign) {
        if (this$static.scale == val.scale && this$static.bitLength < 54 && val.bitLength < 54) {
            return this$static.smallValue < val.smallValue?-1:this$static.smallValue > val.smallValue?1:0;
        }
        diffScale = this$static.scale - val.scale;
        diffPrecision = (this$static.precision > 0?this$static.precision:floor_4((this$static.bitLength - 1) * $intern_76) + 1) - (val.precision > 0?val.precision:floor_4((val.bitLength - 1) * $intern_76) + 1);
        if (diffPrecision > diffScale + 1) {
            return thisSign;
        }
        else if (diffPrecision < diffScale - 1) {
            return -thisSign;
        }
        else {
            thisUnscaled = (!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal);
            valUnscaled = (!val.intVal && (val.intVal = valueOf_7(val.smallValue)) , val.intVal);
            diffScale < 0?(thisUnscaled = $multiply_0(thisUnscaled, powerOf10(-diffScale))):diffScale > 0 && (valUnscaled = $multiply_0(valUnscaled, powerOf10(diffScale)));
            return $compareTo_14(thisUnscaled, valUnscaled);
        }
    }
    else 
        return thisSign < valueSign?-1:1;
}

function $divide(this$static, divisor, scale, roundingMode){
    var diffScale, scaledDividend, scaledDivisor;
    checkNotNull(roundingMode);
    if (divisor.bitLength == 0 && divisor.smallValue != -1) {
        throw new ArithmeticException('Division by zero');
    }
    diffScale = this$static.scale - divisor.scale - scale;
    if (this$static.bitLength < 54 && divisor.bitLength < 54) {
        if (diffScale == 0) {
            return dividePrimitiveDoubles(this$static.smallValue, divisor.smallValue, scale, roundingMode);
        }
        else if (diffScale > 0) {
            if (diffScale < DOUBLE_TEN_POW.length && divisor.bitLength + DOUBLE_TEN_POW_BIT_LENGTH[round_int(diffScale)] < 54) {
                return dividePrimitiveDoubles(this$static.smallValue, divisor.smallValue * DOUBLE_TEN_POW[round_int(diffScale)], scale, roundingMode);
            }
        }
        else {
            if (-diffScale < DOUBLE_TEN_POW.length && this$static.bitLength + DOUBLE_TEN_POW_BIT_LENGTH[round_int(-diffScale)] < 54) {
                return dividePrimitiveDoubles(this$static.smallValue * DOUBLE_TEN_POW[round_int(-diffScale)], divisor.smallValue, scale, roundingMode);
            }
        }
    }
    scaledDividend = (!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal);
    scaledDivisor = (!divisor.intVal && (divisor.intVal = valueOf_7(divisor.smallValue)) , divisor.intVal);
    diffScale > 0?(scaledDivisor = multiplyByTenPow(scaledDivisor, round_int(diffScale))):diffScale < 0 && (scaledDividend = multiplyByTenPow(scaledDividend, round_int(-diffScale)));
    return divideBigIntegers(scaledDividend, scaledDivisor, scale, roundingMode);
}

function $divideToIntegralValue(this$static, divisor){
    var i_0, integralValue, lastPow, newScale, powerOfTen, quotAndRem, tempScale;
    initValues(getClassLiteralForArray(Ljava_math_BigInteger_2_classLit, 1), $intern_1, 38, 0, [(!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal)]);
    newScale = this$static.scale - divisor.scale;
    tempScale = 0;
    i_0 = 1;
    lastPow = TEN_POW.length - 1;
    if (divisor.bitLength == 0 && divisor.smallValue != -1) {
        throw new ArithmeticException('Division by zero');
    }
    if ((divisor.precision > 0?divisor.precision:floor_4((divisor.bitLength - 1) * $intern_76) + 1) + newScale > (this$static.precision > 0?this$static.precision:floor_4((this$static.bitLength - 1) * $intern_76) + 1) + 1 || this$static.bitLength == 0 && this$static.smallValue != -1) {
        integralValue = ($clinit_BigInteger() , ZERO_4);
    }
    else if (newScale == 0) {
        integralValue = $divide_0((!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal), (!divisor.intVal && (divisor.intVal = valueOf_7(divisor.smallValue)) , divisor.intVal));
    }
    else if (newScale > 0) {
        powerOfTen = powerOf10(newScale);
        integralValue = $divide_0((!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal), $multiply_0((!divisor.intVal && (divisor.intVal = valueOf_7(divisor.smallValue)) , divisor.intVal), powerOfTen));
        integralValue = $multiply_0(integralValue, powerOfTen);
    }
    else {
        powerOfTen = powerOf10(-newScale);
        integralValue = $divide_0($multiply_0((!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal), powerOfTen), (!divisor.intVal && (divisor.intVal = valueOf_7(divisor.smallValue)) , divisor.intVal));
        while (!$testBit(integralValue, 0)) {
            quotAndRem = $divideAndRemainder(integralValue, TEN_POW[i_0]);
            if (quotAndRem[1].sign == 0 && tempScale - i_0 >= newScale) {
                tempScale -= i_0;
                i_0 < lastPow && ++i_0;
                integralValue = quotAndRem[0];
            }
            else {
                if (i_0 == 1) {
                    break;
                }
                i_0 = 1;
            }
        }
        newScale = tempScale;
    }
    return integralValue.sign == 0?zeroScaledBy(newScale):new BigDecimal_6(integralValue, toIntScale(newScale));
}

function $floatValue(this$static){
    var floatResult, powerOfTwo;
    floatResult = $signum(this$static);
    powerOfTwo = this$static.bitLength - this$static.scale / $intern_76;
    powerOfTwo < -149 || floatResult == 0?(floatResult *= 0):powerOfTwo > 129?(floatResult *= Infinity):(floatResult = __parseAndValidateDouble($toString_2(this$static)));
    return floatResult;
}

function $initFrom(this$static, val){
    var begin, ch_0, i_0, last, offset, scaleString, unscaled, unscaledBuffer;
    begin = 0;
    offset = 0;
    last = val.length;
    unscaledBuffer = new StringBuilder_0(val.length);
    if (0 < last && val.charCodeAt(0) == 43) {
        ++offset;
        ++begin;
        if (offset < last && (val.charCodeAt(offset) == 43 || val.charCodeAt(offset) == 45)) {
            throw new NumberFormatException('For input string: "' + val + '"');
        }
    }
    while (offset < last && val.charCodeAt(offset) != 46 && val.charCodeAt(offset) != 101 && val.charCodeAt(offset) != 69) {
        ++offset;
    }
    $append0(unscaledBuffer, val, begin, offset);
    if (offset < last && val.charCodeAt(offset) == 46) {
        ++offset;
        begin = offset;
        while (offset < last && val.charCodeAt(offset) != 101 && val.charCodeAt(offset) != 69) {
            ++offset;
        }
        this$static.scale = offset - begin;
        $append0(unscaledBuffer, val, begin, offset);
    }
    else {
        this$static.scale = 0;
    }
    if (offset < last && (val.charCodeAt(offset) == 101 || val.charCodeAt(offset) == 69)) {
        ++offset;
        begin = offset;
        if (offset < last && val.charCodeAt(offset) == 43) {
            ++offset;
            offset < last && val.charCodeAt(offset) != 45 && ++begin;
        }
        scaleString = val.substr(begin, last - begin);
        this$static.scale = this$static.scale - __parseAndValidateInt(scaleString, 10);
        if (this$static.scale != round_int(this$static.scale)) {
            throw new NumberFormatException('Scale out of range.');
        }
    }
    unscaled = unscaledBuffer.string;
    if (unscaled.length < 16) {
        this$static.smallValue = parseUnscaled(unscaled);
        if (isNaN_3(this$static.smallValue)) {
            throw new NumberFormatException('For input string: "' + val + '"');
        }
        this$static.bitLength = bitLength(this$static.smallValue);
    }
    else {
        $setUnscaledValue(this$static, new BigInteger_4(unscaled));
    }
    this$static.precision = unscaledBuffer.string.length;
    for (i_0 = 0; i_0 < unscaledBuffer.string.length; ++i_0) {
        ch_0 = $charAt_1(unscaledBuffer.string, i_0);
        if (ch_0 != 45 && ch_0 != 48) {
            break;
        }
        --this$static.precision;
    }
    this$static.precision == 0 && (this$static.precision = 1);
}

function $intValue_0(this$static){
    return this$static.scale <= -32 || this$static.scale > (this$static.precision > 0?this$static.precision:floor_4((this$static.bitLength - 1) * $intern_76) + 1)?0:$intValue_1(this$static.scale == 0 || this$static.bitLength == 0 && this$static.smallValue != -1?(!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal):this$static.scale < 0?$multiply_0((!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal), powerOf10(-this$static.scale)):$divide_0((!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal), powerOf10(this$static.scale)));
}

function $multiply(this$static, multiplicand){
    var newScale;
    newScale = this$static.scale + multiplicand.scale;
    if (this$static.bitLength == 0 && this$static.smallValue != -1 || multiplicand.bitLength == 0 && multiplicand.smallValue != -1) {
        return zeroScaledBy(newScale);
    }
    if (this$static.bitLength + multiplicand.bitLength < 54) {
        return new BigDecimal_0(this$static.smallValue * multiplicand.smallValue, toIntScale(newScale));
    }
    return new BigDecimal_6($multiply_0((!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal), (!multiplicand.intVal && (multiplicand.intVal = valueOf_7(multiplicand.smallValue)) , multiplicand.intVal)), toIntScale(newScale));
}

function $negate(this$static){
    if (this$static.bitLength < 54) {
        return new BigDecimal_0(-this$static.smallValue, this$static.scale);
    }
    return new BigDecimal_5($negate_0((!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal)), this$static.scale);
}

function $setScale(this$static, newScale, roundingMode){
    var diffScale;
    checkNotNull(roundingMode);
    diffScale = newScale - this$static.scale;
    if (diffScale == 0) {
        return this$static;
    }
    if (diffScale > 0) {
        if (diffScale < DOUBLE_TEN_POW.length && this$static.bitLength + DOUBLE_TEN_POW_BIT_LENGTH[round_int(diffScale)] < 54) {
            return new BigDecimal_0(this$static.smallValue * DOUBLE_TEN_POW[round_int(diffScale)], newScale);
        }
        return new BigDecimal_6(multiplyByTenPow((!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal), round_int(diffScale)), newScale);
    }
    if (this$static.bitLength < 54 && -diffScale < DOUBLE_TEN_POW.length) {
        return dividePrimitiveDoubles(this$static.smallValue, DOUBLE_TEN_POW[round_int(-diffScale)], newScale, roundingMode);
    }
    return divideBigIntegers((!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal), powerOf10(-diffScale), newScale, roundingMode);
}

function $setUnscaledValue(this$static, unscaledValue){
    this$static.intVal = unscaledValue;
    this$static.bitLength = bitLength_1(unscaledValue);
    this$static.bitLength < 54 && (this$static.smallValue = toDouble($longValue(unscaledValue)));
}

function $signum(this$static){
    if (this$static.bitLength < 54) {
        return this$static.smallValue < 0?-1:this$static.smallValue > 0?1:0;
    }
    return (!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal).sign;
}

function $subtract_0(this$static, subtrahend){
    var diffScale;
    diffScale = this$static.scale - subtrahend.scale;
    if (this$static.bitLength == 0 && this$static.smallValue != -1) {
        if (diffScale <= 0) {
            return $negate(subtrahend);
        }
        if (subtrahend.bitLength == 0 && subtrahend.smallValue != -1) {
            return this$static;
        }
    }
    else if (subtrahend.bitLength == 0 && subtrahend.smallValue != -1) {
        if (diffScale >= 0) {
            return this$static;
        }
    }
    if (diffScale == 0) {
        if (max_1(this$static.bitLength, subtrahend.bitLength) + 1 < 54) {
            return new BigDecimal_0(this$static.smallValue - subtrahend.smallValue, this$static.scale);
        }
        return new BigDecimal_5(subtract_3((!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal), (!subtrahend.intVal && (subtrahend.intVal = valueOf_7(subtrahend.smallValue)) , subtrahend.intVal)), this$static.scale);
    }
    else if (diffScale > 0) {
        if (diffScale < DOUBLE_TEN_POW.length && max_1(this$static.bitLength, subtrahend.bitLength + DOUBLE_TEN_POW_BIT_LENGTH[round_int(diffScale)]) + 1 < 54) {
            return new BigDecimal_0(this$static.smallValue - subtrahend.smallValue * DOUBLE_TEN_POW[round_int(diffScale)], this$static.scale);
        }
        return new BigDecimal_5(subtract_3((!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal), multiplyByTenPow((!subtrahend.intVal && (subtrahend.intVal = valueOf_7(subtrahend.smallValue)) , subtrahend.intVal), round_int(diffScale))), this$static.scale);
    }
    else {
        diffScale = -diffScale;
        if (diffScale < DOUBLE_TEN_POW.length && max_1(this$static.bitLength + DOUBLE_TEN_POW_BIT_LENGTH[round_int(diffScale)], subtrahend.bitLength) + 1 < 54) {
            return new BigDecimal_0(this$static.smallValue * DOUBLE_TEN_POW[round_int(diffScale)] - subtrahend.smallValue, subtrahend.scale);
        }
        return new BigDecimal_5(subtract_3(multiplyByTenPow((!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal), round_int(diffScale)), (!subtrahend.intVal && (subtrahend.intVal = valueOf_7(subtrahend.smallValue)) , subtrahend.intVal)), subtrahend.scale);
    }
}

function $toPlainString(this$static){
    var begin, delta, intStr, result;
    intStr = toDecimalScaledString_0((!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal), 0);
    if (this$static.scale == 0 || this$static.bitLength == 0 && this$static.smallValue != -1 && this$static.scale < 0) {
        return intStr;
    }
    begin = $signum(this$static) < 0?1:0;
    delta = this$static.scale;
    result = new StringBuilder_0(intStr.length + 1 + abs_6(round_int(this$static.scale)));
    begin == 1 && (result.string += '-' , result);
    if (this$static.scale > 0) {
        delta -= intStr.length - begin;
        if (delta >= 0) {
            result.string += '0.';
            for (; delta > CH_ZEROS.length; delta -= CH_ZEROS.length) {
                $append_11(result, CH_ZEROS);
            }
            $append_12(result, CH_ZEROS, round_int(delta));
            $append_10(result, __substr(intStr, begin, intStr.length - begin));
        }
        else {
            delta = begin - delta;
            $append_10(result, $substring_1(intStr, begin, round_int(delta)));
            result.string += '.';
            $append_10(result, $substring_0(intStr, round_int(delta)));
        }
    }
    else {
        $append_10(result, __substr(intStr, begin, intStr.length - begin));
        for (; delta < -CH_ZEROS.length; delta += CH_ZEROS.length) {
            $append_11(result, CH_ZEROS);
        }
        $append_12(result, CH_ZEROS, round_int(-delta));
    }
    return result.string;
}

function $toString_2(this$static){
    var begin, end, exponent, intString, result;
    if (this$static.toStringImage != null) {
        return this$static.toStringImage;
    }
    if (this$static.bitLength < 32) {
        this$static.toStringImage = toDecimalScaledString(fromDouble(this$static.smallValue), round_int(this$static.scale));
        return this$static.toStringImage;
    }
    intString = toDecimalScaledString_0((!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal), 0);
    if (this$static.scale == 0) {
        return intString;
    }
    begin = (!this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal).sign < 0?2:1;
    end = intString.length;
    exponent = -this$static.scale + end - begin;
    result = new StringBuilder;
    result.string += intString;
    if (this$static.scale > 0 && exponent >= -6) {
        if (exponent >= 0) {
            $insert_1(result, end - round_int(this$static.scale), '.');
        }
        else {
            result.string = $substring_1(result.string, 0, begin - 1) + '0.' + $substring_0(result.string, begin - 1);
            $insert_1(result, begin + 1, valueOf_3(CH_ZEROS, 0, -round_int(exponent) - 1));
        }
    }
    else {
        if (end - begin >= 1) {
            result.string = $substring_1(result.string, 0, begin) + '.' + $substring_0(result.string, begin);
            ++end;
        }
        result.string = $substring_1(result.string, 0, end) + 'E' + $substring_0(result.string, end);
        exponent > 0 && $insert_1(result, ++end, '+');
        $insert_1(result, ++end, '' + toString_77(fromDouble(exponent)));
    }
    this$static.toStringImage = result.string;
    return this$static.toStringImage;
}

function $unscaledValue(this$static){
    return !this$static.intVal && (this$static.intVal = valueOf_7(this$static.smallValue)) , this$static.intVal;
}

function BigDecimal(val){
    $clinit_BigDecimal();
    if (isInfinite(val) || isNaN(val)) {
        throw new NumberFormatException('Infinite or NaN');
    }
    $initFrom(this, val.toPrecision(20));
}

function BigDecimal_0(smallValue, scale){
    this.smallValue = smallValue;
    this.scale = scale;
    this.bitLength = bitLength(smallValue);
}

function BigDecimal_1(val){
    $clinit_BigDecimal();
    BigDecimal_2.call(this, val, 0);
}

function BigDecimal_2(smallValue, scale){
    this.scale = scale;
    this.bitLength = bitLength_0(smallValue);
    this.bitLength < 54?(this.smallValue = toDouble(smallValue)):(this.intVal = valueOf_8(smallValue));
}

function BigDecimal_3(val){
    $clinit_BigDecimal();
    $initFrom(this, val);
}

function BigDecimal_4(val){
    $clinit_BigDecimal();
    BigDecimal_6.call(this, val, 0);
}

function BigDecimal_5(unscaledVal, scale){
    this.scale = scale;
    $setUnscaledValue(this, dynamicCast(checkNotNull(unscaledVal), 38));
}

function BigDecimal_6(unscaledVal, scale){
    $clinit_BigDecimal();
    BigDecimal_5.call(this, unscaledVal, scale);
}

function addAndMult10(thisValue, augend, diffScale){
    if (diffScale < DOUBLE_TEN_POW.length && max_1(thisValue.bitLength, augend.bitLength + DOUBLE_TEN_POW_BIT_LENGTH[round_int(diffScale)]) + 1 < 54) {
        return new BigDecimal_0(thisValue.smallValue + augend.smallValue * DOUBLE_TEN_POW[round_int(diffScale)], thisValue.scale);
    }
    return new BigDecimal_5(add_12((!thisValue.intVal && (thisValue.intVal = valueOf_7(thisValue.smallValue)) , thisValue.intVal), multiplyByTenPow((!augend.intVal && (augend.intVal = valueOf_7(augend.smallValue)) , augend.intVal), round_int(diffScale))), thisValue.scale);
}

function bitLength(value_0){
    var negative, result;
    if (value_0 > -140737488355328 && value_0 < 140737488355328) {
        if (value_0 == 0) {
            return 0;
        }
        negative = value_0 < 0;
        negative && (value_0 = -value_0);
        result = round_int(floor_4(Math.log(value_0) / 0.6931471805599453));
        (!negative || value_0 != pow_0(2, result)) && ++result;
        return result;
    }
    return bitLength_0(fromDouble(value_0));
}

function bitLength_0(value_0){
    var high;
    lt(value_0, {l:0, m:0, h:0}) && (value_0 = {l:~value_0.l & $intern_46, m:~value_0.m & $intern_46, h:~value_0.h & $intern_47});
    return 64 - (high = toInt(shr(value_0, 32)) , high != 0?numberOfLeadingZeros_0(high):numberOfLeadingZeros_0(toInt(value_0)) + 32);
}

function divideBigIntegers(scaledDividend, scaledDivisor, scale, roundingMode){
    var compRem, divisor, quotAndRem, quotient, rem, remainder, sign;
    quotAndRem = $divideAndRemainder(scaledDividend, scaledDivisor);
    quotient = quotAndRem[0];
    remainder = quotAndRem[1];
    if (remainder.sign == 0) {
        return new BigDecimal_6(quotient, scale);
    }
    sign = scaledDividend.sign * scaledDivisor.sign;
    if (bitLength_1(scaledDivisor) < 54) {
        rem = $longValue(remainder);
        divisor = $longValue(scaledDivisor);
        compRem = lt(shl(lt(rem, {l:0, m:0, h:0})?neg(rem):rem, 1), lt(divisor, {l:0, m:0, h:0})?neg(divisor):divisor)?-1:gt(shl(lt(rem, {l:0, m:0, h:0})?neg(rem):rem, 1), lt(divisor, {l:0, m:0, h:0})?neg(divisor):divisor)?1:0;
        compRem = roundingBehavior($testBit(quotient, 0)?1:0, sign * (5 + compRem), roundingMode);
    }
    else {
        compRem = $compareTo_14($shiftLeftOneBit(remainder.sign < 0?new BigInteger_1(1, remainder.numberLength, remainder.digits):remainder), scaledDivisor.sign < 0?new BigInteger_1(1, scaledDivisor.numberLength, scaledDivisor.digits):scaledDivisor);
        compRem = roundingBehavior($testBit(quotient, 0)?1:0, sign * (5 + compRem), roundingMode);
    }
    if (compRem != 0) {
        if (bitLength_1(quotient) < 54) {
            return valueOf_6(add_11($longValue(quotient), fromInt(compRem)), scale);
        }
        quotient = add_12(quotient, valueOf_8(fromInt(compRem)));
        return new BigDecimal_6(quotient, scale);
    }
    return new BigDecimal_6(quotient, scale);
}

function dividePrimitiveDoubles(scaledDividend, scaledDivisor, scale, roundingMode){
    var compRem, quotient, remainder, sign, quotient_0;
    quotient = (quotient_0 = scaledDividend / scaledDivisor , quotient_0 > 0?floor_4(quotient_0):ceil_0(quotient_0));
    remainder = scaledDividend % scaledDivisor;
    sign = compare_6(scaledDividend * scaledDivisor, 0);
    if (remainder != 0) {
        compRem = compare_6((remainder <= 0?0 - remainder:remainder) * 2, scaledDivisor <= 0?0 - scaledDivisor:scaledDivisor);
        quotient += roundingBehavior(round_int(quotient) & 1, sign * (5 + compRem), roundingMode);
    }
    return new BigDecimal_0(quotient, scale);
}

function parseUnscaled(str){
    var unscaledRegex = unscaledRegex_0;
    !unscaledRegex && (unscaledRegex = unscaledRegex_0 = /^[+-]?\d*$/i);
    if (unscaledRegex.test(str)) {
        return parseInt(str, 10);
    }
    else {
        return Number.NaN;
    }
}

function roundingBehavior(parityBit, fraction, roundingMode){
    var increment;
    increment = 0;
    switch (roundingMode.ordinal) {
        case 7:
            if (fraction != 0) {
                throw new ArithmeticException('Rounding necessary');
            }

            break;
        case 0:
            increment = fraction == 0?0:fraction < 0?-1:1;
            break;
        case 2:
            increment = (fraction == 0?0:fraction < 0?-1:1) > 0?fraction == 0?0:fraction < 0?-1:1:0;
            break;
        case 3:
            increment = (fraction == 0?0:fraction < 0?-1:1) < 0?fraction == 0?0:fraction < 0?-1:1:0;
            break;
        case 4:
            (fraction < 0?-fraction:fraction) >= 5 && (increment = fraction == 0?0:fraction < 0?-1:1);
            break;
        case 5:
            (fraction < 0?-fraction:fraction) > 5 && (increment = fraction == 0?0:fraction < 0?-1:1);
            break;
        case 6:
            (fraction < 0?-fraction:fraction) + parityBit > 5 && (increment = fraction == 0?0:fraction < 0?-1:1);
    }
    return increment;
}

function toIntScale(doubleScale){
    if (doubleScale < $intern_58) {
        throw new ArithmeticException('Overflow');
    }
    else if (doubleScale > $intern_0) {
        throw new ArithmeticException('Underflow');
    }
    else {
        return round_int(doubleScale);
    }
}

function valueOf_4(val){
    $clinit_BigDecimal();
    if (isInfinite(val) || isNaN(val)) {
        throw new NumberFormatException('Infinite or NaN');
    }
    return new BigDecimal_3('' + val);
}

function valueOf_5(unscaledVal){
    $clinit_BigDecimal();
    if (gte_0(unscaledVal, {l:0, m:0, h:0}) && lt(unscaledVal, {l:11, m:0, h:0})) {
        return BI_SCALED_BY_ZERO[toInt(unscaledVal)];
    }
    return new BigDecimal_2(unscaledVal, 0);
}

function valueOf_6(unscaledVal, scale){
    if (scale == 0) {
        return valueOf_5(unscaledVal);
    }
    if (eq(unscaledVal, {l:0, m:0, h:0}) && scale >= 0 && scale < ZERO_SCALED_BY.length) {
        return ZERO_SCALED_BY[scale];
    }
    return new BigDecimal_2(unscaledVal, scale);
}

function zeroScaledBy(doubleScale){
    if (doubleScale == round_int(doubleScale)) {
        return valueOf_6({l:0, m:0, h:0}, round_int(doubleScale));
    }
    if (doubleScale >= 0) {
        return new BigDecimal_2({l:0, m:0, h:0}, $intern_0);
    }
    return new BigDecimal_2({l:0, m:0, h:0}, $intern_58);
}

defineClass(34, 238, {3:1, 24:1, 238:1, 34:1}, BigDecimal, BigDecimal_0, BigDecimal_1, BigDecimal_2, BigDecimal_3, BigDecimal_4, BigDecimal_5, BigDecimal_6);
_.compareTo = function compareTo_21(val){
    return $compareTo_13(this, dynamicCast(val, 34));
}
;
_.equals$ = function equals_60(x_0){
    var x1;
    if (this === x_0) {
        return true;
    }
    if (instanceOf(x_0, 34)) {
        x1 = dynamicCast(x_0, 34);
        return x1.scale == this.scale && (this.bitLength < 54?x1.smallValue == this.smallValue:$equals_6(this.intVal, x1.intVal));
    }
    return false;
}
;
_.hashCode$ = function hashCode_68(){
    var longValue;
    if (this.hashCode != 0) {
        return this.hashCode;
    }
    if (this.bitLength < 54) {
        longValue = fromDouble(this.smallValue);
        this.hashCode = toInt(and(longValue, {l:$intern_46, m:$intern_46, h:$intern_47}));
        this.hashCode = 33 * this.hashCode + toInt(and(shr(longValue, 32), {l:$intern_46, m:$intern_46, h:$intern_47}));
        this.hashCode = 17 * this.hashCode + round_int(this.scale);
        return this.hashCode;
    }
    this.hashCode = 17 * $hashCode_1(this.intVal) + round_int(this.scale);
    return this.hashCode;
}
;
_.toString$ = function toString_87(){
    return $toString_2(this);
}
;
_.bitLength = 0;
_.hashCode = 0;
_.precision = 0;
_.scale = 0;
_.smallValue = 0;
var BI_SCALED_BY_ZERO, CH_ZEROS, DOUBLE_FIVE_POW, DOUBLE_FIVE_POW_BIT_LENGTH, DOUBLE_TEN_POW, DOUBLE_TEN_POW_BIT_LENGTH, TEN_POW, ZERO_SCALED_BY, unscaledRegex_0;
var Ljava_math_BigDecimal_2_classLit = createForClass('java.math', 'BigDecimal', 34, Ljava_lang_Number_2_classLit);
function $clinit_BigInteger(){
    $clinit_BigInteger = emptyMethod;
    var i_0;
    ONE_2 = new BigInteger_0(1, 1);
    TEN = new BigInteger_0(1, 10);
    ZERO_4 = new BigInteger_0(0, 0);
    MINUS_ONE_0 = new BigInteger_0(-1, 1);
    SMALL_VALUES = initValues(getClassLiteralForArray(Ljava_math_BigInteger_2_classLit, 1), $intern_1, 38, 0, [ZERO_4, ONE_2, new BigInteger_0(1, 2), new BigInteger_0(1, 3), new BigInteger_0(1, 4), new BigInteger_0(1, 5), new BigInteger_0(1, 6), new BigInteger_0(1, 7), new BigInteger_0(1, 8), new BigInteger_0(1, 9), TEN]);
    TWO_POWS = initDim(Ljava_math_BigInteger_2_classLit, $intern_1, 38, 32, 0, 1);
    for (i_0 = 0; i_0 < TWO_POWS.length; i_0++) {
        TWO_POWS[i_0] = valueOf_8(shl({l:1, m:0, h:0}, i_0));
    }
}

function $$init_8(this$static){
}

function $compareTo_14(this$static, val){
    if (this$static.sign > val.sign) {
        return 1;
    }
    if (this$static.sign < val.sign) {
        return -1;
    }
    if (this$static.numberLength > val.numberLength) {
        return this$static.sign;
    }
    if (this$static.numberLength < val.numberLength) {
        return -val.sign;
    }
    return this$static.sign * compareArrays(this$static.digits, val.digits, this$static.numberLength);
}

function $cutOffLeadingZeroes(this$static){
    while (this$static.numberLength > 0 && this$static.digits[--this$static.numberLength] == 0)
        ;
    this$static.digits[this$static.numberLength++] == 0 && (this$static.sign = 0);
}

function $divide_0(this$static, divisor){
    var cmp, divisorLen, divisorSign, resDigits, resLength, resSign, result, thisLen, thisSign, val;
    if (divisor.sign == 0) {
        throw new ArithmeticException('BigInteger divide by zero');
    }
    divisorSign = divisor.sign;
    if (divisor.numberLength == 1 && divisor.digits[0] == 1) {
        return divisor.sign > 0?this$static:this$static.sign == 0?this$static:new BigInteger_1(-this$static.sign, this$static.numberLength, this$static.digits);
    }
    thisSign = this$static.sign;
    thisLen = this$static.numberLength;
    divisorLen = divisor.numberLength;
    if (thisLen + divisorLen == 2) {
        val = div_0(and(fromInt(this$static.digits[0]), {l:$intern_46, m:$intern_59, h:0}), and(fromInt(divisor.digits[0]), {l:$intern_46, m:$intern_59, h:0}));
        thisSign != divisorSign && (val = neg(val));
        return valueOf_8(val);
    }
    cmp = thisLen != divisorLen?thisLen > divisorLen?1:-1:compareArrays(this$static.digits, divisor.digits, thisLen);
    if (cmp == 0) {
        return thisSign == divisorSign?ONE_2:MINUS_ONE_0;
    }
    if (cmp == -1) {
        return ZERO_4;
    }
    resLength = thisLen - divisorLen + 1;
    resDigits = initDim(I_classLit, $intern_4, 0, resLength, 7, 1);
    resSign = thisSign == divisorSign?1:-1;
    divisorLen == 1?divideArrayByInt(resDigits, this$static.digits, thisLen, divisor.digits[0]):divide_2(resDigits, resLength, this$static.digits, thisLen, divisor.digits, divisorLen);
    result = new BigInteger_1(resSign, resLength, resDigits);
    $cutOffLeadingZeroes(result);
    return result;
}

function $divideAndRemainder(this$static, divisor){
    var cmp, divisorDigits, divisorLen, divisorSign, quotientDigits, quotientLength, quotientSign, remainderDigits, result0, result1, thisDigits, thisLen, thisSign;
    divisorSign = divisor.sign;
    if (divisorSign == 0) {
        throw new ArithmeticException('BigInteger divide by zero');
    }
    divisorLen = divisor.numberLength;
    divisorDigits = divisor.digits;
    if (divisorLen == 1) {
        return divideAndRemainderByInteger(this$static, divisorDigits[0], divisorSign);
    }
    thisDigits = this$static.digits;
    thisLen = this$static.numberLength;
    cmp = thisLen != divisorLen?thisLen > divisorLen?1:-1:compareArrays(thisDigits, divisorDigits, thisLen);
    if (cmp < 0) {
        return initValues(getClassLiteralForArray(Ljava_math_BigInteger_2_classLit, 1), $intern_1, 38, 0, [ZERO_4, this$static]);
    }
    thisSign = this$static.sign;
    quotientLength = thisLen - divisorLen + 1;
    quotientSign = thisSign == divisorSign?1:-1;
    quotientDigits = initDim(I_classLit, $intern_4, 0, quotientLength, 7, 1);
    remainderDigits = divide_2(quotientDigits, quotientLength, thisDigits, thisLen, divisorDigits, divisorLen);
    result0 = new BigInteger_1(quotientSign, quotientLength, quotientDigits);
    result1 = new BigInteger_1(thisSign, divisorLen, remainderDigits);
    $cutOffLeadingZeroes(result0);
    $cutOffLeadingZeroes(result1);
    return initValues(getClassLiteralForArray(Ljava_math_BigInteger_2_classLit, 1), $intern_1, 38, 0, [result0, result1]);
}

function $equals_6(this$static, x_0){
    var x1;
    if (this$static === x_0) {
        return true;
    }
    if (instanceOf(x_0, 38)) {
        x1 = dynamicCast(x_0, 38);
        return this$static.sign == x1.sign && this$static.numberLength == x1.numberLength && $equalsArrays(this$static, x1.digits);
    }
    return false;
}

function $equalsArrays(this$static, b){
    var i_0;
    for (i_0 = this$static.numberLength - 1; i_0 >= 0 && this$static.digits[i_0] == b[i_0]; i_0--)
        ;
    return i_0 < 0;
}

function $getFirstNonzeroDigit(this$static){
    var i_0;
    if (this$static.firstNonzeroDigit == -2) {
        if (this$static.sign == 0) {
            i_0 = -1;
        }
        else {
            for (i_0 = 0; this$static.digits[i_0] == 0; i_0++)
                ;
        }
        this$static.firstNonzeroDigit = i_0;
    }
    return this$static.firstNonzeroDigit;
}

function $hashCode_1(this$static){
    var i_0;
    if (this$static.hashCode != 0) {
        return this$static.hashCode;
    }
    for (i_0 = 0; i_0 < this$static.digits.length; i_0++) {
        this$static.hashCode = this$static.hashCode * 33 + (this$static.digits[i_0] & -1);
    }
    this$static.hashCode = this$static.hashCode * this$static.sign;
    return this$static.hashCode;
}

function $intValue_1(this$static){
    return this$static.sign * this$static.digits[0];
}

function $longValue(this$static){
    var value_0;
    value_0 = this$static.numberLength > 1?or(shl(fromInt(this$static.digits[1]), 32), and(fromInt(this$static.digits[0]), {l:$intern_46, m:$intern_59, h:0})):and(fromInt(this$static.digits[0]), {l:$intern_46, m:$intern_59, h:0});
    return mul(fromInt(this$static.sign), value_0);
}

function $multiply_0(this$static, val){
    if (val.sign == 0) {
        return ZERO_4;
    }
    if (this$static.sign == 0) {
        return ZERO_4;
    }
    return $clinit_Multiplication() , karatsuba(this$static, val);
}

function $negate_0(this$static){
    return this$static.sign == 0?this$static:new BigInteger_1(-this$static.sign, this$static.numberLength, this$static.digits);
}

function $pow(this$static, exp_0){
    var x_0;
    if (exp_0 < 0) {
        throw new ArithmeticException('Negative exponent');
    }
    if (exp_0 == 0) {
        return ONE_2;
    }
    else if (exp_0 == 1 || $equals_6(this$static, ONE_2) || $equals_6(this$static, ZERO_4)) {
        return this$static;
    }
    if (!$testBit(this$static, 0)) {
        x_0 = 1;
        while (!$testBit(this$static, x_0)) {
            ++x_0;
        }
        return $multiply_0(getPowerOfTwo(x_0 * exp_0), $pow($shiftRight(this$static, x_0), exp_0));
    }
    return pow_1(this$static, exp_0);
}

function $shiftLeft(this$static, n){
    if (n == 0 || this$static.sign == 0) {
        return this$static;
    }
    return n > 0?shiftLeft(this$static, n):shiftRight(this$static, -n);
}

function $shiftLeftOneBit(this$static){
    var srcLen, resLen, resDigits, result;
    return this$static.sign == 0?this$static:(srcLen = this$static.numberLength , resLen = srcLen + 1 , resDigits = initDim(I_classLit, $intern_4, 0, resLen, 7, 1) , shiftLeftOneBit(resDigits, this$static.digits, srcLen) , result = new BigInteger_1(this$static.sign, resLen, resDigits) , $cutOffLeadingZeroes(result) , result);
}

function $shiftRight(this$static, n){
    if (n == 0 || this$static.sign == 0) {
        return this$static;
    }
    return n > 0?shiftRight(this$static, n):shiftLeft(this$static, -n);
}

function $testBit(this$static, n){
    var digit, firstNonZeroDigit, intCount;
    if (n == 0) {
        return (this$static.digits[0] & 1) != 0;
    }
    if (n < 0) {
        throw new ArithmeticException('Negative bit address');
    }
    intCount = n >> 5;
    if (intCount >= this$static.numberLength) {
        return this$static.sign < 0;
    }
    digit = this$static.digits[intCount];
    n = 1 << (n & 31);
    if (this$static.sign < 0) {
        firstNonZeroDigit = $getFirstNonzeroDigit(this$static);
        if (intCount < firstNonZeroDigit) {
            return false;
        }
        else 
            firstNonZeroDigit == intCount?(digit = -digit):(digit = ~digit);
    }
    return (digit & n) != 0;
}

function BigInteger(sign, val){
    this.sign = sign;
    if (val < $intern_98) {
        this.numberLength = 1;
        this.digits = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [~~val]);
    }
    else {
        this.numberLength = 2;
        this.digits = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [~~(val % $intern_98), ~~(val / $intern_98)]);
    }
}

function BigInteger_0(sign, value_0){
    $clinit_BigInteger();
    $$init_8(this);
    this.sign = sign;
    this.numberLength = 1;
    this.digits = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [value_0]);
}

function BigInteger_1(sign, numberLength, digits){
    $clinit_BigInteger();
    $$init_8(this);
    this.sign = sign;
    this.numberLength = numberLength;
    this.digits = digits;
}

function BigInteger_2(sign, val){
    $$init_8(this);
    this.sign = sign;
    if (eq(and(val, {l:0, m:4193280, h:$intern_47}), {l:0, m:0, h:0})) {
        this.numberLength = 1;
        this.digits = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [toInt(val)]);
    }
    else {
        this.numberLength = 2;
        this.digits = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [toInt(val), toInt(shr(val, 32))]);
    }
}

function BigInteger_3(digits){
    $clinit_BigInteger();
    $$init_8(this);
    if (digits.length == 0) {
        this.sign = 0;
        this.numberLength = 1;
        this.digits = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [0]);
    }
    else {
        this.sign = 1;
        this.numberLength = digits.length;
        this.digits = digits;
        $cutOffLeadingZeroes(this);
    }
}

function BigInteger_4(val){
    $clinit_BigInteger();
    BigInteger_5.call(this, val);
}

function BigInteger_5(val){
    checkNotNull(val);
    if (!val.length) {
        throw new NumberFormatException('Zero length BigInteger');
    }
    setFromString(this, val);
}

function getPowerOfTwo(exp_0){
    var bitN, intCount, resDigits;
    if (exp_0 < TWO_POWS.length) {
        return TWO_POWS[exp_0];
    }
    intCount = exp_0 >> 5;
    bitN = exp_0 & 31;
    resDigits = initDim(I_classLit, $intern_4, 0, intCount + 1, 7, 1);
    resDigits[intCount] = 1 << bitN;
    return new BigInteger_1(1, intCount + 1, resDigits);
}

function setFromString(bi, val){
    var bigRadix, bigRadixDigit, bigRadixDigitsLength, charsPerInt, digitIndex, digits, endChar, newDigit, sign, startChar, stringLength, substrEnd, substrStart, topChars;
    stringLength = val.length;
    endChar = stringLength;
    if (val.charCodeAt(0) == 45) {
        sign = -1;
        startChar = 1;
        --stringLength;
    }
    else {
        sign = 1;
        startChar = 0;
    }
    charsPerInt = ($clinit_Conversion() , digitFitInInt)[10];
    bigRadixDigitsLength = ~~(stringLength / charsPerInt);
    topChars = stringLength % charsPerInt;
    topChars != 0 && ++bigRadixDigitsLength;
    digits = initDim(I_classLit, $intern_4, 0, bigRadixDigitsLength, 7, 1);
    bigRadix = bigRadices[8];
    digitIndex = 0;
    substrEnd = startChar + (topChars == 0?charsPerInt:topChars);
    for (substrStart = startChar; substrStart < endChar; substrStart = substrEnd , substrEnd = substrEnd + charsPerInt) {
        bigRadixDigit = __parseAndValidateInt(val.substr(substrStart, substrEnd - substrStart), 10);
        newDigit = ($clinit_Multiplication() , multiplyByInt(digits, digits, digitIndex, bigRadix));
        newDigit += inplaceAdd(digits, digitIndex, bigRadixDigit);
        digits[digitIndex++] = newDigit;
    }
    bi.sign = sign;
    bi.numberLength = digitIndex;
    bi.digits = digits;
    $cutOffLeadingZeroes(bi);
}

function valueOf_7(val){
    $clinit_BigInteger();
    if (val < 0) {
        if (val != -1) {
            return new BigInteger(-1, -val);
        }
        return MINUS_ONE_0;
    }
    else 
        return val <= 10?SMALL_VALUES[round_int(val)]:new BigInteger(1, val);
}

function valueOf_8(val){
    $clinit_BigInteger();
    if (lt(val, {l:0, m:0, h:0})) {
        if (neq(val, {l:$intern_46, m:$intern_46, h:$intern_47})) {
            return new BigInteger_2(-1, neg(val));
        }
        return MINUS_ONE_0;
    }
    else 
        return lte(val, {l:10, m:0, h:0})?SMALL_VALUES[toInt(val)]:new BigInteger_2(1, val);
}

defineClass(38, 238, {3:1, 24:1, 238:1, 38:1}, BigInteger, BigInteger_0, BigInteger_1, BigInteger_2, BigInteger_3, BigInteger_4);
_.compareTo = function compareTo_22(val){
    return $compareTo_14(this, dynamicCast(val, 38));
}
;
_.equals$ = function equals_61(x_0){
    return $equals_6(this, x_0);
}
;
_.hashCode$ = function hashCode_69(){
    return $hashCode_1(this);
}
;
_.toString$ = function toString_88(){
    return toDecimalScaledString_0(this, 0);
}
;
_.firstNonzeroDigit = -2;
_.hashCode = 0;
_.numberLength = 0;
_.sign = 0;
var MINUS_ONE_0, ONE_2, SMALL_VALUES, TEN, TWO_POWS, ZERO_4;
var Ljava_math_BigInteger_2_classLit = createForClass('java.math', 'BigInteger', 38, Ljava_lang_Number_2_classLit);
function bitLength_1(val){
    var bLength, highDigit, i_0;
    if (val.sign == 0) {
        return 0;
    }
    bLength = val.numberLength << 5;
    highDigit = val.digits[val.numberLength - 1];
    if (val.sign < 0) {
        i_0 = $getFirstNonzeroDigit(val);
        if (i_0 == val.numberLength - 1) {
            --highDigit;
            highDigit = ~~highDigit;
        }
    }
    bLength -= numberOfLeadingZeros_0(highDigit);
    return bLength;
}

function shiftLeft(source, count){
    var intCount, resDigits, resLength, result;
    intCount = count >> 5;
    count &= 31;
    resLength = source.numberLength + intCount + (count == 0?0:1);
    resDigits = initDim(I_classLit, $intern_4, 0, resLength, 7, 1);
    shiftLeft_0(resDigits, source.digits, intCount, count);
    result = new BigInteger_1(source.sign, resLength, resDigits);
    $cutOffLeadingZeroes(result);
    return result;
}

function shiftLeft_0(result, source, intCount, count){
    var i_0, i0, rightShiftCount;
    if (count == 0) {
        arraycopy(source, 0, result, intCount, result.length - intCount);
    }
    else {
        rightShiftCount = 32 - count;
        result[result.length - 1] = 0;
        for (i0 = result.length - 1; i0 > intCount; i0--) {
            result[i0] |= source[i0 - intCount - 1] >>> rightShiftCount;
            result[i0 - 1] = source[i0 - intCount - 1] << count;
        }
    }
    for (i_0 = 0; i_0 < intCount; i_0++) {
        result[i_0] = 0;
    }
}

function shiftLeftOneBit(result, source, srcLen){
    var carry, i_0, val;
    carry = 0;
    for (i_0 = 0; i_0 < srcLen; i_0++) {
        val = source[i_0];
        result[i_0] = val << 1 | carry;
        carry = val >>> 31;
    }
    carry != 0 && (result[srcLen] = carry);
}

function shiftRight(source, count){
    var i_0, intCount, resDigits, resLength, result;
    intCount = count >> 5;
    count &= 31;
    if (intCount >= source.numberLength) {
        return source.sign < 0?($clinit_BigInteger() , MINUS_ONE_0):($clinit_BigInteger() , ZERO_4);
    }
    resLength = source.numberLength - intCount;
    resDigits = initDim(I_classLit, $intern_4, 0, resLength + 1, 7, 1);
    shiftRight_0(resDigits, resLength, source.digits, intCount, count);
    if (source.sign < 0) {
        for (i_0 = 0; i_0 < intCount && source.digits[i_0] == 0; i_0++)
            ;
        if (i_0 < intCount || count > 0 && source.digits[i_0] << 32 - count != 0) {
            for (i_0 = 0; i_0 < resLength && resDigits[i_0] == -1; i_0++) {
                resDigits[i_0] = 0;
            }
            i_0 == resLength && ++resLength;
            ++resDigits[i_0];
        }
    }
    result = new BigInteger_1(source.sign, resLength, resDigits);
    $cutOffLeadingZeroes(result);
    return result;
}

function shiftRight_0(result, resultLen, source, intCount, count){
    var allZero, i_0, leftShiftCount;
    allZero = true;
    for (i_0 = 0; i_0 < intCount; i_0++) {
        allZero = allZero & source[i_0] == 0;
    }
    if (count == 0) {
        arraycopy(source, intCount, result, 0, resultLen);
    }
    else {
        leftShiftCount = 32 - count;
        allZero = allZero & source[i_0] << leftShiftCount == 0;
        for (i_0 = 0; i_0 < resultLen - 1; i_0++) {
            result[i_0] = source[i_0 + intCount] >>> count | source[i_0 + intCount + 1] << leftShiftCount;
        }
        result[i_0] = source[i_0 + intCount] >>> count;
        ++i_0;
    }
    return allZero;
}

function $clinit_Conversion(){
    $clinit_Conversion = emptyMethod;
    bigRadices = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [$intern_58, 1162261467, $intern_57, 1220703125, 362797056, 1977326743, $intern_57, 387420489, $intern_74, 214358881, 429981696, 815730721, 1475789056, 170859375, 268435456, 410338673, 612220032, 893871739, 1280000000, 1801088541, 113379904, 148035889, 191102976, 244140625, 308915776, 387420489, 481890304, 594823321, 729000000, 887503681, $intern_57, 1291467969, 1544804416, 1838265625, 60466176]);
    digitFitInInt = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [-1, -1, 31, 19, 15, 13, 11, 11, 10, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5]);
}

function divideLongByBillion(a){
    var aPos, quot, rem;
    if (gte_0(a, {l:0, m:0, h:0})) {
        quot = div_0(a, {l:1755648, m:238, h:0});
        rem = mod(a, {l:1755648, m:238, h:0});
    }
    else {
        aPos = shru(a, 1);
        quot = div_0(aPos, {l:877824, m:119, h:0});
        rem = mod(aPos, {l:877824, m:119, h:0});
        rem = add_11(shl(rem, 1), and(a, {l:1, m:0, h:0}));
    }
    return or(shl(rem, 32), and(quot, {l:$intern_46, m:$intern_59, h:0}));
}

function toDecimalScaledString(value_0, scale){
    $clinit_Conversion();
    var currentChar, exponent, insertPoint, j, j0, negNumber, prev, result, result1, result10, startPoint, v;
    negNumber = lt(value_0, {l:0, m:0, h:0});
    negNumber && (value_0 = neg(value_0));
    if (eq(value_0, {l:0, m:0, h:0})) {
        switch (scale) {
            case 0:
                return '0';
            case 1:
                return '0.0';
            case 2:
                return '0.00';
            case 3:
                return '0.000';
            case 4:
                return '0.0000';
            case 5:
                return '0.00000';
            case 6:
                return '0.000000';
            default:result10 = new StringBuilder;
                scale < 0?(result10.string += '0E+' , result10):(result10.string += '0E' , result10);
                result10.string += scale == $intern_58?'2147483648':'' + -scale;
                return result10.string;
        }
    }
    result = initDim(C_classLit, $intern_9, 0, 19, 7, 1);
    currentChar = 18;
    v = value_0;
    do {
        prev = v;
        v = div_0(v, {l:10, m:0, h:0});
        result[--currentChar] = toInt(add_11({l:48, m:0, h:0}, sub_1(prev, mul(v, {l:10, m:0, h:0})))) & $intern_2;
    }
    while (neq(v, {l:0, m:0, h:0}));
    exponent = sub_1(sub_1(sub_1({l:18, m:0, h:0}, fromInt(currentChar)), fromInt(scale)), {l:1, m:0, h:0});
    if (scale == 0) {
        negNumber && (result[--currentChar] = 45);
        return valueOf_3(result, currentChar, 18 - currentChar);
    }
    if (scale > 0 && gte_0(exponent, {l:4194298, m:$intern_46, h:$intern_47})) {
        if (gte_0(exponent, {l:0, m:0, h:0})) {
            insertPoint = currentChar + toInt(exponent);
            for (j0 = 17; j0 >= insertPoint; j0--) {
                result[j0 + 1] = result[j0];
            }
            result[++insertPoint] = 46;
            negNumber && (result[--currentChar] = 45);
            return valueOf_3(result, currentChar, 18 - currentChar + 1);
        }
        for (j = 2; lt(fromInt(j), add_11(neg(exponent), {l:1, m:0, h:0})); j++) {
            result[--currentChar] = 48;
        }
        result[--currentChar] = 46;
        result[--currentChar] = 48;
        negNumber && (result[--currentChar] = 45);
        return valueOf_3(result, currentChar, 18 - currentChar);
    }
    startPoint = currentChar + 1;
    result1 = new StringBuilder_0;
    negNumber && (result1.string += '-' , result1);
    if (18 - startPoint >= 1) {
        $append_9(result1, result[currentChar]);
        result1.string += '.';
        result1.string += valueOf_3(result, currentChar + 1, 18 - currentChar - 1);
    }
    else {
        result1.string += valueOf_3(result, currentChar, 18 - currentChar);
    }
    result1.string += 'E';
    gt(exponent, {l:0, m:0, h:0}) && (result1.string += '+' , result1);
    result1.string += '' + toString_77(exponent);
    return result1.string;
}

function toDecimalScaledString_0(val, scale){
    $clinit_Conversion();
    var currentChar, delta, digits, exponent, highDigit, i_0, i1, insertPoint, j, j0, negNumber, numberLength, prev, previous, res, resDigit, resLengthInChars, result, result1, result10, result11, sign, startPoint, temp, temp1, tempLen, v;
    sign = val.sign;
    numberLength = val.numberLength;
    digits = val.digits;
    if (sign == 0) {
        switch (scale) {
            case 0:
                return '0';
            case 1:
                return '0.0';
            case 2:
                return '0.00';
            case 3:
                return '0.000';
            case 4:
                return '0.0000';
            case 5:
                return '0.00000';
            case 6:
                return '0.000000';
            default:result10 = new StringBuilder;
                scale < 0?(result10.string += '0E+' , result10):(result10.string += '0E' , result10);
                result10.string += -scale;
                return result10.string;
        }
    }
    resLengthInChars = numberLength * 10 + 1 + 7;
    result = initDim(C_classLit, $intern_9, 0, resLengthInChars + 1, 7, 1);
    currentChar = resLengthInChars;
    if (numberLength == 1) {
        highDigit = digits[0];
        if (highDigit < 0) {
            v = and(fromInt(highDigit), {l:$intern_46, m:$intern_59, h:0});
            do {
                prev = v;
                v = div_0(v, {l:10, m:0, h:0});
                result[--currentChar] = 48 + toInt(sub_1(prev, mul(v, {l:10, m:0, h:0}))) & $intern_2;
            }
            while (neq(v, {l:0, m:0, h:0}));
        }
        else {
            v = highDigit;
            do {
                prev = v;
                v = ~~(v / 10);
                result[--currentChar] = 48 + (prev - v * 10) & $intern_2;
            }
            while (v != 0);
        }
    }
    else {
        temp = initDim(I_classLit, $intern_4, 0, numberLength, 7, 1);
        tempLen = numberLength;
        arraycopy(digits, 0, temp, 0, numberLength);
        BIG_LOOP: while (true) {
            result11 = {l:0, m:0, h:0};
            for (i1 = tempLen - 1; i1 >= 0; i1--) {
                temp1 = add_11(shl(result11, 32), and(fromInt(temp[i1]), {l:$intern_46, m:$intern_59, h:0}));
                res = divideLongByBillion(temp1);
                temp[i1] = toInt(res);
                result11 = fromInt(toInt(shr(res, 32)));
            }
            resDigit = toInt(result11);
            previous = currentChar;
            do {
                result[--currentChar] = 48 + resDigit % 10 & $intern_2;
            }
            while ((resDigit = ~~(resDigit / 10)) != 0 && currentChar != 0);
            delta = 9 - previous + currentChar;
            for (i_0 = 0; i_0 < delta && currentChar > 0; i_0++) {
                result[--currentChar] = 48;
            }
            j = tempLen - 1;
            for (; temp[j] == 0; j--) {
                if (j == 0) {
                    break BIG_LOOP;
                }
            }
            tempLen = j + 1;
        }
        while (result[currentChar] == 48) {
            ++currentChar;
        }
    }
    negNumber = sign < 0;
    exponent = resLengthInChars - currentChar - scale - 1;
    if (scale == 0) {
        negNumber && (result[--currentChar] = 45);
        return valueOf_3(result, currentChar, resLengthInChars - currentChar);
    }
    if (scale > 0 && exponent >= -6) {
        if (exponent >= 0) {
            insertPoint = currentChar + exponent;
            for (j0 = resLengthInChars - 1; j0 >= insertPoint; j0--) {
                result[j0 + 1] = result[j0];
            }
            result[++insertPoint] = 46;
            negNumber && (result[--currentChar] = 45);
            return valueOf_3(result, currentChar, resLengthInChars - currentChar + 1);
        }
        for (j = 2; j < -exponent + 1; j++) {
            result[--currentChar] = 48;
        }
        result[--currentChar] = 46;
        result[--currentChar] = 48;
        negNumber && (result[--currentChar] = 45);
        return valueOf_3(result, currentChar, resLengthInChars - currentChar);
    }
    startPoint = currentChar + 1;
    result1 = new StringBuilder_0;
    negNumber && (result1.string += '-' , result1);
    if (resLengthInChars - startPoint >= 1) {
        $append_9(result1, result[currentChar]);
        result1.string += '.';
        result1.string += valueOf_3(result, currentChar + 1, resLengthInChars - currentChar - 1);
    }
    else {
        result1.string += valueOf_3(result, currentChar, resLengthInChars - currentChar);
    }
    result1.string += 'E';
    exponent > 0 && (result1.string += '+' , result1);
    result1.string += '' + exponent;
    return result1.string;
}

var bigRadices, digitFitInInt;
function divide_2(quot, quotLength, a, aLength, b, bLength){
    var borrow, carry, divisorShift, firstDivisorDigit, guessDigit, i_0, j, k_0, leftHand, longR, normA, normB, product, rOverflowed, rem, res, rightHand;
    normA = initDim(I_classLit, $intern_4, 0, aLength + 1, 7, 1);
    normB = initDim(I_classLit, $intern_4, 0, bLength + 1, 7, 1);
    divisorShift = numberOfLeadingZeros_0(b[bLength - 1]);
    if (divisorShift != 0) {
        shiftLeft_0(normB, b, 0, divisorShift);
        shiftLeft_0(normA, a, 0, divisorShift);
    }
    else {
        arraycopy(a, 0, normA, 0, aLength);
        arraycopy(b, 0, normB, 0, bLength);
    }
    firstDivisorDigit = normB[bLength - 1];
    i_0 = quotLength - 1;
    j = aLength;
    while (i_0 >= 0) {
        if (normA[j] == firstDivisorDigit) {
            guessDigit = -1;
        }
        else {
            product = add_11(shl(and(fromInt(normA[j]), {l:$intern_46, m:$intern_59, h:0}), 32), and(fromInt(normA[j - 1]), {l:$intern_46, m:$intern_59, h:0}));
            res = divideLongByInt(product, firstDivisorDigit);
            guessDigit = toInt(res);
            rem = toInt(shr(res, 32));
            if (guessDigit != 0) {
                rOverflowed = false;
                ++guessDigit;
                do {
                    --guessDigit;
                    if (rOverflowed) {
                        break;
                    }
                    leftHand = mul(and(fromInt(guessDigit), {l:$intern_46, m:$intern_59, h:0}), and(fromInt(normB[bLength - 2]), {l:$intern_46, m:$intern_59, h:0}));
                    rightHand = add_11(shl(fromInt(rem), 32), and(fromInt(normA[j - 2]), {l:$intern_46, m:$intern_59, h:0}));
                    longR = add_11(and(fromInt(rem), {l:$intern_46, m:$intern_59, h:0}), and(fromInt(firstDivisorDigit), {l:$intern_46, m:$intern_59, h:0}));
                    numberOfLeadingZeros_0(toInt(shru(longR, 32))) < 32?(rOverflowed = true):(rem = toInt(longR));
                }
                while (gt(xor(leftHand, {l:0, m:0, h:$intern_27}), xor(rightHand, {l:0, m:0, h:$intern_27})));
            }
        }
        if (guessDigit != 0) {
            borrow = multiplyAndSubtract(normA, j - bLength, normB, bLength, guessDigit);
            if (borrow != 0) {
                --guessDigit;
                carry = {l:0, m:0, h:0};
                for (k_0 = 0; k_0 < bLength; k_0++) {
                    carry = add_11(carry, add_11(and(fromInt(normA[j - bLength + k_0]), {l:$intern_46, m:$intern_59, h:0}), and(fromInt(normB[k_0]), {l:$intern_46, m:$intern_59, h:0})));
                    normA[j - bLength + k_0] = toInt(carry);
                    carry = shru(carry, 32);
                }
            }
        }
        quot[i_0] = guessDigit;
        --j;
        --i_0;
    }
    if (divisorShift != 0) {
        shiftRight_0(normB, bLength, normA, 0, divisorShift);
        return normB;
    }
    arraycopy(normA, 0, normB, 0, bLength);
    return normA;
}

function divideAndRemainderByInteger(val, divisor, divisorSign){
    var a, b, quo, quotientDigits, quotientSign, rem, remainderDigits, result0, result1, valDigits, valLen, valSign;
    valDigits = val.digits;
    valLen = val.numberLength;
    valSign = val.sign;
    if (valLen == 1) {
        a = and(fromInt(valDigits[0]), {l:$intern_46, m:$intern_59, h:0});
        b = and(fromInt(divisor), {l:$intern_46, m:$intern_59, h:0});
        quo = div_0(a, b);
        rem = mod(a, b);
        valSign != divisorSign && (quo = neg(quo));
        valSign < 0 && (rem = neg(rem));
        return initValues(getClassLiteralForArray(Ljava_math_BigInteger_2_classLit, 1), $intern_1, 38, 0, [valueOf_8(quo), valueOf_8(rem)]);
    }
    quotientSign = valSign == divisorSign?1:-1;
    quotientDigits = initDim(I_classLit, $intern_4, 0, valLen, 7, 1);
    remainderDigits = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [divideArrayByInt(quotientDigits, valDigits, valLen, divisor)]);
    result0 = new BigInteger_1(quotientSign, valLen, quotientDigits);
    result1 = new BigInteger_1(valSign, 1, remainderDigits);
    $cutOffLeadingZeroes(result0);
    $cutOffLeadingZeroes(result1);
    return initValues(getClassLiteralForArray(Ljava_math_BigInteger_2_classLit, 1), $intern_1, 38, 0, [result0, result1]);
}

function divideArrayByInt(dest, src_0, srcLength, divisor){
    var aPos, bLong, bPos, i_0, quot, rem, temp;
    rem = {l:0, m:0, h:0};
    bLong = and(fromInt(divisor), {l:$intern_46, m:$intern_59, h:0});
    for (i_0 = srcLength - 1; i_0 >= 0; i_0--) {
        temp = or(shl(rem, 32), and(fromInt(src_0[i_0]), {l:$intern_46, m:$intern_59, h:0}));
        if (gte_0(temp, {l:0, m:0, h:0})) {
            quot = div_0(temp, bLong);
            rem = mod(temp, bLong);
        }
        else {
            aPos = shru(temp, 1);
            bPos = fromInt(divisor >>> 1);
            quot = div_0(aPos, bPos);
            rem = mod(aPos, bPos);
            rem = add_11(shl(rem, 1), and(temp, {l:1, m:0, h:0}));
            if ((divisor & 1) != 0) {
                if (lte(quot, rem)) {
                    rem = sub_1(rem, quot);
                }
                else {
                    if (lte(sub_1(quot, rem), bLong)) {
                        rem = add_11(rem, sub_1(bLong, quot));
                        quot = sub_1(quot, {l:1, m:0, h:0});
                    }
                    else {
                        rem = add_11(rem, sub_1(shl(bLong, 1), quot));
                        quot = sub_1(quot, {l:2, m:0, h:0});
                    }
                }
            }
        }
        dest[i_0] = toInt(and(quot, {l:$intern_46, m:$intern_59, h:0}));
    }
    return toInt(rem);
}

function divideLongByInt(a, b){
    var aPos, bLong, bPos, quot, rem;
    bLong = and(fromInt(b), {l:$intern_46, m:$intern_59, h:0});
    if (gte_0(a, {l:0, m:0, h:0})) {
        quot = div_0(a, bLong);
        rem = mod(a, bLong);
    }
    else {
        aPos = shru(a, 1);
        bPos = fromInt(b >>> 1);
        quot = div_0(aPos, bPos);
        rem = mod(aPos, bPos);
        rem = add_11(shl(rem, 1), and(a, {l:1, m:0, h:0}));
        if ((b & 1) != 0) {
            if (lte(quot, rem)) {
                rem = sub_1(rem, quot);
            }
            else {
                if (lte(sub_1(quot, rem), bLong)) {
                    rem = add_11(rem, sub_1(bLong, quot));
                    quot = sub_1(quot, {l:1, m:0, h:0});
                }
                else {
                    rem = add_11(rem, sub_1(shl(bLong, 1), quot));
                    quot = sub_1(quot, {l:2, m:0, h:0});
                }
            }
        }
    }
    return or(shl(rem, 32), and(quot, {l:$intern_46, m:$intern_59, h:0}));
}

function multiplyAndSubtract(a, start_0, b, bLen, c){
    var carry0, carry1, i_0;
    carry0 = {l:0, m:0, h:0};
    carry1 = {l:0, m:0, h:0};
    for (i_0 = 0; i_0 < bLen; i_0++) {
        carry0 = ($clinit_Multiplication() , add_11(mul(and(fromInt(b[i_0]), {l:$intern_46, m:$intern_59, h:0}), and(fromInt(c), {l:$intern_46, m:$intern_59, h:0})), and(fromInt(toInt(carry0)), {l:$intern_46, m:$intern_59, h:0})));
        carry1 = add_11(sub_1(and(fromInt(a[start_0 + i_0]), {l:$intern_46, m:$intern_59, h:0}), and(carry0, {l:$intern_46, m:$intern_59, h:0})), carry1);
        a[start_0 + i_0] = toInt(carry1);
        carry1 = shr(carry1, 32);
        carry0 = shru(carry0, 32);
    }
    carry1 = add_11(sub_1(and(fromInt(a[start_0 + bLen]), {l:$intern_46, m:$intern_59, h:0}), carry0), carry1);
    a[start_0 + bLen] = toInt(carry1);
    return toInt(shr(carry1, 32));
}

function add_12(op1, op2){
    var a, b, cmp, op1Len, op1Sign, op2Len, op2Sign, res, res0, resDigits, resSign, valueHi, valueLo;
    op1Sign = op1.sign;
    op2Sign = op2.sign;
    if (op1Sign == 0) {
        return op2;
    }
    if (op2Sign == 0) {
        return op1;
    }
    op1Len = op1.numberLength;
    op2Len = op2.numberLength;
    if (op1Len + op2Len == 2) {
        a = and(fromInt(op1.digits[0]), {l:$intern_46, m:$intern_59, h:0});
        b = and(fromInt(op2.digits[0]), {l:$intern_46, m:$intern_59, h:0});
        if (op1Sign == op2Sign) {
            res0 = add_11(a, b);
            valueLo = toInt(res0);
            valueHi = toInt(shru(res0, 32));
            return valueHi == 0?new BigInteger_0(op1Sign, valueLo):new BigInteger_1(op1Sign, 2, initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [valueLo, valueHi]));
        }
        return valueOf_8(op1Sign < 0?sub_1(b, a):sub_1(a, b));
    }
    else if (op1Sign == op2Sign) {
        resSign = op1Sign;
        resDigits = op1Len >= op2Len?add_13(op1.digits, op1Len, op2.digits, op2Len):add_13(op2.digits, op2Len, op1.digits, op1Len);
    }
    else {
        cmp = op1Len != op2Len?op1Len > op2Len?1:-1:compareArrays(op1.digits, op2.digits, op1Len);
        if (cmp == 0) {
            return $clinit_BigInteger() , ZERO_4;
        }
        if (cmp == 1) {
            resSign = op1Sign;
            resDigits = subtract_4(op1.digits, op1Len, op2.digits, op2Len);
        }
        else {
            resSign = op2Sign;
            resDigits = subtract_4(op2.digits, op2Len, op1.digits, op1Len);
        }
    }
    res = new BigInteger_1(resSign, resDigits.length, resDigits);
    $cutOffLeadingZeroes(res);
    return res;
}

function add_13(a, aSize, b, bSize){
    var res;
    res = initDim(I_classLit, $intern_4, 0, aSize + 1, 7, 1);
    add_14(res, a, aSize, b, bSize);
    return res;
}

function add_14(res, a, aSize, b, bSize){
    var carry, i_0;
    carry = add_11(and(fromInt(a[0]), {l:$intern_46, m:$intern_59, h:0}), and(fromInt(b[0]), {l:$intern_46, m:$intern_59, h:0}));
    res[0] = toInt(carry);
    carry = shr(carry, 32);
    if (aSize >= bSize) {
        for (i_0 = 1; i_0 < bSize; i_0++) {
            carry = add_11(carry, add_11(and(fromInt(a[i_0]), {l:$intern_46, m:$intern_59, h:0}), and(fromInt(b[i_0]), {l:$intern_46, m:$intern_59, h:0})));
            res[i_0] = toInt(carry);
            carry = shr(carry, 32);
        }
        for (; i_0 < aSize; i_0++) {
            carry = add_11(carry, and(fromInt(a[i_0]), {l:$intern_46, m:$intern_59, h:0}));
            res[i_0] = toInt(carry);
            carry = shr(carry, 32);
        }
    }
    else {
        for (i_0 = 1; i_0 < aSize; i_0++) {
            carry = add_11(carry, add_11(and(fromInt(a[i_0]), {l:$intern_46, m:$intern_59, h:0}), and(fromInt(b[i_0]), {l:$intern_46, m:$intern_59, h:0})));
            res[i_0] = toInt(carry);
            carry = shr(carry, 32);
        }
        for (; i_0 < bSize; i_0++) {
            carry = add_11(carry, and(fromInt(b[i_0]), {l:$intern_46, m:$intern_59, h:0}));
            res[i_0] = toInt(carry);
            carry = shr(carry, 32);
        }
    }
    neq(carry, {l:0, m:0, h:0}) && (res[i_0] = toInt(carry));
}

function compareArrays(a, b, size_0){
    var i_0;
    for (i_0 = size_0 - 1; i_0 >= 0 && a[i_0] == b[i_0]; i_0--)
        ;
    return i_0 < 0?0:lt(and(fromInt(a[i_0]), {l:$intern_46, m:$intern_59, h:0}), and(fromInt(b[i_0]), {l:$intern_46, m:$intern_59, h:0}))?-1:1;
}

function inplaceAdd(a, aSize, addend){
    var carry, i_0;
    carry = and(fromInt(addend), {l:$intern_46, m:$intern_59, h:0});
    for (i_0 = 0; neq(carry, {l:0, m:0, h:0}) && i_0 < aSize; i_0++) {
        carry = add_11(carry, and(fromInt(a[i_0]), {l:$intern_46, m:$intern_59, h:0}));
        a[i_0] = toInt(carry);
        carry = shr(carry, 32);
    }
    return toInt(carry);
}

function subtract_3(op1, op2){
    var a, b, cmp, op1Len, op1Sign, op2Len, op2Sign, res, resDigits, resSign;
    op1Sign = op1.sign;
    op2Sign = op2.sign;
    if (op2Sign == 0) {
        return op1;
    }
    if (op1Sign == 0) {
        return op2.sign == 0?op2:new BigInteger_1(-op2.sign, op2.numberLength, op2.digits);
    }
    op1Len = op1.numberLength;
    op2Len = op2.numberLength;
    if (op1Len + op2Len == 2) {
        a = and(fromInt(op1.digits[0]), {l:$intern_46, m:$intern_59, h:0});
        b = and(fromInt(op2.digits[0]), {l:$intern_46, m:$intern_59, h:0});
        op1Sign < 0 && (a = neg(a));
        op2Sign < 0 && (b = neg(b));
        return valueOf_8(sub_1(a, b));
    }
    cmp = op1Len != op2Len?op1Len > op2Len?1:-1:compareArrays(op1.digits, op2.digits, op1Len);
    if (cmp == -1) {
        resSign = -op2Sign;
        resDigits = op1Sign == op2Sign?subtract_4(op2.digits, op2Len, op1.digits, op1Len):add_13(op2.digits, op2Len, op1.digits, op1Len);
    }
    else {
        resSign = op1Sign;
        if (op1Sign == op2Sign) {
            if (cmp == 0) {
                return $clinit_BigInteger() , ZERO_4;
            }
            resDigits = subtract_4(op1.digits, op1Len, op2.digits, op2Len);
        }
        else {
            resDigits = add_13(op1.digits, op1Len, op2.digits, op2Len);
        }
    }
    res = new BigInteger_1(resSign, resDigits.length, resDigits);
    $cutOffLeadingZeroes(res);
    return res;
}

function subtract_4(a, aSize, b, bSize){
    var res;
    res = initDim(I_classLit, $intern_4, 0, aSize, 7, 1);
    subtract_5(res, a, aSize, b, bSize);
    return res;
}

function subtract_5(res, a, aSize, b, bSize){
    var borrow, i_0;
    borrow = {l:0, m:0, h:0};
    for (i_0 = 0; i_0 < bSize; i_0++) {
        borrow = add_11(borrow, sub_1(and(fromInt(a[i_0]), {l:$intern_46, m:$intern_59, h:0}), and(fromInt(b[i_0]), {l:$intern_46, m:$intern_59, h:0})));
        res[i_0] = toInt(borrow);
        borrow = shr(borrow, 32);
    }
    for (; i_0 < aSize; i_0++) {
        borrow = add_11(borrow, and(fromInt(a[i_0]), {l:$intern_46, m:$intern_59, h:0}));
        res[i_0] = toInt(borrow);
        borrow = shr(borrow, 32);
    }
}

function $clinit_Multiplication(){
    $clinit_Multiplication = emptyMethod;
    var fivePow, i_0;
    bigFivePows = initDim(Ljava_math_BigInteger_2_classLit, $intern_1, 38, 32, 0, 1);
    bigTenPows = initDim(Ljava_math_BigInteger_2_classLit, $intern_1, 38, 32, 0, 1);
    tenPows = initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [1, 10, 100, $intern_51, 10000, $intern_71, $intern_52, $intern_72, $intern_73, $intern_74]);
    fivePow = {l:1, m:0, h:0};
    for (i_0 = 0; i_0 <= 18; i_0++) {
        bigFivePows[i_0] = valueOf_8(fivePow);
        bigTenPows[i_0] = valueOf_8(shl(fivePow, i_0));
        fivePow = mul(fivePow, {l:5, m:0, h:0});
    }
    for (; i_0 < bigTenPows.length; i_0++) {
        bigFivePows[i_0] = $multiply_0(bigFivePows[i_0 - 1], bigFivePows[1]);
        bigTenPows[i_0] = $multiply_0(bigTenPows[i_0 - 1], ($clinit_BigInteger() , TEN));
    }
}

function karatsuba(op1, op2){
    $clinit_Multiplication();
    var lower, lowerOp1, lowerOp2, middle, ndiv2, temp, upper, upperOp1, upperOp2;
    if (op2.numberLength > op1.numberLength) {
        temp = op1;
        op1 = op2;
        op2 = temp;
    }
    if (op2.numberLength < 63) {
        return multiplyPAP(op1, op2);
    }
    ndiv2 = (op1.numberLength & -2) << 4;
    upperOp1 = $shiftRight(op1, ndiv2);
    upperOp2 = $shiftRight(op2, ndiv2);
    lowerOp1 = subtract_3(op1, $shiftLeft(upperOp1, ndiv2));
    lowerOp2 = subtract_3(op2, $shiftLeft(upperOp2, ndiv2));
    upper = karatsuba(upperOp1, upperOp2);
    lower = karatsuba(lowerOp1, lowerOp2);
    middle = karatsuba(subtract_3(upperOp1, lowerOp1), subtract_3(lowerOp2, upperOp2));
    middle = add_12(add_12(middle, upper), lower);
    middle = $shiftLeft(middle, ndiv2);
    upper = $shiftLeft(upper, ndiv2 << 1);
    return add_12(add_12(upper, middle), lower);
}

function multArraysPAP(aDigits, aLen, bDigits, bLen, resDigits){
    if (aLen == 0 || bLen == 0) {
        return;
    }
    aLen == 1?(resDigits[bLen] = multiplyByInt(resDigits, bDigits, bLen, aDigits[0])):bLen == 1?(resDigits[aLen] = multiplyByInt(resDigits, aDigits, aLen, bDigits[0])):multPAP(aDigits, bDigits, resDigits, aLen, bLen);
}

function multPAP(a, b, t, aLen, bLen){
    var aI, carry, i_0, j;
    if (maskUndefined(a) === maskUndefined(b) && aLen == bLen) {
        square(a, aLen, t);
        return;
    }
    for (i_0 = 0; i_0 < aLen; i_0++) {
        carry = {l:0, m:0, h:0};
        aI = a[i_0];
        for (j = 0; j < bLen; j++) {
            carry = add_11(add_11(mul(and(fromInt(aI), {l:$intern_46, m:$intern_59, h:0}), and(fromInt(b[j]), {l:$intern_46, m:$intern_59, h:0})), and(fromInt(t[i_0 + j]), {l:$intern_46, m:$intern_59, h:0})), and(fromInt(toInt(carry)), {l:$intern_46, m:$intern_59, h:0}));
            t[i_0 + j] = toInt(carry);
            carry = shru(carry, 32);
        }
        t[i_0 + bLen] = toInt(carry);
    }
}

function multiplyByInt(res, a, aSize, factor){
    $clinit_Multiplication();
    var carry, i_0;
    carry = {l:0, m:0, h:0};
    for (i_0 = 0; i_0 < aSize; i_0++) {
        carry = add_11(mul(and(fromInt(a[i_0]), {l:$intern_46, m:$intern_59, h:0}), and(fromInt(factor), {l:$intern_46, m:$intern_59, h:0})), and(fromInt(toInt(carry)), {l:$intern_46, m:$intern_59, h:0}));
        res[i_0] = toInt(carry);
        carry = shru(carry, 32);
    }
    return toInt(carry);
}

function multiplyByPositiveInt(val, factor){
    var aDigits, aNumberLength, res, resDigits, resHi, resLength, resLo, resSign, result;
    resSign = val.sign;
    if (resSign == 0) {
        return $clinit_BigInteger() , ZERO_4;
    }
    aNumberLength = val.numberLength;
    aDigits = val.digits;
    if (aNumberLength == 1) {
        res = mul(and(fromInt(aDigits[0]), {l:$intern_46, m:$intern_59, h:0}), and(fromInt(factor), {l:$intern_46, m:$intern_59, h:0}));
        resLo = toInt(res);
        resHi = toInt(shru(res, 32));
        return resHi == 0?new BigInteger_0(resSign, resLo):new BigInteger_1(resSign, 2, initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [resLo, resHi]));
    }
    resLength = aNumberLength + 1;
    resDigits = initDim(I_classLit, $intern_4, 0, resLength, 7, 1);
    resDigits[aNumberLength] = multiplyByInt(resDigits, aDigits, aNumberLength, factor);
    result = new BigInteger_1(resSign, resLength, resDigits);
    $cutOffLeadingZeroes(result);
    return result;
}

function multiplyByTenPow(val, exp_0){
    $clinit_Multiplication();
    return exp_0 < tenPows.length?multiplyByPositiveInt(val, tenPows[exp_0]):$multiply_0(val, powerOf10(exp_0));
}

function multiplyPAP(a, b){
    var aDigits, aLen, bDigits, bLen, resDigits, resLength, resSign, result, val, valueHi, valueLo;
    aLen = a.numberLength;
    bLen = b.numberLength;
    resLength = aLen + bLen;
    resSign = a.sign != b.sign?-1:1;
    if (resLength == 2) {
        val = mul(and(fromInt(a.digits[0]), {l:$intern_46, m:$intern_59, h:0}), and(fromInt(b.digits[0]), {l:$intern_46, m:$intern_59, h:0}));
        valueLo = toInt(val);
        valueHi = toInt(shru(val, 32));
        return valueHi == 0?new BigInteger_0(resSign, valueLo):new BigInteger_1(resSign, 2, initValues(getClassLiteralForArray(I_classLit, 1), $intern_4, 0, 7, [valueLo, valueHi]));
    }
    aDigits = a.digits;
    bDigits = b.digits;
    resDigits = initDim(I_classLit, $intern_4, 0, resLength, 7, 1);
    multArraysPAP(aDigits, aLen, bDigits, bLen, resDigits);
    result = new BigInteger_1(resSign, resLength, resDigits);
    $cutOffLeadingZeroes(result);
    return result;
}

function pow_1(base, exponent){
    $clinit_Multiplication();
    var acc, res;
    res = ($clinit_BigInteger() , ONE_2);
    acc = base;
    for (; exponent > 1; exponent >>= 1) {
        (exponent & 1) != 0 && (res = $multiply_0(res, acc));
        acc.numberLength == 1?(acc = $multiply_0(acc, acc)):(acc = new BigInteger_3(square(acc.digits, acc.numberLength, initDim(I_classLit, $intern_4, 0, acc.numberLength << 1, 7, 1))));
    }
    res = $multiply_0(res, acc);
    return res;
}

function powerOf10(exp_0){
    $clinit_Multiplication();
    var intExp, longExp, powerOfFive, res;
    intExp = round_int(exp_0);
    if (exp_0 < bigTenPows.length) {
        return bigTenPows[intExp];
    }
    else if (exp_0 <= 50) {
        return $pow(($clinit_BigInteger() , TEN), intExp);
    }
    else if (exp_0 <= $intern_51) {
        return $shiftLeft($pow(bigFivePows[1], intExp), intExp);
    }
    if (exp_0 > $intern_52) {
        throw new ArithmeticException('power of ten too big');
    }
    if (exp_0 <= $intern_0) {
        return $shiftLeft($pow(bigFivePows[1], intExp), intExp);
    }
    powerOfFive = $pow(bigFivePows[1], $intern_0);
    res = powerOfFive;
    longExp = fromDouble(exp_0 - $intern_0);
    intExp = round_int(exp_0 % $intern_0);
    while (gt(longExp, {l:$intern_46, m:511, h:0})) {
        res = $multiply_0(res, powerOfFive);
        longExp = sub_1(longExp, {l:$intern_46, m:511, h:0});
    }
    res = $multiply_0(res, $pow(bigFivePows[1], intExp));
    res = $shiftLeft(res, $intern_0);
    longExp = fromDouble(exp_0 - $intern_0);
    while (gt(longExp, {l:$intern_46, m:511, h:0})) {
        res = $shiftLeft(res, $intern_0);
        longExp = sub_1(longExp, {l:$intern_46, m:511, h:0});
    }
    res = $shiftLeft(res, intExp);
    return res;
}

function square(a, aLen, res){
    var carry, i_0, i0, index_0, j;
    for (i0 = 0; i0 < aLen; i0++) {
        carry = {l:0, m:0, h:0};
        for (j = i0 + 1; j < aLen; j++) {
            carry = add_11(add_11(mul(and(fromInt(a[i0]), {l:$intern_46, m:$intern_59, h:0}), and(fromInt(a[j]), {l:$intern_46, m:$intern_59, h:0})), and(fromInt(res[i0 + j]), {l:$intern_46, m:$intern_59, h:0})), and(fromInt(toInt(carry)), {l:$intern_46, m:$intern_59, h:0}));
            res[i0 + j] = toInt(carry);
            carry = shru(carry, 32);
        }
        res[i0 + aLen] = toInt(carry);
    }
    shiftLeftOneBit(res, res, aLen << 1);
    carry = {l:0, m:0, h:0};
    for (i_0 = 0 , index_0 = 0; i_0 < aLen; ++i_0 , index_0++) {
        carry = add_11(add_11(mul(and(fromInt(a[i_0]), {l:$intern_46, m:$intern_59, h:0}), and(fromInt(a[i_0]), {l:$intern_46, m:$intern_59, h:0})), and(fromInt(res[index_0]), {l:$intern_46, m:$intern_59, h:0})), and(fromInt(toInt(carry)), {l:$intern_46, m:$intern_59, h:0}));
        res[index_0] = toInt(carry);
        carry = shru(carry, 32);
        ++index_0;
        carry = add_11(carry, and(fromInt(res[index_0]), {l:$intern_46, m:$intern_59, h:0}));
        res[index_0] = toInt(carry);
        carry = shru(carry, 32);
    }
    return res;
}

var bigFivePows, bigTenPows, tenPows;
function $clinit_RoundingMode(){
    $clinit_RoundingMode = emptyMethod;
    UP = new RoundingMode('UP', 0);
    DOWN = new RoundingMode('DOWN', 1);
    CEILING = new RoundingMode('CEILING', 2);
    FLOOR = new RoundingMode('FLOOR', 3);
    HALF_UP = new RoundingMode('HALF_UP', 4);
    HALF_DOWN = new RoundingMode('HALF_DOWN', 5);
    HALF_EVEN = new RoundingMode('HALF_EVEN', 6);
    UNNECESSARY = new RoundingMode('UNNECESSARY', 7);
}

function RoundingMode(enum$name, enum$ordinal){
    Enum.call(this, enum$name, enum$ordinal);
}

function valueOf_9(mode){
    $clinit_RoundingMode();
    switch (mode) {
        case 2:
            return CEILING;
        case 1:
            return DOWN;
        case 3:
            return FLOOR;
        case 5:
            return HALF_DOWN;
        case 6:
            return HALF_EVEN;
        case 4:
            return HALF_UP;
        case 7:
            return UNNECESSARY;
        case 0:
            return UP;
        default:throw new IllegalArgumentException_0('Invalid rounding mode');
    }
}

function values_7(){
    $clinit_RoundingMode();
    return initValues(getClassLiteralForArray(Ljava_math_RoundingMode_2_classLit, 1), $intern_1, 175, 0, [UP, DOWN, CEILING, FLOOR, HALF_UP, HALF_DOWN, HALF_EVEN, UNNECESSARY]);
}

defineClass(175, 40, {3:1, 24:1, 40:1, 175:1}, RoundingMode);
var CEILING, DOWN, FLOOR, HALF_DOWN, HALF_EVEN, HALF_UP, UNNECESSARY, UP;
var Ljava_math_RoundingMode_2_classLit = createForEnum('java.math', 'RoundingMode', 175, Ljava_lang_Enum_2_classLit, values_7);
function $advanceToFind(this$static, o, remove){
    var e, iter;
    for (iter = this$static.iterator_1(); iter.hasNext();) {
        e = iter.next_2();
        if (maskUndefined(o) === maskUndefined(e) || o != null && equals_Ljava_lang_Object__Z__devirtual$(o, e)) {
            remove && iter.remove();
            return true;
        }
    }
    return false;
}

function $containsAll_0(this$static, c){
    var e, e$iterator;
    checkNotNull(c);
    for (e$iterator = c.iterator_1(); e$iterator.hasNext();) {
        e = e$iterator.next_2();
        if (!this$static.contains_1(e)) {
            return false;
        }
    }
    return true;
}

function $toString_3(this$static){
    var comma, e, e$iterator, sb;
    sb = new StringBuilder_1('[');
        comma = false;
        for (e$iterator = this$static.iterator_1(); e$iterator.hasNext();) {
            e = e$iterator.next_2();
            comma?(sb.string += ', ' , sb):(comma = true);
            sb.string += e === this$static?'(this Collection)':'' + e;
        }
  sb.string += ']';
  return sb.string;
}

defineClass(866, 1, {});
_.add_3 = function add_15(o){
    throw new UnsupportedOperationException_0('Add not supported on this collection');
}
;
_.contains_1 = function contains_3(o){
    return $advanceToFind(this, o, false);
}
;
_.isEmpty = function isEmpty_3(){
    return this.size_1() == 0;
}
;
_.remove_1 = function remove_9(o){
    return $advanceToFind(this, o, true);
}
;
_.toArray = function toArray(a){
    var i_0, it, size_0;
    size_0 = this.size_1();
    a.length < size_0 && (a = createFrom(a, size_0));
    it = this.iterator_1();
    for (i_0 = 0; i_0 < size_0; ++i_0) {
        setCheck(a, i_0, it.next_2());
    }
    a.length > size_0 && setCheck(a, size_0, null);
    return a;
}
;
_.toString$ = function toString_89(){
    return $toString_3(this);
}
;
var Ljava_util_AbstractCollection_2_classLit = createForClass('java.util', 'AbstractCollection', 866, Ljava_lang_Object_2_classLit);
function $containsEntry(this$static, entry){
    var key, ourValue, value_0;
    key = entry.getKey();
    value_0 = entry.getValue();
    ourValue = isJavaString(key)?$getStringValue_1(this$static, key):getEntryValueOrNull($getEntry(this$static.hashCodeMap, key));
    if (!(maskUndefined(value_0) === maskUndefined(ourValue) || value_0 != null && equals_Ljava_lang_Object__Z__devirtual$(value_0, ourValue))) {
        return false;
    }
    if (ourValue == null && !(isJavaString(key)?$hasStringValue(this$static, key):!!$getEntry(this$static.hashCodeMap, key))) {
        return false;
    }
    return true;
}

function $implFindEntry(this$static, key, remove){
    var entry, iter, k_0;
    for (iter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(this$static)).this$01); $hasNext_2(iter);) {
        entry = (checkStructuralChange(iter.this$01, iter) , checkCriticalElement($hasNext_2(iter)) , iter.last = iter.current , dynamicCast(iter.current.next_2(), 97));
        k_0 = entry.getKey();
        if (maskUndefined(key) === maskUndefined(k_0) || key != null && equals_Ljava_lang_Object__Z__devirtual$(key, k_0)) {
            if (remove) {
                entry = new AbstractMap$SimpleEntry(entry.getKey(), entry.getValue());
                $remove_5(iter);
            }
            return entry;
        }
    }
    return null;
}

function $putAll(this$static, map_0){
    var e, e$iterator;
    checkNotNull(map_0);
    for (e$iterator = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(map_0)).this$01); $hasNext_2(e$iterator);) {
        e = (checkStructuralChange(e$iterator.this$01, e$iterator) , checkCriticalElement($hasNext_2(e$iterator)) , e$iterator.last = e$iterator.current , dynamicCast(e$iterator.current.next_2(), 97));
        $put_0(this$static, e.getKey(), e.getValue());
    }
}

function $toString_4(this$static, o){
    return o === this$static?'(this Map)':'' + o;
}

function getEntryValueOrNull(entry){
    return !entry?null:entry.getValue();
}

defineClass(865, 1, {236:1});
_.equals$ = function equals_62(obj){
    var entry, entry$iterator, otherMap;
    if (obj === this) {
        return true;
    }
    if (!instanceOf(obj, 236)) {
        return false;
    }
    otherMap = dynamicCast(obj, 236);
    if (this.size_0 != otherMap.size_1()) {
        return false;
    }
    for (entry$iterator = otherMap.entrySet_0().iterator_1(); entry$iterator.hasNext();) {
        entry = dynamicCast(entry$iterator.next_2(), 97);
        if (!$containsEntry(this, entry)) {
            return false;
        }
    }
    return true;
}
;
_.get_0 = function get_1(key){
    return getEntryValueOrNull($implFindEntry(this, key, false));
}
;
_.hashCode$ = function hashCode_70(){
    return hashCode_76(new AbstractHashMap$EntrySet(this));
}
;
_.isEmpty = function isEmpty_4(){
    return this.size_0 == 0;
}
;
_.put = function put(key, value_0){
    throw new UnsupportedOperationException_0('Put not supported on this map');
}
;
_.remove_2 = function remove_10(key){
    return getEntryValueOrNull($implFindEntry(this, key, true));
}
;
_.size_1 = function size_5(){
    return (new AbstractHashMap$EntrySet(this)).this$01.size_0;
}
;
_.toString$ = function toString_90(){
    var comma, entry, entry$iterator, sb;
    sb = new StringBuilder_1('{');
        comma = false;
        for (entry$iterator = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(this)).this$01); $hasNext_2(entry$iterator);) {
            entry = (checkStructuralChange(entry$iterator.this$01, entry$iterator) , checkCriticalElement($hasNext_2(entry$iterator)) , entry$iterator.last = entry$iterator.current , dynamicCast(entry$iterator.current.next_2(), 97));
            comma?(sb.string += ', ' , sb):(comma = true);
            $append_10(sb, $toString_4(this, entry.getKey()));
            sb.string += '=';
            $append_10(sb, $toString_4(this, entry.getValue()));
        }
        sb.string += '}';
        return sb.string;
}
;
var Ljava_util_AbstractMap_2_classLit = createForClass('java.util', 'AbstractMap', 865, Ljava_lang_Object_2_classLit);
function $containsKey(this$static, key){
    return isJavaString(key)?$hasStringValue(this$static, key):!!$getEntry(this$static.hashCodeMap, key);
}

function $containsValue(this$static, value_0){
    return this$static.stringMap.containsValue(value_0) || this$static.hashCodeMap.containsValue(value_0);
}

function $elementAdded(this$static){
    ++this$static.size_0;
    structureChanged(this$static);
}

function $elementRemoved(this$static){
    --this$static.size_0;
    structureChanged(this$static);
}

function $get_0(this$static, key){
    return isJavaString(key)?$getStringValue_1(this$static, key):getEntryValueOrNull($getEntry(this$static.hashCodeMap, key));
}

function $getStringValue_1(this$static, key){
    return key == null?getEntryValueOrNull($getEntry(this$static.hashCodeMap, null)):this$static.stringMap.get_2(key);
}

function $hasStringValue(this$static, key){
    return key == null?!!$getEntry(this$static.hashCodeMap, null):!(this$static.stringMap.get_2(key) === undefined);
}

function $put_0(this$static, key, value_0){
    return isJavaString(key)?$putStringValue(this$static, key, value_0):$put_1(this$static.hashCodeMap, key, value_0);
}

function $putStringValue(this$static, key, value_0){
    return key == null?$put_1(this$static.hashCodeMap, null, value_0):this$static.stringMap.put_0(key, value_0);
}

function $remove_4(this$static, key){
    return isJavaString(key)?$removeStringValue(this$static, key):$remove_9(this$static.hashCodeMap, key);
}

function $removeStringValue(this$static, key){
    return key == null?$remove_9(this$static.hashCodeMap, null):this$static.stringMap.remove_4(key);
}

function $reset_0(this$static){
    $clinit_InternalJsMapFactory$BackwardCompatibleJsMapFactory();
    this$static.hashCodeMap = delegate.createJsHashCodeMap();
    this$static.hashCodeMap.host = this$static;
    this$static.stringMap = delegate.createJsStringMap();
    this$static.stringMap.host = this$static;
    this$static.size_0 = 0;
    structureChanged(this$static);
}

defineClass(313, 865, {236:1});
_.entrySet_0 = function entrySet(){
    return new AbstractHashMap$EntrySet(this);
}
;
_.get_0 = function get_2(key){
    return $get_0(this, key);
}
;
_.put = function put_0(key, value_0){
    return $putStringValue(this, key, value_0);
}
;
_.remove_2 = function remove_11(key){
    return $remove_4(this, key);
}
;
_.size_1 = function size_6(){
    return this.size_0;
}
;
_.size_0 = 0;
var Ljava_util_AbstractHashMap_2_classLit = createForClass('java.util', 'AbstractHashMap', 313, Ljava_util_AbstractMap_2_classLit);
function $equals_7(this$static, o){
    var other;
    if (o === this$static) {
        return true;
    }
    if (!instanceOf(o, 269)) {
        return false;
    }
    other = dynamicCast(o, 269);
    if (other.size_1() != this$static.size_1()) {
        return false;
    }
    return $containsAll_0(this$static, other);
}

defineClass(867, 866, $intern_99);
_.equals$ = function equals_63(o){
    return $equals_7(this, o);
}
;
_.hashCode$ = function hashCode_71(){
    return hashCode_76(this);
}
;
var Ljava_util_AbstractSet_2_classLit = createForClass('java.util', 'AbstractSet', 867, Ljava_util_AbstractCollection_2_classLit);
function $contains_2(this$static, o){
    if (instanceOf(o, 97)) {
        return $containsEntry(this$static.this$01, dynamicCast(o, 97));
    }
    return false;
}

function AbstractHashMap$EntrySet(this$0){
    this.this$01 = this$0;
}

defineClass(188, 867, $intern_99, AbstractHashMap$EntrySet);
_.contains_1 = function contains_4(o){
    return $contains_2(this, o);
}
;
_.iterator_1 = function iterator_7(){
    return new AbstractHashMap$EntrySetIterator(this.this$01);
}
;
_.remove_1 = function remove_12(entry){
    var key;
    if ($contains_2(this, entry)) {
        key = dynamicCast(entry, 97).getKey();
        $remove_4(this.this$01, key);
        return true;
    }
    return false;
}
;
_.size_1 = function size_7(){
    return this.this$01.size_0;
}
;
var Ljava_util_AbstractHashMap$EntrySet_2_classLit = createForClass('java.util', 'AbstractHashMap/EntrySet', 188, Ljava_util_AbstractSet_2_classLit);
function $hasNext_2(this$static){
    if (this$static.current.hasNext()) {
        return true;
    }
    if (this$static.current != this$static.stringMapEntries) {
        return false;
    }
    this$static.current = this$static.this$01.hashCodeMap.entries();
    return this$static.current.hasNext();
}

function $next_10(this$static){
    return checkStructuralChange(this$static.this$01, this$static) , checkCriticalElement($hasNext_2(this$static)) , this$static.last = this$static.current , dynamicCast(this$static.current.next_2(), 97);
}

function $remove_5(this$static){
    checkState(!!this$static.last);
    checkStructuralChange(this$static.this$01, this$static);
    this$static.last.remove();
    this$static.last = null;
    recordLastKnownStructure(this$static.this$01, this$static);
}

function AbstractHashMap$EntrySetIterator(this$0){
    this.this$01 = this$0;
    this.stringMapEntries = this.this$01.stringMap.entries();
    this.current = this.stringMapEntries;
    setModCount(this, this$0._gwt_modCount);
}

defineClass(212, 1, {}, AbstractHashMap$EntrySetIterator);
_.hasNext = function hasNext_6(){
    return $hasNext_2(this);
}
;
_.next_2 = function next_37(){
    return $next_10(this);
}
;
_.remove = function remove_13(){
    $remove_5(this);
}
;
var Ljava_util_AbstractHashMap$EntrySetIterator_2_classLit = createForClass('java.util', 'AbstractHashMap/EntrySetIterator', 212, Ljava_lang_Object_2_classLit);
function $indexOf_5(this$static, toFind){
    var i_0, n;
    for (i_0 = 0 , n = this$static.array.length; i_0 < n; ++i_0) {
        if (equals_75(toFind, (checkElementIndex(i_0, this$static.array.length) , this$static.array[i_0]))) {
            return i_0;
        }
    }
    return -1;
}

defineClass(872, 866, {88:1});
_.add_4 = function add_16(index_0, element){
    throw new UnsupportedOperationException_0('Add not supported on this list');
}
;
_.add_3 = function add_17(obj){
    this.add_4(this.size_1(), obj);
    return true;
}
;
_.equals$ = function equals_64(o){
    var elem, elem$iterator, elemOther, iterOther, other;
    if (o === this) {
        return true;
    }
    if (!instanceOf(o, 88)) {
        return false;
    }
    other = dynamicCast(o, 88);
    if (this.size_1() != other.size_1()) {
        return false;
    }
    iterOther = other.iterator_1();
    for (elem$iterator = this.iterator_1(); elem$iterator.hasNext();) {
        elem = elem$iterator.next_2();
        elemOther = iterOther.next_2();
        if (!(maskUndefined(elem) === maskUndefined(elemOther) || elem != null && equals_Ljava_lang_Object__Z__devirtual$(elem, elemOther))) {
            return false;
        }
    }
    return true;
}
;
_.hashCode$ = function hashCode_72(){
    return hashCode_77(this);
}
;
_.iterator_1 = function iterator_8(){
    return new AbstractList$IteratorImpl(this);
}
;
_.listIterator = function listIterator(){
    return this.listIterator_0(0);
}
;
_.listIterator_0 = function listIterator_0(from){
    return new AbstractList$ListIteratorImpl(this, from);
}
;
_.remove_3 = function remove_14(index_0){
    throw new UnsupportedOperationException_0('Remove not supported on this list');
}
;
_.set_1 = function set_1(index_0, o){
    throw new UnsupportedOperationException_0('Set not supported on this list');
}
;
var Ljava_util_AbstractList_2_classLit = createForClass('java.util', 'AbstractList', 872, Ljava_util_AbstractCollection_2_classLit);
function AbstractList$IteratorImpl(this$0){
    this.this$01_0 = this$0;
}

defineClass(36, 1, {}, AbstractList$IteratorImpl);
_.hasNext = function hasNext_7(){
    return this.i < this.this$01_0.size_1();
}
;
_.next_2 = function next_38(){
    return checkCriticalElement(this.i < this.this$01_0.size_1()) , this.this$01_0.get_1(this.last = this.i++);
}
;
_.remove = function remove_15(){
    checkState(this.last != -1);
    this.this$01_0.remove_3(this.last);
    this.i = this.last;
    this.last = -1;
}
;
_.i = 0;
_.last = -1;
var Ljava_util_AbstractList$IteratorImpl_2_classLit = createForClass('java.util', 'AbstractList/IteratorImpl', 36, Ljava_lang_Object_2_classLit);
function AbstractList$ListIteratorImpl(this$0, start_0){
    this.this$01 = this$0;
    AbstractList$IteratorImpl.call(this, this$0);
    checkPositionIndex(start_0, this$0.size_1());
    this.i = start_0;
}

defineClass(562, 36, {}, AbstractList$ListIteratorImpl);
_.hasPrevious = function hasPrevious(){
    return this.i > 0;
}
;
_.previous = function previous_0(){
    checkCriticalElement(this.i > 0);
    return this.this$01.get_1(this.last = --this.i);
}
;
var Ljava_util_AbstractList$ListIteratorImpl_2_classLit = createForClass('java.util', 'AbstractList/ListIteratorImpl', 562, Ljava_util_AbstractList$IteratorImpl_2_classLit);
function $iterator(this$static){
    var outerIter;
    outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(this$static.this$01)).this$01);
    return new AbstractMap$1$1(outerIter);
}

function AbstractMap$1(this$0){
    this.this$01 = this$0;
}

defineClass(129, 867, $intern_99, AbstractMap$1);
_.contains_1 = function contains_5(key){
    return $containsKey(this.this$01, key);
}
;
_.iterator_1 = function iterator_9(){
    return $iterator(this);
}
;
_.remove_1 = function remove_16(key){
    if ($containsKey(this.this$01, key)) {
        $remove_4(this.this$01, key);
        return true;
    }
    return false;
}
;
_.size_1 = function size_8(){
    return this.this$01.size_0;
}
;
var Ljava_util_AbstractMap$1_2_classLit = createForClass('java.util', 'AbstractMap/1', 129, Ljava_util_AbstractSet_2_classLit);
function $next_11(this$static){
    var entry;
    entry = $next_10(this$static.val$outerIter2);
    return entry.getKey();
}

function AbstractMap$1$1(val$outerIter){
    this.val$outerIter2 = val$outerIter;
}

defineClass(537, 1, {}, AbstractMap$1$1);
_.hasNext = function hasNext_8(){
    return $hasNext_2(this.val$outerIter2);
}
;
_.next_2 = function next_39(){
    return $next_11(this);
}
;
_.remove = function remove_17(){
    $remove_5(this.val$outerIter2);
}
;
var Ljava_util_AbstractMap$1$1_2_classLit = createForClass('java.util', 'AbstractMap/1/1', 537, Ljava_lang_Object_2_classLit);
function $contains_3(this$static, value_0){
    return $containsValue(this$static.this$01, value_0);
}

function $iterator_0(this$static){
    var outerIter;
    outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(this$static.this$01)).this$01);
    return new AbstractMap$2$1(outerIter);
}

function AbstractMap$2(this$0){
    this.this$01 = this$0;
}

defineClass(278, 866, {}, AbstractMap$2);
_.contains_1 = function contains_6(value_0){
    return $contains_3(this, value_0);
}
;
_.iterator_1 = function iterator_10(){
    return $iterator_0(this);
}
;
_.size_1 = function size_9(){
    return this.this$01.size_0;
}
;
var Ljava_util_AbstractMap$2_2_classLit = createForClass('java.util', 'AbstractMap/2', 278, Ljava_util_AbstractCollection_2_classLit);
function $next_12(this$static){
    var entry;
    entry = $next_10(this$static.val$outerIter2);
    return entry.getValue();
}

function AbstractMap$2$1(val$outerIter){
    this.val$outerIter2 = val$outerIter;
}

defineClass(538, 1, {}, AbstractMap$2$1);
_.hasNext = function hasNext_9(){
    return $hasNext_2(this.val$outerIter2);
}
;
_.next_2 = function next_40(){
    return $next_12(this);
}
;
_.remove = function remove_18(){
    $remove_5(this.val$outerIter2);
}
;
var Ljava_util_AbstractMap$2$1_2_classLit = createForClass('java.util', 'AbstractMap/2/1', 538, Ljava_lang_Object_2_classLit);
defineClass(536, 1, $intern_100);
_.equals$ = function equals_65(other){
    var entry;
    if (!instanceOf(other, 97)) {
        return false;
    }
    entry = dynamicCast(other, 97);
    return equals_75(this.key, entry.getKey()) && equals_75(this.value_0, entry.getValue());
}
;
_.getKey = function getKey(){
    return this.key;
}
;
_.getValue = function getValue_0(){
    return this.value_0;
}
;
_.hashCode$ = function hashCode_73(){
    return hashCode_83(this.key) ^ hashCode_83(this.value_0);
}
;
_.setValue = function setValue(value_0){
    var oldValue;
    oldValue = this.value_0;
    this.value_0 = value_0;
    return oldValue;
}
;
_.toString$ = function toString_91(){
    return this.key + '=' + this.value_0;
}
;
var Ljava_util_AbstractMap$AbstractEntry_2_classLit = createForClass('java.util', 'AbstractMap/AbstractEntry', 536, Ljava_lang_Object_2_classLit);
function AbstractMap$SimpleEntry(key, value_0){
    this.key = key;
    this.value_0 = value_0;
}

defineClass(416, 536, $intern_100, AbstractMap$SimpleEntry);
var Ljava_util_AbstractMap$SimpleEntry_2_classLit = createForClass('java.util', 'AbstractMap/SimpleEntry', 416, Ljava_util_AbstractMap$AbstractEntry_2_classLit);
defineClass(873, 1, $intern_100);
_.equals$ = function equals_66(other){
    var entry;
    if (!instanceOf(other, 97)) {
        return false;
    }
    entry = dynamicCast(other, 97);
    return equals_75(this.getKey(), entry.getKey()) && equals_75(this.getValue(), entry.getValue());
}
;
_.hashCode$ = function hashCode_74(){
    return hashCode_83(this.getKey()) ^ hashCode_83(this.getValue());
}
;
_.toString$ = function toString_92(){
    return this.getKey() + '=' + this.getValue();
}
;
var Ljava_util_AbstractMapEntry_2_classLit = createForClass('java.util', 'AbstractMapEntry', 873, Ljava_lang_Object_2_classLit);
defineClass(884, 872, {88:1});
_.add_4 = function add_18(index_0, element){
    var iter;
    iter = $listIterator(this, index_0);
    $addNode_0(iter.this$01, element, iter.currentNode.prev, iter.currentNode);
    ++iter.currentIndex;
    iter.lastNode = null;
}
;
_.get_1 = function get_3(index_0){
    var iter;
    iter = $listIterator(this, index_0);
    try {
        return checkCriticalElement(iter.currentNode != iter.this$01.tail) , iter.lastNode = iter.currentNode , iter.currentNode = iter.currentNode.next , ++iter.currentIndex , iter.lastNode.value_0;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 180)) {
            throw new IndexOutOfBoundsException_0("Can't get element " + index_0);
        }
        else 
            throw unwrap($e0);
    }
}
;
_.iterator_1 = function iterator_11(){
    return $listIterator(this, 0);
}
;
_.remove_3 = function remove_19(index_0){
    var iter, old;
    iter = $listIterator(this, index_0);
    try {
        old = (checkCriticalElement(iter.currentNode != iter.this$01.tail) , iter.lastNode = iter.currentNode , iter.currentNode = iter.currentNode.next , ++iter.currentIndex , iter.lastNode.value_0);
        $remove_11(iter);
        return old;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 180)) {
            throw new IndexOutOfBoundsException_0("Can't remove element " + index_0);
        }
        else 
            throw unwrap($e0);
    }
}
;
_.set_1 = function set_2(index_0, element){
    var iter, old;
    iter = $listIterator(this, index_0);
    try {
        old = (checkCriticalElement(iter.currentNode != iter.this$01.tail) , iter.lastNode = iter.currentNode , iter.currentNode = iter.currentNode.next , ++iter.currentIndex , iter.lastNode.value_0);
        checkState(!!iter.lastNode);
        iter.lastNode.value_0 = element;
        return old;
    }
    catch ($e0) {
        $e0 = wrap_0($e0);
        if (instanceOf($e0, 180)) {
            throw new IndexOutOfBoundsException_0("Can't set element " + index_0);
        }
        else 
            throw unwrap($e0);
    }
}
;
var Ljava_util_AbstractSequentialList_2_classLit = createForClass('java.util', 'AbstractSequentialList', 884, Ljava_util_AbstractList_2_classLit);
function $$init_9(this$static){
    this$static.array = initDim(Ljava_lang_Object_2_classLit, $intern_1, 1, 0, 3, 1);
}

function $add_15(this$static, index_0, o){
    checkPositionIndex(index_0, this$static.array.length);
    splice_0(this$static.array, index_0, 0, o);
}

function $add_16(this$static, o){
    setCheck(this$static.array, this$static.array.length, o);
    return true;
}

function $addAll(this$static, c){
    var cArray, len;
    cArray = clone(c.array);
    len = cArray.length;
    if (len == 0) {
        return false;
    }
    $insertAt(this$static, this$static.array.length, cArray);
    return true;
}

function $get_1(this$static, index_0){
    checkElementIndex(index_0, this$static.array.length);
    return this$static.array[index_0];
}

function $indexOf_6(this$static, o, index_0){
    for (; index_0 < this$static.array.length; ++index_0) {
        if (equals_75(o, this$static.array[index_0])) {
            return index_0;
        }
    }
    return -1;
}

function $insertAt(this$static, index_0, values){
    nativeArraySplice(values, 0, this$static.array, index_0, values.length, false);
}

function $remove_6(this$static, index_0){
    var previous;
    previous = (checkElementIndex(index_0, this$static.array.length) , this$static.array[index_0]);
    splice(this$static.array, index_0, 1);
    return previous;
}

function $remove_7(this$static, o){
    var i_0;
    i_0 = $indexOf_6(this$static, o, 0);
    if (i_0 == -1) {
        return false;
    }
    this$static.remove_3(i_0);
    return true;
}

function $set_0(this$static, index_0, o){
    var previous;
    previous = (checkElementIndex(index_0, this$static.array.length) , this$static.array[index_0]);
    setCheck(this$static.array, index_0, o);
    return previous;
}

function $toArray(this$static, out){
    var i_0, size_0;
    size_0 = this$static.array.length;
    out.length < size_0 && (out = createFrom(out, size_0));
    for (i_0 = 0; i_0 < size_0; ++i_0) {
        setCheck(out, i_0, this$static.array[i_0]);
    }
    out.length > size_0 && setCheck(out, size_0, null);
    return out;
}

function ArrayList(){
    $$init_9(this);
}

function ArrayList_0(initialCapacity){
    $$init_9(this);
    checkCriticalArgument(initialCapacity >= 0, 'Initial capacity must not be negative');
}

function splice(array, index_0, deleteCount){
    array.splice(index_0, deleteCount);
}

function splice_0(array, index_0, deleteCount, value_0){
    array.splice(index_0, deleteCount, value_0);
}

defineClass(16, 872, $intern_101, ArrayList, ArrayList_0);
_.add_4 = function add_19(index_0, o){
    $add_15(this, index_0, o);
}
;
_.add_3 = function add_20(o){
    return $add_16(this, o);
}
;
_.contains_1 = function contains_7(o){
    return $indexOf_6(this, o, 0) != -1;
}
;
_.get_1 = function get_4(index_0){
    return $get_1(this, index_0);
}
;
_.isEmpty = function isEmpty_5(){
    return this.array.length == 0;
}
;
_.remove_3 = function remove_20(index_0){
    return $remove_6(this, index_0);
}
;
_.remove_1 = function remove_21(o){
    return $remove_7(this, o);
}
;
_.set_1 = function set_3(index_0, o){
    return $set_0(this, index_0, o);
}
;
_.size_1 = function size_10(){
    return this.array.length;
}
;
_.toArray = function toArray_0(out){
    return $toArray(this, out);
}
;
var Ljava_util_ArrayList_2_classLit = createForClass('java.util', 'ArrayList', 16, Ljava_util_AbstractList_2_classLit);
function binarySearch(sortedArray, key, comparator){
    var compareResult, high, low, mid, midVal;
    !comparator && ($clinit_Comparators() , $clinit_Comparators() , NATURAL);
    low = 0;
    high = sortedArray.length - 1;
    while (low <= high) {
        mid = low + (high - low >> 1);
        midVal = sortedArray[mid];
        compareResult = (checkNotNull(midVal) , checkNotNull(key) , compareTo_20(midVal, key));
        if (compareResult < 0) {
            low = mid + 1;
        }
        else if (compareResult > 0) {
            high = mid - 1;
        }
        else {
            return mid;
        }
    }
    return -low - 1;
}

function equals_67(array1, array2){
    var i_0;
    if (maskUndefined(array1) === maskUndefined(array2)) {
        return true;
    }
    if (array1 == null || array2 == null) {
        return false;
    }
    if (array1.length != array2.length) {
        return false;
    }
    for (i_0 = 0; i_0 < array1.length; ++i_0) {
        if (array1[i_0] != array2[i_0]) {
            return false;
        }
    }
    return true;
}

function equals_68(array1, array2){
    var i_0;
    if (maskUndefined(array1) === maskUndefined(array2)) {
        return true;
    }
    if (array1 == null || array2 == null) {
        return false;
    }
    if (array1.length != array2.length) {
        return false;
    }
    for (i_0 = 0; i_0 < array1.length; ++i_0) {
        if (array1[i_0] != array2[i_0]) {
            return false;
        }
    }
    return true;
}

function equals_69(array1, array2){
    var i_0, val1, val2;
    if (maskUndefined(array1) === maskUndefined(array2)) {
        return true;
    }
    if (array1 == null || array2 == null) {
        return false;
    }
    if (array1.length != array2.length) {
        return false;
    }
    for (i_0 = 0; i_0 < array1.length; ++i_0) {
        val1 = array1[i_0];
        val2 = array2[i_0];
        if (!(val1 == val2 || !!val1 && val1.equals$(val2))) {
            return false;
        }
    }
    return true;
}

function fill(a, toIndex){
    var i_0;
    for (i_0 = 0; i_0 < toIndex; ++i_0) {
        a[i_0] = 48;
    }
}

function fill_0(a, val){
    fill_1(a, 0, a.length, val);
}

function fill_1(a, fromIndex, toIndex, val){
    var i_0;
    for (i_0 = fromIndex; i_0 < toIndex; ++i_0) {
        a[i_0] = val;
    }
}

function fill_2(a, fromIndex, toIndex){
    var i_0;
    for (i_0 = fromIndex; i_0 < toIndex; ++i_0) {
        setCheck(a, i_0, null);
    }
}

function fill_3(a){
    fill_2(a, 0, a.length);
}

function fill_4(a, fromIndex, toIndex, val){
    var i_0;
    for (i_0 = fromIndex; i_0 < toIndex; ++i_0) {
        a[i_0] = val;
    }
}

function hashCode_75(a){
    var e, e$index, e$max, hashCode;
    hashCode = 1;
    for (e$index = 0 , e$max = a.length; e$index < e$max; ++e$index) {
        e = a[e$index];
        hashCode = 31 * hashCode + (e != null?hashCode__I__devirtual$(e):0);
        hashCode = ~~hashCode;
    }
    return hashCode;
}

function Arrays$ArrayList(array){
    this.array = array;
}

defineClass(220, 872, $intern_102, Arrays$ArrayList);
_.contains_1 = function contains_8(o){
    return $indexOf_5(this, o) != -1;
}
;
_.get_1 = function get_5(index_0){
    return checkElementIndex(index_0, this.array.length) , this.array[index_0];
}
;
_.set_1 = function set_4(index_0, value_0){
    var was;
    was = (checkElementIndex(index_0, this.array.length) , this.array[index_0]);
    setCheck(this.array, index_0, value_0);
    return was;
}
;
_.size_1 = function size_11(){
    return this.array.length;
}
;
_.toArray = function toArray_1(out){
    var i_0, size_0;
    size_0 = this.array.length;
    out.length < size_0 && (out = createFrom(out, size_0));
    for (i_0 = 0; i_0 < size_0; ++i_0) {
        setCheck(out, i_0, this.array[i_0]);
    }
    out.length > size_0 && setCheck(out, size_0, null);
    return out;
}
;
var Ljava_util_Arrays$ArrayList_2_classLit = createForClass('java.util', 'Arrays/ArrayList', 220, Ljava_util_AbstractList_2_classLit);
function $clinit_Collections(){
    $clinit_Collections = emptyMethod;
    EMPTY_LIST = new Collections$EmptyList;
}

function hashCode_76(collection){
    $clinit_Collections();
    var e, e$iterator, hashCode;
    hashCode = 0;
    for (e$iterator = collection.iterator_1(); e$iterator.hasNext();) {
        e = e$iterator.next_2();
        hashCode = hashCode + (e != null?hashCode__I__devirtual$(e):0);
        hashCode = ~~hashCode;
    }
    return hashCode;
}

function hashCode_77(list){
    $clinit_Collections();
    var e, e$iterator, hashCode;
    hashCode = 1;
    for (e$iterator = list.iterator_1(); e$iterator.hasNext();) {
        e = e$iterator.next_2();
        hashCode = 31 * hashCode + (e != null?hashCode__I__devirtual$(e):0);
        hashCode = ~~hashCode;
    }
    return hashCode;
}

function unmodifiableList(list){
    $clinit_Collections();
    return instanceOf(list, 237)?new Collections$UnmodifiableRandomAccessList(list):new Collections$UnmodifiableList(list);
}

var EMPTY_LIST;
function Collections$EmptyList(){
}

defineClass(555, 872, $intern_102, Collections$EmptyList);
_.contains_1 = function contains_9(object){
    return false;
}
;
_.get_1 = function get_6(location_0){
    checkElementIndex(location_0, 0);
    return null;
}
;
_.iterator_1 = function iterator_12(){
    return $clinit_Collections() , $clinit_Collections$EmptyListIterator() , INSTANCE_0;
}
;
_.listIterator = function listIterator_1(){
    return $clinit_Collections() , $clinit_Collections$EmptyListIterator() , INSTANCE_0;
}
;
_.size_1 = function size_12(){
    return 0;
}
;
var Ljava_util_Collections$EmptyList_2_classLit = createForClass('java.util', 'Collections/EmptyList', 555, Ljava_util_AbstractList_2_classLit);
function $clinit_Collections$EmptyListIterator(){
    $clinit_Collections$EmptyListIterator = emptyMethod;
    INSTANCE_0 = new Collections$EmptyListIterator;
}

function Collections$EmptyListIterator(){
}

defineClass(556, 1, {}, Collections$EmptyListIterator);
_.hasNext = function hasNext_10(){
    return false;
}
;
_.hasPrevious = function hasPrevious_0(){
    return false;
}
;
_.next_2 = function next_41(){
    throw new NoSuchElementException;
}
;
_.previous = function previous_1(){
    throw new NoSuchElementException;
}
;
_.remove = function remove_22(){
    throw new IllegalStateException;
}
;
var INSTANCE_0;
var Ljava_util_Collections$EmptyListIterator_2_classLit = createForClass('java.util', 'Collections/EmptyListIterator', 556, Ljava_lang_Object_2_classLit);
function Collections$UnmodifiableCollection(coll){
    this.coll = coll;
}

defineClass(417, 1, {});
_.add_3 = function add_21(o){
    throw new UnsupportedOperationException;
}
;
_.iterator_1 = function iterator_13(){
    return new Collections$UnmodifiableCollectionIterator(this.coll.iterator_1());
}
;
_.remove_1 = function remove_23(o){
    throw new UnsupportedOperationException;
}
;
_.size_1 = function size_13(){
    return this.coll.size_1();
}
;
_.toArray = function toArray_2(a){
    return this.coll.toArray(a);
}
;
_.toString$ = function toString_93(){
    return this.coll.toString$();
}
;
var Ljava_util_Collections$UnmodifiableCollection_2_classLit = createForClass('java.util', 'Collections/UnmodifiableCollection', 417, Ljava_lang_Object_2_classLit);
function Collections$UnmodifiableCollectionIterator(it){
    this.it = it;
}

defineClass(420, 1, {}, Collections$UnmodifiableCollectionIterator);
_.hasNext = function hasNext_11(){
    return this.it.hasNext();
}
;
_.next_2 = function next_42(){
    return this.it.next_2();
}
;
_.remove = function remove_24(){
    throw new UnsupportedOperationException;
}
;
var Ljava_util_Collections$UnmodifiableCollectionIterator_2_classLit = createForClass('java.util', 'Collections/UnmodifiableCollectionIterator', 420, Ljava_lang_Object_2_classLit);
function Collections$UnmodifiableList(list){
    Collections$UnmodifiableCollection.call(this, list);
    this.list = list;
}

defineClass(418, 417, {88:1}, Collections$UnmodifiableList);
_.add_4 = function add_22(index_0, element){
    throw new UnsupportedOperationException;
}
;
_.equals$ = function equals_70(o){
    return this.list.equals$(o);
}
;
_.get_1 = function get_7(index_0){
    return this.list.get_1(index_0);
}
;
_.hashCode$ = function hashCode_78(){
    return this.list.hashCode$();
}
;
_.isEmpty = function isEmpty_6(){
    return this.list.isEmpty();
}
;
_.listIterator = function listIterator_2(){
    return new Collections$UnmodifiableListIterator(this.list.listIterator_0(0));
}
;
_.listIterator_0 = function listIterator_3(from){
    return new Collections$UnmodifiableListIterator(this.list.listIterator_0(from));
}
;
_.set_1 = function set_5(index_0, element){
    throw new UnsupportedOperationException;
}
;
var Ljava_util_Collections$UnmodifiableList_2_classLit = createForClass('java.util', 'Collections/UnmodifiableList', 418, Ljava_util_Collections$UnmodifiableCollection_2_classLit);
function Collections$UnmodifiableListIterator(lit){
    Collections$UnmodifiableCollectionIterator.call(this, lit);
    this.lit = lit;
}

defineClass(421, 420, {}, Collections$UnmodifiableListIterator);
_.hasPrevious = function hasPrevious_1(){
    return this.lit.hasPrevious();
}
;
_.previous = function previous_2(){
    return this.lit.previous();
}
;
var Ljava_util_Collections$UnmodifiableListIterator_2_classLit = createForClass('java.util', 'Collections/UnmodifiableListIterator', 421, Ljava_util_Collections$UnmodifiableCollectionIterator_2_classLit);
function Collections$UnmodifiableMap(map_0){
    this.map_0 = map_0;
}

defineClass(557, 1, {236:1}, Collections$UnmodifiableMap);
_.entrySet_0 = function entrySet_0(){
    !this.entrySet && (this.entrySet = new Collections$UnmodifiableMap$UnmodifiableEntrySet(this.map_0.entrySet_0()));
    return this.entrySet;
}
;
_.equals$ = function equals_71(o){
    return this.map_0.equals$(o);
}
;
_.get_0 = function get_8(key){
    return this.map_0.get_0(key);
}
;
_.hashCode$ = function hashCode_79(){
    return this.map_0.hashCode$();
}
;
_.isEmpty = function isEmpty_7(){
    return this.map_0.isEmpty();
}
;
_.put = function put_1(key, value_0){
    throw new UnsupportedOperationException;
}
;
_.remove_2 = function remove_25(key){
    throw new UnsupportedOperationException;
}
;
_.size_1 = function size_14(){
    return this.map_0.size_1();
}
;
_.toString$ = function toString_94(){
    return this.map_0.toString$();
}
;
var Ljava_util_Collections$UnmodifiableMap_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap', 557, Ljava_lang_Object_2_classLit);
defineClass(558, 417, $intern_99);
_.equals$ = function equals_72(o){
    return this.coll.equals$(o);
}
;
_.hashCode$ = function hashCode_80(){
    return this.coll.hashCode$();
}
;
var Ljava_util_Collections$UnmodifiableSet_2_classLit = createForClass('java.util', 'Collections/UnmodifiableSet', 558, Ljava_util_Collections$UnmodifiableCollection_2_classLit);
function $wrap_0(array, size_0){
    var i_0;
    for (i_0 = 0; i_0 < size_0; ++i_0) {
        setCheck(array, i_0, new Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry(dynamicCast(array[i_0], 97)));
    }
}

function Collections$UnmodifiableMap$UnmodifiableEntrySet(s){
    Collections$UnmodifiableCollection.call(this, s);
}

defineClass(559, 558, $intern_99, Collections$UnmodifiableMap$UnmodifiableEntrySet);
_.iterator_1 = function iterator_14(){
    var it;
    it = this.coll.iterator_1();
    return new Collections$UnmodifiableMap$UnmodifiableEntrySet$1(it);
}
;
_.toArray = function toArray_3(a){
    var result;
    result = this.coll.toArray(a);
    $wrap_0(result, this.coll.size_1());
    return result;
}
;
var Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap/UnmodifiableEntrySet', 559, Ljava_util_Collections$UnmodifiableSet_2_classLit);
function Collections$UnmodifiableMap$UnmodifiableEntrySet$1(val$it){
    this.val$it2 = val$it;
}

defineClass(561, 1, {}, Collections$UnmodifiableMap$UnmodifiableEntrySet$1);
_.hasNext = function hasNext_12(){
    return this.val$it2.hasNext();
}
;
_.next_2 = function next_43(){
    return new Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry(dynamicCast(this.val$it2.next_2(), 97));
}
;
_.remove = function remove_26(){
    throw new UnsupportedOperationException;
}
;
var Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet$1_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap/UnmodifiableEntrySet/1', 561, Ljava_lang_Object_2_classLit);
function Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry(entry){
    this.entry = entry;
}

defineClass(419, 1, $intern_100, Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry);
_.equals$ = function equals_73(o){
    return this.entry.equals$(o);
}
;
_.getKey = function getKey_0(){
    return this.entry.getKey();
}
;
_.getValue = function getValue_1(){
    return this.entry.getValue();
}
;
_.hashCode$ = function hashCode_81(){
    return this.entry.hashCode$();
}
;
_.setValue = function setValue_0(value_0){
    throw new UnsupportedOperationException;
}
;
_.toString$ = function toString_95(){
    return this.entry.toString$();
}
;
var Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap/UnmodifiableEntrySet/UnmodifiableEntry', 419, Ljava_lang_Object_2_classLit);
function Collections$UnmodifiableRandomAccessList(list){
    Collections$UnmodifiableList.call(this, list);
}

defineClass(560, 418, {88:1, 237:1}, Collections$UnmodifiableRandomAccessList);
var Ljava_util_Collections$UnmodifiableRandomAccessList_2_classLit = createForClass('java.util', 'Collections/UnmodifiableRandomAccessList', 560, Ljava_util_Collections$UnmodifiableList_2_classLit);
function $clinit_Comparators(){
    $clinit_Comparators = emptyMethod;
    NATURAL = new Comparators$1;
}

var NATURAL;
function Comparators$1(){
}

defineClass(707, 1, {}, Comparators$1);
var Ljava_util_Comparators$1_2_classLit = createForClass('java.util', 'Comparators/1', 707, Ljava_lang_Object_2_classLit);
function checkStructuralChange(host, iterator){
    if (iterator._gwt_modCount != host._gwt_modCount) {
        throw new ConcurrentModificationException;
    }
}

function recordLastKnownStructure(host, iterator){
    setModCount(iterator, host._gwt_modCount);
}

function setModCount(o, modCount){
    o._gwt_modCount = modCount;
}

function structureChanged(map_0){
    var modCount;
    modCount = map_0._gwt_modCount | 0;
    setModCount(map_0, modCount + 1);
}

function ConcurrentModificationException(){
    RuntimeException.call(this);
}

defineClass(667, 35, $intern_63, ConcurrentModificationException);
var Ljava_util_ConcurrentModificationException_2_classLit = createForClass('java.util', 'ConcurrentModificationException', 667, Ljava_lang_RuntimeException_2_classLit);
function $compareTo_15(this$static, other){
    return compare_8(fromDouble(this$static.jsdate.getTime()), fromDouble(other.jsdate.getTime()));
}

function $toString_5(this$static){
    var hourOffset, minuteOffset, offset;
    offset = -this$static.jsdate.getTimezoneOffset();
    hourOffset = (offset >= 0?'+':'') + ~~(offset / 60);
    minuteOffset = (offset < 0?-offset:offset) % 60 < 10?'0' + (offset < 0?-offset:offset) % 60:'' + (offset < 0?-offset:offset) % 60;
    return ($clinit_Date$StringData() , DAYS)[this$static.jsdate.getDay()] + ' ' + MONTHS[this$static.jsdate.getMonth()] + ' ' + padTwo(this$static.jsdate.getDate()) + ' ' + padTwo(this$static.jsdate.getHours()) + ':' + padTwo(this$static.jsdate.getMinutes()) + ':' + padTwo(this$static.jsdate.getSeconds()) + ' GMT' + hourOffset + minuteOffset + ' ' + this$static.jsdate.getFullYear();
}

function Date_0(){
    this.jsdate = new Date;
}

function Date_1(date){
    this.jsdate = create(toDouble(date));
}

function padTwo(number){
    return number < 10?'0' + number:'' + number;
}

defineClass(146, 1, {3:1, 24:1, 146:1}, Date_0, Date_1);
_.compareTo = function compareTo_23(other){
    return $compareTo_15(this, dynamicCast(other, 146));
}
;
_.equals$ = function equals_74(obj){
    return instanceOf(obj, 146) && eq(fromDouble(this.jsdate.getTime()), fromDouble(dynamicCast(obj, 146).jsdate.getTime()));
}
;
_.hashCode$ = function hashCode_82(){
    var time;
    time = fromDouble(this.jsdate.getTime());
    return toInt(xor(time, shru(time, 32)));
}
;
_.toString$ = function toString_96(){
    return $toString_5(this);
}
;
var Ljava_util_Date_2_classLit = createForClass('java.util', 'Date', 146, Ljava_lang_Object_2_classLit);
function $clinit_Date$StringData(){
    $clinit_Date$StringData = emptyMethod;
    DAYS = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']);
    MONTHS = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_8, 2, 4, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']);
}

var DAYS, MONTHS;
function EmptyStackException(){
    RuntimeException.call(this);
}

defineClass(689, 35, $intern_63, EmptyStackException);
var Ljava_util_EmptyStackException_2_classLit = createForClass('java.util', 'EmptyStackException', 689, Ljava_lang_RuntimeException_2_classLit);
function $equals_8(value1, value2){
    return maskUndefined(value1) === maskUndefined(value2) || value1 != null && equals_Ljava_lang_Object__Z__devirtual$(value1, value2);
}

function $getHashCode(key){
    var hashCode;
    hashCode = hashCode__I__devirtual$(key);
    return ~~hashCode;
}

function HashMap(){
    $reset_0(this);
}

function HashMap_0(ignored){
    checkCriticalArgument(ignored >= 0, 'Negative initial capacity');
    checkCriticalArgument(true, 'Non-positive load factor');
    $reset_0(this);
}

function HashMap_1(toBeCopied){
    $reset_0(this);
    $putAll(this, toBeCopied);
}

defineClass(22, 313, {3:1, 22:1, 236:1}, HashMap, HashMap_0, HashMap_1);
var Ljava_util_HashMap_2_classLit = createForClass('java.util', 'HashMap', 22, Ljava_util_AbstractHashMap_2_classLit);
function $add_17(this$static, o){
    var old;
    old = $put_0(this$static.map_0, o, this$static);
    return old == null;
}

function $contains_4(this$static, o){
    return $containsKey(this$static.map_0, o);
}

function $remove_8(this$static, o){
    return $remove_4(this$static.map_0, o) != null;
}

function HashSet(){
    this.map_0 = new HashMap;
}

function HashSet_0(initialCapacity){
    this.map_0 = new HashMap_0(initialCapacity);
}

defineClass(113, 867, {3:1, 269:1}, HashSet, HashSet_0);
_.add_3 = function add_23(o){
    return $add_17(this, o);
}
;
_.contains_1 = function contains_10(o){
    return $contains_4(this, o);
}
;
_.isEmpty = function isEmpty_8(){
    return this.map_0.size_0 == 0;
}
;
_.iterator_1 = function iterator_15(){
    return $iterator(new AbstractMap$1(this.map_0));
}
;
_.remove_1 = function remove_27(o){
    return $remove_8(this, o);
}
;
_.size_1 = function size_15(){
    return this.map_0.size_0;
}
;
_.toString$ = function toString_97(){
    return $toString_3(new AbstractMap$1(this.map_0));
}
;
var Ljava_util_HashSet_2_classLit = createForClass('java.util', 'HashSet', 113, Ljava_util_AbstractSet_2_classLit);
function $ensureChain(this$static, hashCode){
    var map_0 = this$static.backingMap;
    return map_0[hashCode] || (map_0[hashCode] = []);
}

function $getChain(this$static, hashCode){
    return this$static.backingMap[hashCode];
}

function $getChainOrEmpty(this$static, hashCode){
    return this$static.backingMap[hashCode] || [];
}

function $getEntry(this$static, key){
    var entry, entry$array, entry$index, entry$max;
    for (entry$array = $getChainOrEmpty(this$static, key == null?'0':'' + $getHashCode(key)) , entry$index = 0 , entry$max = entry$array.length; entry$index < entry$max; ++entry$index) {
        entry = entry$array[entry$index];
        if ($equals_8(key, entry.getKey())) {
            return entry;
        }
    }
    return null;
}

function $keys(this$static){
    return Object.getOwnPropertyNames(this$static.backingMap);
}

function $put_1(this$static, key, value_0){
    var chain, entry, entry$index, entry$max;
    chain = $ensureChain(this$static, key == null?'0':'' + $getHashCode(key));
    for (entry$index = 0 , entry$max = chain.length; entry$index < entry$max; ++entry$index) {
        entry = chain[entry$index];
        if ($equals_8(key, entry.getKey())) {
            return entry.setValue(value_0);
        }
    }
    setCheck(chain, chain.length, new AbstractMap$SimpleEntry(key, value_0));
    $elementAdded(this$static.host);
    return null;
}

function $remove_9(this$static, key){
    var chain, entry, hashCode, i_0;
    hashCode = key == null?'0':'' + $getHashCode(key);
    chain = $getChainOrEmpty(this$static, hashCode);
    for (i_0 = 0; i_0 < chain.length; i_0++) {
        entry = chain[i_0];
        if ($equals_8(key, entry.getKey())) {
            chain.length == 1?(delete this$static.backingMap[hashCode] , undefined):(chain.splice(i_0, 1) , undefined);
            $elementRemoved(this$static.host);
            return entry.getValue();
        }
    }
    return null;
}

function InternalJsHashCodeMap(){
    this.backingMap = this.createMap();
}

defineClass(424, 1, {}, InternalJsHashCodeMap);
_.containsValue = function containsValue(value_0){
    var entry, entry$array, entry$index, entry$max, hashCode, hashCode$array, hashCode$index, hashCode$max;
    for (hashCode$array = $keys(this) , hashCode$index = 0 , hashCode$max = hashCode$array.length; hashCode$index < hashCode$max; ++hashCode$index) {
        hashCode = hashCode$array[hashCode$index];
        for (entry$array = this.backingMap[hashCode] , entry$index = 0 , entry$max = entry$array.length; entry$index < entry$max; ++entry$index) {
            entry = entry$array[entry$index];
            if ($equals_8(value_0, entry.getValue())) {
                return true;
            }
        }
    }
    return false;
}
;
_.createMap = function createMap(){
    return Object.create(null);
}
;
_.entries = function entries_0(){
    return new InternalJsHashCodeMap$1(this);
}
;
var Ljava_util_InternalJsHashCodeMap_2_classLit = createForClass('java.util', 'InternalJsHashCodeMap', 424, Ljava_lang_Object_2_classLit);
function $hasNext_3(this$static){
    if (this$static.itemIndex < this$static.chain.length) {
        return true;
    }
    if (this$static.chainIndex < this$static.keys_0.length - 1) {
        this$static.chain = $getChain(this$static.this$01, this$static.keys_0[++this$static.chainIndex]);
        this$static.itemIndex = 0;
        return true;
    }
    return false;
}

function InternalJsHashCodeMap$1(this$0){
    this.this$01 = this$0;
    this.keys_0 = $keys(this.this$01);
    this.chain = initDim(Ljava_util_Map$Entry_2_classLit, $intern_1, 97, 0, 0, 1);
}

defineClass(576, 1, {}, InternalJsHashCodeMap$1);
_.hasNext = function hasNext_13(){
    return $hasNext_3(this);
}
;
_.next_2 = function next_44(){
    return checkCriticalElement($hasNext_3(this)) , this.lastChain = this.chain , this.lastEntry = this.chain[this.itemIndex++] , this.lastEntry;
}
;
_.remove = function remove_28(){
    checkState(!!this.lastEntry);
    $remove_9(this.this$01, this.lastEntry.getKey());
    maskUndefined(this.chain) === maskUndefined(this.lastChain) && this.chain.length != 1 && --this.itemIndex;
    this.lastEntry = null;
}
;
_.chainIndex = -1;
_.itemIndex = 0;
_.lastChain = null;
_.lastEntry = null;
var Ljava_util_InternalJsHashCodeMap$1_2_classLit = createForClass('java.util', 'InternalJsHashCodeMap/1', 576, Ljava_lang_Object_2_classLit);
function InternalJsHashCodeMap$InternalJsHashCodeMapLegacy(){
    InternalJsHashCodeMap.call(this);
}

defineClass(574, 424, {}, InternalJsHashCodeMap$InternalJsHashCodeMapLegacy);
_.containsValue = function containsValue_0(value_0){
    var map_0 = this.backingMap;
    for (var hashCode in map_0) {
        if (hashCode == parseInt(hashCode, 10)) {
            var array = map_0[hashCode];
            for (var i_0 = 0, c = array.length; i_0 < c; ++i_0) {
                var entry = array[i_0];
                var entryValue = entry.getValue();
                if (this.equalsBridge(value_0, entryValue)) {
                    return true;
                }
            }
        }
    }
    return false;
}
;
_.createMap = function createMap_0(){
    return {};
}
;
_.entries = function entries_1(){
    var list = this.newEntryList();
    var map_0 = this.backingMap;
    for (var hashCode in map_0) {
        if (hashCode == parseInt(hashCode, 10)) {
            var array = map_0[hashCode];
            for (var i_0 = 0, c = array.length; i_0 < c; ++i_0) {
                list.add_3(array[i_0]);
            }
        }
    }
    return list.iterator_1();
}
;
_.equalsBridge = function equalsBridge(value1, value2){
    return maskUndefined(value1) === maskUndefined(value2) || value1 != null && equals_Ljava_lang_Object__Z__devirtual$(value1, value2);
}
;
_.newEntryList = function newEntryList(){
    return new InternalJsHashCodeMap$InternalJsHashCodeMapLegacy$1(this);
}
;
var Ljava_util_InternalJsHashCodeMap$InternalJsHashCodeMapLegacy_2_classLit = createForClass('java.util', 'InternalJsHashCodeMap/InternalJsHashCodeMapLegacy', 574, Ljava_util_InternalJsHashCodeMap_2_classLit);
function InternalJsHashCodeMap$InternalJsHashCodeMapLegacy$1(this$1){
    this.this$11 = this$1;
    ArrayList.call(this);
}

defineClass(575, 16, $intern_101, InternalJsHashCodeMap$InternalJsHashCodeMapLegacy$1);
_.remove_3 = function remove_29(index_0){
    var removed;
    return removed = dynamicCast($remove_6(this, index_0), 97) , $remove_9(this.this$11, removed.getKey()) , removed;
}
;
var Ljava_util_InternalJsHashCodeMap$InternalJsHashCodeMapLegacy$1_2_classLit = createForClass('java.util', 'InternalJsHashCodeMap/InternalJsHashCodeMapLegacy/1', 575, Ljava_util_ArrayList_2_classLit);
function InternalJsMapFactory(){
}

defineClass(571, 1, {}, InternalJsMapFactory);
_.createJsHashCodeMap = function createJsHashCodeMap(){
    return new InternalJsHashCodeMap;
}
;
_.createJsStringMap = function createJsStringMap(){
    return new InternalJsStringMap;
}
;
var Ljava_util_InternalJsMapFactory_2_classLit = createForClass('java.util', 'InternalJsMapFactory', 571, Ljava_lang_Object_2_classLit);
function $clinit_InternalJsMapFactory$BackwardCompatibleJsMapFactory(){
    $clinit_InternalJsMapFactory$BackwardCompatibleJsMapFactory = emptyMethod;
    delegate = createFactory();
}

function canHandleProto(){
    var protoField = '__proto__';
    var map_0 = Object.create(null);
    if (map_0[protoField] !== undefined) {
        return false;
    }
    var keys_0 = Object.getOwnPropertyNames(map_0);
    if (keys_0.length != 0) {
        return false;
    }
    map_0[protoField] = 42;
    if (map_0[protoField] !== 42) {
        return false;
    }
    return true;
}

function createFactory(){
    var map_0;
    if (Object.create && Object.getOwnPropertyNames && canHandleProto()) {
        return (map_0 = Object.create(null) , map_0['__proto__'] = 42 , Object.getOwnPropertyNames(map_0).length == 0)?new InternalJsMapFactory$KeysWorkaroundJsMapFactory:new InternalJsMapFactory;
    }
    return new InternalJsMapFactory$LegacyInternalJsMapFactory;
}

var delegate;
function InternalJsMapFactory$KeysWorkaroundJsMapFactory(){
}

defineClass(573, 571, {}, InternalJsMapFactory$KeysWorkaroundJsMapFactory);
_.createJsStringMap = function createJsStringMap_0(){
    return new InternalJsStringMap$InternalJsStringMapWithKeysWorkaround;
}
;
var Ljava_util_InternalJsMapFactory$KeysWorkaroundJsMapFactory_2_classLit = createForClass('java.util', 'InternalJsMapFactory/KeysWorkaroundJsMapFactory', 573, Ljava_util_InternalJsMapFactory_2_classLit);
function InternalJsMapFactory$LegacyInternalJsMapFactory(){
}

defineClass(572, 571, {}, InternalJsMapFactory$LegacyInternalJsMapFactory);
_.createJsHashCodeMap = function createJsHashCodeMap_0(){
    return new InternalJsHashCodeMap$InternalJsHashCodeMapLegacy;
}
;
_.createJsStringMap = function createJsStringMap_1(){
    return new InternalJsStringMap$InternalJsStringMapLegacy;
}
;
var Ljava_util_InternalJsMapFactory$LegacyInternalJsMapFactory_2_classLit = createForClass('java.util', 'InternalJsMapFactory/LegacyInternalJsMapFactory', 572, Ljava_util_InternalJsMapFactory_2_classLit);
function $containsValue_0(this$static, value_0){
    var map_0 = this$static.backingMap;
    for (var key in map_0) {
        if (this$static.equalsBridge_0(value_0, map_0[key])) {
            return true;
        }
    }
    return false;
}

function $keys_0(this$static){
    return Object.getOwnPropertyNames(this$static.backingMap);
}

function $put_2(this$static, key, value_0){
    var oldValue;
    oldValue = this$static.backingMap[key];
    oldValue === undefined && $elementAdded(this$static.host);
    $set_1(this$static, key, value_0 === undefined?null:value_0);
    return oldValue;
}

function $remove_10(this$static, key){
    var value_0;
    value_0 = this$static.backingMap[key];
    if (!(value_0 === undefined)) {
        delete this$static.backingMap[key];
        $elementRemoved(this$static.host);
    }
    return value_0;
}

function $set_1(this$static, key, value_0){
    this$static.backingMap[key] = value_0;
}

function InternalJsStringMap(){
    this.backingMap = this.createMap_0();
}

defineClass(364, 1, {}, InternalJsStringMap);
_.containsValue = function containsValue_1(value_0){
    return $containsValue_0(this, value_0);
}
;
_.createMap_0 = function createMap_1(){
    return Object.create(null);
}
;
_.entries = function entries_2(){
    var keys_0;
    keys_0 = this.keys_1();
    return new InternalJsStringMap$1(this, keys_0);
}
;
_.equalsBridge_0 = function equalsBridge_0(value1, value2){
    return maskUndefined(value1) === maskUndefined(value2) || value1 != null && equals_Ljava_lang_Object__Z__devirtual$(value1, value2);
}
;
_.get_2 = function get_9(key){
    return this.backingMap[key];
}
;
_.keys_1 = function keys_1(){
    return $keys_0(this);
}
;
_.newMapEntry = function newMapEntry(key){
    return new InternalJsStringMap$2(this, key);
}
;
_.put_0 = function put_2(key, value_0){
    return $put_2(this, key, value_0);
}
;
_.remove_4 = function remove_30(key){
    return $remove_10(this, key);
}
;
var Ljava_util_InternalJsStringMap_2_classLit = createForClass('java.util', 'InternalJsStringMap', 364, Ljava_lang_Object_2_classLit);
function InternalJsStringMap$1(this$0, val$keys){
    this.this$01 = this$0;
    this.val$keys2 = val$keys;
}

defineClass(566, 1, {}, InternalJsStringMap$1);
_.hasNext = function hasNext_14(){
    return this.i < this.val$keys2.length;
}
;
_.next_2 = function next_45(){
    return checkCriticalElement(this.i < this.val$keys2.length) , new InternalJsStringMap$2(this.this$01, this.val$keys2[this.last = this.i++]);
}
;
_.remove = function remove_31(){
    checkState(this.last != -1);
    this.this$01.remove_4(this.val$keys2[this.last]);
    this.last = -1;
}
;
_.i = 0;
_.last = -1;
var Ljava_util_InternalJsStringMap$1_2_classLit = createForClass('java.util', 'InternalJsStringMap/1', 566, Ljava_lang_Object_2_classLit);
function InternalJsStringMap$2(this$0, val$key){
    this.this$01 = this$0;
    this.val$key2 = val$key;
}

defineClass(422, 873, $intern_100, InternalJsStringMap$2);
_.getKey = function getKey_1(){
    return this.val$key2;
}
;
_.getValue = function getValue_2(){
    return this.this$01.get_2(this.val$key2);
}
;
_.setValue = function setValue_1(object){
    return this.this$01.put_0(this.val$key2, object);
}
;
var Ljava_util_InternalJsStringMap$2_2_classLit = createForClass('java.util', 'InternalJsStringMap/2', 422, Ljava_util_AbstractMapEntry_2_classLit);
function InternalJsStringMap$InternalJsStringMapLegacy(){
    InternalJsStringMap.call(this);
}

defineClass(563, 364, {}, InternalJsStringMap$InternalJsStringMapLegacy);
_.containsValue = function containsValue_2(value_0){
    var map_0 = this.backingMap;
    for (var key in map_0) {
        if (key.charCodeAt(0) == 58) {
            var entryValue = map_0[key];
            if (this.equalsBridge_0(value_0, entryValue)) {
                return true;
            }
        }
    }
    return false;
}
;
_.createMap_0 = function createMap_2(){
    return {};
}
;
_.entries = function entries_3(){
    var list = this.newEntryList_0();
    for (var key in this.backingMap) {
        if (key.charCodeAt(0) == 58) {
            var entry = this.newMapEntry(key.substring(1));
            list.add_3(entry);
        }
    }
    return list.iterator_1();
}
;
_.get_2 = function get_10(key){
    return this.backingMap[':' + key];
}
;
_.newEntryList_0 = function newEntryList_0(){
    return new InternalJsStringMap$InternalJsStringMapLegacy$1(this);
}
;
_.put_0 = function put_3(key, value_0){
    return $put_2(this, ':' + key, value_0);
}
;
_.remove_4 = function remove_32(key){
    return $remove_10(this, ':' + key);
}
;
var Ljava_util_InternalJsStringMap$InternalJsStringMapLegacy_2_classLit = createForClass('java.util', 'InternalJsStringMap/InternalJsStringMapLegacy', 563, Ljava_util_InternalJsStringMap_2_classLit);
function InternalJsStringMap$InternalJsStringMapLegacy$1(this$1){
    this.this$11 = this$1;
    ArrayList.call(this);
}

defineClass(565, 16, $intern_101, InternalJsStringMap$InternalJsStringMapLegacy$1);
_.remove_3 = function remove_33(index_0){
    var removed;
    return removed = dynamicCast($remove_6(this, index_0), 97) , $remove_10(this.this$11, ':' + dynamicCastToString(removed.getKey())) , removed;
}
;
var Ljava_util_InternalJsStringMap$InternalJsStringMapLegacy$1_2_classLit = createForClass('java.util', 'InternalJsStringMap/InternalJsStringMapLegacy/1', 565, Ljava_util_ArrayList_2_classLit);
function InternalJsStringMap$InternalJsStringMapWithKeysWorkaround(){
    InternalJsStringMap.call(this);
}

defineClass(564, 364, {}, InternalJsStringMap$InternalJsStringMapWithKeysWorkaround);
_.containsValue = function containsValue_3(value_0){
    var protoValue;
    protoValue = this.backingMap['__proto__'];
    if (!(protoValue === undefined) && (maskUndefined(value_0) === maskUndefined(protoValue) || value_0 != null && equals_Ljava_lang_Object__Z__devirtual$(value_0, protoValue))) {
        return true;
    }
    return $containsValue_0(this, value_0);
}
;
_.keys_1 = function keys_2(){
    var keys_0;
    keys_0 = $keys_0(this);
    !(this.backingMap['__proto__'] === undefined) && (keys_0[keys_0.length] = '__proto__');
    return keys_0;
}
;
var Ljava_util_InternalJsStringMap$InternalJsStringMapWithKeysWorkaround_2_classLit = createForClass('java.util', 'InternalJsStringMap/InternalJsStringMapWithKeysWorkaround', 564, Ljava_util_InternalJsStringMap_2_classLit);
function $addNode_0(this$static, o, prev, next){
    var node;
    node = new LinkedList$Node;
    node.value_0 = o;
    node.prev = prev;
    node.next = next;
    next.prev = prev.next = node;
    ++this$static.size_0;
}

function $listIterator(this$static, index_0){
    var i_0, node;
    checkPositionIndex(index_0, this$static.size_0);
    if (index_0 >= this$static.size_0 >> 1) {
        node = this$static.tail;
        for (i_0 = this$static.size_0; i_0 > index_0; --i_0) {
            node = node.prev;
        }
    }
    else {
        node = this$static.header.next;
        for (i_0 = 0; i_0 < index_0; ++i_0) {
            node = node.next;
        }
    }
    return new LinkedList$ListIteratorImpl(this$static, index_0, node);
}

function $removeNode(this$static, node){
    var oldValue;
    oldValue = node.value_0;
    node.next.prev = node.prev;
    node.prev.next = node.next;
    node.next = node.prev = null;
    node.value_0 = null;
    --this$static.size_0;
    return oldValue;
}

function LinkedList(){
    this.header = new LinkedList$Node;
    this.tail = new LinkedList$Node;
    this.header.next = this.tail;
    this.tail.prev = this.header;
    this.header.prev = this.tail.next = null;
    this.size_0 = 0;
}

defineClass(705, 884, {3:1, 88:1}, LinkedList);
_.add_3 = function add_24(o){
    $addNode_0(this, o, this.tail.prev, this.tail);
    return true;
}
;
_.listIterator_0 = function listIterator_4(index_0){
    return $listIterator(this, index_0);
}
;
_.size_1 = function size_16(){
    return this.size_0;
}
;
_.size_0 = 0;
var Ljava_util_LinkedList_2_classLit = createForClass('java.util', 'LinkedList', 705, Ljava_util_AbstractSequentialList_2_classLit);
function $remove_11(this$static){
    var nextNode;
    checkState(!!this$static.lastNode);
    nextNode = this$static.lastNode.next;
    $removeNode(this$static.this$01, this$static.lastNode);
    this$static.currentNode == this$static.lastNode?(this$static.currentNode = nextNode):--this$static.currentIndex;
    this$static.lastNode = null;
}

function LinkedList$ListIteratorImpl(this$0, index_0, startNode){
    this.this$01 = this$0;
    this.currentNode = startNode;
    this.currentIndex = index_0;
}

defineClass(706, 1, {}, LinkedList$ListIteratorImpl);
_.hasNext = function hasNext_15(){
    return this.currentNode != this.this$01.tail;
}
;
_.hasPrevious = function hasPrevious_2(){
    return this.currentNode.prev != this.this$01.header;
}
;
_.next_2 = function next_46(){
    return checkCriticalElement(this.currentNode != this.this$01.tail) , this.lastNode = this.currentNode , this.currentNode = this.currentNode.next , ++this.currentIndex , this.lastNode.value_0;
}
;
_.previous = function previous_3(){
    checkCriticalElement(this.currentNode.prev != this.this$01.header);
    this.lastNode = this.currentNode = this.currentNode.prev;
    --this.currentIndex;
    return this.lastNode.value_0;
}
;
_.remove = function remove_34(){
    $remove_11(this);
}
;
_.currentIndex = 0;
_.lastNode = null;
var Ljava_util_LinkedList$ListIteratorImpl_2_classLit = createForClass('java.util', 'LinkedList/ListIteratorImpl', 706, Ljava_lang_Object_2_classLit);
function LinkedList$Node(){
}

defineClass(394, 1, {}, LinkedList$Node);
var Ljava_util_LinkedList$Node_2_classLit = createForClass('java.util', 'LinkedList/Node', 394, Ljava_lang_Object_2_classLit);
var Ljava_util_Map$Entry_2_classLit = createForInterface('java.util', 'Map/Entry');
function NoSuchElementException(){
    RuntimeException.call(this);
}

defineClass(180, 35, {3:1, 19:1, 35:1, 37:1, 180:1}, NoSuchElementException);
var Ljava_util_NoSuchElementException_2_classLit = createForClass('java.util', 'NoSuchElementException', 180, Ljava_lang_RuntimeException_2_classLit);
function equals_75(a, b){
    return maskUndefined(a) === maskUndefined(b) || a != null && equals_Ljava_lang_Object__Z__devirtual$(a, b);
}

function hashCode_83(o){
    return o != null?hashCode__I__devirtual$(o):0;
}

function $add_18(this$static, o){
    return $add_16(this$static.arrayList, o);
}

function $elementAt(this$static, index_0){
    return checkArrayElementIndex(index_0, this$static.arrayList.array.length) , $get_1(this$static.arrayList, index_0);
}

function $get_2(this$static, index_0){
    checkArrayElementIndex(index_0, this$static.arrayList.array.length);
    return $get_1(this$static.arrayList, index_0);
}

function $toArray_0(this$static, a){
    return $toArray(this$static.arrayList, a);
}

function checkArrayElementIndex(index_0, size_0){
    if (index_0 < 0 || index_0 >= size_0) {
        throw new ArrayIndexOutOfBoundsException;
    }
}

defineClass(664, 872, $intern_102);
_.add_4 = function add_25(index_0, o){
    checkArrayElementIndex(index_0, this.arrayList.array.length + 1);
    $add_15(this.arrayList, index_0, o);
}
;
_.add_3 = function add_26(o){
    return $add_18(this, o);
}
;
_.contains_1 = function contains_11(elem){
    return $indexOf_6(this.arrayList, elem, 0) != -1;
}
;
_.get_1 = function get_11(index_0){
    return $get_2(this, index_0);
}
;
_.isEmpty = function isEmpty_9(){
    return this.arrayList.array.length == 0;
}
;
_.iterator_1 = function iterator_16(){
    return new AbstractList$IteratorImpl(this.arrayList);
}
;
_.remove_3 = function remove_35(index_0){
    return checkArrayElementIndex(index_0, this.arrayList.array.length) , this.arrayList.remove_3(index_0);
}
;
_.set_1 = function set_6(index_0, elem){
    checkArrayElementIndex(index_0, this.arrayList.array.length);
    return $set_0(this.arrayList, index_0, elem);
}
;
_.size_1 = function size_17(){
    return this.arrayList.array.length;
}
;
_.toArray = function toArray_4(a){
    return $toArray_0(this, a);
}
;
_.toString$ = function toString_98(){
    return $toString_3(this.arrayList);
}
;
var Ljava_util_Vector_2_classLit = createForClass('java.util', 'Vector', 664, Ljava_util_AbstractList_2_classLit);
function $pop(this$static){
    var sz;
    sz = this$static.arrayList.array.length;
    if (sz > 0) {
        return checkArrayElementIndex(sz - 1, this$static.arrayList.array.length) , this$static.arrayList.remove_3(sz - 1);
    }
    else {
        throw new EmptyStackException;
    }
}

function $push(this$static, o){
    $add_16(this$static.arrayList, o);
    return o;
}

function Stack(){
    this.arrayList = new ArrayList;
}

defineClass(321, 664, $intern_102, Stack);
var Ljava_util_Stack_2_classLit = createForClass('java.util', 'Stack', 321, Ljava_util_Vector_2_classLit);
function $clinit_Level(){
    $clinit_Level = emptyMethod;
    ALL = new Level$LevelAll;
    CONFIG = new Level$LevelConfig;
    FINE = new Level$LevelFine;
    FINER = new Level$LevelFiner;
    FINEST = new Level$LevelFinest;
    INFO = new Level$LevelInfo;
    OFF = new Level$LevelOff;
    SEVERE = new Level$LevelSevere;
    WARNING = new Level$LevelWarning;
}

defineClass(868, 1, $intern_9);
_.getName = function getName_0(){
    return 'DUMMY';
}
;
_.intValue = function intValue_1(){
    return -1;
}
;
_.toString$ = function toString_99(){
    return this.getName();
}
;
var ALL, CONFIG, FINE, FINER, FINEST, INFO, OFF, SEVERE, WARNING;
var Ljava_util_logging_Level_2_classLit = createForClass('java.util.logging', 'Level', 868, Ljava_lang_Object_2_classLit);
function Level$LevelAll(){
}

defineClass(539, 868, $intern_9, Level$LevelAll);
_.getName = function getName_1(){
    return 'ALL';
}
;
_.intValue = function intValue_2(){
    return $intern_58;
}
;
var Ljava_util_logging_Level$LevelAll_2_classLit = createForClass('java.util.logging', 'Level/LevelAll', 539, Ljava_util_logging_Level_2_classLit);
function Level$LevelConfig(){
}

defineClass(540, 868, $intern_9, Level$LevelConfig);
_.getName = function getName_2(){
    return 'CONFIG';
}
;
_.intValue = function intValue_3(){
    return 700;
}
;
var Ljava_util_logging_Level$LevelConfig_2_classLit = createForClass('java.util.logging', 'Level/LevelConfig', 540, Ljava_util_logging_Level_2_classLit);
function Level$LevelFine(){
}

defineClass(541, 868, $intern_9, Level$LevelFine);
_.getName = function getName_3(){
    return 'FINE';
}
;
_.intValue = function intValue_4(){
    return 500;
}
;
var Ljava_util_logging_Level$LevelFine_2_classLit = createForClass('java.util.logging', 'Level/LevelFine', 541, Ljava_util_logging_Level_2_classLit);
function Level$LevelFiner(){
}

defineClass(542, 868, $intern_9, Level$LevelFiner);
_.getName = function getName_4(){
    return 'FINER';
}
;
_.intValue = function intValue_5(){
    return 400;
}
;
var Ljava_util_logging_Level$LevelFiner_2_classLit = createForClass('java.util.logging', 'Level/LevelFiner', 542, Ljava_util_logging_Level_2_classLit);
function Level$LevelFinest(){
}

defineClass(543, 868, $intern_9, Level$LevelFinest);
_.getName = function getName_5(){
    return 'FINEST';
}
;
_.intValue = function intValue_6(){
    return 300;
}
;
var Ljava_util_logging_Level$LevelFinest_2_classLit = createForClass('java.util.logging', 'Level/LevelFinest', 543, Ljava_util_logging_Level_2_classLit);
function Level$LevelInfo(){
}

defineClass(544, 868, $intern_9, Level$LevelInfo);
_.getName = function getName_6(){
    return 'INFO';
}
;
_.intValue = function intValue_7(){
    return 800;
}
;
var Ljava_util_logging_Level$LevelInfo_2_classLit = createForClass('java.util.logging', 'Level/LevelInfo', 544, Ljava_util_logging_Level_2_classLit);
function Level$LevelOff(){
}

defineClass(545, 868, $intern_9, Level$LevelOff);
_.getName = function getName_7(){
    return 'OFF';
}
;
_.intValue = function intValue_8(){
    return $intern_0;
}
;
var Ljava_util_logging_Level$LevelOff_2_classLit = createForClass('java.util.logging', 'Level/LevelOff', 545, Ljava_util_logging_Level_2_classLit);
function Level$LevelSevere(){
}

defineClass(546, 868, $intern_9, Level$LevelSevere);
_.getName = function getName_8(){
    return 'SEVERE';
}
;
_.intValue = function intValue_9(){
    return $intern_51;
}
;
var Ljava_util_logging_Level$LevelSevere_2_classLit = createForClass('java.util.logging', 'Level/LevelSevere', 546, Ljava_util_logging_Level_2_classLit);
function Level$LevelWarning(){
}

defineClass(547, 868, $intern_9, Level$LevelWarning);
_.getName = function getName_9(){
    return 'WARNING';
}
;
_.intValue = function intValue_10(){
    return 900;
}
;
var Ljava_util_logging_Level$LevelWarning_2_classLit = createForClass('java.util.logging', 'Level/LevelWarning', 547, Ljava_util_logging_Level_2_classLit);
function $addLoggerImpl(this$static, logger){
    $putStringValue(this$static.loggerMap, logger.impl.name_0, logger);
}

function $ensureLogger(this$static, name_0){
    var logger, newLogger, name_1, parentName;
    logger = dynamicCast($getStringValue_1(this$static.loggerMap, name_0), 314);
    if (!logger) {
        newLogger = new Logger(name_0);
        name_1 = newLogger.impl.name_0;
        parentName = $substring_1(name_1, 0, max_1(0, $lastIndexOf(name_1, fromCodePoint(46))));
        $setParent_1(newLogger, $ensureLogger(this$static, parentName));
        $putStringValue(this$static.loggerMap, newLogger.impl.name_0, newLogger);
        return newLogger;
    }
    return logger;
}

function LogManager(){
    this.loggerMap = new HashMap;
}

function getLogManager(){
    var rootLogger;
    if (!singleton_0) {
        singleton_0 = new LogManager;
        rootLogger = new Logger('');
        $setLevel_1(rootLogger, ($clinit_Level() , INFO));
        $addLoggerImpl(singleton_0, rootLogger);
    }
    return singleton_0;
}

defineClass(567, 1, {}, LogManager);
var singleton_0;
var Ljava_util_logging_LogManager_2_classLit = createForClass('java.util.logging', 'LogManager', 567, Ljava_lang_Object_2_classLit);
function $setLoggerName(this$static, newName){
    this$static.loggerName = newName;
}

function LogRecord(level, msg){
    this.level_0 = level;
    this.msg = msg;
    this.millis = ($clinit_System() , fromDouble(now_1()));
}

defineClass(590, 1, $intern_9, LogRecord);
_.loggerName = '';
_.millis = {l:0, m:0, h:0};
_.thrown = null;
var Ljava_util_logging_LogRecord_2_classLit = createForClass('java.util.logging', 'LogRecord', 590, Ljava_lang_Object_2_classLit);
function $addHandler_2(this$static, handler){
    $addHandler_1(this$static.impl, handler);
}

function $fine_0(this$static, msg){
    $fine(this$static.impl, msg);
}

function $finest_0(this$static, msg){
    $finest(this$static.impl, msg);
}

function $info_0(this$static, msg){
    $info(this$static.impl, msg);
}

function $log_1(this$static, level, msg){
    $log(this$static.impl, level, msg, null);
}

function $log_2(this$static, level, msg, thrown){
    $log(this$static.impl, level, msg, thrown);
}

function $setLevel_1(this$static, newLevel){
    $setLevel_0(this$static.impl, newLevel);
}

function $setParent_1(this$static, newParent){
    $setParent_0(this$static.impl, newParent);
}

function $severe_0(this$static, msg){
    $severe(this$static.impl, msg);
}

function $warning_0(this$static, msg){
    $warning(this$static.impl, msg);
}

function Logger(name_0){
    this.impl = new LoggerImplRegular;
    $setName_0(this.impl, name_0);
}

function getLogger(name_0){
    new LoggerImplRegular;
    return $ensureLogger(getLogManager(), name_0);
}

defineClass(314, 1, {314:1}, Logger);
var Ljava_util_logging_Logger_2_classLit = createForClass('java.util.logging', 'Logger', 314, Ljava_lang_Object_2_classLit);
function ExportAllExporterImpl(){
    new XSLT20ProcessorExporterImpl;
}

defineClass(526, 1, {}, ExportAllExporterImpl);
var Lorg_timepedia_exporter_client_ExportAllExporterImpl_2_classLit = createForClass('org.timepedia.exporter.client', 'ExportAllExporterImpl', 526, Ljava_lang_Object_2_classLit);
var Lorg_timepedia_exporter_client_Exportable_2_classLit = createForInterface('org.timepedia.exporter.client', 'Exportable');
defineClass(874, 1, {});
var Lorg_timepedia_exporter_client_ExporterBaseImpl_2_classLit = createForClass('org.timepedia.exporter.client', 'ExporterBaseImpl', 874, Ljava_lang_Object_2_classLit);
function $addTypeMap(this$static, type_0, exportedConstructor){
    $put_0(this$static.typeMap, type_0, exportedConstructor);
}

function $computeVarArguments(len, args){
    var ret = [];
    for (i = 0; i < len - 1; i++)
        ret.push(args[i]);
    var alen = args.length;
    var p_0 = len - 1;
    if (alen >= len && Object.prototype.toString.apply(args[p_0]) === '[object Array]') {
        ret.push(args[p_0]);
    }
    else {
        var a = [];
        for (i = p_0; i < alen; i++)
            a.push(args[i]);
        ret.push(a);
    }
    return ret;
}

function $declarePackage(qualifiedExportName){
    var i_0, l, o, prefix, superPackages;
    superPackages = $split(qualifiedExportName, '\\.', 0);
    prefix = $wnd;
    i_0 = 0;
    for (l = superPackages.length - 1; i_0 < l; i_0++) {
        if (!$equals_5(superPackages[i_0], 'client')) {
            prefix[superPackages[i_0]] || (prefix[superPackages[i_0]] = {});
            prefix = getProp(prefix, superPackages[i_0]);
        }
    }
    o = getProp(prefix, superPackages[i_0]);
    return o;
}

function $getMaxArity(jsoMap, meth){
    var o = jsoMap[meth];
    var r = 0;
    for (k in o)
        r = Math.max(r, k);
    return r;
}

function $registerDispatchMap(this$static, clazz, dispMap, isStatic){
    var jso, map_0;
    map_0 = isStatic?this$static.staticDispatchMap:this$static.dispatchMap;
    jso = dynamicCastJso(getEntryValueOrNull($getEntry(map_0.hashCodeMap, clazz)));
    !jso?(jso = dispMap):mergeJso(jso, dispMap);
    $put_1(map_0.hashCodeMap, clazz, jso);
}

function $runDispatch(this$static, instance, clazz, meth, arguments_0, isStatic, isVarArgs){
    var args, dmap, i_0, l, ret;
    dmap = isStatic?this$static.staticDispatchMap:this$static.dispatchMap;
    if (isVarArgs) {
        for (l = $getMaxArity(dynamicCastJso(getEntryValueOrNull($getEntry(dmap.hashCodeMap, clazz))), meth) , i_0 = l; i_0 >= 1; i_0--) {
            args = $computeVarArguments(i_0, arguments_0);
            ret = $runDispatch_0(instance, dmap, clazz, meth, args);
            if (!ret) {
                args = $unshift(instance, args);
                ret = $runDispatch_0(instance, dmap, clazz, meth, args);
            }
            if (ret) {
                return ret;
            }
        }
    }
    else {
        ret = $runDispatch_0(instance, dmap, clazz, meth, arguments_0);
        if (!ret) {
            arguments_0 = $unshift(instance, arguments_0);
            ret = $runDispatch_0(instance, dmap, clazz, meth, arguments_0);
        }
        if (ret) {
            return ret;
        }
    }
    throw new RuntimeException_0("Can't find exported method for given arguments: " + meth + ':' + arguments_0.length + '\n' + '');
}

function $runDispatch_0(instance, dmap, clazz, meth, arguments_0){
    var aFunc, i_0, jFunc, l, r, sig, sigs, wFunc, x_0;
    sigs = dynamicCastJso(getEntryValueOrNull($getEntry(dmap.hashCodeMap, clazz)))[meth][arguments_0.length];
    jFunc = null;
    wFunc = null;
    aFunc = null;
    for (i_0 = 0 , l = !sigs?0:sigs.length; i_0 < l; i_0++) {
        sig = sigs[i_0];
        if ($matches_2(sig, arguments_0)) {
            jFunc = sig[0];
            wFunc = sig[1];
            aFunc = sig[2];
            break;
        }
    }
    if (!jFunc) {
        return null;
    }
    else {
        arguments_0 = aFunc?aFunc(instance, arguments_0):arguments_0;
        r = (x_0 = jFunc.apply(instance, arguments_0) , [wFunc?wFunc(x_0):x_0]);
        return r;
    }
}

function $unshift(o, arr){
    var ret = [o];
    for (i = 0; i < arr.length; i++)
        ret.push(arr[i]);
    return ret;
}

function ExporterBaseActual(){
    this.typeMap = new HashMap;
    this.dispatchMap = new HashMap;
    this.staticDispatchMap = new HashMap;
}

function getGwtInstance(o){
    return o && o.g?o.g:null;
}

function getProp(jso, key){
    return jso != null?jso[key]:null;
}

function isAssignableToClass(o, clazz){
    var sup_0;
    if (Ljava_lang_Object_2_classLit == clazz) {
        return true;
    }
    if (Lorg_timepedia_exporter_client_Exportable_2_classLit == clazz && instanceOf(o, 894)) {
        return true;
    }
    if (o != null) {
        for (sup_0 = getClass__Ljava_lang_Class___devirtual$(o); !!sup_0 && sup_0 != Ljava_lang_Object_2_classLit; sup_0 = sup_0.superclass) {
            if (sup_0 == clazz) {
                return true;
            }
        }
    }
    return false;
}

function mergeJso(o1, o2){
    for (p in o2) {
        o1[p] = o2[p];
    }
}

function putObject(o, index_0, val){
    o[index_0] = val;
}

defineClass(569, 874, {}, ExporterBaseActual);
var Lorg_timepedia_exporter_client_ExporterBaseActual_2_classLit = createForClass('org.timepedia.exporter.client', 'ExporterBaseActual', 569, Lorg_timepedia_exporter_client_ExporterBaseImpl_2_classLit);
function $matches_2(this$static, arguments_0){
    var argJsType, gwt, i_0, isBoolean, isClass, isNumber, isPrimitive, jsType, l, o;
    for (i_0 = 0 , l = arguments_0.length; i_0 < l; i_0++) {
        jsType = this$static[i_0 + 3];
        argJsType = typeof_$(arguments_0, i_0);
        if ($equals_5(argJsType, jsType)) {
            continue;
        }
        if ($equals_5('string', jsType) && $equals_5('null', argJsType)) {
            continue;
        }
        isNumber = $equals_5('number', argJsType);
        isBoolean = $equals_5('boolean', argJsType);
        if (maskUndefined(Ljava_lang_Object_2_classLit) === maskUndefined(jsType)) {
            isNumber && putObject(arguments_0, i_0, new Double(arguments_0[i_0]));
            isBoolean && (arguments_0[i_0] = ($clinit_Boolean() , arguments_0[i_0]?TRUE_1:FALSE_1) , undefined);
            continue;
        }
        isPrimitive = isNumber || isBoolean;
        isClass = !isPrimitive && jsType != null && getClass__Ljava_lang_Class___devirtual$(jsType) == Ljava_lang_Class_2_classLit;
        if (isClass) {
            o = arguments_0[i_0];
            if (o == null || isAssignableToClass(o, dynamicCast(jsType, 277))) {
                continue;
            }
            if (instanceOfJso(o)) {
                gwt = getGwtInstance(dynamicCastJso(o));
                if (gwt != null) {
                    if (isAssignableToClass(gwt, dynamicCast(jsType, 277))) {
                        putObject(arguments_0, i_0, gwt);
                        continue;
                    }
                }
            }
        }
        if ($equals_5('object', jsType) && !isNumber && !isBoolean) {
            continue;
        }
        return false;
    }
    return true;
}

function typeof_$(args, i_0){
    var o = args[i_0];
    var t = o == null?'null':typeof o;
    if (t == 'object') {
        return Object.prototype.toString.call(o) == '[object Array]' || typeof o.length == 'number'?'array':t;
    }
    return t;
}

function $clinit_ExporterUtil(){
    $clinit_ExporterUtil = emptyMethod;
    impl_2 = new ExporterBaseActual;
}

function addTypeMap(type_0, exportedConstructor){
    $clinit_ExporterUtil();
    $addTypeMap(impl_2, type_0, exportedConstructor);
}

function isAssignableToInstance(clazz, args){
    var o;
    $clinit_ExporterUtil();
    return o = args && args[0] && (typeof args[0] == 'object' || typeof args[0] == 'function')?args[0]:null , isAssignableToClass(o, clazz);
}

function registerDispatchMap(clazz, dispMap, isStatic){
    $clinit_ExporterUtil();
    $registerDispatchMap(impl_2, clazz, dispMap, isStatic);
}

function runDispatch(instance, clazz, meth, arguments_0, isStatic, isVarArgs){
    $clinit_ExporterUtil();
    return $runDispatch(impl_2, instance, clazz, meth, arguments_0, isStatic, isVarArgs);
}

var impl_2;
var I_classLit = createForPrimitive('int', 'I'), Z_classLit = createForPrimitive('boolean', 'Z'), Lcom_google_gwt_lang_CollapsedPropertyHolder_2_classLit = createForClass('com.google.gwt.lang', 'CollapsedPropertyHolder', 854, Ljava_lang_Object_2_classLit), Lcom_google_gwt_lang_JavaClassHierarchySetupUtil_2_classLit = createForClass('com.google.gwt.lang', 'JavaClassHierarchySetupUtil', 856, Ljava_lang_Object_2_classLit), Lcom_google_gwt_lang_LongLibBase$LongEmul_2_classLit = createForClass('com.google.gwt.lang', 'LongLibBase/LongEmul', null, Ljava_lang_Object_2_classLit), Lcom_google_gwt_lang_ModuleUtils_2_classLit = createForClass('com.google.gwt.lang', 'ModuleUtils', 859, Ljava_lang_Object_2_classLit), B_classLit = createForPrimitive('byte', 'B'), D_classLit = createForPrimitive('double', 'D'), S_classLit = createForPrimitive('short', 'S'), C_classLit = createForPrimitive('char', 'C'), Lorg_timepedia_exporter_client_Exportable_2_classLit = createForInterface('org.timepedia.exporter.client', 'Exportable'), Ljava_util_Map$Entry_2_classLit = createForInterface('java.util', 'Map/Entry'), Lclient_net_sf_saxon_ce_om_Sequence_2_classLit = createForInterface('client.net.sf.saxon.ce.om', 'Sequence'), Lclient_net_sf_saxon_ce_om_Item_2_classLit = createForInterface('client.net.sf.saxon.ce.om', 'Item'), Lclient_net_sf_saxon_ce_expr_Binding_2_classLit = createForInterface('client.net.sf.saxon.ce.expr', 'Binding'), Lclient_net_sf_saxon_ce_expr_sort_AtomicComparer_2_classLit = createForInterface('client.net.sf.saxon.ce.expr.sort', 'AtomicComparer'), Lclient_net_sf_saxon_ce_om_NodeInfo_2_classLit = createForInterface('client.net.sf.saxon.ce.om', 'NodeInfo');
var $entry = registerEntry();
var gwtOnLoad = gwtOnLoad = gwtOnLoad_0;
addInitFunctions(init);
setGwtProperty('permProps', [[['locale', 'default'], ['user.agent', 'safari']]]);


register();
$export0();

var s = moduleRoot.Saxon;
console.dir(s);
console.log(s.getVersion());

var doc = s.parseXML('<?xml version="1.0" encoding="UTF-8"?><root></root>');
//console.dir(doc);
var pr = s.newXSLT20Processor(doc);
console.dir(pr);

s.run(/*cmd */ {});

module.exports = moduleRoot.Saxon;

